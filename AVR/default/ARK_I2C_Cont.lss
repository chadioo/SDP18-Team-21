
ARK_I2C_Cont.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001842  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001842  000018d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080007c  0080007c  000018f2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000018f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001b3  00000000  00000000  00001912  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005a0  00000000  00000000  00001ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000291  00000000  00000000  00002065  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000706  00000000  00000000  000022f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  000029fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000261  00000000  00000000  00002b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000178  00000000  00000000  00002dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002f25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__ctors_end>
       4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      10:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      14:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      18:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      1c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      24:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      28:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      34:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      3c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      40:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      44:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      4c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      50:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__divsf3_pse+0x24>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	7a 10       	cpse	r7, r10
      da:	f3 5a       	subi	r31, 0xA3	; 163
      dc:	00 a0       	ldd	r0, Z+32	; 0x20
      de:	72 4e       	sbci	r23, 0xE2	; 226
      e0:	18 09       	sbc	r17, r8
      e2:	00 10       	cpse	r0, r0
      e4:	a5 d4       	rcall	.+2378   	; 0xa30 <__fp_inf>
      e6:	e8 00       	.word	0x00e8	; ????
      e8:	00 e8       	ldi	r16, 0x80	; 128
      ea:	76 48       	sbci	r23, 0x86	; 134
      ec:	17 00       	.word	0x0017	; ????
      ee:	00 e4       	ldi	r16, 0x40	; 64
      f0:	0b 54       	subi	r16, 0x4B	; 75
      f2:	02 00       	.word	0x0002	; ????
      f4:	00 ca       	rjmp	.-3072   	; 0xfffff4f6 <__eeprom_end+0xff7ef4f6>
      f6:	9a 3b       	cpi	r25, 0xBA	; 186
      f8:	00 00       	nop
      fa:	00 e1       	ldi	r16, 0x10	; 16
      fc:	f5 05       	cpc	r31, r5
      fe:	00 00       	nop
     100:	80 96       	adiw	r24, 0x20	; 32
     102:	98 00       	.word	0x0098	; ????
     104:	00 00       	nop
     106:	40 42       	sbci	r20, 0x20	; 32
     108:	0f 00       	.word	0x000f	; ????
     10a:	00 00       	nop
     10c:	a0 86       	std	Z+8, r10	; 0x08
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	10 27       	eor	r17, r16
     114:	00 00       	nop
     116:	00 00       	nop
     118:	e8 03       	fmulsu	r22, r16
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	64 00       	.word	0x0064	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	0a 00       	.word	0x000a	; ????
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	01 00       	.word	0x0001	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	2c 76       	andi	r18, 0x6C	; 108
     132:	d8 88       	ldd	r13, Y+16	; 0x10
     134:	dc 67       	ori	r29, 0x7C	; 124
     136:	4f 08       	sbc	r4, r15
     138:	23 df       	rcall	.-442    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     13a:	c1 df       	rcall	.-126    	; 0xbe <__SREG__+0x7f>
     13c:	ae 59       	subi	r26, 0x9E	; 158
     13e:	e1 b1       	in	r30, 0x01	; 1
     140:	b7 96       	adiw	r30, 0x27	; 39
     142:	e5 e3       	ldi	r30, 0x35	; 53
     144:	e4 53       	subi	r30, 0x34	; 52
     146:	c6 3a       	cpi	r28, 0xA6	; 166
     148:	e6 51       	subi	r30, 0x16	; 22
     14a:	99 76       	andi	r25, 0x69	; 105
     14c:	96 e8       	ldi	r25, 0x86	; 134
     14e:	e6 c2       	rjmp	.+1484   	; 0x71c <main+0x1c2>
     150:	84 26       	eor	r8, r20
     152:	eb 89       	ldd	r30, Y+19	; 0x13
     154:	8c 9b       	sbis	0x11, 4	; 17
     156:	62 ed       	ldi	r22, 0xD2	; 210
     158:	40 7c       	andi	r20, 0xC0	; 192
     15a:	6f fc       	.word	0xfc6f	; ????
     15c:	ef bc       	out	0x2f, r14	; 47
     15e:	9c 9f       	mul	r25, r28
     160:	40 f2       	brcs	.-112    	; 0xf2 <__SREG__+0xb3>
     162:	ba a5       	ldd	r27, Y+42	; 0x2a
     164:	6f a5       	ldd	r22, Y+47	; 0x2f
     166:	f4 90       	lpm	r15, Z+
     168:	05 5a       	subi	r16, 0xA5	; 165
     16a:	2a f7       	brpl	.-54     	; 0x136 <__SREG__+0xf7>
     16c:	5c 93       	st	X, r21
     16e:	6b 6c       	ori	r22, 0xCB	; 203
     170:	f9 67       	ori	r31, 0x79	; 121
     172:	6d c1       	rjmp	.+730    	; 0x44e <Read_RawValue+0x62>
     174:	1b fc       	.word	0xfc1b	; ????
     176:	e0 e4       	ldi	r30, 0x40	; 64
     178:	0d 47       	sbci	r16, 0x7D	; 125
     17a:	fe f5       	brtc	.+126    	; 0x1fa <.do_clear_bss_loop>
     17c:	20 e6       	ldi	r18, 0x60	; 96
     17e:	b5 00       	.word	0x00b5	; ????
     180:	d0 ed       	ldi	r29, 0xD0	; 208
     182:	90 2e       	mov	r9, r16
     184:	03 00       	.word	0x0003	; ????
     186:	94 35       	cpi	r25, 0x54	; 84
     188:	77 05       	cpc	r23, r7
     18a:	00 80       	ld	r0, Z
     18c:	84 1e       	adc	r8, r20
     18e:	08 00       	.word	0x0008	; ????
     190:	00 20       	and	r0, r0
     192:	4e 0a       	sbc	r4, r30
     194:	00 00       	nop
     196:	00 c8       	rjmp	.-4096   	; 0xfffff198 <__eeprom_end+0xff7ef198>
     198:	0c 33       	cpi	r16, 0x3C	; 60
     19a:	33 33       	cpi	r19, 0x33	; 51
     19c:	33 0f       	add	r19, r19
     19e:	98 6e       	ori	r25, 0xE8	; 232
     1a0:	12 83       	std	Z+2, r17	; 0x02
     1a2:	11 41       	sbci	r17, 0x11	; 17
     1a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1a6:	21 14       	cp	r2, r1
     1a8:	89 3b       	cpi	r24, 0xB9	; 185
     1aa:	e6 55       	subi	r30, 0x56	; 86
     1ac:	16 cf       	rjmp	.-468    	; 0xffffffda <__eeprom_end+0xff7effda>
     1ae:	fe e6       	ldi	r31, 0x6E	; 110
     1b0:	db 18       	sub	r13, r11
     1b2:	d1 84       	ldd	r13, Z+9	; 0x09
     1b4:	4b 38       	cpi	r20, 0x8B	; 139
     1b6:	1b f7       	brvc	.-58     	; 0x17e <__SREG__+0x13f>
     1b8:	7c 1d       	adc	r23, r12
     1ba:	90 1d       	adc	r25, r0
     1bc:	a4 bb       	out	0x14, r26	; 20
     1be:	e4 24       	eor	r14, r4
     1c0:	20 32       	cpi	r18, 0x20	; 32
     1c2:	84 72       	andi	r24, 0x24	; 36
     1c4:	5e 22       	and	r5, r30
     1c6:	81 00       	.word	0x0081	; ????
     1c8:	c9 f1       	breq	.+114    	; 0x23c <read_adc+0x2e>
     1ca:	24 ec       	ldi	r18, 0xC4	; 196
     1cc:	a1 e5       	ldi	r26, 0x51	; 81
     1ce:	3d 27       	eor	r19, r29

000001d0 <__ctors_end>:
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf e5       	ldi	r28, 0x5F	; 95
     1d6:	d8 e0       	ldi	r29, 0x08	; 8
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
     1dc:	10 e0       	ldi	r17, 0x00	; 0
     1de:	a0 e6       	ldi	r26, 0x60	; 96
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	e2 e4       	ldi	r30, 0x42	; 66
     1e4:	f8 e1       	ldi	r31, 0x18	; 24
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <.do_copy_data_start>

000001e8 <.do_copy_data_loop>:
     1e8:	05 90       	lpm	r0, Z+
     1ea:	0d 92       	st	X+, r0

000001ec <.do_copy_data_start>:
     1ec:	ac 37       	cpi	r26, 0x7C	; 124
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <.do_copy_data_loop>

000001f2 <__do_clear_bss>:
     1f2:	10 e0       	ldi	r17, 0x00	; 0
     1f4:	ac e7       	ldi	r26, 0x7C	; 124
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	a8 39       	cpi	r26, 0x98	; 152
     1fe:	b1 07       	cpc	r27, r17
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	0e 94 ad 02 	call	0x55a	; 0x55a <main>
     206:	0c 94 bb 03 	jmp	0x776	; 0x776 <exit>

0000020a <__bad_interrupt>:
     20a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020e <read_adc>:
////////////////////////////////////////////////////////////////////////////


unsigned int read_adc(int axis){

	if(axis==1){		// z axis is PA0
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	91 05       	cpc	r25, r1
     212:	11 f4       	brne	.+4      	; 0x218 <read_adc+0xa>
		ADMUX = 0b10100000;
     214:	80 ea       	ldi	r24, 0xA0	; 160
     216:	0b c0       	rjmp	.+22     	; 0x22e <read_adc+0x20>
	}
	else if(axis==2){	// y axis is PA1
     218:	82 30       	cpi	r24, 0x02	; 2
     21a:	91 05       	cpc	r25, r1
     21c:	11 f4       	brne	.+4      	; 0x222 <read_adc+0x14>
		ADMUX = 0b10100001;
     21e:	81 ea       	ldi	r24, 0xA1	; 161
     220:	06 c0       	rjmp	.+12     	; 0x22e <read_adc+0x20>
	}
	else if(axis==3){	// x axis is PA2
     222:	03 97       	sbiw	r24, 0x03	; 3
     224:	19 f0       	breq	.+6      	; 0x22c <read_adc+0x1e>
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	0b c0       	rjmp	.+22     	; 0x242 <read_adc+0x34>
		ADMUX = 0b10100010;
     22c:	82 ea       	ldi	r24, 0xA2	; 162
     22e:	87 b9       	out	0x07, r24	; 7
	}
	else{
		return 0;
	}
	ADMUX = (1<<REFS0);	// set mux
     230:	80 e4       	ldi	r24, 0x40	; 64
     232:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS0);	// divided by prescale of 32
     234:	85 e8       	ldi	r24, 0x85	; 133
     236:	86 b9       	out	0x06, r24	; 6
	ADCSRA|= (1<<ADSC);	// clear ADSC by writing one to it
     238:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADSC)))	// wait for conversion to complete
     23a:	36 9b       	sbis	0x06, 6	; 6
     23c:	fe cf       	rjmp	.-4      	; 0x23a <read_adc+0x2c>
		;
	return(ADC);		// retuens 10 bit unsigned number
     23e:	24 b1       	in	r18, 0x04	; 4
     240:	35 b1       	in	r19, 0x05	; 5
}
     242:	c9 01       	movw	r24, r18
     244:	08 95       	ret

00000246 <I2C_Start>:
    TWBR = ((F_CPU/SCL_CLK)-16)/(2*pow(4,(TWSR&((1<<TWPS0)|(1<<TWPS1))))); // SCL frequency

}

uint8_t I2C_Start(char slave_write_address)						/* I2C start function */
{
     246:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     248:	84 ea       	ldi	r24, 0xA4	; 164
     24a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     24c:	06 b6       	in	r0, 0x36	; 54
     24e:	07 fe       	sbrs	r0, 7
     250:	fd cf       	rjmp	.-6      	; 0x24c <I2C_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     252:	81 b1       	in	r24, 0x01	; 1
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
     254:	88 7f       	andi	r24, 0xF8	; 248
     256:	88 30       	cpi	r24, 0x08	; 8
     258:	11 f0       	breq	.+4      	; 0x25e <I2C_Start+0x18>
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	08 95       	ret
	return 0;												/* If not then return 0 to indicate start condition fail */
	TWDR = slave_write_address<<1;								/* If yes then write SLA+W in TWI data register */
     25e:	99 0f       	add	r25, r25
     260:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     262:	84 e8       	ldi	r24, 0x84	; 132
     264:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     266:	06 b6       	in	r0, 0x36	; 54
     268:	07 fe       	sbrs	r0, 7
     26a:	fd cf       	rjmp	.-6      	; 0x266 <I2C_Start+0x20>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
     26c:	81 b1       	in	r24, 0x01	; 1
     26e:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
     270:	88 31       	cpi	r24, 0x18	; 24
     272:	11 f4       	brne	.+4      	; 0x278 <I2C_Start+0x32>
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
     278:	80 32       	cpi	r24, 0x20	; 32
     27a:	11 f0       	breq	.+4      	; 0x280 <I2C_Start+0x3a>
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	08 95       	ret
     280:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     282:	08 95       	ret

00000284 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
     284:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     286:	84 ea       	ldi	r24, 0xA4	; 164
     288:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     28a:	06 b6       	in	r0, 0x36	; 54
     28c:	07 fe       	sbrs	r0, 7
     28e:	fd cf       	rjmp	.-6      	; 0x28a <I2C_Repeated_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     290:	81 b1       	in	r24, 0x01	; 1
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     292:	88 7f       	andi	r24, 0xF8	; 248
     294:	80 31       	cpi	r24, 0x10	; 16
     296:	11 f0       	breq	.+4      	; 0x29c <I2C_Repeated_Start+0x18>
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     29c:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     29e:	84 e8       	ldi	r24, 0x84	; 132
     2a0:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     2a2:	06 b6       	in	r0, 0x36	; 54
     2a4:	07 fe       	sbrs	r0, 7
     2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <I2C_Repeated_Start+0x1e>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     2a8:	81 b1       	in	r24, 0x01	; 1
     2aa:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     2ac:	80 34       	cpi	r24, 0x40	; 64
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <I2C_Repeated_Start+0x30>
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     2b4:	80 32       	cpi	r24, 0x20	; 32
     2b6:	11 f0       	breq	.+4      	; 0x2bc <I2C_Repeated_Start+0x38>
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	08 95       	ret
     2bc:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     2be:	08 95       	ret

000002c0 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     2c0:	84 e9       	ldi	r24, 0x94	; 148
     2c2:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     2c4:	06 b6       	in	r0, 0x36	; 54
     2c6:	04 fc       	sbrc	r0, 4
     2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <I2C_Stop+0x4>
}
     2ca:	08 95       	ret

000002cc <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)			/* I2C start wait function */
{
     2cc:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     2ce:	44 ea       	ldi	r20, 0xA4	; 164
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     2d0:	34 e8       	ldi	r19, 0x84	; 132
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     2d2:	24 e9       	ldi	r18, 0x94	; 148
void I2C_Start_Wait(char slave_write_address)			/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     2d4:	46 bf       	out	0x36, r20	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     2d6:	06 b6       	in	r0, 0x36	; 54
     2d8:	07 fe       	sbrs	r0, 7
     2da:	fd cf       	rjmp	.-6      	; 0x2d6 <I2C_Start_Wait+0xa>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     2dc:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     2de:	88 7f       	andi	r24, 0xF8	; 248
     2e0:	88 30       	cpi	r24, 0x08	; 8
     2e2:	c1 f7       	brne	.-16     	; 0x2d4 <I2C_Start_Wait+0x8>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     2e4:	93 b9       	out	0x03, r25	; 3
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     2e6:	36 bf       	out	0x36, r19	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     2e8:	06 b6       	in	r0, 0x36	; 54
     2ea:	07 fe       	sbrs	r0, 7
     2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <I2C_Start_Wait+0x1c>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     2ee:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     2f0:	88 7f       	andi	r24, 0xF8	; 248
     2f2:	88 31       	cpi	r24, 0x18	; 24
     2f4:	29 f0       	breq	.+10     	; 0x300 <I2C_Start_Wait+0x34>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     2f6:	26 bf       	out	0x36, r18	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     2f8:	06 b6       	in	r0, 0x36	; 54
     2fa:	04 fc       	sbrc	r0, 4
     2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <I2C_Start_Wait+0x2c>
     2fe:	ea cf       	rjmp	.-44     	; 0x2d4 <I2C_Start_Wait+0x8>
     300:	08 95       	ret

00000302 <I2C_Write>:
}

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     302:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     304:	84 e8       	ldi	r24, 0x84	; 132
     306:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     308:	06 b6       	in	r0, 0x36	; 54
     30a:	07 fe       	sbrs	r0, 7
     30c:	fd cf       	rjmp	.-6      	; 0x308 <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     30e:	81 b1       	in	r24, 0x01	; 1
     310:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     312:	88 32       	cpi	r24, 0x28	; 40
     314:	11 f4       	brne	.+4      	; 0x31a <I2C_Write+0x18>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	08 95       	ret
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     31a:	80 33       	cpi	r24, 0x30	; 48
     31c:	11 f0       	breq	.+4      	; 0x322 <I2C_Write+0x20>
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	08 95       	ret
     322:	81 e0       	ldi	r24, 0x01	; 1
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     324:	08 95       	ret

00000326 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     326:	84 ec       	ldi	r24, 0xC4	; 196
     328:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     32a:	06 b6       	in	r0, 0x36	; 54
     32c:	07 fe       	sbrs	r0, 7
     32e:	fd cf       	rjmp	.-6      	; 0x32a <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
     330:	83 b1       	in	r24, 0x03	; 3
}	
     332:	08 95       	ret

00000334 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     334:	84 e8       	ldi	r24, 0x84	; 132
     336:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     338:	06 b6       	in	r0, 0x36	; 54
     33a:	07 fe       	sbrs	r0, 7
     33c:	fd cf       	rjmp	.-6      	; 0x338 <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
     33e:	83 b1       	in	r24, 0x03	; 3
}	
     340:	08 95       	ret

00000342 <MPU6050_Init>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     342:	8c e7       	ldi	r24, 0x7C	; 124
     344:	92 e9       	ldi	r25, 0x92	; 146
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <MPU6050_Init+0x4>

void MPU6050_Init()										/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
     34a:	80 ed       	ldi	r24, 0xD0	; 208
     34c:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
     350:	89 e1       	ldi	r24, 0x19	; 25
     352:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
     356:	87 e0       	ldi	r24, 0x07	; 7
     358:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     35c:	84 e9       	ldi	r24, 0x94	; 148
     35e:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     360:	06 b6       	in	r0, 0x36	; 54
     362:	04 fc       	sbrc	r0, 4
     364:	fd cf       	rjmp	.-6      	; 0x360 <MPU6050_Init+0x1e>
	I2C_Start_Wait(0xD0);								/* Start with device write address */
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
	I2C_Write(0x07);									/* 1KHz sample rate */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     366:	80 ed       	ldi	r24, 0xD0	; 208
     368:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
     36c:	8b e6       	ldi	r24, 0x6B	; 107
     36e:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     378:	84 e9       	ldi	r24, 0x94	; 148
     37a:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     37c:	06 b6       	in	r0, 0x36	; 54
     37e:	04 fc       	sbrc	r0, 4
     380:	fd cf       	rjmp	.-6      	; 0x37c <MPU6050_Init+0x3a>
	I2C_Start_Wait(0xD0);
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     382:	80 ed       	ldi	r24, 0xD0	; 208
     384:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
     388:	8a e1       	ldi	r24, 0x1A	; 26
     38a:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     394:	84 e9       	ldi	r24, 0x94	; 148
     396:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     398:	06 b6       	in	r0, 0x36	; 54
     39a:	04 fc       	sbrc	r0, 4
     39c:	fd cf       	rjmp	.-6      	; 0x398 <MPU6050_Init+0x56>
	I2C_Start_Wait(0xD0);
	I2C_Write(CONFIG);									/* Write to Configuration register */
	I2C_Write(0x00);									/* Fs = 8KHz */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     39e:	80 ed       	ldi	r24, 0xD0	; 208
     3a0:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
     3a4:	8b e1       	ldi	r24, 0x1B	; 27
     3a6:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
     3aa:	88 e1       	ldi	r24, 0x18	; 24
     3ac:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3b0:	84 e9       	ldi	r24, 0x94	; 148
     3b2:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3b4:	06 b6       	in	r0, 0x36	; 54
     3b6:	04 fc       	sbrc	r0, 4
     3b8:	fd cf       	rjmp	.-6      	; 0x3b4 <MPU6050_Init+0x72>
	I2C_Start_Wait(0xD0);
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     3ba:	80 ed       	ldi	r24, 0xD0	; 208
     3bc:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
     3c0:	88 e3       	ldi	r24, 0x38	; 56
     3c2:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x01);
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3cc:	84 e9       	ldi	r24, 0x94	; 148
     3ce:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3d0:	06 b6       	in	r0, 0x36	; 54
     3d2:	04 fc       	sbrc	r0, 4
     3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <MPU6050_Init+0x8e>

	I2C_Start_Wait(0xD0);
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
	I2C_Write(0x01);
	I2C_Stop();
}
     3d6:	08 95       	ret

000003d8 <MPU_Start_Loc>:

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
     3d8:	80 ed       	ldi	r24, 0xD0	; 208
     3da:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */ 
     3de:	8b e3       	ldi	r24, 0x3B	; 59
     3e0:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
     3e4:	81 ed       	ldi	r24, 0xD1	; 209
     3e6:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Repeated_Start>
}
     3ea:	08 95       	ret

000003ec <Read_RawValue>:

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
     3ec:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MPU_Start_Loc>
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     3f0:	84 ec       	ldi	r24, 0xC4	; 196
     3f2:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     3f4:	06 b6       	in	r0, 0x36	; 54
     3f6:	07 fe       	sbrs	r0, 7
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <Read_RawValue+0x8>
	return TWDR;											/* Return received data */
     3fa:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     3fc:	84 ec       	ldi	r24, 0xC4	; 196
     3fe:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     400:	06 b6       	in	r0, 0x36	; 54
     402:	07 fe       	sbrs	r0, 7
     404:	fd cf       	rjmp	.-6      	; 0x400 <Read_RawValue+0x14>
	return TWDR;											/* Return received data */
     406:	23 b1       	in	r18, 0x03	; 3
}

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     408:	79 2f       	mov	r23, r25
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	62 2b       	or	r22, r18
     410:	73 2b       	or	r23, r19
     412:	88 27       	eor	r24, r24
     414:	77 fd       	sbrc	r23, 7
     416:	80 95       	com	r24
     418:	98 2f       	mov	r25, r24
     41a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__floatsisf>
     41e:	60 93 90 00 	sts	0x0090, r22
     422:	70 93 91 00 	sts	0x0091, r23
     426:	80 93 92 00 	sts	0x0092, r24
     42a:	90 93 93 00 	sts	0x0093, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     42e:	84 ec       	ldi	r24, 0xC4	; 196
     430:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     432:	06 b6       	in	r0, 0x36	; 54
     434:	07 fe       	sbrs	r0, 7
     436:	fd cf       	rjmp	.-6      	; 0x432 <Read_RawValue+0x46>
	return TWDR;											/* Return received data */
     438:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     43a:	84 ec       	ldi	r24, 0xC4	; 196
     43c:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     43e:	06 b6       	in	r0, 0x36	; 54
     440:	07 fe       	sbrs	r0, 7
     442:	fd cf       	rjmp	.-6      	; 0x43e <Read_RawValue+0x52>
	return TWDR;											/* Return received data */
     444:	23 b1       	in	r18, 0x03	; 3

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     446:	79 2f       	mov	r23, r25
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	62 2b       	or	r22, r18
     44e:	73 2b       	or	r23, r19
     450:	88 27       	eor	r24, r24
     452:	77 fd       	sbrc	r23, 7
     454:	80 95       	com	r24
     456:	98 2f       	mov	r25, r24
     458:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__floatsisf>
     45c:	60 93 88 00 	sts	0x0088, r22
     460:	70 93 89 00 	sts	0x0089, r23
     464:	80 93 8a 00 	sts	0x008A, r24
     468:	90 93 8b 00 	sts	0x008B, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     46c:	84 ec       	ldi	r24, 0xC4	; 196
     46e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     470:	06 b6       	in	r0, 0x36	; 54
     472:	07 fe       	sbrs	r0, 7
     474:	fd cf       	rjmp	.-6      	; 0x470 <Read_RawValue+0x84>
	return TWDR;											/* Return received data */
     476:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     478:	84 ec       	ldi	r24, 0xC4	; 196
     47a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     47c:	06 b6       	in	r0, 0x36	; 54
     47e:	07 fe       	sbrs	r0, 7
     480:	fd cf       	rjmp	.-6      	; 0x47c <Read_RawValue+0x90>
	return TWDR;											/* Return received data */
     482:	23 b1       	in	r18, 0x03	; 3
void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     484:	79 2f       	mov	r23, r25
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	62 2b       	or	r22, r18
     48c:	73 2b       	or	r23, r19
     48e:	88 27       	eor	r24, r24
     490:	77 fd       	sbrc	r23, 7
     492:	80 95       	com	r24
     494:	98 2f       	mov	r25, r24
     496:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__floatsisf>
     49a:	60 93 7c 00 	sts	0x007C, r22
     49e:	70 93 7d 00 	sts	0x007D, r23
     4a2:	80 93 7e 00 	sts	0x007E, r24
     4a6:	90 93 7f 00 	sts	0x007F, r25
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     4aa:	84 e9       	ldi	r24, 0x94	; 148
     4ac:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     4ae:	06 b6       	in	r0, 0x36	; 54
     4b0:	04 fc       	sbrc	r0, 4
     4b2:	fd cf       	rjmp	.-6      	; 0x4ae <Read_RawValue+0xc2>
	//Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	//Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	//Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	//Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
	I2C_Stop();
}
     4b4:	08 95       	ret

000004b6 <USART_Receive>:

// Data from Bluetooth TX given to USART RX
unsigned char USART_Receive( void ){

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) ) {  }
     4b6:	5f 9b       	sbis	0x0b, 7	; 11
     4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
     4ba:	8c b1       	in	r24, 0x0c	; 12
}
     4bc:	08 95       	ret

000004be <USART_Transmit>:

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
     4be:	5d 9b       	sbis	0x0b, 5	; 11
     4c0:	fe cf       	rjmp	.-4      	; 0x4be <USART_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
     4c2:	8c b9       	out	0x0c, r24	; 12
}
     4c4:	08 95       	ret

000004c6 <USART_SendString>:

/* Send string of USART data function */ 
void USART_SendString(char *str){
     4c6:	fc 01       	movw	r30, r24
     4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <USART_SendString+0xc>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
     4ca:	5d 9b       	sbis	0x0b, 5	; 11
     4cc:	fe cf       	rjmp	.-4      	; 0x4ca <USART_SendString+0x4>

	/* Put data into buffer, sends the data */
	UDR = data;
     4ce:	8c b9       	out	0x0c, r24	; 12
     4d0:	31 96       	adiw	r30, 0x01	; 1
/* Send string of USART data function */ 
void USART_SendString(char *str){

	int i=0;			
	/* Send each char of string till the NULL */														
	while (str[i]!=0){
     4d2:	80 81       	ld	r24, Z
     4d4:	88 23       	and	r24, r24
     4d6:	c9 f7       	brne	.-14     	; 0x4ca <USART_SendString+0x4>
		USART_Transmit( str[i] );
		i++;
	}
}
     4d8:	08 95       	ret

000004da <USART_Flush>:

// Flush USART
void USART_Flush( void ){
     4da:	01 c0       	rjmp	.+2      	; 0x4de <USART_Flush+0x4>

	unsigned char dummy;
	while ( UCSRA & (1<<RXC) ) dummy = UDR;
     4dc:	8c b1       	in	r24, 0x0c	; 12
     4de:	5f 99       	sbic	0x0b, 7	; 11
     4e0:	fd cf       	rjmp	.-6      	; 0x4dc <USART_Flush+0x2>
}
     4e2:	08 95       	ret

000004e4 <USART_Init>:

// Initialize USART
void USART_Init( unsigned int baud ){
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
     4e4:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
     4e6:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X);
     4e8:	59 9a       	sbi	0x0b, 1	; 11

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
     4ea:	88 e1       	ldi	r24, 0x18	; 24
     4ec:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     4ee:	8e e8       	ldi	r24, 0x8E	; 142
     4f0:	80 bd       	out	0x20, r24	; 32
}
     4f2:	08 95       	ret

000004f4 <Bluetooth_Init>:

// Initialize Bluetooth connection through USART
void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
     4f4:	8c e0       	ldi	r24, 0x0C	; 12
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <USART_Init>
	while (*cmd != '\0'){
		USART_Transmit( *cmd );
		++cmd;
	}
	*/
}
     4fc:	08 95       	ret

000004fe <USART_Start_Timer>:

void USART_Start_Timer(){

	TCCR1B |= (1 << CS11);	// Timer1 prescaler = 8
     4fe:	8e b5       	in	r24, 0x2e	; 46
     500:	82 60       	ori	r24, 0x02	; 2
     502:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;				// Clear the timer counter
     504:	1d bc       	out	0x2d, r1	; 45
     506:	1c bc       	out	0x2c, r1	; 44
	TIMSK = (1 << TOIE1);	// Enable timer1 overflow interrupt(TOIE1)
     508:	84 e0       	ldi	r24, 0x04	; 4
     50a:	89 bf       	out	0x39, r24	; 57
	sei();					// Enable global interrupts
     50c:	78 94       	sei
}
     50e:	08 95       	ret

00000510 <init_clock>:


void init_clock(){

	/* Initialize clock settings */
	TWSR = 0x00; // set presca1er bits to 1 (0x00=1, 0x01=4, 0x02=16, 0x03=64)
     510:	11 b8       	out	0x01, r1	; 1
    TWBR = ((F_CPU/SCL_CLK)-16)/(2*pow(4,(TWSR&((1<<TWPS0)|(1<<TWPS1))))); // SCL frequency
     512:	61 b1       	in	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	63 70       	andi	r22, 0x03	; 3
     518:	70 70       	andi	r23, 0x00	; 0
     51a:	88 27       	eor	r24, r24
     51c:	77 fd       	sbrc	r23, 7
     51e:	80 95       	com	r24
     520:	98 2f       	mov	r25, r24
     522:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__floatsisf>
     526:	9b 01       	movw	r18, r22
     528:	ac 01       	movw	r20, r24
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	80 e8       	ldi	r24, 0x80	; 128
     530:	90 e4       	ldi	r25, 0x40	; 64
     532:	0e 94 cc 05 	call	0xb98	; 0xb98 <pow>
     536:	9b 01       	movw	r18, r22
     538:	ac 01       	movw	r20, r24
     53a:	ca 01       	movw	r24, r20
     53c:	b9 01       	movw	r22, r18
     53e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__addsf3>
     542:	9b 01       	movw	r18, r22
     544:	ac 01       	movw	r20, r24
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	80 e8       	ldi	r24, 0x80	; 128
     54c:	9f e4       	ldi	r25, 0x4F	; 79
     54e:	0e 94 47 04 	call	0x88e	; 0x88e <__divsf3>
     552:	0e 94 af 04 	call	0x95e	; 0x95e <__fixunssfsi>
     556:	60 b9       	out	0x00, r22	; 0

}
     558:	08 95       	ret

0000055a <main>:
// 																		  //
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


int main(void) {
     55a:	2f 92       	push	r2
     55c:	3f 92       	push	r3
     55e:	4f 92       	push	r4
     560:	5f 92       	push	r5
     562:	6f 92       	push	r6
     564:	7f 92       	push	r7
     566:	8f 92       	push	r8
     568:	9f 92       	push	r9
     56a:	af 92       	push	r10
     56c:	bf 92       	push	r11
     56e:	cf 92       	push	r12
     570:	df 92       	push	r13
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	df 93       	push	r29
     57c:	cf 93       	push	r28
     57e:	cd b7       	in	r28, 0x3d	; 61
     580:	de b7       	in	r29, 0x3e	; 62
     582:	6e 97       	sbiw	r28, 0x1e	; 30
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	f8 94       	cli
     588:	de bf       	out	0x3e, r29	; 62
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	cd bf       	out	0x3d, r28	; 61
	float Xa,Ya,Za;
	//float Xg=0,Yg=0,Zg=0;
//	tot_overflow = 0;

	// initialize bluetooth, USART, mpu6050
	Bluetooth_Init();
     58e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Bluetooth_Init>
	init_clock();
     592:	0e 94 88 02 	call	0x510	; 0x510 <init_clock>
	MPU6050_Init();
     596:	0e 94 a1 01 	call	0x342	; 0x342 <MPU6050_Init>
	char DATA_IN;
	
	//start timer
//	timer0_init();
	
	sprintf(buffer,"\nAx\tAy\tAz\n",float_);
     59a:	00 d0       	rcall	.+0      	; 0x59c <main+0x42>
     59c:	00 d0       	rcall	.+0      	; 0x59e <main+0x44>
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <main+0x46>
     5a0:	ed b7       	in	r30, 0x3d	; 61
     5a2:	fe b7       	in	r31, 0x3e	; 62
     5a4:	31 96       	adiw	r30, 0x01	; 1
     5a6:	9b e0       	ldi	r25, 0x0B	; 11
     5a8:	e9 2e       	mov	r14, r25
     5aa:	f1 2c       	mov	r15, r1
     5ac:	ec 0e       	add	r14, r28
     5ae:	fd 1e       	adc	r15, r29
     5b0:	ad b7       	in	r26, 0x3d	; 61
     5b2:	be b7       	in	r27, 0x3e	; 62
     5b4:	12 96       	adiw	r26, 0x02	; 2
     5b6:	fc 92       	st	X, r15
     5b8:	ee 92       	st	-X, r14
     5ba:	11 97       	sbiw	r26, 0x01	; 1
     5bc:	80 e6       	ldi	r24, 0x60	; 96
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	93 83       	std	Z+3, r25	; 0x03
     5c2:	82 83       	std	Z+2, r24	; 0x02
     5c4:	8e 01       	movw	r16, r28
     5c6:	0f 5f       	subi	r16, 0xFF	; 255
     5c8:	1f 4f       	sbci	r17, 0xFF	; 255
     5ca:	15 83       	std	Z+5, r17	; 0x05
     5cc:	04 83       	std	Z+4, r16	; 0x04
     5ce:	0e 94 be 03 	call	0x77c	; 0x77c <sprintf>
	//sprintf(buffer,"\nAx\tAy\tAz\tGx\tGy\tGz\n",float_);
	USART_SendString(buffer);
     5d2:	8d b7       	in	r24, 0x3d	; 61
     5d4:	9e b7       	in	r25, 0x3e	; 62
     5d6:	06 96       	adiw	r24, 0x06	; 6
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	9e bf       	out	0x3e, r25	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	8d bf       	out	0x3d, r24	; 61
     5e2:	c7 01       	movw	r24, r14
     5e4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_SendString>
		//if(DATA_IN == '1') {	// print all continuously
				
//				sprintf(buffer," TIME %i ",tot_overflow);
//				USART_SendString(buffer);				

				dtostrf( Xa, 3, 2, float_ );				
     5e8:	28 01       	movw	r4, r16
				sprintf(buffer,"%s, ",float_);
     5ea:	37 01       	movw	r6, r14
				dtostrf( Ya, 3, 2, float_ );
				sprintf(buffer," %s, ",float_);
				USART_SendString(buffer);

				dtostrf( Za, 3, 2, float_ );
				sprintf(buffer," %s\n",float_);
     5ec:	86 e7       	ldi	r24, 0x76	; 118
     5ee:	28 2e       	mov	r2, r24
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	38 2e       	mov	r3, r24

	while(1){

		//DATA_IN = USART_Receive(); // check input
	
		Read_RawValue();
     5f4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Read_RawValue>

		Xa = Acc_x/16384.0;								
		Ya = Acc_y/16384.0;
     5f8:	60 91 88 00 	lds	r22, 0x0088
     5fc:	70 91 89 00 	lds	r23, 0x0089
     600:	80 91 8a 00 	lds	r24, 0x008A
     604:	90 91 8b 00 	lds	r25, 0x008B
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e8       	ldi	r20, 0x80	; 128
     60e:	58 e3       	ldi	r21, 0x38	; 56
     610:	0e 94 69 05 	call	0xad2	; 0xad2 <__mulsf3>
     614:	6b 01       	movw	r12, r22
     616:	7c 01       	movw	r14, r24
		Za = Acc_z/16384.0;
     618:	60 91 7c 00 	lds	r22, 0x007C
     61c:	70 91 7d 00 	lds	r23, 0x007D
     620:	80 91 7e 00 	lds	r24, 0x007E
     624:	90 91 7f 00 	lds	r25, 0x007F
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	40 e8       	ldi	r20, 0x80	; 128
     62e:	58 e3       	ldi	r21, 0x38	; 56
     630:	0e 94 69 05 	call	0xad2	; 0xad2 <__mulsf3>
     634:	4b 01       	movw	r8, r22
     636:	5c 01       	movw	r10, r24
		//if(DATA_IN == '1') {	// print all continuously
				
//				sprintf(buffer," TIME %i ",tot_overflow);
//				USART_SendString(buffer);				

				dtostrf( Xa, 3, 2, float_ );				
     638:	60 91 90 00 	lds	r22, 0x0090
     63c:	70 91 91 00 	lds	r23, 0x0091
     640:	80 91 92 00 	lds	r24, 0x0092
     644:	90 91 93 00 	lds	r25, 0x0093
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	40 e8       	ldi	r20, 0x80	; 128
     64e:	58 e3       	ldi	r21, 0x38	; 56
     650:	0e 94 69 05 	call	0xad2	; 0xad2 <__mulsf3>
     654:	43 e0       	ldi	r20, 0x03	; 3
     656:	22 e0       	ldi	r18, 0x02	; 2
     658:	82 01       	movw	r16, r4
     65a:	0e 94 9a 03 	call	0x734	; 0x734 <dtostrf>
				sprintf(buffer,"%s, ",float_);
     65e:	00 d0       	rcall	.+0      	; 0x660 <main+0x106>
     660:	00 d0       	rcall	.+0      	; 0x662 <main+0x108>
     662:	00 d0       	rcall	.+0      	; 0x664 <main+0x10a>
     664:	ed b7       	in	r30, 0x3d	; 61
     666:	fe b7       	in	r31, 0x3e	; 62
     668:	31 96       	adiw	r30, 0x01	; 1
     66a:	ad b7       	in	r26, 0x3d	; 61
     66c:	be b7       	in	r27, 0x3e	; 62
     66e:	11 96       	adiw	r26, 0x01	; 1
     670:	6c 92       	st	X, r6
     672:	11 97       	sbiw	r26, 0x01	; 1
     674:	12 96       	adiw	r26, 0x02	; 2
     676:	7c 92       	st	X, r7
     678:	8b e6       	ldi	r24, 0x6B	; 107
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	93 83       	std	Z+3, r25	; 0x03
     67e:	82 83       	std	Z+2, r24	; 0x02
     680:	44 82       	std	Z+4, r4	; 0x04
     682:	55 82       	std	Z+5, r5	; 0x05
     684:	0e 94 be 03 	call	0x77c	; 0x77c <sprintf>
				USART_SendString(buffer);
     688:	ad b7       	in	r26, 0x3d	; 61
     68a:	be b7       	in	r27, 0x3e	; 62
     68c:	16 96       	adiw	r26, 0x06	; 6
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	be bf       	out	0x3e, r27	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	ad bf       	out	0x3d, r26	; 61
     698:	c3 01       	movw	r24, r6
     69a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_SendString>

				dtostrf( Ya, 3, 2, float_ );
     69e:	b6 01       	movw	r22, r12
     6a0:	c7 01       	movw	r24, r14
     6a2:	43 e0       	ldi	r20, 0x03	; 3
     6a4:	22 e0       	ldi	r18, 0x02	; 2
     6a6:	0e 94 9a 03 	call	0x734	; 0x734 <dtostrf>
				sprintf(buffer," %s, ",float_);
     6aa:	00 d0       	rcall	.+0      	; 0x6ac <main+0x152>
     6ac:	00 d0       	rcall	.+0      	; 0x6ae <main+0x154>
     6ae:	00 d0       	rcall	.+0      	; 0x6b0 <main+0x156>
     6b0:	ed b7       	in	r30, 0x3d	; 61
     6b2:	fe b7       	in	r31, 0x3e	; 62
     6b4:	31 96       	adiw	r30, 0x01	; 1
     6b6:	ad b7       	in	r26, 0x3d	; 61
     6b8:	be b7       	in	r27, 0x3e	; 62
     6ba:	11 96       	adiw	r26, 0x01	; 1
     6bc:	6c 92       	st	X, r6
     6be:	11 97       	sbiw	r26, 0x01	; 1
     6c0:	12 96       	adiw	r26, 0x02	; 2
     6c2:	7c 92       	st	X, r7
     6c4:	80 e7       	ldi	r24, 0x70	; 112
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	93 83       	std	Z+3, r25	; 0x03
     6ca:	82 83       	std	Z+2, r24	; 0x02
     6cc:	44 82       	std	Z+4, r4	; 0x04
     6ce:	55 82       	std	Z+5, r5	; 0x05
     6d0:	0e 94 be 03 	call	0x77c	; 0x77c <sprintf>
				USART_SendString(buffer);
     6d4:	ad b7       	in	r26, 0x3d	; 61
     6d6:	be b7       	in	r27, 0x3e	; 62
     6d8:	16 96       	adiw	r26, 0x06	; 6
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	be bf       	out	0x3e, r27	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	ad bf       	out	0x3d, r26	; 61
     6e4:	c3 01       	movw	r24, r6
     6e6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_SendString>

				dtostrf( Za, 3, 2, float_ );
     6ea:	b4 01       	movw	r22, r8
     6ec:	c5 01       	movw	r24, r10
     6ee:	43 e0       	ldi	r20, 0x03	; 3
     6f0:	22 e0       	ldi	r18, 0x02	; 2
     6f2:	0e 94 9a 03 	call	0x734	; 0x734 <dtostrf>
				sprintf(buffer," %s\n",float_);
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <main+0x19e>
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <main+0x1a0>
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <main+0x1a2>
     6fc:	ed b7       	in	r30, 0x3d	; 61
     6fe:	fe b7       	in	r31, 0x3e	; 62
     700:	31 96       	adiw	r30, 0x01	; 1
     702:	ad b7       	in	r26, 0x3d	; 61
     704:	be b7       	in	r27, 0x3e	; 62
     706:	11 96       	adiw	r26, 0x01	; 1
     708:	6c 92       	st	X, r6
     70a:	11 97       	sbiw	r26, 0x01	; 1
     70c:	12 96       	adiw	r26, 0x02	; 2
     70e:	7c 92       	st	X, r7
     710:	33 82       	std	Z+3, r3	; 0x03
     712:	22 82       	std	Z+2, r2	; 0x02
     714:	44 82       	std	Z+4, r4	; 0x04
     716:	55 82       	std	Z+5, r5	; 0x05
     718:	0e 94 be 03 	call	0x77c	; 0x77c <sprintf>
				USART_SendString(buffer);
     71c:	8d b7       	in	r24, 0x3d	; 61
     71e:	9e b7       	in	r25, 0x3e	; 62
     720:	06 96       	adiw	r24, 0x06	; 6
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	9e bf       	out	0x3e, r25	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	8d bf       	out	0x3d, r24	; 61
     72c:	c3 01       	movw	r24, r6
     72e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <USART_SendString>
     732:	60 cf       	rjmp	.-320    	; 0x5f4 <main+0x9a>

00000734 <dtostrf>:
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	0f 93       	push	r16
     73a:	1f 93       	push	r17
     73c:	f2 2f       	mov	r31, r18
     73e:	f0 2e       	mov	r15, r16
     740:	47 fd       	sbrc	r20, 7
     742:	02 c0       	rjmp	.+4      	; 0x748 <dtostrf+0x14>
     744:	e4 e0       	ldi	r30, 0x04	; 4
     746:	01 c0       	rjmp	.+2      	; 0x74a <dtostrf+0x16>
     748:	e4 e1       	ldi	r30, 0x14	; 20
     74a:	24 2f       	mov	r18, r20
     74c:	33 27       	eor	r19, r19
     74e:	27 fd       	sbrc	r18, 7
     750:	30 95       	com	r19
     752:	37 ff       	sbrs	r19, 7
     754:	03 c0       	rjmp	.+6      	; 0x75c <dtostrf+0x28>
     756:	30 95       	com	r19
     758:	21 95       	neg	r18
     75a:	3f 4f       	sbci	r19, 0xFF	; 255
     75c:	4f 2d       	mov	r20, r15
     75e:	51 2f       	mov	r21, r17
     760:	0f 2f       	mov	r16, r31
     762:	ee 2e       	mov	r14, r30
     764:	0e 94 f5 07 	call	0xfea	; 0xfea <dtoa_prf>
     768:	8f 2d       	mov	r24, r15
     76a:	91 2f       	mov	r25, r17
     76c:	1f 91       	pop	r17
     76e:	0f 91       	pop	r16
     770:	ff 90       	pop	r15
     772:	ef 90       	pop	r14
     774:	08 95       	ret

00000776 <exit>:
     776:	f8 94       	cli
     778:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <_exit>

0000077c <sprintf>:
     77c:	ae e0       	ldi	r26, 0x0E	; 14
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	e4 ec       	ldi	r30, 0xC4	; 196
     782:	f3 e0       	ldi	r31, 0x03	; 3
     784:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__prologue_saves__+0x1c>
     788:	0d 89       	ldd	r16, Y+21	; 0x15
     78a:	1e 89       	ldd	r17, Y+22	; 0x16
     78c:	86 e0       	ldi	r24, 0x06	; 6
     78e:	8c 83       	std	Y+4, r24	; 0x04
     790:	1a 83       	std	Y+2, r17	; 0x02
     792:	09 83       	std	Y+1, r16	; 0x01
     794:	8f ef       	ldi	r24, 0xFF	; 255
     796:	9f e7       	ldi	r25, 0x7F	; 127
     798:	9e 83       	std	Y+6, r25	; 0x06
     79a:	8d 83       	std	Y+5, r24	; 0x05
     79c:	9e 01       	movw	r18, r28
     79e:	27 5e       	subi	r18, 0xE7	; 231
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
     7a2:	ce 01       	movw	r24, r28
     7a4:	01 96       	adiw	r24, 0x01	; 1
     7a6:	6f 89       	ldd	r22, Y+23	; 0x17
     7a8:	78 8d       	ldd	r23, Y+24	; 0x18
     7aa:	a9 01       	movw	r20, r18
     7ac:	0e 94 18 06 	call	0xc30	; 0xc30 <vfprintf>
     7b0:	2f 81       	ldd	r18, Y+7	; 0x07
     7b2:	38 85       	ldd	r19, Y+8	; 0x08
     7b4:	02 0f       	add	r16, r18
     7b6:	13 1f       	adc	r17, r19
     7b8:	f8 01       	movw	r30, r16
     7ba:	10 82       	st	Z, r1
     7bc:	2e 96       	adiw	r28, 0x0e	; 14
     7be:	e4 e0       	ldi	r30, 0x04	; 4
     7c0:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__epilogue_restores__+0x1c>

000007c4 <__subsf3>:
     7c4:	50 58       	subi	r21, 0x80	; 128

000007c6 <__addsf3>:
     7c6:	bb 27       	eor	r27, r27
     7c8:	aa 27       	eor	r26, r26
     7ca:	0e d0       	rcall	.+28     	; 0x7e8 <__addsf3x>
     7cc:	48 c1       	rjmp	.+656    	; 0xa5e <__fp_round>
     7ce:	39 d1       	rcall	.+626    	; 0xa42 <__fp_pscA>
     7d0:	30 f0       	brcs	.+12     	; 0x7de <__addsf3+0x18>
     7d2:	3e d1       	rcall	.+636    	; 0xa50 <__fp_pscB>
     7d4:	20 f0       	brcs	.+8      	; 0x7de <__addsf3+0x18>
     7d6:	31 f4       	brne	.+12     	; 0x7e4 <__addsf3+0x1e>
     7d8:	9f 3f       	cpi	r25, 0xFF	; 255
     7da:	11 f4       	brne	.+4      	; 0x7e0 <__addsf3+0x1a>
     7dc:	1e f4       	brtc	.+6      	; 0x7e4 <__addsf3+0x1e>
     7de:	2e c1       	rjmp	.+604    	; 0xa3c <__fp_nan>
     7e0:	0e f4       	brtc	.+2      	; 0x7e4 <__addsf3+0x1e>
     7e2:	e0 95       	com	r30
     7e4:	e7 fb       	bst	r30, 7
     7e6:	24 c1       	rjmp	.+584    	; 0xa30 <__fp_inf>

000007e8 <__addsf3x>:
     7e8:	e9 2f       	mov	r30, r25
     7ea:	4a d1       	rcall	.+660    	; 0xa80 <__fp_split3>
     7ec:	80 f3       	brcs	.-32     	; 0x7ce <__addsf3+0x8>
     7ee:	ba 17       	cp	r27, r26
     7f0:	62 07       	cpc	r22, r18
     7f2:	73 07       	cpc	r23, r19
     7f4:	84 07       	cpc	r24, r20
     7f6:	95 07       	cpc	r25, r21
     7f8:	18 f0       	brcs	.+6      	; 0x800 <__addsf3x+0x18>
     7fa:	71 f4       	brne	.+28     	; 0x818 <__addsf3x+0x30>
     7fc:	9e f5       	brtc	.+102    	; 0x864 <__stack+0x5>
     7fe:	62 c1       	rjmp	.+708    	; 0xac4 <__fp_zero>
     800:	0e f4       	brtc	.+2      	; 0x804 <__addsf3x+0x1c>
     802:	e0 95       	com	r30
     804:	0b 2e       	mov	r0, r27
     806:	ba 2f       	mov	r27, r26
     808:	a0 2d       	mov	r26, r0
     80a:	0b 01       	movw	r0, r22
     80c:	b9 01       	movw	r22, r18
     80e:	90 01       	movw	r18, r0
     810:	0c 01       	movw	r0, r24
     812:	ca 01       	movw	r24, r20
     814:	a0 01       	movw	r20, r0
     816:	11 24       	eor	r1, r1
     818:	ff 27       	eor	r31, r31
     81a:	59 1b       	sub	r21, r25
     81c:	99 f0       	breq	.+38     	; 0x844 <__addsf3x+0x5c>
     81e:	59 3f       	cpi	r21, 0xF9	; 249
     820:	50 f4       	brcc	.+20     	; 0x836 <__addsf3x+0x4e>
     822:	50 3e       	cpi	r21, 0xE0	; 224
     824:	68 f1       	brcs	.+90     	; 0x880 <__stack+0x21>
     826:	1a 16       	cp	r1, r26
     828:	f0 40       	sbci	r31, 0x00	; 0
     82a:	a2 2f       	mov	r26, r18
     82c:	23 2f       	mov	r18, r19
     82e:	34 2f       	mov	r19, r20
     830:	44 27       	eor	r20, r20
     832:	58 5f       	subi	r21, 0xF8	; 248
     834:	f3 cf       	rjmp	.-26     	; 0x81c <__addsf3x+0x34>
     836:	46 95       	lsr	r20
     838:	37 95       	ror	r19
     83a:	27 95       	ror	r18
     83c:	a7 95       	ror	r26
     83e:	f0 40       	sbci	r31, 0x00	; 0
     840:	53 95       	inc	r21
     842:	c9 f7       	brne	.-14     	; 0x836 <__addsf3x+0x4e>
     844:	7e f4       	brtc	.+30     	; 0x864 <__stack+0x5>
     846:	1f 16       	cp	r1, r31
     848:	ba 0b       	sbc	r27, r26
     84a:	62 0b       	sbc	r22, r18
     84c:	73 0b       	sbc	r23, r19
     84e:	84 0b       	sbc	r24, r20
     850:	ba f0       	brmi	.+46     	; 0x880 <__stack+0x21>
     852:	91 50       	subi	r25, 0x01	; 1
     854:	a1 f0       	breq	.+40     	; 0x87e <__stack+0x1f>
     856:	ff 0f       	add	r31, r31
     858:	bb 1f       	adc	r27, r27
     85a:	66 1f       	adc	r22, r22
     85c:	77 1f       	adc	r23, r23
     85e:	88 1f       	adc	r24, r24
     860:	c2 f7       	brpl	.-16     	; 0x852 <__addsf3x+0x6a>
     862:	0e c0       	rjmp	.+28     	; 0x880 <__stack+0x21>
     864:	ba 0f       	add	r27, r26
     866:	62 1f       	adc	r22, r18
     868:	73 1f       	adc	r23, r19
     86a:	84 1f       	adc	r24, r20
     86c:	48 f4       	brcc	.+18     	; 0x880 <__stack+0x21>
     86e:	87 95       	ror	r24
     870:	77 95       	ror	r23
     872:	67 95       	ror	r22
     874:	b7 95       	ror	r27
     876:	f7 95       	ror	r31
     878:	9e 3f       	cpi	r25, 0xFE	; 254
     87a:	08 f0       	brcs	.+2      	; 0x87e <__stack+0x1f>
     87c:	b3 cf       	rjmp	.-154    	; 0x7e4 <__addsf3+0x1e>
     87e:	93 95       	inc	r25
     880:	88 0f       	add	r24, r24
     882:	08 f0       	brcs	.+2      	; 0x886 <__stack+0x27>
     884:	99 27       	eor	r25, r25
     886:	ee 0f       	add	r30, r30
     888:	97 95       	ror	r25
     88a:	87 95       	ror	r24
     88c:	08 95       	ret

0000088e <__divsf3>:
     88e:	0c d0       	rcall	.+24     	; 0x8a8 <__divsf3x>
     890:	e6 c0       	rjmp	.+460    	; 0xa5e <__fp_round>
     892:	de d0       	rcall	.+444    	; 0xa50 <__fp_pscB>
     894:	40 f0       	brcs	.+16     	; 0x8a6 <__divsf3+0x18>
     896:	d5 d0       	rcall	.+426    	; 0xa42 <__fp_pscA>
     898:	30 f0       	brcs	.+12     	; 0x8a6 <__divsf3+0x18>
     89a:	21 f4       	brne	.+8      	; 0x8a4 <__divsf3+0x16>
     89c:	5f 3f       	cpi	r21, 0xFF	; 255
     89e:	19 f0       	breq	.+6      	; 0x8a6 <__divsf3+0x18>
     8a0:	c7 c0       	rjmp	.+398    	; 0xa30 <__fp_inf>
     8a2:	51 11       	cpse	r21, r1
     8a4:	10 c1       	rjmp	.+544    	; 0xac6 <__fp_szero>
     8a6:	ca c0       	rjmp	.+404    	; 0xa3c <__fp_nan>

000008a8 <__divsf3x>:
     8a8:	eb d0       	rcall	.+470    	; 0xa80 <__fp_split3>
     8aa:	98 f3       	brcs	.-26     	; 0x892 <__divsf3+0x4>

000008ac <__divsf3_pse>:
     8ac:	99 23       	and	r25, r25
     8ae:	c9 f3       	breq	.-14     	; 0x8a2 <__divsf3+0x14>
     8b0:	55 23       	and	r21, r21
     8b2:	b1 f3       	breq	.-20     	; 0x8a0 <__divsf3+0x12>
     8b4:	95 1b       	sub	r25, r21
     8b6:	55 0b       	sbc	r21, r21
     8b8:	bb 27       	eor	r27, r27
     8ba:	aa 27       	eor	r26, r26
     8bc:	62 17       	cp	r22, r18
     8be:	73 07       	cpc	r23, r19
     8c0:	84 07       	cpc	r24, r20
     8c2:	38 f0       	brcs	.+14     	; 0x8d2 <__divsf3_pse+0x26>
     8c4:	9f 5f       	subi	r25, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	22 0f       	add	r18, r18
     8ca:	33 1f       	adc	r19, r19
     8cc:	44 1f       	adc	r20, r20
     8ce:	aa 1f       	adc	r26, r26
     8d0:	a9 f3       	breq	.-22     	; 0x8bc <__divsf3_pse+0x10>
     8d2:	33 d0       	rcall	.+102    	; 0x93a <__divsf3_pse+0x8e>
     8d4:	0e 2e       	mov	r0, r30
     8d6:	3a f0       	brmi	.+14     	; 0x8e6 <__divsf3_pse+0x3a>
     8d8:	e0 e8       	ldi	r30, 0x80	; 128
     8da:	30 d0       	rcall	.+96     	; 0x93c <__divsf3_pse+0x90>
     8dc:	91 50       	subi	r25, 0x01	; 1
     8de:	50 40       	sbci	r21, 0x00	; 0
     8e0:	e6 95       	lsr	r30
     8e2:	00 1c       	adc	r0, r0
     8e4:	ca f7       	brpl	.-14     	; 0x8d8 <__divsf3_pse+0x2c>
     8e6:	29 d0       	rcall	.+82     	; 0x93a <__divsf3_pse+0x8e>
     8e8:	fe 2f       	mov	r31, r30
     8ea:	27 d0       	rcall	.+78     	; 0x93a <__divsf3_pse+0x8e>
     8ec:	66 0f       	add	r22, r22
     8ee:	77 1f       	adc	r23, r23
     8f0:	88 1f       	adc	r24, r24
     8f2:	bb 1f       	adc	r27, r27
     8f4:	26 17       	cp	r18, r22
     8f6:	37 07       	cpc	r19, r23
     8f8:	48 07       	cpc	r20, r24
     8fa:	ab 07       	cpc	r26, r27
     8fc:	b0 e8       	ldi	r27, 0x80	; 128
     8fe:	09 f0       	breq	.+2      	; 0x902 <__divsf3_pse+0x56>
     900:	bb 0b       	sbc	r27, r27
     902:	80 2d       	mov	r24, r0
     904:	bf 01       	movw	r22, r30
     906:	ff 27       	eor	r31, r31
     908:	93 58       	subi	r25, 0x83	; 131
     90a:	5f 4f       	sbci	r21, 0xFF	; 255
     90c:	2a f0       	brmi	.+10     	; 0x918 <__divsf3_pse+0x6c>
     90e:	9e 3f       	cpi	r25, 0xFE	; 254
     910:	51 05       	cpc	r21, r1
     912:	68 f0       	brcs	.+26     	; 0x92e <__divsf3_pse+0x82>
     914:	8d c0       	rjmp	.+282    	; 0xa30 <__fp_inf>
     916:	d7 c0       	rjmp	.+430    	; 0xac6 <__fp_szero>
     918:	5f 3f       	cpi	r21, 0xFF	; 255
     91a:	ec f3       	brlt	.-6      	; 0x916 <__divsf3_pse+0x6a>
     91c:	98 3e       	cpi	r25, 0xE8	; 232
     91e:	dc f3       	brlt	.-10     	; 0x916 <__divsf3_pse+0x6a>
     920:	86 95       	lsr	r24
     922:	77 95       	ror	r23
     924:	67 95       	ror	r22
     926:	b7 95       	ror	r27
     928:	f7 95       	ror	r31
     92a:	9f 5f       	subi	r25, 0xFF	; 255
     92c:	c9 f7       	brne	.-14     	; 0x920 <__divsf3_pse+0x74>
     92e:	88 0f       	add	r24, r24
     930:	91 1d       	adc	r25, r1
     932:	96 95       	lsr	r25
     934:	87 95       	ror	r24
     936:	97 f9       	bld	r25, 7
     938:	08 95       	ret
     93a:	e1 e0       	ldi	r30, 0x01	; 1
     93c:	66 0f       	add	r22, r22
     93e:	77 1f       	adc	r23, r23
     940:	88 1f       	adc	r24, r24
     942:	bb 1f       	adc	r27, r27
     944:	62 17       	cp	r22, r18
     946:	73 07       	cpc	r23, r19
     948:	84 07       	cpc	r24, r20
     94a:	ba 07       	cpc	r27, r26
     94c:	20 f0       	brcs	.+8      	; 0x956 <__divsf3_pse+0xaa>
     94e:	62 1b       	sub	r22, r18
     950:	73 0b       	sbc	r23, r19
     952:	84 0b       	sbc	r24, r20
     954:	ba 0b       	sbc	r27, r26
     956:	ee 1f       	adc	r30, r30
     958:	88 f7       	brcc	.-30     	; 0x93c <__divsf3_pse+0x90>
     95a:	e0 95       	com	r30
     95c:	08 95       	ret

0000095e <__fixunssfsi>:
     95e:	98 d0       	rcall	.+304    	; 0xa90 <__fp_splitA>
     960:	88 f0       	brcs	.+34     	; 0x984 <__fixunssfsi+0x26>
     962:	9f 57       	subi	r25, 0x7F	; 127
     964:	90 f0       	brcs	.+36     	; 0x98a <__fixunssfsi+0x2c>
     966:	b9 2f       	mov	r27, r25
     968:	99 27       	eor	r25, r25
     96a:	b7 51       	subi	r27, 0x17	; 23
     96c:	a0 f0       	brcs	.+40     	; 0x996 <__fixunssfsi+0x38>
     96e:	d1 f0       	breq	.+52     	; 0x9a4 <__fixunssfsi+0x46>
     970:	66 0f       	add	r22, r22
     972:	77 1f       	adc	r23, r23
     974:	88 1f       	adc	r24, r24
     976:	99 1f       	adc	r25, r25
     978:	1a f0       	brmi	.+6      	; 0x980 <__fixunssfsi+0x22>
     97a:	ba 95       	dec	r27
     97c:	c9 f7       	brne	.-14     	; 0x970 <__fixunssfsi+0x12>
     97e:	12 c0       	rjmp	.+36     	; 0x9a4 <__fixunssfsi+0x46>
     980:	b1 30       	cpi	r27, 0x01	; 1
     982:	81 f0       	breq	.+32     	; 0x9a4 <__fixunssfsi+0x46>
     984:	9f d0       	rcall	.+318    	; 0xac4 <__fp_zero>
     986:	b1 e0       	ldi	r27, 0x01	; 1
     988:	08 95       	ret
     98a:	9c c0       	rjmp	.+312    	; 0xac4 <__fp_zero>
     98c:	67 2f       	mov	r22, r23
     98e:	78 2f       	mov	r23, r24
     990:	88 27       	eor	r24, r24
     992:	b8 5f       	subi	r27, 0xF8	; 248
     994:	39 f0       	breq	.+14     	; 0x9a4 <__fixunssfsi+0x46>
     996:	b9 3f       	cpi	r27, 0xF9	; 249
     998:	cc f3       	brlt	.-14     	; 0x98c <__fixunssfsi+0x2e>
     99a:	86 95       	lsr	r24
     99c:	77 95       	ror	r23
     99e:	67 95       	ror	r22
     9a0:	b3 95       	inc	r27
     9a2:	d9 f7       	brne	.-10     	; 0x99a <__fixunssfsi+0x3c>
     9a4:	3e f4       	brtc	.+14     	; 0x9b4 <__fixunssfsi+0x56>
     9a6:	90 95       	com	r25
     9a8:	80 95       	com	r24
     9aa:	70 95       	com	r23
     9ac:	61 95       	neg	r22
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	8f 4f       	sbci	r24, 0xFF	; 255
     9b2:	9f 4f       	sbci	r25, 0xFF	; 255
     9b4:	08 95       	ret

000009b6 <__floatunsisf>:
     9b6:	e8 94       	clt
     9b8:	09 c0       	rjmp	.+18     	; 0x9cc <__floatsisf+0x12>

000009ba <__floatsisf>:
     9ba:	97 fb       	bst	r25, 7
     9bc:	3e f4       	brtc	.+14     	; 0x9cc <__floatsisf+0x12>
     9be:	90 95       	com	r25
     9c0:	80 95       	com	r24
     9c2:	70 95       	com	r23
     9c4:	61 95       	neg	r22
     9c6:	7f 4f       	sbci	r23, 0xFF	; 255
     9c8:	8f 4f       	sbci	r24, 0xFF	; 255
     9ca:	9f 4f       	sbci	r25, 0xFF	; 255
     9cc:	99 23       	and	r25, r25
     9ce:	a9 f0       	breq	.+42     	; 0x9fa <__floatsisf+0x40>
     9d0:	f9 2f       	mov	r31, r25
     9d2:	96 e9       	ldi	r25, 0x96	; 150
     9d4:	bb 27       	eor	r27, r27
     9d6:	93 95       	inc	r25
     9d8:	f6 95       	lsr	r31
     9da:	87 95       	ror	r24
     9dc:	77 95       	ror	r23
     9de:	67 95       	ror	r22
     9e0:	b7 95       	ror	r27
     9e2:	f1 11       	cpse	r31, r1
     9e4:	f8 cf       	rjmp	.-16     	; 0x9d6 <__floatsisf+0x1c>
     9e6:	fa f4       	brpl	.+62     	; 0xa26 <__floatsisf+0x6c>
     9e8:	bb 0f       	add	r27, r27
     9ea:	11 f4       	brne	.+4      	; 0x9f0 <__floatsisf+0x36>
     9ec:	60 ff       	sbrs	r22, 0
     9ee:	1b c0       	rjmp	.+54     	; 0xa26 <__floatsisf+0x6c>
     9f0:	6f 5f       	subi	r22, 0xFF	; 255
     9f2:	7f 4f       	sbci	r23, 0xFF	; 255
     9f4:	8f 4f       	sbci	r24, 0xFF	; 255
     9f6:	9f 4f       	sbci	r25, 0xFF	; 255
     9f8:	16 c0       	rjmp	.+44     	; 0xa26 <__floatsisf+0x6c>
     9fa:	88 23       	and	r24, r24
     9fc:	11 f0       	breq	.+4      	; 0xa02 <__floatsisf+0x48>
     9fe:	96 e9       	ldi	r25, 0x96	; 150
     a00:	11 c0       	rjmp	.+34     	; 0xa24 <__floatsisf+0x6a>
     a02:	77 23       	and	r23, r23
     a04:	21 f0       	breq	.+8      	; 0xa0e <__floatsisf+0x54>
     a06:	9e e8       	ldi	r25, 0x8E	; 142
     a08:	87 2f       	mov	r24, r23
     a0a:	76 2f       	mov	r23, r22
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <__floatsisf+0x5e>
     a0e:	66 23       	and	r22, r22
     a10:	71 f0       	breq	.+28     	; 0xa2e <__floatsisf+0x74>
     a12:	96 e8       	ldi	r25, 0x86	; 134
     a14:	86 2f       	mov	r24, r22
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	2a f0       	brmi	.+10     	; 0xa26 <__floatsisf+0x6c>
     a1c:	9a 95       	dec	r25
     a1e:	66 0f       	add	r22, r22
     a20:	77 1f       	adc	r23, r23
     a22:	88 1f       	adc	r24, r24
     a24:	da f7       	brpl	.-10     	; 0xa1c <__floatsisf+0x62>
     a26:	88 0f       	add	r24, r24
     a28:	96 95       	lsr	r25
     a2a:	87 95       	ror	r24
     a2c:	97 f9       	bld	r25, 7
     a2e:	08 95       	ret

00000a30 <__fp_inf>:
     a30:	97 f9       	bld	r25, 7
     a32:	9f 67       	ori	r25, 0x7F	; 127
     a34:	80 e8       	ldi	r24, 0x80	; 128
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	08 95       	ret

00000a3c <__fp_nan>:
     a3c:	9f ef       	ldi	r25, 0xFF	; 255
     a3e:	80 ec       	ldi	r24, 0xC0	; 192
     a40:	08 95       	ret

00000a42 <__fp_pscA>:
     a42:	00 24       	eor	r0, r0
     a44:	0a 94       	dec	r0
     a46:	16 16       	cp	r1, r22
     a48:	17 06       	cpc	r1, r23
     a4a:	18 06       	cpc	r1, r24
     a4c:	09 06       	cpc	r0, r25
     a4e:	08 95       	ret

00000a50 <__fp_pscB>:
     a50:	00 24       	eor	r0, r0
     a52:	0a 94       	dec	r0
     a54:	12 16       	cp	r1, r18
     a56:	13 06       	cpc	r1, r19
     a58:	14 06       	cpc	r1, r20
     a5a:	05 06       	cpc	r0, r21
     a5c:	08 95       	ret

00000a5e <__fp_round>:
     a5e:	09 2e       	mov	r0, r25
     a60:	03 94       	inc	r0
     a62:	00 0c       	add	r0, r0
     a64:	11 f4       	brne	.+4      	; 0xa6a <__fp_round+0xc>
     a66:	88 23       	and	r24, r24
     a68:	52 f0       	brmi	.+20     	; 0xa7e <__fp_round+0x20>
     a6a:	bb 0f       	add	r27, r27
     a6c:	40 f4       	brcc	.+16     	; 0xa7e <__fp_round+0x20>
     a6e:	bf 2b       	or	r27, r31
     a70:	11 f4       	brne	.+4      	; 0xa76 <__fp_round+0x18>
     a72:	60 ff       	sbrs	r22, 0
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__fp_round+0x20>
     a76:	6f 5f       	subi	r22, 0xFF	; 255
     a78:	7f 4f       	sbci	r23, 0xFF	; 255
     a7a:	8f 4f       	sbci	r24, 0xFF	; 255
     a7c:	9f 4f       	sbci	r25, 0xFF	; 255
     a7e:	08 95       	ret

00000a80 <__fp_split3>:
     a80:	57 fd       	sbrc	r21, 7
     a82:	90 58       	subi	r25, 0x80	; 128
     a84:	44 0f       	add	r20, r20
     a86:	55 1f       	adc	r21, r21
     a88:	59 f0       	breq	.+22     	; 0xaa0 <__fp_splitA+0x10>
     a8a:	5f 3f       	cpi	r21, 0xFF	; 255
     a8c:	71 f0       	breq	.+28     	; 0xaaa <__fp_splitA+0x1a>
     a8e:	47 95       	ror	r20

00000a90 <__fp_splitA>:
     a90:	88 0f       	add	r24, r24
     a92:	97 fb       	bst	r25, 7
     a94:	99 1f       	adc	r25, r25
     a96:	61 f0       	breq	.+24     	; 0xab0 <__fp_splitA+0x20>
     a98:	9f 3f       	cpi	r25, 0xFF	; 255
     a9a:	79 f0       	breq	.+30     	; 0xaba <__fp_splitA+0x2a>
     a9c:	87 95       	ror	r24
     a9e:	08 95       	ret
     aa0:	12 16       	cp	r1, r18
     aa2:	13 06       	cpc	r1, r19
     aa4:	14 06       	cpc	r1, r20
     aa6:	55 1f       	adc	r21, r21
     aa8:	f2 cf       	rjmp	.-28     	; 0xa8e <__fp_split3+0xe>
     aaa:	46 95       	lsr	r20
     aac:	f1 df       	rcall	.-30     	; 0xa90 <__fp_splitA>
     aae:	08 c0       	rjmp	.+16     	; 0xac0 <__fp_splitA+0x30>
     ab0:	16 16       	cp	r1, r22
     ab2:	17 06       	cpc	r1, r23
     ab4:	18 06       	cpc	r1, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	f1 cf       	rjmp	.-30     	; 0xa9c <__fp_splitA+0xc>
     aba:	86 95       	lsr	r24
     abc:	71 05       	cpc	r23, r1
     abe:	61 05       	cpc	r22, r1
     ac0:	08 94       	sec
     ac2:	08 95       	ret

00000ac4 <__fp_zero>:
     ac4:	e8 94       	clt

00000ac6 <__fp_szero>:
     ac6:	bb 27       	eor	r27, r27
     ac8:	66 27       	eor	r22, r22
     aca:	77 27       	eor	r23, r23
     acc:	cb 01       	movw	r24, r22
     ace:	97 f9       	bld	r25, 7
     ad0:	08 95       	ret

00000ad2 <__mulsf3>:
     ad2:	0b d0       	rcall	.+22     	; 0xaea <__mulsf3x>
     ad4:	c4 cf       	rjmp	.-120    	; 0xa5e <__fp_round>
     ad6:	b5 df       	rcall	.-150    	; 0xa42 <__fp_pscA>
     ad8:	28 f0       	brcs	.+10     	; 0xae4 <__mulsf3+0x12>
     ada:	ba df       	rcall	.-140    	; 0xa50 <__fp_pscB>
     adc:	18 f0       	brcs	.+6      	; 0xae4 <__mulsf3+0x12>
     ade:	95 23       	and	r25, r21
     ae0:	09 f0       	breq	.+2      	; 0xae4 <__mulsf3+0x12>
     ae2:	a6 cf       	rjmp	.-180    	; 0xa30 <__fp_inf>
     ae4:	ab cf       	rjmp	.-170    	; 0xa3c <__fp_nan>
     ae6:	11 24       	eor	r1, r1
     ae8:	ee cf       	rjmp	.-36     	; 0xac6 <__fp_szero>

00000aea <__mulsf3x>:
     aea:	ca df       	rcall	.-108    	; 0xa80 <__fp_split3>
     aec:	a0 f3       	brcs	.-24     	; 0xad6 <__mulsf3+0x4>

00000aee <__mulsf3_pse>:
     aee:	95 9f       	mul	r25, r21
     af0:	d1 f3       	breq	.-12     	; 0xae6 <__mulsf3+0x14>
     af2:	95 0f       	add	r25, r21
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	55 1f       	adc	r21, r21
     af8:	62 9f       	mul	r22, r18
     afa:	f0 01       	movw	r30, r0
     afc:	72 9f       	mul	r23, r18
     afe:	bb 27       	eor	r27, r27
     b00:	f0 0d       	add	r31, r0
     b02:	b1 1d       	adc	r27, r1
     b04:	63 9f       	mul	r22, r19
     b06:	aa 27       	eor	r26, r26
     b08:	f0 0d       	add	r31, r0
     b0a:	b1 1d       	adc	r27, r1
     b0c:	aa 1f       	adc	r26, r26
     b0e:	64 9f       	mul	r22, r20
     b10:	66 27       	eor	r22, r22
     b12:	b0 0d       	add	r27, r0
     b14:	a1 1d       	adc	r26, r1
     b16:	66 1f       	adc	r22, r22
     b18:	82 9f       	mul	r24, r18
     b1a:	22 27       	eor	r18, r18
     b1c:	b0 0d       	add	r27, r0
     b1e:	a1 1d       	adc	r26, r1
     b20:	62 1f       	adc	r22, r18
     b22:	73 9f       	mul	r23, r19
     b24:	b0 0d       	add	r27, r0
     b26:	a1 1d       	adc	r26, r1
     b28:	62 1f       	adc	r22, r18
     b2a:	83 9f       	mul	r24, r19
     b2c:	a0 0d       	add	r26, r0
     b2e:	61 1d       	adc	r22, r1
     b30:	22 1f       	adc	r18, r18
     b32:	74 9f       	mul	r23, r20
     b34:	33 27       	eor	r19, r19
     b36:	a0 0d       	add	r26, r0
     b38:	61 1d       	adc	r22, r1
     b3a:	23 1f       	adc	r18, r19
     b3c:	84 9f       	mul	r24, r20
     b3e:	60 0d       	add	r22, r0
     b40:	21 1d       	adc	r18, r1
     b42:	82 2f       	mov	r24, r18
     b44:	76 2f       	mov	r23, r22
     b46:	6a 2f       	mov	r22, r26
     b48:	11 24       	eor	r1, r1
     b4a:	9f 57       	subi	r25, 0x7F	; 127
     b4c:	50 40       	sbci	r21, 0x00	; 0
     b4e:	8a f0       	brmi	.+34     	; 0xb72 <__mulsf3_pse+0x84>
     b50:	e1 f0       	breq	.+56     	; 0xb8a <__mulsf3_pse+0x9c>
     b52:	88 23       	and	r24, r24
     b54:	4a f0       	brmi	.+18     	; 0xb68 <__mulsf3_pse+0x7a>
     b56:	ee 0f       	add	r30, r30
     b58:	ff 1f       	adc	r31, r31
     b5a:	bb 1f       	adc	r27, r27
     b5c:	66 1f       	adc	r22, r22
     b5e:	77 1f       	adc	r23, r23
     b60:	88 1f       	adc	r24, r24
     b62:	91 50       	subi	r25, 0x01	; 1
     b64:	50 40       	sbci	r21, 0x00	; 0
     b66:	a9 f7       	brne	.-22     	; 0xb52 <__mulsf3_pse+0x64>
     b68:	9e 3f       	cpi	r25, 0xFE	; 254
     b6a:	51 05       	cpc	r21, r1
     b6c:	70 f0       	brcs	.+28     	; 0xb8a <__mulsf3_pse+0x9c>
     b6e:	60 cf       	rjmp	.-320    	; 0xa30 <__fp_inf>
     b70:	aa cf       	rjmp	.-172    	; 0xac6 <__fp_szero>
     b72:	5f 3f       	cpi	r21, 0xFF	; 255
     b74:	ec f3       	brlt	.-6      	; 0xb70 <__mulsf3_pse+0x82>
     b76:	98 3e       	cpi	r25, 0xE8	; 232
     b78:	dc f3       	brlt	.-10     	; 0xb70 <__mulsf3_pse+0x82>
     b7a:	86 95       	lsr	r24
     b7c:	77 95       	ror	r23
     b7e:	67 95       	ror	r22
     b80:	b7 95       	ror	r27
     b82:	f7 95       	ror	r31
     b84:	e7 95       	ror	r30
     b86:	9f 5f       	subi	r25, 0xFF	; 255
     b88:	c1 f7       	brne	.-16     	; 0xb7a <__mulsf3_pse+0x8c>
     b8a:	fe 2b       	or	r31, r30
     b8c:	88 0f       	add	r24, r24
     b8e:	91 1d       	adc	r25, r1
     b90:	96 95       	lsr	r25
     b92:	87 95       	ror	r24
     b94:	97 f9       	bld	r25, 7
     b96:	08 95       	ret

00000b98 <pow>:
     b98:	fa 01       	movw	r30, r20
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	30 96       	adiw	r30, 0x00	; 0
     ba0:	21 05       	cpc	r18, r1
     ba2:	31 05       	cpc	r19, r1
     ba4:	99 f1       	breq	.+102    	; 0xc0c <pow+0x74>
     ba6:	61 15       	cp	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	61 f4       	brne	.+24     	; 0xbc4 <pow+0x2c>
     bac:	80 38       	cpi	r24, 0x80	; 128
     bae:	bf e3       	ldi	r27, 0x3F	; 63
     bb0:	9b 07       	cpc	r25, r27
     bb2:	49 f1       	breq	.+82     	; 0xc06 <pow+0x6e>
     bb4:	68 94       	set
     bb6:	90 38       	cpi	r25, 0x80	; 128
     bb8:	81 05       	cpc	r24, r1
     bba:	61 f0       	breq	.+24     	; 0xbd4 <pow+0x3c>
     bbc:	80 38       	cpi	r24, 0x80	; 128
     bbe:	bf ef       	ldi	r27, 0xFF	; 255
     bc0:	9b 07       	cpc	r25, r27
     bc2:	41 f0       	breq	.+16     	; 0xbd4 <pow+0x3c>
     bc4:	99 23       	and	r25, r25
     bc6:	42 f5       	brpl	.+80     	; 0xc18 <pow+0x80>
     bc8:	ff 3f       	cpi	r31, 0xFF	; 255
     bca:	e1 05       	cpc	r30, r1
     bcc:	31 05       	cpc	r19, r1
     bce:	21 05       	cpc	r18, r1
     bd0:	11 f1       	breq	.+68     	; 0xc16 <pow+0x7e>
     bd2:	e8 94       	clt
     bd4:	08 94       	sec
     bd6:	e7 95       	ror	r30
     bd8:	d9 01       	movw	r26, r18
     bda:	aa 23       	and	r26, r26
     bdc:	29 f4       	brne	.+10     	; 0xbe8 <pow+0x50>
     bde:	ab 2f       	mov	r26, r27
     be0:	be 2f       	mov	r27, r30
     be2:	f8 5f       	subi	r31, 0xF8	; 248
     be4:	d0 f3       	brcs	.-12     	; 0xbda <pow+0x42>
     be6:	10 c0       	rjmp	.+32     	; 0xc08 <pow+0x70>
     be8:	ff 5f       	subi	r31, 0xFF	; 255
     bea:	70 f4       	brcc	.+28     	; 0xc08 <pow+0x70>
     bec:	a6 95       	lsr	r26
     bee:	e0 f7       	brcc	.-8      	; 0xbe8 <pow+0x50>
     bf0:	f7 39       	cpi	r31, 0x97	; 151
     bf2:	50 f0       	brcs	.+20     	; 0xc08 <pow+0x70>
     bf4:	19 f0       	breq	.+6      	; 0xbfc <pow+0x64>
     bf6:	ff 3a       	cpi	r31, 0xAF	; 175
     bf8:	38 f4       	brcc	.+14     	; 0xc08 <pow+0x70>
     bfa:	9f 77       	andi	r25, 0x7F	; 127
     bfc:	9f 93       	push	r25
     bfe:	0c d0       	rcall	.+24     	; 0xc18 <pow+0x80>
     c00:	0f 90       	pop	r0
     c02:	07 fc       	sbrc	r0, 7
     c04:	90 58       	subi	r25, 0x80	; 128
     c06:	08 95       	ret
     c08:	3e f0       	brts	.+14     	; 0xc18 <pow+0x80>
     c0a:	18 cf       	rjmp	.-464    	; 0xa3c <__fp_nan>
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	80 e8       	ldi	r24, 0x80	; 128
     c12:	9f e3       	ldi	r25, 0x3F	; 63
     c14:	08 95       	ret
     c16:	4f e7       	ldi	r20, 0x7F	; 127
     c18:	9f 77       	andi	r25, 0x7F	; 127
     c1a:	5f 93       	push	r21
     c1c:	4f 93       	push	r20
     c1e:	3f 93       	push	r19
     c20:	2f 93       	push	r18
     c22:	55 d5       	rcall	.+2730   	; 0x16ce <log>
     c24:	2f 91       	pop	r18
     c26:	3f 91       	pop	r19
     c28:	4f 91       	pop	r20
     c2a:	5f 91       	pop	r21
     c2c:	52 df       	rcall	.-348    	; 0xad2 <__mulsf3>
     c2e:	bc c4       	rjmp	.+2424   	; 0x15a8 <exp>

00000c30 <vfprintf>:
     c30:	ab e0       	ldi	r26, 0x0B	; 11
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	ee e1       	ldi	r30, 0x1E	; 30
     c36:	f6 e0       	ldi	r31, 0x06	; 6
     c38:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__prologue_saves__>
     c3c:	3c 01       	movw	r6, r24
     c3e:	2b 01       	movw	r4, r22
     c40:	5a 01       	movw	r10, r20
     c42:	fc 01       	movw	r30, r24
     c44:	17 82       	std	Z+7, r1	; 0x07
     c46:	16 82       	std	Z+6, r1	; 0x06
     c48:	83 81       	ldd	r24, Z+3	; 0x03
     c4a:	81 fd       	sbrc	r24, 1
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <vfprintf+0x24>
     c4e:	6f ef       	ldi	r22, 0xFF	; 255
     c50:	7f ef       	ldi	r23, 0xFF	; 255
     c52:	c6 c1       	rjmp	.+908    	; 0xfe0 <vfprintf+0x3b0>
     c54:	9a e0       	ldi	r25, 0x0A	; 10
     c56:	89 2e       	mov	r8, r25
     c58:	1e 01       	movw	r2, r28
     c5a:	08 94       	sec
     c5c:	21 1c       	adc	r2, r1
     c5e:	31 1c       	adc	r3, r1
     c60:	f3 01       	movw	r30, r6
     c62:	23 81       	ldd	r18, Z+3	; 0x03
     c64:	f2 01       	movw	r30, r4
     c66:	23 fd       	sbrc	r18, 3
     c68:	85 91       	lpm	r24, Z+
     c6a:	23 ff       	sbrs	r18, 3
     c6c:	81 91       	ld	r24, Z+
     c6e:	2f 01       	movw	r4, r30
     c70:	88 23       	and	r24, r24
     c72:	09 f4       	brne	.+2      	; 0xc76 <vfprintf+0x46>
     c74:	b2 c1       	rjmp	.+868    	; 0xfda <vfprintf+0x3aa>
     c76:	85 32       	cpi	r24, 0x25	; 37
     c78:	39 f4       	brne	.+14     	; 0xc88 <vfprintf+0x58>
     c7a:	23 fd       	sbrc	r18, 3
     c7c:	85 91       	lpm	r24, Z+
     c7e:	23 ff       	sbrs	r18, 3
     c80:	81 91       	ld	r24, Z+
     c82:	2f 01       	movw	r4, r30
     c84:	85 32       	cpi	r24, 0x25	; 37
     c86:	29 f4       	brne	.+10     	; 0xc92 <vfprintf+0x62>
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	b3 01       	movw	r22, r6
     c8c:	0e 94 45 0a 	call	0x148a	; 0x148a <fputc>
     c90:	e7 cf       	rjmp	.-50     	; 0xc60 <vfprintf+0x30>
     c92:	98 2f       	mov	r25, r24
     c94:	ff 24       	eor	r15, r15
     c96:	ee 24       	eor	r14, r14
     c98:	99 24       	eor	r9, r9
     c9a:	ff e1       	ldi	r31, 0x1F	; 31
     c9c:	ff 15       	cp	r31, r15
     c9e:	d0 f0       	brcs	.+52     	; 0xcd4 <vfprintf+0xa4>
     ca0:	9b 32       	cpi	r25, 0x2B	; 43
     ca2:	69 f0       	breq	.+26     	; 0xcbe <vfprintf+0x8e>
     ca4:	9c 32       	cpi	r25, 0x2C	; 44
     ca6:	28 f4       	brcc	.+10     	; 0xcb2 <vfprintf+0x82>
     ca8:	90 32       	cpi	r25, 0x20	; 32
     caa:	59 f0       	breq	.+22     	; 0xcc2 <vfprintf+0x92>
     cac:	93 32       	cpi	r25, 0x23	; 35
     cae:	91 f4       	brne	.+36     	; 0xcd4 <vfprintf+0xa4>
     cb0:	0e c0       	rjmp	.+28     	; 0xcce <vfprintf+0x9e>
     cb2:	9d 32       	cpi	r25, 0x2D	; 45
     cb4:	49 f0       	breq	.+18     	; 0xcc8 <vfprintf+0x98>
     cb6:	90 33       	cpi	r25, 0x30	; 48
     cb8:	69 f4       	brne	.+26     	; 0xcd4 <vfprintf+0xa4>
     cba:	41 e0       	ldi	r20, 0x01	; 1
     cbc:	24 c0       	rjmp	.+72     	; 0xd06 <vfprintf+0xd6>
     cbe:	52 e0       	ldi	r21, 0x02	; 2
     cc0:	f5 2a       	or	r15, r21
     cc2:	84 e0       	ldi	r24, 0x04	; 4
     cc4:	f8 2a       	or	r15, r24
     cc6:	28 c0       	rjmp	.+80     	; 0xd18 <vfprintf+0xe8>
     cc8:	98 e0       	ldi	r25, 0x08	; 8
     cca:	f9 2a       	or	r15, r25
     ccc:	25 c0       	rjmp	.+74     	; 0xd18 <vfprintf+0xe8>
     cce:	e0 e1       	ldi	r30, 0x10	; 16
     cd0:	fe 2a       	or	r15, r30
     cd2:	22 c0       	rjmp	.+68     	; 0xd18 <vfprintf+0xe8>
     cd4:	f7 fc       	sbrc	r15, 7
     cd6:	29 c0       	rjmp	.+82     	; 0xd2a <vfprintf+0xfa>
     cd8:	89 2f       	mov	r24, r25
     cda:	80 53       	subi	r24, 0x30	; 48
     cdc:	8a 30       	cpi	r24, 0x0A	; 10
     cde:	70 f4       	brcc	.+28     	; 0xcfc <vfprintf+0xcc>
     ce0:	f6 fe       	sbrs	r15, 6
     ce2:	05 c0       	rjmp	.+10     	; 0xcee <vfprintf+0xbe>
     ce4:	98 9c       	mul	r9, r8
     ce6:	90 2c       	mov	r9, r0
     ce8:	11 24       	eor	r1, r1
     cea:	98 0e       	add	r9, r24
     cec:	15 c0       	rjmp	.+42     	; 0xd18 <vfprintf+0xe8>
     cee:	e8 9c       	mul	r14, r8
     cf0:	e0 2c       	mov	r14, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	e8 0e       	add	r14, r24
     cf6:	f0 e2       	ldi	r31, 0x20	; 32
     cf8:	ff 2a       	or	r15, r31
     cfa:	0e c0       	rjmp	.+28     	; 0xd18 <vfprintf+0xe8>
     cfc:	9e 32       	cpi	r25, 0x2E	; 46
     cfe:	29 f4       	brne	.+10     	; 0xd0a <vfprintf+0xda>
     d00:	f6 fc       	sbrc	r15, 6
     d02:	6b c1       	rjmp	.+726    	; 0xfda <vfprintf+0x3aa>
     d04:	40 e4       	ldi	r20, 0x40	; 64
     d06:	f4 2a       	or	r15, r20
     d08:	07 c0       	rjmp	.+14     	; 0xd18 <vfprintf+0xe8>
     d0a:	9c 36       	cpi	r25, 0x6C	; 108
     d0c:	19 f4       	brne	.+6      	; 0xd14 <vfprintf+0xe4>
     d0e:	50 e8       	ldi	r21, 0x80	; 128
     d10:	f5 2a       	or	r15, r21
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <vfprintf+0xe8>
     d14:	98 36       	cpi	r25, 0x68	; 104
     d16:	49 f4       	brne	.+18     	; 0xd2a <vfprintf+0xfa>
     d18:	f2 01       	movw	r30, r4
     d1a:	23 fd       	sbrc	r18, 3
     d1c:	95 91       	lpm	r25, Z+
     d1e:	23 ff       	sbrs	r18, 3
     d20:	91 91       	ld	r25, Z+
     d22:	2f 01       	movw	r4, r30
     d24:	99 23       	and	r25, r25
     d26:	09 f0       	breq	.+2      	; 0xd2a <vfprintf+0xfa>
     d28:	b8 cf       	rjmp	.-144    	; 0xc9a <vfprintf+0x6a>
     d2a:	89 2f       	mov	r24, r25
     d2c:	85 54       	subi	r24, 0x45	; 69
     d2e:	83 30       	cpi	r24, 0x03	; 3
     d30:	18 f0       	brcs	.+6      	; 0xd38 <vfprintf+0x108>
     d32:	80 52       	subi	r24, 0x20	; 32
     d34:	83 30       	cpi	r24, 0x03	; 3
     d36:	38 f4       	brcc	.+14     	; 0xd46 <vfprintf+0x116>
     d38:	44 e0       	ldi	r20, 0x04	; 4
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	a4 0e       	add	r10, r20
     d3e:	b5 1e       	adc	r11, r21
     d40:	5f e3       	ldi	r21, 0x3F	; 63
     d42:	59 83       	std	Y+1, r21	; 0x01
     d44:	0f c0       	rjmp	.+30     	; 0xd64 <vfprintf+0x134>
     d46:	93 36       	cpi	r25, 0x63	; 99
     d48:	31 f0       	breq	.+12     	; 0xd56 <vfprintf+0x126>
     d4a:	93 37       	cpi	r25, 0x73	; 115
     d4c:	79 f0       	breq	.+30     	; 0xd6c <vfprintf+0x13c>
     d4e:	93 35       	cpi	r25, 0x53	; 83
     d50:	09 f0       	breq	.+2      	; 0xd54 <vfprintf+0x124>
     d52:	56 c0       	rjmp	.+172    	; 0xe00 <vfprintf+0x1d0>
     d54:	20 c0       	rjmp	.+64     	; 0xd96 <vfprintf+0x166>
     d56:	f5 01       	movw	r30, r10
     d58:	80 81       	ld	r24, Z
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	42 e0       	ldi	r20, 0x02	; 2
     d5e:	50 e0       	ldi	r21, 0x00	; 0
     d60:	a4 0e       	add	r10, r20
     d62:	b5 1e       	adc	r11, r21
     d64:	61 01       	movw	r12, r2
     d66:	01 e0       	ldi	r16, 0x01	; 1
     d68:	10 e0       	ldi	r17, 0x00	; 0
     d6a:	12 c0       	rjmp	.+36     	; 0xd90 <vfprintf+0x160>
     d6c:	f5 01       	movw	r30, r10
     d6e:	c0 80       	ld	r12, Z
     d70:	d1 80       	ldd	r13, Z+1	; 0x01
     d72:	f6 fc       	sbrc	r15, 6
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <vfprintf+0x14c>
     d76:	6f ef       	ldi	r22, 0xFF	; 255
     d78:	7f ef       	ldi	r23, 0xFF	; 255
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <vfprintf+0x150>
     d7c:	69 2d       	mov	r22, r9
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	42 e0       	ldi	r20, 0x02	; 2
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	a4 0e       	add	r10, r20
     d86:	b5 1e       	adc	r11, r21
     d88:	c6 01       	movw	r24, r12
     d8a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <strnlen>
     d8e:	8c 01       	movw	r16, r24
     d90:	5f e7       	ldi	r21, 0x7F	; 127
     d92:	f5 22       	and	r15, r21
     d94:	14 c0       	rjmp	.+40     	; 0xdbe <vfprintf+0x18e>
     d96:	f5 01       	movw	r30, r10
     d98:	c0 80       	ld	r12, Z
     d9a:	d1 80       	ldd	r13, Z+1	; 0x01
     d9c:	f6 fc       	sbrc	r15, 6
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <vfprintf+0x176>
     da0:	6f ef       	ldi	r22, 0xFF	; 255
     da2:	7f ef       	ldi	r23, 0xFF	; 255
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <vfprintf+0x17a>
     da6:	69 2d       	mov	r22, r9
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	42 e0       	ldi	r20, 0x02	; 2
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	a4 0e       	add	r10, r20
     db0:	b5 1e       	adc	r11, r21
     db2:	c6 01       	movw	r24, r12
     db4:	0e 94 2f 0a 	call	0x145e	; 0x145e <strnlen_P>
     db8:	8c 01       	movw	r16, r24
     dba:	50 e8       	ldi	r21, 0x80	; 128
     dbc:	f5 2a       	or	r15, r21
     dbe:	f3 fe       	sbrs	r15, 3
     dc0:	07 c0       	rjmp	.+14     	; 0xdd0 <vfprintf+0x1a0>
     dc2:	1a c0       	rjmp	.+52     	; 0xdf8 <vfprintf+0x1c8>
     dc4:	80 e2       	ldi	r24, 0x20	; 32
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	b3 01       	movw	r22, r6
     dca:	0e 94 45 0a 	call	0x148a	; 0x148a <fputc>
     dce:	ea 94       	dec	r14
     dd0:	8e 2d       	mov	r24, r14
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	08 17       	cp	r16, r24
     dd6:	19 07       	cpc	r17, r25
     dd8:	a8 f3       	brcs	.-22     	; 0xdc4 <vfprintf+0x194>
     dda:	0e c0       	rjmp	.+28     	; 0xdf8 <vfprintf+0x1c8>
     ddc:	f6 01       	movw	r30, r12
     dde:	f7 fc       	sbrc	r15, 7
     de0:	85 91       	lpm	r24, Z+
     de2:	f7 fe       	sbrs	r15, 7
     de4:	81 91       	ld	r24, Z+
     de6:	6f 01       	movw	r12, r30
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	b3 01       	movw	r22, r6
     dec:	0e 94 45 0a 	call	0x148a	; 0x148a <fputc>
     df0:	e1 10       	cpse	r14, r1
     df2:	ea 94       	dec	r14
     df4:	01 50       	subi	r16, 0x01	; 1
     df6:	10 40       	sbci	r17, 0x00	; 0
     df8:	01 15       	cp	r16, r1
     dfa:	11 05       	cpc	r17, r1
     dfc:	79 f7       	brne	.-34     	; 0xddc <vfprintf+0x1ac>
     dfe:	ea c0       	rjmp	.+468    	; 0xfd4 <vfprintf+0x3a4>
     e00:	94 36       	cpi	r25, 0x64	; 100
     e02:	11 f0       	breq	.+4      	; 0xe08 <vfprintf+0x1d8>
     e04:	99 36       	cpi	r25, 0x69	; 105
     e06:	69 f5       	brne	.+90     	; 0xe62 <vfprintf+0x232>
     e08:	f7 fe       	sbrs	r15, 7
     e0a:	08 c0       	rjmp	.+16     	; 0xe1c <vfprintf+0x1ec>
     e0c:	f5 01       	movw	r30, r10
     e0e:	20 81       	ld	r18, Z
     e10:	31 81       	ldd	r19, Z+1	; 0x01
     e12:	42 81       	ldd	r20, Z+2	; 0x02
     e14:	53 81       	ldd	r21, Z+3	; 0x03
     e16:	84 e0       	ldi	r24, 0x04	; 4
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0a c0       	rjmp	.+20     	; 0xe30 <vfprintf+0x200>
     e1c:	f5 01       	movw	r30, r10
     e1e:	80 81       	ld	r24, Z
     e20:	91 81       	ldd	r25, Z+1	; 0x01
     e22:	9c 01       	movw	r18, r24
     e24:	44 27       	eor	r20, r20
     e26:	37 fd       	sbrc	r19, 7
     e28:	40 95       	com	r20
     e2a:	54 2f       	mov	r21, r20
     e2c:	82 e0       	ldi	r24, 0x02	; 2
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	a8 0e       	add	r10, r24
     e32:	b9 1e       	adc	r11, r25
     e34:	9f e6       	ldi	r25, 0x6F	; 111
     e36:	f9 22       	and	r15, r25
     e38:	57 ff       	sbrs	r21, 7
     e3a:	09 c0       	rjmp	.+18     	; 0xe4e <vfprintf+0x21e>
     e3c:	50 95       	com	r21
     e3e:	40 95       	com	r20
     e40:	30 95       	com	r19
     e42:	21 95       	neg	r18
     e44:	3f 4f       	sbci	r19, 0xFF	; 255
     e46:	4f 4f       	sbci	r20, 0xFF	; 255
     e48:	5f 4f       	sbci	r21, 0xFF	; 255
     e4a:	e0 e8       	ldi	r30, 0x80	; 128
     e4c:	fe 2a       	or	r15, r30
     e4e:	ca 01       	movw	r24, r20
     e50:	b9 01       	movw	r22, r18
     e52:	a1 01       	movw	r20, r2
     e54:	2a e0       	ldi	r18, 0x0A	; 10
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__ultoa_invert>
     e5c:	d8 2e       	mov	r13, r24
     e5e:	d2 18       	sub	r13, r2
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <vfprintf+0x2b2>
     e62:	95 37       	cpi	r25, 0x75	; 117
     e64:	29 f4       	brne	.+10     	; 0xe70 <vfprintf+0x240>
     e66:	1f 2d       	mov	r17, r15
     e68:	1f 7e       	andi	r17, 0xEF	; 239
     e6a:	2a e0       	ldi	r18, 0x0A	; 10
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	1d c0       	rjmp	.+58     	; 0xeaa <vfprintf+0x27a>
     e70:	1f 2d       	mov	r17, r15
     e72:	19 7f       	andi	r17, 0xF9	; 249
     e74:	9f 36       	cpi	r25, 0x6F	; 111
     e76:	61 f0       	breq	.+24     	; 0xe90 <vfprintf+0x260>
     e78:	90 37       	cpi	r25, 0x70	; 112
     e7a:	20 f4       	brcc	.+8      	; 0xe84 <vfprintf+0x254>
     e7c:	98 35       	cpi	r25, 0x58	; 88
     e7e:	09 f0       	breq	.+2      	; 0xe82 <vfprintf+0x252>
     e80:	ac c0       	rjmp	.+344    	; 0xfda <vfprintf+0x3aa>
     e82:	0f c0       	rjmp	.+30     	; 0xea2 <vfprintf+0x272>
     e84:	90 37       	cpi	r25, 0x70	; 112
     e86:	39 f0       	breq	.+14     	; 0xe96 <vfprintf+0x266>
     e88:	98 37       	cpi	r25, 0x78	; 120
     e8a:	09 f0       	breq	.+2      	; 0xe8e <vfprintf+0x25e>
     e8c:	a6 c0       	rjmp	.+332    	; 0xfda <vfprintf+0x3aa>
     e8e:	04 c0       	rjmp	.+8      	; 0xe98 <vfprintf+0x268>
     e90:	28 e0       	ldi	r18, 0x08	; 8
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	0a c0       	rjmp	.+20     	; 0xeaa <vfprintf+0x27a>
     e96:	10 61       	ori	r17, 0x10	; 16
     e98:	14 fd       	sbrc	r17, 4
     e9a:	14 60       	ori	r17, 0x04	; 4
     e9c:	20 e1       	ldi	r18, 0x10	; 16
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	04 c0       	rjmp	.+8      	; 0xeaa <vfprintf+0x27a>
     ea2:	14 fd       	sbrc	r17, 4
     ea4:	16 60       	ori	r17, 0x06	; 6
     ea6:	20 e1       	ldi	r18, 0x10	; 16
     ea8:	32 e0       	ldi	r19, 0x02	; 2
     eaa:	17 ff       	sbrs	r17, 7
     eac:	08 c0       	rjmp	.+16     	; 0xebe <vfprintf+0x28e>
     eae:	f5 01       	movw	r30, r10
     eb0:	60 81       	ld	r22, Z
     eb2:	71 81       	ldd	r23, Z+1	; 0x01
     eb4:	82 81       	ldd	r24, Z+2	; 0x02
     eb6:	93 81       	ldd	r25, Z+3	; 0x03
     eb8:	44 e0       	ldi	r20, 0x04	; 4
     eba:	50 e0       	ldi	r21, 0x00	; 0
     ebc:	08 c0       	rjmp	.+16     	; 0xece <vfprintf+0x29e>
     ebe:	f5 01       	movw	r30, r10
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	bc 01       	movw	r22, r24
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	42 e0       	ldi	r20, 0x02	; 2
     ecc:	50 e0       	ldi	r21, 0x00	; 0
     ece:	a4 0e       	add	r10, r20
     ed0:	b5 1e       	adc	r11, r21
     ed2:	a1 01       	movw	r20, r2
     ed4:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <__ultoa_invert>
     ed8:	d8 2e       	mov	r13, r24
     eda:	d2 18       	sub	r13, r2
     edc:	8f e7       	ldi	r24, 0x7F	; 127
     ede:	f8 2e       	mov	r15, r24
     ee0:	f1 22       	and	r15, r17
     ee2:	f6 fe       	sbrs	r15, 6
     ee4:	0b c0       	rjmp	.+22     	; 0xefc <vfprintf+0x2cc>
     ee6:	5e ef       	ldi	r21, 0xFE	; 254
     ee8:	f5 22       	and	r15, r21
     eea:	d9 14       	cp	r13, r9
     eec:	38 f4       	brcc	.+14     	; 0xefc <vfprintf+0x2cc>
     eee:	f4 fe       	sbrs	r15, 4
     ef0:	07 c0       	rjmp	.+14     	; 0xf00 <vfprintf+0x2d0>
     ef2:	f2 fc       	sbrc	r15, 2
     ef4:	05 c0       	rjmp	.+10     	; 0xf00 <vfprintf+0x2d0>
     ef6:	8f ee       	ldi	r24, 0xEF	; 239
     ef8:	f8 22       	and	r15, r24
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <vfprintf+0x2d0>
     efc:	1d 2d       	mov	r17, r13
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <vfprintf+0x2d2>
     f00:	19 2d       	mov	r17, r9
     f02:	f4 fe       	sbrs	r15, 4
     f04:	0d c0       	rjmp	.+26     	; 0xf20 <vfprintf+0x2f0>
     f06:	fe 01       	movw	r30, r28
     f08:	ed 0d       	add	r30, r13
     f0a:	f1 1d       	adc	r31, r1
     f0c:	80 81       	ld	r24, Z
     f0e:	80 33       	cpi	r24, 0x30	; 48
     f10:	19 f4       	brne	.+6      	; 0xf18 <vfprintf+0x2e8>
     f12:	99 ee       	ldi	r25, 0xE9	; 233
     f14:	f9 22       	and	r15, r25
     f16:	08 c0       	rjmp	.+16     	; 0xf28 <vfprintf+0x2f8>
     f18:	1f 5f       	subi	r17, 0xFF	; 255
     f1a:	f2 fe       	sbrs	r15, 2
     f1c:	05 c0       	rjmp	.+10     	; 0xf28 <vfprintf+0x2f8>
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <vfprintf+0x2f6>
     f20:	8f 2d       	mov	r24, r15
     f22:	86 78       	andi	r24, 0x86	; 134
     f24:	09 f0       	breq	.+2      	; 0xf28 <vfprintf+0x2f8>
     f26:	1f 5f       	subi	r17, 0xFF	; 255
     f28:	0f 2d       	mov	r16, r15
     f2a:	f3 fc       	sbrc	r15, 3
     f2c:	14 c0       	rjmp	.+40     	; 0xf56 <vfprintf+0x326>
     f2e:	f0 fe       	sbrs	r15, 0
     f30:	0f c0       	rjmp	.+30     	; 0xf50 <vfprintf+0x320>
     f32:	1e 15       	cp	r17, r14
     f34:	10 f0       	brcs	.+4      	; 0xf3a <vfprintf+0x30a>
     f36:	9d 2c       	mov	r9, r13
     f38:	0b c0       	rjmp	.+22     	; 0xf50 <vfprintf+0x320>
     f3a:	9d 2c       	mov	r9, r13
     f3c:	9e 0c       	add	r9, r14
     f3e:	91 1a       	sub	r9, r17
     f40:	1e 2d       	mov	r17, r14
     f42:	06 c0       	rjmp	.+12     	; 0xf50 <vfprintf+0x320>
     f44:	80 e2       	ldi	r24, 0x20	; 32
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	b3 01       	movw	r22, r6
     f4a:	0e 94 45 0a 	call	0x148a	; 0x148a <fputc>
     f4e:	1f 5f       	subi	r17, 0xFF	; 255
     f50:	1e 15       	cp	r17, r14
     f52:	c0 f3       	brcs	.-16     	; 0xf44 <vfprintf+0x314>
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <vfprintf+0x32e>
     f56:	1e 15       	cp	r17, r14
     f58:	10 f4       	brcc	.+4      	; 0xf5e <vfprintf+0x32e>
     f5a:	e1 1a       	sub	r14, r17
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <vfprintf+0x330>
     f5e:	ee 24       	eor	r14, r14
     f60:	04 ff       	sbrs	r16, 4
     f62:	0f c0       	rjmp	.+30     	; 0xf82 <vfprintf+0x352>
     f64:	80 e3       	ldi	r24, 0x30	; 48
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	b3 01       	movw	r22, r6
     f6a:	0e 94 45 0a 	call	0x148a	; 0x148a <fputc>
     f6e:	02 ff       	sbrs	r16, 2
     f70:	1d c0       	rjmp	.+58     	; 0xfac <vfprintf+0x37c>
     f72:	01 fd       	sbrc	r16, 1
     f74:	03 c0       	rjmp	.+6      	; 0xf7c <vfprintf+0x34c>
     f76:	88 e7       	ldi	r24, 0x78	; 120
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e c0       	rjmp	.+28     	; 0xf98 <vfprintf+0x368>
     f7c:	88 e5       	ldi	r24, 0x58	; 88
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0b c0       	rjmp	.+22     	; 0xf98 <vfprintf+0x368>
     f82:	80 2f       	mov	r24, r16
     f84:	86 78       	andi	r24, 0x86	; 134
     f86:	91 f0       	breq	.+36     	; 0xfac <vfprintf+0x37c>
     f88:	01 ff       	sbrs	r16, 1
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <vfprintf+0x360>
     f8c:	8b e2       	ldi	r24, 0x2B	; 43
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <vfprintf+0x362>
     f90:	80 e2       	ldi	r24, 0x20	; 32
     f92:	f7 fc       	sbrc	r15, 7
     f94:	8d e2       	ldi	r24, 0x2D	; 45
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	b3 01       	movw	r22, r6
     f9a:	0e 94 45 0a 	call	0x148a	; 0x148a <fputc>
     f9e:	06 c0       	rjmp	.+12     	; 0xfac <vfprintf+0x37c>
     fa0:	80 e3       	ldi	r24, 0x30	; 48
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	b3 01       	movw	r22, r6
     fa6:	0e 94 45 0a 	call	0x148a	; 0x148a <fputc>
     faa:	9a 94       	dec	r9
     fac:	d9 14       	cp	r13, r9
     fae:	c0 f3       	brcs	.-16     	; 0xfa0 <vfprintf+0x370>
     fb0:	da 94       	dec	r13
     fb2:	f1 01       	movw	r30, r2
     fb4:	ed 0d       	add	r30, r13
     fb6:	f1 1d       	adc	r31, r1
     fb8:	80 81       	ld	r24, Z
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	b3 01       	movw	r22, r6
     fbe:	0e 94 45 0a 	call	0x148a	; 0x148a <fputc>
     fc2:	dd 20       	and	r13, r13
     fc4:	a9 f7       	brne	.-22     	; 0xfb0 <vfprintf+0x380>
     fc6:	06 c0       	rjmp	.+12     	; 0xfd4 <vfprintf+0x3a4>
     fc8:	80 e2       	ldi	r24, 0x20	; 32
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	b3 01       	movw	r22, r6
     fce:	0e 94 45 0a 	call	0x148a	; 0x148a <fputc>
     fd2:	ea 94       	dec	r14
     fd4:	ee 20       	and	r14, r14
     fd6:	c1 f7       	brne	.-16     	; 0xfc8 <vfprintf+0x398>
     fd8:	43 ce       	rjmp	.-890    	; 0xc60 <vfprintf+0x30>
     fda:	f3 01       	movw	r30, r6
     fdc:	66 81       	ldd	r22, Z+6	; 0x06
     fde:	77 81       	ldd	r23, Z+7	; 0x07
     fe0:	cb 01       	movw	r24, r22
     fe2:	2b 96       	adiw	r28, 0x0b	; 11
     fe4:	e2 e1       	ldi	r30, 0x12	; 18
     fe6:	0c 94 04 0c 	jmp	0x1808	; 0x1808 <__epilogue_restores__>

00000fea <dtoa_prf>:
     fea:	a9 e0       	ldi	r26, 0x09	; 9
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	eb ef       	ldi	r30, 0xFB	; 251
     ff0:	f7 e0       	ldi	r31, 0x07	; 7
     ff2:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <__prologue_saves__+0x8>
     ff6:	6a 01       	movw	r12, r20
     ff8:	12 2f       	mov	r17, r18
     ffa:	a0 2e       	mov	r10, r16
     ffc:	be 2c       	mov	r11, r14
     ffe:	2b e3       	ldi	r18, 0x3B	; 59
    1000:	20 17       	cp	r18, r16
    1002:	18 f4       	brcc	.+6      	; 0x100a <dtoa_prf+0x20>
    1004:	2c e3       	ldi	r18, 0x3C	; 60
    1006:	92 2e       	mov	r9, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <dtoa_prf+0x24>
    100a:	90 2e       	mov	r9, r16
    100c:	93 94       	inc	r9
    100e:	ae 01       	movw	r20, r28
    1010:	4f 5f       	subi	r20, 0xFF	; 255
    1012:	5f 4f       	sbci	r21, 0xFF	; 255
    1014:	27 e0       	ldi	r18, 0x07	; 7
    1016:	09 2d       	mov	r16, r9
    1018:	0e 94 57 09 	call	0x12ae	; 0x12ae <__ftoa_engine>
    101c:	bc 01       	movw	r22, r24
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	e8 2e       	mov	r14, r24
    1022:	ff 24       	eor	r15, r15
    1024:	c7 01       	movw	r24, r14
    1026:	89 70       	andi	r24, 0x09	; 9
    1028:	90 70       	andi	r25, 0x00	; 0
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	11 f4       	brne	.+4      	; 0x1032 <dtoa_prf+0x48>
    102e:	ad e2       	ldi	r26, 0x2D	; 45
    1030:	09 c0       	rjmp	.+18     	; 0x1044 <dtoa_prf+0x5a>
    1032:	b1 fe       	sbrs	r11, 1
    1034:	02 c0       	rjmp	.+4      	; 0x103a <dtoa_prf+0x50>
    1036:	ab e2       	ldi	r26, 0x2B	; 43
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <dtoa_prf+0x5a>
    103a:	b0 fc       	sbrc	r11, 0
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <dtoa_prf+0x58>
    103e:	a0 e0       	ldi	r26, 0x00	; 0
    1040:	01 c0       	rjmp	.+2      	; 0x1044 <dtoa_prf+0x5a>
    1042:	a0 e2       	ldi	r26, 0x20	; 32
    1044:	e3 fe       	sbrs	r14, 3
    1046:	3b c0       	rjmp	.+118    	; 0x10be <dtoa_prf+0xd4>
    1048:	aa 23       	and	r26, r26
    104a:	11 f4       	brne	.+4      	; 0x1050 <dtoa_prf+0x66>
    104c:	23 e0       	ldi	r18, 0x03	; 3
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <dtoa_prf+0x68>
    1050:	24 e0       	ldi	r18, 0x04	; 4
    1052:	21 17       	cp	r18, r17
    1054:	10 f0       	brcs	.+4      	; 0x105a <dtoa_prf+0x70>
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	02 c0       	rjmp	.+4      	; 0x105e <dtoa_prf+0x74>
    105a:	12 1b       	sub	r17, r18
    105c:	21 2f       	mov	r18, r17
    105e:	eb 2c       	mov	r14, r11
    1060:	b4 fe       	sbrs	r11, 4
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <dtoa_prf+0x7e>
    1064:	32 2f       	mov	r19, r18
    1066:	0a c0       	rjmp	.+20     	; 0x107c <dtoa_prf+0x92>
    1068:	f6 01       	movw	r30, r12
    106a:	32 2f       	mov	r19, r18
    106c:	80 e2       	ldi	r24, 0x20	; 32
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <dtoa_prf+0x8a>
    1070:	81 93       	st	Z+, r24
    1072:	31 50       	subi	r19, 0x01	; 1
    1074:	33 23       	and	r19, r19
    1076:	e1 f7       	brne	.-8      	; 0x1070 <dtoa_prf+0x86>
    1078:	c2 0e       	add	r12, r18
    107a:	d1 1c       	adc	r13, r1
    107c:	aa 23       	and	r26, r26
    107e:	19 f0       	breq	.+6      	; 0x1086 <dtoa_prf+0x9c>
    1080:	f6 01       	movw	r30, r12
    1082:	a1 93       	st	Z+, r26
    1084:	6f 01       	movw	r12, r30
    1086:	f6 01       	movw	r30, r12
    1088:	31 96       	adiw	r30, 0x01	; 1
    108a:	e2 fe       	sbrs	r14, 2
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <dtoa_prf+0xae>
    108e:	9e e4       	ldi	r25, 0x4E	; 78
    1090:	d6 01       	movw	r26, r12
    1092:	9c 93       	st	X, r25
    1094:	81 e4       	ldi	r24, 0x41	; 65
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <dtoa_prf+0xb6>
    1098:	9e e6       	ldi	r25, 0x6E	; 110
    109a:	d6 01       	movw	r26, r12
    109c:	9c 93       	st	X, r25
    109e:	81 e6       	ldi	r24, 0x61	; 97
    10a0:	11 96       	adiw	r26, 0x01	; 1
    10a2:	8c 93       	st	X, r24
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	32 96       	adiw	r30, 0x02	; 2
    10a8:	df 01       	movw	r26, r30
    10aa:	83 2f       	mov	r24, r19
    10ac:	90 e2       	ldi	r25, 0x20	; 32
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <dtoa_prf+0xca>
    10b0:	9d 93       	st	X+, r25
    10b2:	81 50       	subi	r24, 0x01	; 1
    10b4:	88 23       	and	r24, r24
    10b6:	e1 f7       	brne	.-8      	; 0x10b0 <dtoa_prf+0xc6>
    10b8:	e3 0f       	add	r30, r19
    10ba:	f1 1d       	adc	r31, r1
    10bc:	40 c0       	rjmp	.+128    	; 0x113e <dtoa_prf+0x154>
    10be:	e2 fe       	sbrs	r14, 2
    10c0:	42 c0       	rjmp	.+132    	; 0x1146 <dtoa_prf+0x15c>
    10c2:	aa 23       	and	r26, r26
    10c4:	11 f4       	brne	.+4      	; 0x10ca <dtoa_prf+0xe0>
    10c6:	23 e0       	ldi	r18, 0x03	; 3
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <dtoa_prf+0xe2>
    10ca:	24 e0       	ldi	r18, 0x04	; 4
    10cc:	21 17       	cp	r18, r17
    10ce:	10 f0       	brcs	.+4      	; 0x10d4 <dtoa_prf+0xea>
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <dtoa_prf+0xee>
    10d4:	12 1b       	sub	r17, r18
    10d6:	21 2f       	mov	r18, r17
    10d8:	eb 2c       	mov	r14, r11
    10da:	b4 fe       	sbrs	r11, 4
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <dtoa_prf+0xf8>
    10de:	92 2f       	mov	r25, r18
    10e0:	0a c0       	rjmp	.+20     	; 0x10f6 <dtoa_prf+0x10c>
    10e2:	f6 01       	movw	r30, r12
    10e4:	92 2f       	mov	r25, r18
    10e6:	80 e2       	ldi	r24, 0x20	; 32
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <dtoa_prf+0x104>
    10ea:	81 93       	st	Z+, r24
    10ec:	91 50       	subi	r25, 0x01	; 1
    10ee:	99 23       	and	r25, r25
    10f0:	e1 f7       	brne	.-8      	; 0x10ea <dtoa_prf+0x100>
    10f2:	c2 0e       	add	r12, r18
    10f4:	d1 1c       	adc	r13, r1
    10f6:	aa 23       	and	r26, r26
    10f8:	19 f0       	breq	.+6      	; 0x1100 <dtoa_prf+0x116>
    10fa:	f6 01       	movw	r30, r12
    10fc:	a1 93       	st	Z+, r26
    10fe:	6f 01       	movw	r12, r30
    1100:	f6 01       	movw	r30, r12
    1102:	31 96       	adiw	r30, 0x01	; 1
    1104:	e2 fe       	sbrs	r14, 2
    1106:	08 c0       	rjmp	.+16     	; 0x1118 <dtoa_prf+0x12e>
    1108:	89 e4       	ldi	r24, 0x49	; 73
    110a:	d6 01       	movw	r26, r12
    110c:	8c 93       	st	X, r24
    110e:	8e e4       	ldi	r24, 0x4E	; 78
    1110:	11 96       	adiw	r26, 0x01	; 1
    1112:	8c 93       	st	X, r24
    1114:	86 e4       	ldi	r24, 0x46	; 70
    1116:	07 c0       	rjmp	.+14     	; 0x1126 <dtoa_prf+0x13c>
    1118:	89 e6       	ldi	r24, 0x69	; 105
    111a:	d6 01       	movw	r26, r12
    111c:	8c 93       	st	X, r24
    111e:	8e e6       	ldi	r24, 0x6E	; 110
    1120:	11 96       	adiw	r26, 0x01	; 1
    1122:	8c 93       	st	X, r24
    1124:	86 e6       	ldi	r24, 0x66	; 102
    1126:	81 83       	std	Z+1, r24	; 0x01
    1128:	32 96       	adiw	r30, 0x02	; 2
    112a:	df 01       	movw	r26, r30
    112c:	89 2f       	mov	r24, r25
    112e:	20 e2       	ldi	r18, 0x20	; 32
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <dtoa_prf+0x14c>
    1132:	2d 93       	st	X+, r18
    1134:	81 50       	subi	r24, 0x01	; 1
    1136:	88 23       	and	r24, r24
    1138:	e1 f7       	brne	.-8      	; 0x1132 <dtoa_prf+0x148>
    113a:	e9 0f       	add	r30, r25
    113c:	f1 1d       	adc	r31, r1
    113e:	10 82       	st	Z, r1
    1140:	2e ef       	ldi	r18, 0xFE	; 254
    1142:	3f ef       	ldi	r19, 0xFF	; 255
    1144:	af c0       	rjmp	.+350    	; 0x12a4 <dtoa_prf+0x2ba>
    1146:	16 16       	cp	r1, r22
    1148:	17 06       	cpc	r1, r23
    114a:	1c f0       	brlt	.+6      	; 0x1152 <dtoa_prf+0x168>
    114c:	41 e0       	ldi	r20, 0x01	; 1
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	03 c0       	rjmp	.+6      	; 0x1158 <dtoa_prf+0x16e>
    1152:	ab 01       	movw	r20, r22
    1154:	4f 5f       	subi	r20, 0xFF	; 255
    1156:	5f 4f       	sbci	r21, 0xFF	; 255
    1158:	aa 20       	and	r10, r10
    115a:	19 f4       	brne	.+6      	; 0x1162 <dtoa_prf+0x178>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	03 c0       	rjmp	.+6      	; 0x1168 <dtoa_prf+0x17e>
    1162:	8a 2d       	mov	r24, r10
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	aa 23       	and	r26, r26
    116e:	11 f0       	breq	.+4      	; 0x1174 <dtoa_prf+0x18a>
    1170:	21 e0       	ldi	r18, 0x01	; 1
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	24 0f       	add	r18, r20
    1176:	35 1f       	adc	r19, r21
    1178:	28 0f       	add	r18, r24
    117a:	39 1f       	adc	r19, r25
    117c:	81 2f       	mov	r24, r17
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	28 17       	cp	r18, r24
    1182:	39 07       	cpc	r19, r25
    1184:	14 f0       	brlt	.+4      	; 0x118a <dtoa_prf+0x1a0>
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	02 c0       	rjmp	.+4      	; 0x118e <dtoa_prf+0x1a4>
    118a:	12 1b       	sub	r17, r18
    118c:	21 2f       	mov	r18, r17
    118e:	4b 2d       	mov	r20, r11
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	ca 01       	movw	r24, r20
    1194:	80 71       	andi	r24, 0x10	; 16
    1196:	90 70       	andi	r25, 0x00	; 0
    1198:	b4 fc       	sbrc	r11, 4
    119a:	0d c0       	rjmp	.+26     	; 0x11b6 <dtoa_prf+0x1cc>
    119c:	b3 fc       	sbrc	r11, 3
    119e:	0b c0       	rjmp	.+22     	; 0x11b6 <dtoa_prf+0x1cc>
    11a0:	f6 01       	movw	r30, r12
    11a2:	32 2f       	mov	r19, r18
    11a4:	40 e2       	ldi	r20, 0x20	; 32
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <dtoa_prf+0x1c2>
    11a8:	41 93       	st	Z+, r20
    11aa:	31 50       	subi	r19, 0x01	; 1
    11ac:	33 23       	and	r19, r19
    11ae:	e1 f7       	brne	.-8      	; 0x11a8 <dtoa_prf+0x1be>
    11b0:	c2 0e       	add	r12, r18
    11b2:	d1 1c       	adc	r13, r1
    11b4:	01 c0       	rjmp	.+2      	; 0x11b8 <dtoa_prf+0x1ce>
    11b6:	32 2f       	mov	r19, r18
    11b8:	aa 23       	and	r26, r26
    11ba:	19 f0       	breq	.+6      	; 0x11c2 <dtoa_prf+0x1d8>
    11bc:	f6 01       	movw	r30, r12
    11be:	a1 93       	st	Z+, r26
    11c0:	6f 01       	movw	r12, r30
    11c2:	89 2b       	or	r24, r25
    11c4:	11 f0       	breq	.+4      	; 0x11ca <dtoa_prf+0x1e0>
    11c6:	13 2f       	mov	r17, r19
    11c8:	0a c0       	rjmp	.+20     	; 0x11de <dtoa_prf+0x1f4>
    11ca:	f6 01       	movw	r30, r12
    11cc:	13 2f       	mov	r17, r19
    11ce:	80 e3       	ldi	r24, 0x30	; 48
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <dtoa_prf+0x1ec>
    11d2:	81 93       	st	Z+, r24
    11d4:	11 50       	subi	r17, 0x01	; 1
    11d6:	11 23       	and	r17, r17
    11d8:	e1 f7       	brne	.-8      	; 0x11d2 <dtoa_prf+0x1e8>
    11da:	c3 0e       	add	r12, r19
    11dc:	d1 1c       	adc	r13, r1
    11de:	09 2d       	mov	r16, r9
    11e0:	06 0f       	add	r16, r22
    11e2:	ba 80       	ldd	r11, Y+2	; 0x02
    11e4:	90 e1       	ldi	r25, 0x10	; 16
    11e6:	89 2e       	mov	r8, r25
    11e8:	91 2c       	mov	r9, r1
    11ea:	8e 20       	and	r8, r14
    11ec:	9f 20       	and	r9, r15
    11ee:	e4 fe       	sbrs	r14, 4
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <dtoa_prf+0x210>
    11f2:	f1 e3       	ldi	r31, 0x31	; 49
    11f4:	bf 16       	cp	r11, r31
    11f6:	09 f4       	brne	.+2      	; 0x11fa <dtoa_prf+0x210>
    11f8:	01 50       	subi	r16, 0x01	; 1
    11fa:	10 16       	cp	r1, r16
    11fc:	14 f0       	brlt	.+4      	; 0x1202 <dtoa_prf+0x218>
    11fe:	01 e0       	ldi	r16, 0x01	; 1
    1200:	03 c0       	rjmp	.+6      	; 0x1208 <dtoa_prf+0x21e>
    1202:	09 30       	cpi	r16, 0x09	; 9
    1204:	08 f0       	brcs	.+2      	; 0x1208 <dtoa_prf+0x21e>
    1206:	08 e0       	ldi	r16, 0x08	; 8
    1208:	9b 01       	movw	r18, r22
    120a:	77 ff       	sbrs	r23, 7
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <dtoa_prf+0x228>
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	cb 01       	movw	r24, r22
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	82 1b       	sub	r24, r18
    1218:	93 0b       	sbc	r25, r19
    121a:	fe 01       	movw	r30, r28
    121c:	31 96       	adiw	r30, 0x01	; 1
    121e:	e8 0f       	add	r30, r24
    1220:	f9 1f       	adc	r31, r25
    1222:	8e e2       	ldi	r24, 0x2E	; 46
    1224:	f8 2e       	mov	r15, r24
    1226:	3b 01       	movw	r6, r22
    1228:	60 1a       	sub	r6, r16
    122a:	71 08       	sbc	r7, r1
    122c:	8a 2d       	mov	r24, r10
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	44 27       	eor	r20, r20
    1232:	55 27       	eor	r21, r21
    1234:	48 1b       	sub	r20, r24
    1236:	59 0b       	sbc	r21, r25
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	2f 3f       	cpi	r18, 0xFF	; 255
    123c:	38 07       	cpc	r19, r24
    123e:	19 f4       	brne	.+6      	; 0x1246 <dtoa_prf+0x25c>
    1240:	d6 01       	movw	r26, r12
    1242:	fd 92       	st	X+, r15
    1244:	6d 01       	movw	r12, r26
    1246:	62 17       	cp	r22, r18
    1248:	73 07       	cpc	r23, r19
    124a:	2c f0       	brlt	.+10     	; 0x1256 <dtoa_prf+0x26c>
    124c:	62 16       	cp	r6, r18
    124e:	73 06       	cpc	r7, r19
    1250:	14 f4       	brge	.+4      	; 0x1256 <dtoa_prf+0x26c>
    1252:	80 81       	ld	r24, Z
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <dtoa_prf+0x26e>
    1256:	80 e3       	ldi	r24, 0x30	; 48
    1258:	21 50       	subi	r18, 0x01	; 1
    125a:	30 40       	sbci	r19, 0x00	; 0
    125c:	31 96       	adiw	r30, 0x01	; 1
    125e:	24 17       	cp	r18, r20
    1260:	35 07       	cpc	r19, r21
    1262:	24 f0       	brlt	.+8      	; 0x126c <dtoa_prf+0x282>
    1264:	d6 01       	movw	r26, r12
    1266:	8d 93       	st	X+, r24
    1268:	6d 01       	movw	r12, r26
    126a:	e6 cf       	rjmp	.-52     	; 0x1238 <dtoa_prf+0x24e>
    126c:	26 17       	cp	r18, r22
    126e:	37 07       	cpc	r19, r23
    1270:	49 f4       	brne	.+18     	; 0x1284 <dtoa_prf+0x29a>
    1272:	b5 e3       	ldi	r27, 0x35	; 53
    1274:	bb 15       	cp	r27, r11
    1276:	28 f0       	brcs	.+10     	; 0x1282 <dtoa_prf+0x298>
    1278:	bb 16       	cp	r11, r27
    127a:	21 f4       	brne	.+8      	; 0x1284 <dtoa_prf+0x29a>
    127c:	81 14       	cp	r8, r1
    127e:	91 04       	cpc	r9, r1
    1280:	09 f4       	brne	.+2      	; 0x1284 <dtoa_prf+0x29a>
    1282:	81 e3       	ldi	r24, 0x31	; 49
    1284:	f6 01       	movw	r30, r12
    1286:	81 93       	st	Z+, r24
    1288:	d6 01       	movw	r26, r12
    128a:	81 2f       	mov	r24, r17
    128c:	90 e2       	ldi	r25, 0x20	; 32
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <dtoa_prf+0x2aa>
    1290:	9c 93       	st	X, r25
    1292:	81 50       	subi	r24, 0x01	; 1
    1294:	11 96       	adiw	r26, 0x01	; 1
    1296:	88 23       	and	r24, r24
    1298:	d9 f7       	brne	.-10     	; 0x1290 <dtoa_prf+0x2a6>
    129a:	e1 0f       	add	r30, r17
    129c:	f1 1d       	adc	r31, r1
    129e:	10 82       	st	Z, r1
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	c9 01       	movw	r24, r18
    12a6:	29 96       	adiw	r28, 0x09	; 9
    12a8:	ee e0       	ldi	r30, 0x0E	; 14
    12aa:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__epilogue_restores__+0x8>

000012ae <__ftoa_engine>:
    12ae:	28 30       	cpi	r18, 0x08	; 8
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <__ftoa_engine+0x6>
    12b2:	27 e0       	ldi	r18, 0x07	; 7
    12b4:	33 27       	eor	r19, r19
    12b6:	da 01       	movw	r26, r20
    12b8:	99 0f       	add	r25, r25
    12ba:	31 1d       	adc	r19, r1
    12bc:	87 fd       	sbrc	r24, 7
    12be:	91 60       	ori	r25, 0x01	; 1
    12c0:	00 96       	adiw	r24, 0x00	; 0
    12c2:	61 05       	cpc	r22, r1
    12c4:	71 05       	cpc	r23, r1
    12c6:	39 f4       	brne	.+14     	; 0x12d6 <__ftoa_engine+0x28>
    12c8:	32 60       	ori	r19, 0x02	; 2
    12ca:	2e 5f       	subi	r18, 0xFE	; 254
    12cc:	3d 93       	st	X+, r19
    12ce:	30 e3       	ldi	r19, 0x30	; 48
    12d0:	2a 95       	dec	r18
    12d2:	e1 f7       	brne	.-8      	; 0x12cc <__ftoa_engine+0x1e>
    12d4:	08 95       	ret
    12d6:	9f 3f       	cpi	r25, 0xFF	; 255
    12d8:	30 f0       	brcs	.+12     	; 0x12e6 <__ftoa_engine+0x38>
    12da:	80 38       	cpi	r24, 0x80	; 128
    12dc:	71 05       	cpc	r23, r1
    12de:	61 05       	cpc	r22, r1
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <__ftoa_engine+0x36>
    12e2:	3c 5f       	subi	r19, 0xFC	; 252
    12e4:	3c 5f       	subi	r19, 0xFC	; 252
    12e6:	3d 93       	st	X+, r19
    12e8:	91 30       	cpi	r25, 0x01	; 1
    12ea:	08 f0       	brcs	.+2      	; 0x12ee <__ftoa_engine+0x40>
    12ec:	80 68       	ori	r24, 0x80	; 128
    12ee:	91 1d       	adc	r25, r1
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	1f 93       	push	r17
    12f6:	0f 93       	push	r16
    12f8:	ff 92       	push	r15
    12fa:	ef 92       	push	r14
    12fc:	19 2f       	mov	r17, r25
    12fe:	98 7f       	andi	r25, 0xF8	; 248
    1300:	96 95       	lsr	r25
    1302:	e9 2f       	mov	r30, r25
    1304:	96 95       	lsr	r25
    1306:	96 95       	lsr	r25
    1308:	e9 0f       	add	r30, r25
    130a:	ff 27       	eor	r31, r31
    130c:	e0 5d       	subi	r30, 0xD0	; 208
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	99 27       	eor	r25, r25
    1312:	33 27       	eor	r19, r19
    1314:	ee 24       	eor	r14, r14
    1316:	ff 24       	eor	r15, r15
    1318:	a7 01       	movw	r20, r14
    131a:	e7 01       	movw	r28, r14
    131c:	05 90       	lpm	r0, Z+
    131e:	08 94       	sec
    1320:	07 94       	ror	r0
    1322:	28 f4       	brcc	.+10     	; 0x132e <__ftoa_engine+0x80>
    1324:	36 0f       	add	r19, r22
    1326:	e7 1e       	adc	r14, r23
    1328:	f8 1e       	adc	r15, r24
    132a:	49 1f       	adc	r20, r25
    132c:	51 1d       	adc	r21, r1
    132e:	66 0f       	add	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	88 1f       	adc	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	06 94       	lsr	r0
    1338:	a1 f7       	brne	.-24     	; 0x1322 <__ftoa_engine+0x74>
    133a:	05 90       	lpm	r0, Z+
    133c:	07 94       	ror	r0
    133e:	28 f4       	brcc	.+10     	; 0x134a <__ftoa_engine+0x9c>
    1340:	e7 0e       	add	r14, r23
    1342:	f8 1e       	adc	r15, r24
    1344:	49 1f       	adc	r20, r25
    1346:	56 1f       	adc	r21, r22
    1348:	c1 1d       	adc	r28, r1
    134a:	77 0f       	add	r23, r23
    134c:	88 1f       	adc	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	66 1f       	adc	r22, r22
    1352:	06 94       	lsr	r0
    1354:	a1 f7       	brne	.-24     	; 0x133e <__ftoa_engine+0x90>
    1356:	05 90       	lpm	r0, Z+
    1358:	07 94       	ror	r0
    135a:	28 f4       	brcc	.+10     	; 0x1366 <__ftoa_engine+0xb8>
    135c:	f8 0e       	add	r15, r24
    135e:	49 1f       	adc	r20, r25
    1360:	56 1f       	adc	r21, r22
    1362:	c7 1f       	adc	r28, r23
    1364:	d1 1d       	adc	r29, r1
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	66 1f       	adc	r22, r22
    136c:	77 1f       	adc	r23, r23
    136e:	06 94       	lsr	r0
    1370:	a1 f7       	brne	.-24     	; 0x135a <__ftoa_engine+0xac>
    1372:	05 90       	lpm	r0, Z+
    1374:	07 94       	ror	r0
    1376:	20 f4       	brcc	.+8      	; 0x1380 <__ftoa_engine+0xd2>
    1378:	49 0f       	add	r20, r25
    137a:	56 1f       	adc	r21, r22
    137c:	c7 1f       	adc	r28, r23
    137e:	d8 1f       	adc	r29, r24
    1380:	99 0f       	add	r25, r25
    1382:	66 1f       	adc	r22, r22
    1384:	77 1f       	adc	r23, r23
    1386:	88 1f       	adc	r24, r24
    1388:	06 94       	lsr	r0
    138a:	a9 f7       	brne	.-22     	; 0x1376 <__ftoa_engine+0xc8>
    138c:	84 91       	lpm	r24, Z+
    138e:	10 95       	com	r17
    1390:	17 70       	andi	r17, 0x07	; 7
    1392:	41 f0       	breq	.+16     	; 0x13a4 <__ftoa_engine+0xf6>
    1394:	d6 95       	lsr	r29
    1396:	c7 95       	ror	r28
    1398:	57 95       	ror	r21
    139a:	47 95       	ror	r20
    139c:	f7 94       	ror	r15
    139e:	e7 94       	ror	r14
    13a0:	1a 95       	dec	r17
    13a2:	c1 f7       	brne	.-16     	; 0x1394 <__ftoa_engine+0xe6>
    13a4:	e6 ed       	ldi	r30, 0xD6	; 214
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	68 94       	set
    13aa:	15 90       	lpm	r1, Z+
    13ac:	15 91       	lpm	r17, Z+
    13ae:	35 91       	lpm	r19, Z+
    13b0:	65 91       	lpm	r22, Z+
    13b2:	95 91       	lpm	r25, Z+
    13b4:	05 90       	lpm	r0, Z+
    13b6:	7f e2       	ldi	r23, 0x2F	; 47
    13b8:	73 95       	inc	r23
    13ba:	e1 18       	sub	r14, r1
    13bc:	f1 0a       	sbc	r15, r17
    13be:	43 0b       	sbc	r20, r19
    13c0:	56 0b       	sbc	r21, r22
    13c2:	c9 0b       	sbc	r28, r25
    13c4:	d0 09       	sbc	r29, r0
    13c6:	c0 f7       	brcc	.-16     	; 0x13b8 <__ftoa_engine+0x10a>
    13c8:	e1 0c       	add	r14, r1
    13ca:	f1 1e       	adc	r15, r17
    13cc:	43 1f       	adc	r20, r19
    13ce:	56 1f       	adc	r21, r22
    13d0:	c9 1f       	adc	r28, r25
    13d2:	d0 1d       	adc	r29, r0
    13d4:	7e f4       	brtc	.+30     	; 0x13f4 <__ftoa_engine+0x146>
    13d6:	70 33       	cpi	r23, 0x30	; 48
    13d8:	11 f4       	brne	.+4      	; 0x13de <__ftoa_engine+0x130>
    13da:	8a 95       	dec	r24
    13dc:	e6 cf       	rjmp	.-52     	; 0x13aa <__ftoa_engine+0xfc>
    13de:	e8 94       	clt
    13e0:	01 50       	subi	r16, 0x01	; 1
    13e2:	30 f0       	brcs	.+12     	; 0x13f0 <__ftoa_engine+0x142>
    13e4:	08 0f       	add	r16, r24
    13e6:	0a f4       	brpl	.+2      	; 0x13ea <__ftoa_engine+0x13c>
    13e8:	00 27       	eor	r16, r16
    13ea:	02 17       	cp	r16, r18
    13ec:	08 f4       	brcc	.+2      	; 0x13f0 <__ftoa_engine+0x142>
    13ee:	20 2f       	mov	r18, r16
    13f0:	23 95       	inc	r18
    13f2:	02 2f       	mov	r16, r18
    13f4:	7a 33       	cpi	r23, 0x3A	; 58
    13f6:	28 f0       	brcs	.+10     	; 0x1402 <__ftoa_engine+0x154>
    13f8:	79 e3       	ldi	r23, 0x39	; 57
    13fa:	7d 93       	st	X+, r23
    13fc:	2a 95       	dec	r18
    13fe:	e9 f7       	brne	.-6      	; 0x13fa <__ftoa_engine+0x14c>
    1400:	10 c0       	rjmp	.+32     	; 0x1422 <__ftoa_engine+0x174>
    1402:	7d 93       	st	X+, r23
    1404:	2a 95       	dec	r18
    1406:	89 f6       	brne	.-94     	; 0x13aa <__ftoa_engine+0xfc>
    1408:	06 94       	lsr	r0
    140a:	97 95       	ror	r25
    140c:	67 95       	ror	r22
    140e:	37 95       	ror	r19
    1410:	17 95       	ror	r17
    1412:	17 94       	ror	r1
    1414:	e1 18       	sub	r14, r1
    1416:	f1 0a       	sbc	r15, r17
    1418:	43 0b       	sbc	r20, r19
    141a:	56 0b       	sbc	r21, r22
    141c:	c9 0b       	sbc	r28, r25
    141e:	d0 09       	sbc	r29, r0
    1420:	98 f0       	brcs	.+38     	; 0x1448 <__ftoa_engine+0x19a>
    1422:	23 95       	inc	r18
    1424:	7e 91       	ld	r23, -X
    1426:	73 95       	inc	r23
    1428:	7a 33       	cpi	r23, 0x3A	; 58
    142a:	08 f0       	brcs	.+2      	; 0x142e <__ftoa_engine+0x180>
    142c:	70 e3       	ldi	r23, 0x30	; 48
    142e:	7c 93       	st	X, r23
    1430:	20 13       	cpse	r18, r16
    1432:	b8 f7       	brcc	.-18     	; 0x1422 <__ftoa_engine+0x174>
    1434:	7e 91       	ld	r23, -X
    1436:	70 61       	ori	r23, 0x10	; 16
    1438:	7d 93       	st	X+, r23
    143a:	30 f0       	brcs	.+12     	; 0x1448 <__ftoa_engine+0x19a>
    143c:	83 95       	inc	r24
    143e:	71 e3       	ldi	r23, 0x31	; 49
    1440:	7d 93       	st	X+, r23
    1442:	70 e3       	ldi	r23, 0x30	; 48
    1444:	2a 95       	dec	r18
    1446:	e1 f7       	brne	.-8      	; 0x1440 <__ftoa_engine+0x192>
    1448:	11 24       	eor	r1, r1
    144a:	ef 90       	pop	r14
    144c:	ff 90       	pop	r15
    144e:	0f 91       	pop	r16
    1450:	1f 91       	pop	r17
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	99 27       	eor	r25, r25
    1458:	87 fd       	sbrc	r24, 7
    145a:	90 95       	com	r25
    145c:	08 95       	ret

0000145e <strnlen_P>:
    145e:	fc 01       	movw	r30, r24
    1460:	05 90       	lpm	r0, Z+
    1462:	61 50       	subi	r22, 0x01	; 1
    1464:	70 40       	sbci	r23, 0x00	; 0
    1466:	01 10       	cpse	r0, r1
    1468:	d8 f7       	brcc	.-10     	; 0x1460 <strnlen_P+0x2>
    146a:	80 95       	com	r24
    146c:	90 95       	com	r25
    146e:	8e 0f       	add	r24, r30
    1470:	9f 1f       	adc	r25, r31
    1472:	08 95       	ret

00001474 <strnlen>:
    1474:	fc 01       	movw	r30, r24
    1476:	61 50       	subi	r22, 0x01	; 1
    1478:	70 40       	sbci	r23, 0x00	; 0
    147a:	01 90       	ld	r0, Z+
    147c:	01 10       	cpse	r0, r1
    147e:	d8 f7       	brcc	.-10     	; 0x1476 <strnlen+0x2>
    1480:	80 95       	com	r24
    1482:	90 95       	com	r25
    1484:	8e 0f       	add	r24, r30
    1486:	9f 1f       	adc	r25, r31
    1488:	08 95       	ret

0000148a <fputc>:
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	8c 01       	movw	r16, r24
    1494:	eb 01       	movw	r28, r22
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	81 ff       	sbrs	r24, 1
    149a:	1b c0       	rjmp	.+54     	; 0x14d2 <fputc+0x48>
    149c:	82 ff       	sbrs	r24, 2
    149e:	0d c0       	rjmp	.+26     	; 0x14ba <fputc+0x30>
    14a0:	2e 81       	ldd	r18, Y+6	; 0x06
    14a2:	3f 81       	ldd	r19, Y+7	; 0x07
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	9d 81       	ldd	r25, Y+5	; 0x05
    14a8:	28 17       	cp	r18, r24
    14aa:	39 07       	cpc	r19, r25
    14ac:	64 f4       	brge	.+24     	; 0x14c6 <fputc+0x3c>
    14ae:	e8 81       	ld	r30, Y
    14b0:	f9 81       	ldd	r31, Y+1	; 0x01
    14b2:	01 93       	st	Z+, r16
    14b4:	f9 83       	std	Y+1, r31	; 0x01
    14b6:	e8 83       	st	Y, r30
    14b8:	06 c0       	rjmp	.+12     	; 0x14c6 <fputc+0x3c>
    14ba:	e8 85       	ldd	r30, Y+8	; 0x08
    14bc:	f9 85       	ldd	r31, Y+9	; 0x09
    14be:	80 2f       	mov	r24, r16
    14c0:	09 95       	icall
    14c2:	89 2b       	or	r24, r25
    14c4:	31 f4       	brne	.+12     	; 0x14d2 <fputc+0x48>
    14c6:	8e 81       	ldd	r24, Y+6	; 0x06
    14c8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ca:	01 96       	adiw	r24, 0x01	; 1
    14cc:	9f 83       	std	Y+7, r25	; 0x07
    14ce:	8e 83       	std	Y+6, r24	; 0x06
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <fputc+0x4c>
    14d2:	0f ef       	ldi	r16, 0xFF	; 255
    14d4:	1f ef       	ldi	r17, 0xFF	; 255
    14d6:	c8 01       	movw	r24, r16
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	08 95       	ret

000014e2 <__ultoa_invert>:
    14e2:	fa 01       	movw	r30, r20
    14e4:	aa 27       	eor	r26, r26
    14e6:	28 30       	cpi	r18, 0x08	; 8
    14e8:	51 f1       	breq	.+84     	; 0x153e <__ultoa_invert+0x5c>
    14ea:	20 31       	cpi	r18, 0x10	; 16
    14ec:	81 f1       	breq	.+96     	; 0x154e <__ultoa_invert+0x6c>
    14ee:	e8 94       	clt
    14f0:	6f 93       	push	r22
    14f2:	6e 7f       	andi	r22, 0xFE	; 254
    14f4:	6e 5f       	subi	r22, 0xFE	; 254
    14f6:	7f 4f       	sbci	r23, 0xFF	; 255
    14f8:	8f 4f       	sbci	r24, 0xFF	; 255
    14fa:	9f 4f       	sbci	r25, 0xFF	; 255
    14fc:	af 4f       	sbci	r26, 0xFF	; 255
    14fe:	b1 e0       	ldi	r27, 0x01	; 1
    1500:	3e d0       	rcall	.+124    	; 0x157e <__ultoa_invert+0x9c>
    1502:	b4 e0       	ldi	r27, 0x04	; 4
    1504:	3c d0       	rcall	.+120    	; 0x157e <__ultoa_invert+0x9c>
    1506:	67 0f       	add	r22, r23
    1508:	78 1f       	adc	r23, r24
    150a:	89 1f       	adc	r24, r25
    150c:	9a 1f       	adc	r25, r26
    150e:	a1 1d       	adc	r26, r1
    1510:	68 0f       	add	r22, r24
    1512:	79 1f       	adc	r23, r25
    1514:	8a 1f       	adc	r24, r26
    1516:	91 1d       	adc	r25, r1
    1518:	a1 1d       	adc	r26, r1
    151a:	6a 0f       	add	r22, r26
    151c:	71 1d       	adc	r23, r1
    151e:	81 1d       	adc	r24, r1
    1520:	91 1d       	adc	r25, r1
    1522:	a1 1d       	adc	r26, r1
    1524:	20 d0       	rcall	.+64     	; 0x1566 <__ultoa_invert+0x84>
    1526:	09 f4       	brne	.+2      	; 0x152a <__ultoa_invert+0x48>
    1528:	68 94       	set
    152a:	3f 91       	pop	r19
    152c:	2a e0       	ldi	r18, 0x0A	; 10
    152e:	26 9f       	mul	r18, r22
    1530:	11 24       	eor	r1, r1
    1532:	30 19       	sub	r19, r0
    1534:	30 5d       	subi	r19, 0xD0	; 208
    1536:	31 93       	st	Z+, r19
    1538:	de f6       	brtc	.-74     	; 0x14f0 <__ultoa_invert+0xe>
    153a:	cf 01       	movw	r24, r30
    153c:	08 95       	ret
    153e:	46 2f       	mov	r20, r22
    1540:	47 70       	andi	r20, 0x07	; 7
    1542:	40 5d       	subi	r20, 0xD0	; 208
    1544:	41 93       	st	Z+, r20
    1546:	b3 e0       	ldi	r27, 0x03	; 3
    1548:	0f d0       	rcall	.+30     	; 0x1568 <__ultoa_invert+0x86>
    154a:	c9 f7       	brne	.-14     	; 0x153e <__ultoa_invert+0x5c>
    154c:	f6 cf       	rjmp	.-20     	; 0x153a <__ultoa_invert+0x58>
    154e:	46 2f       	mov	r20, r22
    1550:	4f 70       	andi	r20, 0x0F	; 15
    1552:	40 5d       	subi	r20, 0xD0	; 208
    1554:	4a 33       	cpi	r20, 0x3A	; 58
    1556:	18 f0       	brcs	.+6      	; 0x155e <__ultoa_invert+0x7c>
    1558:	49 5d       	subi	r20, 0xD9	; 217
    155a:	31 fd       	sbrc	r19, 1
    155c:	40 52       	subi	r20, 0x20	; 32
    155e:	41 93       	st	Z+, r20
    1560:	02 d0       	rcall	.+4      	; 0x1566 <__ultoa_invert+0x84>
    1562:	a9 f7       	brne	.-22     	; 0x154e <__ultoa_invert+0x6c>
    1564:	ea cf       	rjmp	.-44     	; 0x153a <__ultoa_invert+0x58>
    1566:	b4 e0       	ldi	r27, 0x04	; 4
    1568:	a6 95       	lsr	r26
    156a:	97 95       	ror	r25
    156c:	87 95       	ror	r24
    156e:	77 95       	ror	r23
    1570:	67 95       	ror	r22
    1572:	ba 95       	dec	r27
    1574:	c9 f7       	brne	.-14     	; 0x1568 <__ultoa_invert+0x86>
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	61 05       	cpc	r22, r1
    157a:	71 05       	cpc	r23, r1
    157c:	08 95       	ret
    157e:	9b 01       	movw	r18, r22
    1580:	ac 01       	movw	r20, r24
    1582:	0a 2e       	mov	r0, r26
    1584:	06 94       	lsr	r0
    1586:	57 95       	ror	r21
    1588:	47 95       	ror	r20
    158a:	37 95       	ror	r19
    158c:	27 95       	ror	r18
    158e:	ba 95       	dec	r27
    1590:	c9 f7       	brne	.-14     	; 0x1584 <__ultoa_invert+0xa2>
    1592:	62 0f       	add	r22, r18
    1594:	73 1f       	adc	r23, r19
    1596:	84 1f       	adc	r24, r20
    1598:	95 1f       	adc	r25, r21
    159a:	a0 1d       	adc	r26, r0
    159c:	08 95       	ret
    159e:	19 f4       	brne	.+6      	; 0x15a6 <__ultoa_invert+0xc4>
    15a0:	0e f0       	brts	.+2      	; 0x15a4 <__ultoa_invert+0xc2>
    15a2:	46 ca       	rjmp	.-2932   	; 0xa30 <__fp_inf>
    15a4:	8f ca       	rjmp	.-2786   	; 0xac4 <__fp_zero>
    15a6:	4a ca       	rjmp	.-2924   	; 0xa3c <__fp_nan>

000015a8 <exp>:
    15a8:	73 da       	rcall	.-2842   	; 0xa90 <__fp_splitA>
    15aa:	c8 f3       	brcs	.-14     	; 0x159e <__ultoa_invert+0xbc>
    15ac:	96 38       	cpi	r25, 0x86	; 134
    15ae:	c0 f7       	brcc	.-16     	; 0x15a0 <__ultoa_invert+0xbe>
    15b0:	07 f8       	bld	r0, 7
    15b2:	0f 92       	push	r0
    15b4:	e8 94       	clt
    15b6:	2b e3       	ldi	r18, 0x3B	; 59
    15b8:	3a ea       	ldi	r19, 0xAA	; 170
    15ba:	48 eb       	ldi	r20, 0xB8	; 184
    15bc:	5f e7       	ldi	r21, 0x7F	; 127
    15be:	97 da       	rcall	.-2770   	; 0xaee <__mulsf3_pse>
    15c0:	0f 92       	push	r0
    15c2:	0f 92       	push	r0
    15c4:	0f 92       	push	r0
    15c6:	4d b7       	in	r20, 0x3d	; 61
    15c8:	5e b7       	in	r21, 0x3e	; 62
    15ca:	0f 92       	push	r0
    15cc:	c0 d0       	rcall	.+384    	; 0x174e <modf>
    15ce:	e4 e5       	ldi	r30, 0x54	; 84
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	16 d0       	rcall	.+44     	; 0x1600 <__fp_powser>
    15d4:	4f 91       	pop	r20
    15d6:	5f 91       	pop	r21
    15d8:	ef 91       	pop	r30
    15da:	ff 91       	pop	r31
    15dc:	e5 95       	asr	r30
    15de:	ee 1f       	adc	r30, r30
    15e0:	ff 1f       	adc	r31, r31
    15e2:	49 f0       	breq	.+18     	; 0x15f6 <exp+0x4e>
    15e4:	fe 57       	subi	r31, 0x7E	; 126
    15e6:	e0 68       	ori	r30, 0x80	; 128
    15e8:	44 27       	eor	r20, r20
    15ea:	ee 0f       	add	r30, r30
    15ec:	44 1f       	adc	r20, r20
    15ee:	fa 95       	dec	r31
    15f0:	e1 f7       	brne	.-8      	; 0x15ea <exp+0x42>
    15f2:	41 95       	neg	r20
    15f4:	55 0b       	sbc	r21, r21
    15f6:	32 d0       	rcall	.+100    	; 0x165c <ldexp>
    15f8:	0f 90       	pop	r0
    15fa:	07 fe       	sbrs	r0, 7
    15fc:	26 c0       	rjmp	.+76     	; 0x164a <inverse>
    15fe:	08 95       	ret

00001600 <__fp_powser>:
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	1f 93       	push	r17
    1606:	0f 93       	push	r16
    1608:	ff 92       	push	r15
    160a:	ef 92       	push	r14
    160c:	df 92       	push	r13
    160e:	7b 01       	movw	r14, r22
    1610:	8c 01       	movw	r16, r24
    1612:	68 94       	set
    1614:	05 c0       	rjmp	.+10     	; 0x1620 <__fp_powser+0x20>
    1616:	da 2e       	mov	r13, r26
    1618:	ef 01       	movw	r28, r30
    161a:	67 da       	rcall	.-2866   	; 0xaea <__mulsf3x>
    161c:	fe 01       	movw	r30, r28
    161e:	e8 94       	clt
    1620:	a5 91       	lpm	r26, Z+
    1622:	25 91       	lpm	r18, Z+
    1624:	35 91       	lpm	r19, Z+
    1626:	45 91       	lpm	r20, Z+
    1628:	55 91       	lpm	r21, Z+
    162a:	ae f3       	brts	.-22     	; 0x1616 <__fp_powser+0x16>
    162c:	ef 01       	movw	r28, r30
    162e:	dc d8       	rcall	.-3656   	; 0x7e8 <__addsf3x>
    1630:	fe 01       	movw	r30, r28
    1632:	97 01       	movw	r18, r14
    1634:	a8 01       	movw	r20, r16
    1636:	da 94       	dec	r13
    1638:	79 f7       	brne	.-34     	; 0x1618 <__fp_powser+0x18>
    163a:	df 90       	pop	r13
    163c:	ef 90       	pop	r14
    163e:	ff 90       	pop	r15
    1640:	0f 91       	pop	r16
    1642:	1f 91       	pop	r17
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <inverse>:
    164a:	9b 01       	movw	r18, r22
    164c:	ac 01       	movw	r20, r24
    164e:	60 e0       	ldi	r22, 0x00	; 0
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	80 e8       	ldi	r24, 0x80	; 128
    1654:	9f e3       	ldi	r25, 0x3F	; 63
    1656:	1b c9       	rjmp	.-3530   	; 0x88e <__divsf3>
    1658:	eb c9       	rjmp	.-3114   	; 0xa30 <__fp_inf>
    165a:	ac c0       	rjmp	.+344    	; 0x17b4 <__fp_mpack>

0000165c <ldexp>:
    165c:	19 da       	rcall	.-3022   	; 0xa90 <__fp_splitA>
    165e:	e8 f3       	brcs	.-6      	; 0x165a <inverse+0x10>
    1660:	99 23       	and	r25, r25
    1662:	d9 f3       	breq	.-10     	; 0x165a <inverse+0x10>
    1664:	94 0f       	add	r25, r20
    1666:	51 1d       	adc	r21, r1
    1668:	bb f3       	brvs	.-18     	; 0x1658 <inverse+0xe>
    166a:	91 50       	subi	r25, 0x01	; 1
    166c:	50 40       	sbci	r21, 0x00	; 0
    166e:	94 f0       	brlt	.+36     	; 0x1694 <ldexp+0x38>
    1670:	59 f0       	breq	.+22     	; 0x1688 <ldexp+0x2c>
    1672:	88 23       	and	r24, r24
    1674:	32 f0       	brmi	.+12     	; 0x1682 <ldexp+0x26>
    1676:	66 0f       	add	r22, r22
    1678:	77 1f       	adc	r23, r23
    167a:	88 1f       	adc	r24, r24
    167c:	91 50       	subi	r25, 0x01	; 1
    167e:	50 40       	sbci	r21, 0x00	; 0
    1680:	c1 f7       	brne	.-16     	; 0x1672 <ldexp+0x16>
    1682:	9e 3f       	cpi	r25, 0xFE	; 254
    1684:	51 05       	cpc	r21, r1
    1686:	44 f7       	brge	.-48     	; 0x1658 <inverse+0xe>
    1688:	88 0f       	add	r24, r24
    168a:	91 1d       	adc	r25, r1
    168c:	96 95       	lsr	r25
    168e:	87 95       	ror	r24
    1690:	97 f9       	bld	r25, 7
    1692:	08 95       	ret
    1694:	5f 3f       	cpi	r21, 0xFF	; 255
    1696:	ac f0       	brlt	.+42     	; 0x16c2 <ldexp+0x66>
    1698:	98 3e       	cpi	r25, 0xE8	; 232
    169a:	9c f0       	brlt	.+38     	; 0x16c2 <ldexp+0x66>
    169c:	bb 27       	eor	r27, r27
    169e:	86 95       	lsr	r24
    16a0:	77 95       	ror	r23
    16a2:	67 95       	ror	r22
    16a4:	b7 95       	ror	r27
    16a6:	08 f4       	brcc	.+2      	; 0x16aa <ldexp+0x4e>
    16a8:	b1 60       	ori	r27, 0x01	; 1
    16aa:	93 95       	inc	r25
    16ac:	c1 f7       	brne	.-16     	; 0x169e <ldexp+0x42>
    16ae:	bb 0f       	add	r27, r27
    16b0:	58 f7       	brcc	.-42     	; 0x1688 <ldexp+0x2c>
    16b2:	11 f4       	brne	.+4      	; 0x16b8 <ldexp+0x5c>
    16b4:	60 ff       	sbrs	r22, 0
    16b6:	e8 cf       	rjmp	.-48     	; 0x1688 <ldexp+0x2c>
    16b8:	6f 5f       	subi	r22, 0xFF	; 255
    16ba:	7f 4f       	sbci	r23, 0xFF	; 255
    16bc:	8f 4f       	sbci	r24, 0xFF	; 255
    16be:	9f 4f       	sbci	r25, 0xFF	; 255
    16c0:	e3 cf       	rjmp	.-58     	; 0x1688 <ldexp+0x2c>
    16c2:	01 ca       	rjmp	.-3070   	; 0xac6 <__fp_szero>
    16c4:	0e f0       	brts	.+2      	; 0x16c8 <ldexp+0x6c>
    16c6:	76 c0       	rjmp	.+236    	; 0x17b4 <__fp_mpack>
    16c8:	b9 c9       	rjmp	.-3214   	; 0xa3c <__fp_nan>
    16ca:	68 94       	set
    16cc:	b1 c9       	rjmp	.-3230   	; 0xa30 <__fp_inf>

000016ce <log>:
    16ce:	e0 d9       	rcall	.-3136   	; 0xa90 <__fp_splitA>
    16d0:	c8 f3       	brcs	.-14     	; 0x16c4 <ldexp+0x68>
    16d2:	99 23       	and	r25, r25
    16d4:	d1 f3       	breq	.-12     	; 0x16ca <ldexp+0x6e>
    16d6:	c6 f3       	brts	.-16     	; 0x16c8 <ldexp+0x6c>
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	1f 93       	push	r17
    16de:	0f 93       	push	r16
    16e0:	ff 92       	push	r15
    16e2:	c9 2f       	mov	r28, r25
    16e4:	dd 27       	eor	r29, r29
    16e6:	88 23       	and	r24, r24
    16e8:	2a f0       	brmi	.+10     	; 0x16f4 <log+0x26>
    16ea:	21 97       	sbiw	r28, 0x01	; 1
    16ec:	66 0f       	add	r22, r22
    16ee:	77 1f       	adc	r23, r23
    16f0:	88 1f       	adc	r24, r24
    16f2:	da f7       	brpl	.-10     	; 0x16ea <log+0x1c>
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	40 e8       	ldi	r20, 0x80	; 128
    16fa:	5f eb       	ldi	r21, 0xBF	; 191
    16fc:	9f e3       	ldi	r25, 0x3F	; 63
    16fe:	88 39       	cpi	r24, 0x98	; 152
    1700:	20 f0       	brcs	.+8      	; 0x170a <log+0x3c>
    1702:	80 3e       	cpi	r24, 0xE0	; 224
    1704:	30 f0       	brcs	.+12     	; 0x1712 <log+0x44>
    1706:	21 96       	adiw	r28, 0x01	; 1
    1708:	8f 77       	andi	r24, 0x7F	; 127
    170a:	5d d8       	rcall	.-3910   	; 0x7c6 <__addsf3>
    170c:	ec e7       	ldi	r30, 0x7C	; 124
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <log+0x4a>
    1712:	59 d8       	rcall	.-3918   	; 0x7c6 <__addsf3>
    1714:	e9 ea       	ldi	r30, 0xA9	; 169
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	73 df       	rcall	.-282    	; 0x1600 <__fp_powser>
    171a:	8b 01       	movw	r16, r22
    171c:	be 01       	movw	r22, r28
    171e:	ec 01       	movw	r28, r24
    1720:	fb 2e       	mov	r15, r27
    1722:	6f 57       	subi	r22, 0x7F	; 127
    1724:	71 09       	sbc	r23, r1
    1726:	75 95       	asr	r23
    1728:	77 1f       	adc	r23, r23
    172a:	88 0b       	sbc	r24, r24
    172c:	99 0b       	sbc	r25, r25
    172e:	45 d9       	rcall	.-3446   	; 0x9ba <__floatsisf>
    1730:	28 e1       	ldi	r18, 0x18	; 24
    1732:	32 e7       	ldi	r19, 0x72	; 114
    1734:	41 e3       	ldi	r20, 0x31	; 49
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	d8 d9       	rcall	.-3152   	; 0xaea <__mulsf3x>
    173a:	af 2d       	mov	r26, r15
    173c:	98 01       	movw	r18, r16
    173e:	ae 01       	movw	r20, r28
    1740:	ff 90       	pop	r15
    1742:	0f 91       	pop	r16
    1744:	1f 91       	pop	r17
    1746:	cf 91       	pop	r28
    1748:	df 91       	pop	r29
    174a:	4e d8       	rcall	.-3940   	; 0x7e8 <__addsf3x>
    174c:	88 c9       	rjmp	.-3312   	; 0xa5e <__fp_round>

0000174e <modf>:
    174e:	fa 01       	movw	r30, r20
    1750:	dc 01       	movw	r26, r24
    1752:	aa 0f       	add	r26, r26
    1754:	bb 1f       	adc	r27, r27
    1756:	9b 01       	movw	r18, r22
    1758:	ac 01       	movw	r20, r24
    175a:	bf 57       	subi	r27, 0x7F	; 127
    175c:	28 f4       	brcc	.+10     	; 0x1768 <modf+0x1a>
    175e:	22 27       	eor	r18, r18
    1760:	33 27       	eor	r19, r19
    1762:	44 27       	eor	r20, r20
    1764:	50 78       	andi	r21, 0x80	; 128
    1766:	1f c0       	rjmp	.+62     	; 0x17a6 <modf+0x58>
    1768:	b7 51       	subi	r27, 0x17	; 23
    176a:	88 f4       	brcc	.+34     	; 0x178e <modf+0x40>
    176c:	ab 2f       	mov	r26, r27
    176e:	00 24       	eor	r0, r0
    1770:	46 95       	lsr	r20
    1772:	37 95       	ror	r19
    1774:	27 95       	ror	r18
    1776:	01 1c       	adc	r0, r1
    1778:	a3 95       	inc	r26
    177a:	d2 f3       	brmi	.-12     	; 0x1770 <modf+0x22>
    177c:	00 20       	and	r0, r0
    177e:	69 f0       	breq	.+26     	; 0x179a <modf+0x4c>
    1780:	22 0f       	add	r18, r18
    1782:	33 1f       	adc	r19, r19
    1784:	44 1f       	adc	r20, r20
    1786:	b3 95       	inc	r27
    1788:	da f3       	brmi	.-10     	; 0x1780 <modf+0x32>
    178a:	0d d0       	rcall	.+26     	; 0x17a6 <modf+0x58>
    178c:	1b c8       	rjmp	.-4042   	; 0x7c4 <__subsf3>
    178e:	61 30       	cpi	r22, 0x01	; 1
    1790:	71 05       	cpc	r23, r1
    1792:	a0 e8       	ldi	r26, 0x80	; 128
    1794:	8a 07       	cpc	r24, r26
    1796:	b9 46       	sbci	r27, 0x69	; 105
    1798:	30 f4       	brcc	.+12     	; 0x17a6 <modf+0x58>
    179a:	9b 01       	movw	r18, r22
    179c:	ac 01       	movw	r20, r24
    179e:	66 27       	eor	r22, r22
    17a0:	77 27       	eor	r23, r23
    17a2:	88 27       	eor	r24, r24
    17a4:	90 78       	andi	r25, 0x80	; 128
    17a6:	30 96       	adiw	r30, 0x00	; 0
    17a8:	21 f0       	breq	.+8      	; 0x17b2 <modf+0x64>
    17aa:	20 83       	st	Z, r18
    17ac:	31 83       	std	Z+1, r19	; 0x01
    17ae:	42 83       	std	Z+2, r20	; 0x02
    17b0:	53 83       	std	Z+3, r21	; 0x03
    17b2:	08 95       	ret

000017b4 <__fp_mpack>:
    17b4:	9f 3f       	cpi	r25, 0xFF	; 255
    17b6:	31 f0       	breq	.+12     	; 0x17c4 <__fp_mpack_finite+0xc>

000017b8 <__fp_mpack_finite>:
    17b8:	91 50       	subi	r25, 0x01	; 1
    17ba:	20 f4       	brcc	.+8      	; 0x17c4 <__fp_mpack_finite+0xc>
    17bc:	87 95       	ror	r24
    17be:	77 95       	ror	r23
    17c0:	67 95       	ror	r22
    17c2:	b7 95       	ror	r27
    17c4:	88 0f       	add	r24, r24
    17c6:	91 1d       	adc	r25, r1
    17c8:	96 95       	lsr	r25
    17ca:	87 95       	ror	r24
    17cc:	97 f9       	bld	r25, 7
    17ce:	08 95       	ret

000017d0 <__prologue_saves__>:
    17d0:	2f 92       	push	r2
    17d2:	3f 92       	push	r3
    17d4:	4f 92       	push	r4
    17d6:	5f 92       	push	r5
    17d8:	6f 92       	push	r6
    17da:	7f 92       	push	r7
    17dc:	8f 92       	push	r8
    17de:	9f 92       	push	r9
    17e0:	af 92       	push	r10
    17e2:	bf 92       	push	r11
    17e4:	cf 92       	push	r12
    17e6:	df 92       	push	r13
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	ca 1b       	sub	r28, r26
    17fa:	db 0b       	sbc	r29, r27
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	de bf       	out	0x3e, r29	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	cd bf       	out	0x3d, r28	; 61
    1806:	09 94       	ijmp

00001808 <__epilogue_restores__>:
    1808:	2a 88       	ldd	r2, Y+18	; 0x12
    180a:	39 88       	ldd	r3, Y+17	; 0x11
    180c:	48 88       	ldd	r4, Y+16	; 0x10
    180e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1810:	6e 84       	ldd	r6, Y+14	; 0x0e
    1812:	7d 84       	ldd	r7, Y+13	; 0x0d
    1814:	8c 84       	ldd	r8, Y+12	; 0x0c
    1816:	9b 84       	ldd	r9, Y+11	; 0x0b
    1818:	aa 84       	ldd	r10, Y+10	; 0x0a
    181a:	b9 84       	ldd	r11, Y+9	; 0x09
    181c:	c8 84       	ldd	r12, Y+8	; 0x08
    181e:	df 80       	ldd	r13, Y+7	; 0x07
    1820:	ee 80       	ldd	r14, Y+6	; 0x06
    1822:	fd 80       	ldd	r15, Y+5	; 0x05
    1824:	0c 81       	ldd	r16, Y+4	; 0x04
    1826:	1b 81       	ldd	r17, Y+3	; 0x03
    1828:	aa 81       	ldd	r26, Y+2	; 0x02
    182a:	b9 81       	ldd	r27, Y+1	; 0x01
    182c:	ce 0f       	add	r28, r30
    182e:	d1 1d       	adc	r29, r1
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	ed 01       	movw	r28, r26
    183c:	08 95       	ret

0000183e <_exit>:
    183e:	f8 94       	cli

00001840 <__stop_program>:
    1840:	ff cf       	rjmp	.-2      	; 0x1840 <__stop_program>
