
ARK_Sensing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000019e  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000123  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000355  00000000  00000000  00000369  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001b4  00000000  00000000  000006be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002eb  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000100  00000000  00000000  00000b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018e  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000060  00000000  00000000  00000dee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_9>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e9       	ldi	r30, 0x9E	; 158
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  7a:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <init_clock>:


void init_clock(){

	/* Initialize clock settings */
	TWSR=0x00; // set presca1er bits to 1 (0x00=1, 0x01=4, 0x02=16, 0x03=64)
  82:	11 b8       	out	0x01, r1	; 1
    TWBR=0x2A; // SCL frequency
  84:	8a e2       	ldi	r24, 0x2A	; 42
  86:	80 b9       	out	0x00, r24	; 0
	TWCR=0x04;
  88:	84 e0       	ldi	r24, 0x04	; 4
  8a:	86 bf       	out	0x36, r24	; 54

}
  8c:	08 95       	ret

0000008e <send_start_signal>:
	TWCR = TWI Control Register
	TWINT = TWI interrupt flag ( bit 7 on TWCR )
	TWSTA = START condition bit ( bit 5 on TWCR )
	TWEN = TWI enable bit ( bit 2 on TWCR )
	*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  8e:	84 ea       	ldi	r24, 0xA4	; 164
  90:	86 bf       	out	0x36, r24	; 54

	/* Wait until START condition has been transmitted 
	Wait until the TWINT flag is set */
	while (!(TWCR & (1<<TWINT)))
  92:	06 b6       	in	r0, 0x36	; 54
  94:	07 fe       	sbrs	r0, 7
  96:	fd cf       	rjmp	.-6      	; 0x92 <send_start_signal+0x4>
		;
}
  98:	08 95       	ret

0000009a <send_end_signal>:

void send_end_signal(){

	/* Transmit STOP condition */
	TWCR = (1<<TWINT)|(1<<TWEN)|
  9a:	84 e9       	ldi	r24, 0x94	; 148
  9c:	86 bf       	out	0x36, r24	; 54
	(1<<TWSTO);

}
  9e:	08 95       	ret

000000a0 <read_write_data>:
void read_write_data(int DATA, int RW){

	/* Load DATA+RW into TWDR Register 
	This is the DATA + R/W bit 
	RW=0 is write, RW=1 is read */
	DATA = (DATA<<1) | RW;
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
	TWDR = DATA;
  a4:	68 2b       	or	r22, r24
  a6:	79 2b       	or	r23, r25
  a8:	63 b9       	out	0x03, r22	; 3

	/* Clear TWINT bit in TWCR to start transmission of address */
	TWCR = (1<<TWINT) | (1<<TWEN);
  aa:	84 e8       	ldi	r24, 0x84	; 132
  ac:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT Flag set
	This indicates that the SLA+W has been transmitted
	and ACK/NACK has been received. */
	while (!(TWCR & (1<<TWINT)))
  ae:	06 b6       	in	r0, 0x36	; 54
  b0:	07 fe       	sbrs	r0, 7
  b2:	fd cf       	rjmp	.-6      	; 0xae <read_write_data+0xe>
		;
}
  b4:	08 95       	ret

000000b6 <print_trace>:

void print_trace(){

	/* Develop method to print stack trace or throw some other error */

}
  b6:	08 95       	ret

000000b8 <check_status_register>:
	/* Check value of TWI status register, mask prescaler bits
	If status is different from REGISTER, go to print_trace 
	TWSR =  TWI Status Register
	TWI Status is set on bits 7:3 of TWSR, = 0x78
	*/
	if ((TWSR & 0xF8) != REGISTER)
  b8:	81 b1       	in	r24, 0x01	; 1
		print_trace(); // define how you want to handle this error somewhere

}
  ba:	08 95       	ret

000000bc <__vector_9>:
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


// Method triggered by overflow
ISR(TIMER1_OVF_vect){
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24

    PORTB ^= 0xFF;			//toggle PORTB values
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	80 95       	com	r24
  cc:	88 bb       	out	0x18, r24	; 24
}
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <USART_Receive>:

// Data from Bluetooth TX given to USART RX
unsigned char USART_Receive( void ){

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) ) {  }
  da:	5f 9b       	sbis	0x0b, 7	; 11
  dc:	fe cf       	rjmp	.-4      	; 0xda <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
  de:	8c b1       	in	r24, 0x0c	; 12
}
  e0:	08 95       	ret

000000e2 <USART_Transmit>:

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
  e2:	5d 9b       	sbis	0x0b, 5	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <USART_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
  e6:	8c b9       	out	0x0c, r24	; 12
}
  e8:	08 95       	ret

000000ea <USART_SendString>:

/* Send string of USART data function */ 
void USART_SendString(char *str){
  ea:	fc 01       	movw	r30, r24
  ec:	04 c0       	rjmp	.+8      	; 0xf6 <USART_SendString+0xc>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
  ee:	5d 9b       	sbis	0x0b, 5	; 11
  f0:	fe cf       	rjmp	.-4      	; 0xee <USART_SendString+0x4>

	/* Put data into buffer, sends the data */
	UDR = data;
  f2:	8c b9       	out	0x0c, r24	; 12
  f4:	31 96       	adiw	r30, 0x01	; 1
/* Send string of USART data function */ 
void USART_SendString(char *str){

	int i=0;			
	/* Send each char of string till the NULL */														
	while (str[i]!=0){
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	c9 f7       	brne	.-14     	; 0xee <USART_SendString+0x4>
		USART_Transmit( str[i] );
		i++;
	}
}
  fc:	08 95       	ret

000000fe <USART_Flush>:

// Flush USART
void USART_Flush( void ){
  fe:	01 c0       	rjmp	.+2      	; 0x102 <USART_Flush+0x4>

	unsigned char dummy;
	while ( UCSRA & (1<<RXC) ) dummy = UDR;
 100:	8c b1       	in	r24, 0x0c	; 12
 102:	5f 99       	sbic	0x0b, 7	; 11
 104:	fd cf       	rjmp	.-6      	; 0x100 <USART_Flush+0x2>
}
 106:	08 95       	ret

00000108 <USART_Init>:

// Initialize USART
void USART_Init( unsigned int baud ){
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
 108:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
 10a:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X);
 10c:	59 9a       	sbi	0x0b, 1	; 11

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
 10e:	88 e1       	ldi	r24, 0x18	; 24
 110:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 112:	8e e8       	ldi	r24, 0x8E	; 142
 114:	80 bd       	out	0x20, r24	; 32
}
 116:	08 95       	ret

00000118 <Bluetooth_Init>:


void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
 118:	8c e0       	ldi	r24, 0x0C	; 12
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 84 00 	call	0x108	; 0x108 <USART_Init>
 120:	e0 e6       	ldi	r30, 0x60	; 96
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	04 c0       	rjmp	.+8      	; 0x12e <Bluetooth_Init+0x16>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
 126:	5d 9b       	sbis	0x0b, 5	; 11
 128:	fe cf       	rjmp	.-4      	; 0x126 <Bluetooth_Init+0xe>

	/* Put data into buffer, sends the data */
	UDR = data;
 12a:	8c b9       	out	0x0c, r24	; 12

	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
		USART_Transmit( *cmd );
		++cmd;
 12c:	31 96       	adiw	r30, 0x01	; 1

void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
 12e:	80 81       	ld	r24, Z
 130:	88 23       	and	r24, r24
 132:	c9 f7       	brne	.-14     	; 0x126 <Bluetooth_Init+0xe>
		USART_Transmit( *cmd );
		++cmd;
	}
}
 134:	08 95       	ret

00000136 <USART_Start_Timer>:

void USART_Start_Timer(){

	TCCR1B |= (1 << CS11);	// Timer1 prescaler = 8
 136:	8e b5       	in	r24, 0x2e	; 46
 138:	82 60       	ori	r24, 0x02	; 2
 13a:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;				// Clear the timer counter
 13c:	1d bc       	out	0x2d, r1	; 45
 13e:	1c bc       	out	0x2c, r1	; 44
	TIMSK = (1 << TOIE1);	// Enable timer1 overflow interrupt(TOIE1)
 140:	84 e0       	ldi	r24, 0x04	; 4
 142:	89 bf       	out	0x39, r24	; 57
	sei();					// Enable global interrupts
 144:	78 94       	sei
}
 146:	08 95       	ret

00000148 <main>:


void init_clock(){

	/* Initialize clock settings */
	TWSR=0x00; // set presca1er bits to 1 (0x00=1, 0x01=4, 0x02=16, 0x03=64)
 148:	11 b8       	out	0x01, r1	; 1
    TWBR=0x2A; // SCL frequency
 14a:	8a e2       	ldi	r24, 0x2A	; 42
 14c:	80 b9       	out	0x00, r24	; 0
	TWCR=0x04;
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	86 bf       	out	0x36, r24	; 54
	TWCR = TWI Control Register
	TWINT = TWI interrupt flag ( bit 7 on TWCR )
	TWSTA = START condition bit ( bit 5 on TWCR )
	TWEN = TWI enable bit ( bit 2 on TWCR )
	*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 152:	84 ea       	ldi	r24, 0xA4	; 164
 154:	86 bf       	out	0x36, r24	; 54

	/* Wait until START condition has been transmitted 
	Wait until the TWINT flag is set */
	while (!(TWCR & (1<<TWINT)))
 156:	06 b6       	in	r0, 0x36	; 54
 158:	07 fe       	sbrs	r0, 7
 15a:	fd cf       	rjmp	.-6      	; 0x156 <main+0xe>

	/* Load DATA+RW into TWDR Register 
	This is the DATA + R/W bit 
	RW=0 is write, RW=1 is read */
	DATA = (DATA<<1) | RW;
	TWDR = DATA;
 15c:	80 ed       	ldi	r24, 0xD0	; 208
 15e:	83 b9       	out	0x03, r24	; 3

	/* Clear TWINT bit in TWCR to start transmission of address */
	TWCR = (1<<TWINT) | (1<<TWEN);
 160:	84 e8       	ldi	r24, 0x84	; 132
 162:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT Flag set
	This indicates that the SLA+W has been transmitted
	and ACK/NACK has been received. */
	while (!(TWCR & (1<<TWINT)))
 164:	06 b6       	in	r0, 0x36	; 54
 166:	07 fe       	sbrs	r0, 7
 168:	fd cf       	rjmp	.-6      	; 0x164 <main+0x1c>

	/* Load DATA+RW into TWDR Register 
	This is the DATA + R/W bit 
	RW=0 is write, RW=1 is read */
	DATA = (DATA<<1) | RW;
	TWDR = DATA;
 16a:	88 e1       	ldi	r24, 0x18	; 24
 16c:	83 b9       	out	0x03, r24	; 3

	/* Clear TWINT bit in TWCR to start transmission of address */
	TWCR = (1<<TWINT) | (1<<TWEN);
 16e:	84 e8       	ldi	r24, 0x84	; 132
 170:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT Flag set
	This indicates that the SLA+W has been transmitted
	and ACK/NACK has been received. */
	while (!(TWCR & (1<<TWINT)))
 172:	06 b6       	in	r0, 0x36	; 54
 174:	07 fe       	sbrs	r0, 7
 176:	fd cf       	rjmp	.-6      	; 0x172 <main+0x2a>
	TWCR = TWI Control Register
	TWINT = TWI interrupt flag ( bit 7 on TWCR )
	TWSTA = START condition bit ( bit 5 on TWCR )
	TWEN = TWI enable bit ( bit 2 on TWCR )
	*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 178:	84 ea       	ldi	r24, 0xA4	; 164
 17a:	86 bf       	out	0x36, r24	; 54

	/* Wait until START condition has been transmitted 
	Wait until the TWINT flag is set */
	while (!(TWCR & (1<<TWINT)))
 17c:	06 b6       	in	r0, 0x36	; 54
 17e:	07 fe       	sbrs	r0, 7
 180:	fd cf       	rjmp	.-6      	; 0x17c <main+0x34>

	/* Load DATA+RW into TWDR Register 
	This is the DATA + R/W bit 
	RW=0 is write, RW=1 is read */
	DATA = (DATA<<1) | RW;
	TWDR = DATA;
 182:	81 ed       	ldi	r24, 0xD1	; 209
 184:	83 b9       	out	0x03, r24	; 3

	/* Clear TWINT bit in TWCR to start transmission of address */
	TWCR = (1<<TWINT) | (1<<TWEN);
 186:	84 e8       	ldi	r24, 0x84	; 132
 188:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT Flag set
	This indicates that the SLA+W has been transmitted
	and ACK/NACK has been received. */
	while (!(TWCR & (1<<TWINT)))
 18a:	06 b6       	in	r0, 0x36	; 54
 18c:	07 fe       	sbrs	r0, 7
 18e:	fd cf       	rjmp	.-6      	; 0x18a <main+0x42>
}

void send_end_signal(){

	/* Transmit STOP condition */
	TWCR = (1<<TWINT)|(1<<TWEN)|
 190:	84 e9       	ldi	r24, 0x94	; 148
 192:	86 bf       	out	0x36, r24	; 54
		else USART_SendString( "Please select a proper option.\n" );

		// USART_Transmit( DATA_IN );
	*/

}
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	08 95       	ret

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
