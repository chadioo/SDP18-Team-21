
ARK_Sensing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  000037a2  00003816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00003840  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000041a  00000000  00000000  00003860  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00005a02  00000000  00000000  00003c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000042b  00000000  00000000  0000967c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000025ba  00000000  00000000  00009aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003a0  00000000  00000000  0000c064  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00001bab  00000000  00000000  0000c404  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003466  00000000  00000000  0000dfaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000870  00000000  00000000  00011415  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 eb 1a 	jmp	0x35d6	; 0x35d6 <__vector_9>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 31 1b 	call	0x3662	; 0x3662 <main>
      7a:	0c 94 cf 1b 	jmp	0x379e	; 0x379e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
      82:	0f 93       	push	r16
      84:	1f 93       	push	r17
      86:	cf 93       	push	r28
      88:	df 93       	push	r29
      8a:	98 2f       	mov	r25, r24
      8c:	db 01       	movw	r26, r22
      8e:	8a 01       	movw	r16, r20
      90:	e9 01       	movw	r28, r18
	int8_t rslt = BMI160_OK;
	/* Null-pointer check */
	if ((dev == NULL) || (dev->read == NULL)) {
      92:	21 15       	cp	r18, r1
      94:	31 05       	cpc	r19, r1
      96:	c9 f0       	breq	.+50     	; 0xca <bmi160_get_regs+0x48>
      98:	ea 8d       	ldd	r30, Y+26	; 0x1a
      9a:	fb 8d       	ldd	r31, Y+27	; 0x1b
      9c:	30 97       	sbiw	r30, 0x00	; 0
      9e:	a9 f0       	breq	.+42     	; 0xca <bmi160_get_regs+0x48>
		rslt = BMI160_E_NULL_PTR;
	} else {
		/* Configuring reg_addr for SPI Interface */
		if (dev->interface == BMI160_SPI_INTF)
      a0:	8a 81       	ldd	r24, Y+2	; 0x02
      a2:	81 30       	cpi	r24, 0x01	; 1
      a4:	09 f4       	brne	.+2      	; 0xa8 <bmi160_get_regs+0x26>
			reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
      a6:	90 68       	ori	r25, 0x80	; 128

		rslt = dev->read(dev->id, reg_addr, data, len);
      a8:	89 81       	ldd	r24, Y+1	; 0x01
      aa:	69 2f       	mov	r22, r25
      ac:	ad 01       	movw	r20, r26
      ae:	98 01       	movw	r18, r16
      b0:	09 95       	icall
      b2:	18 2f       	mov	r17, r24
		/* Kindly refer section 3.2.4 of data-sheet*/
		dev->delay_ms(1);
      b4:	ee 8d       	ldd	r30, Y+30	; 0x1e
      b6:	ff 8d       	ldd	r31, Y+31	; 0x1f
      b8:	61 e0       	ldi	r22, 0x01	; 1
      ba:	70 e0       	ldi	r23, 0x00	; 0
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	09 95       	icall
		if (rslt != BMI160_OK)
      c2:	11 23       	and	r17, r17
      c4:	19 f0       	breq	.+6      	; 0xcc <bmi160_get_regs+0x4a>
      c6:	1e ef       	ldi	r17, 0xFE	; 254
      c8:	01 c0       	rjmp	.+2      	; 0xcc <bmi160_get_regs+0x4a>
      ca:	1f ef       	ldi	r17, 0xFF	; 255
			rslt = BMI160_E_COM_FAIL;
	}

	return rslt;
}
      cc:	81 2f       	mov	r24, r17
      ce:	df 91       	pop	r29
      d0:	cf 91       	pop	r28
      d2:	1f 91       	pop	r17
      d4:	0f 91       	pop	r16
      d6:	08 95       	ret

000000d8 <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
      d8:	af 92       	push	r10
      da:	bf 92       	push	r11
      dc:	cf 92       	push	r12
      de:	df 92       	push	r13
      e0:	ff 92       	push	r15
      e2:	0f 93       	push	r16
      e4:	1f 93       	push	r17
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	f8 2e       	mov	r15, r24
      ec:	6b 01       	movw	r12, r22
      ee:	5a 01       	movw	r10, r20
      f0:	e9 01       	movw	r28, r18
	int8_t rslt = BMI160_OK;
	uint8_t count = 0;
	/* Null-pointer check */
	if ((dev == NULL) || (dev->write == NULL)) {
      f2:	21 15       	cp	r18, r1
      f4:	31 05       	cpc	r19, r1
      f6:	e1 f1       	breq	.+120    	; 0x170 <bmi160_set_regs+0x98>
      f8:	ec 8d       	ldd	r30, Y+28	; 0x1c
      fa:	fd 8d       	ldd	r31, Y+29	; 0x1d
      fc:	30 97       	sbiw	r30, 0x00	; 0
      fe:	c1 f1       	breq	.+112    	; 0x170 <bmi160_set_regs+0x98>
		rslt = BMI160_E_NULL_PTR;
	} else {
		/* Configuring reg_addr for SPI Interface */
		if (dev->interface == BMI160_SPI_INTF)
     100:	8a 81       	ldd	r24, Y+2	; 0x02
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	11 f4       	brne	.+4      	; 0x10a <bmi160_set_regs+0x32>
			reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
     106:	8f e7       	ldi	r24, 0x7F	; 127
     108:	f8 22       	and	r15, r24

		if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
     10a:	88 85       	ldd	r24, Y+8	; 0x08
     10c:	81 31       	cpi	r24, 0x11	; 17
     10e:	31 f0       	breq	.+12     	; 0x11c <bmi160_set_regs+0x44>
     110:	88 89       	ldd	r24, Y+16	; 0x10
     112:	85 31       	cpi	r24, 0x15	; 21
     114:	19 f0       	breq	.+6      	; 0x11c <bmi160_set_regs+0x44>
     116:	10 e0       	ldi	r17, 0x00	; 0
     118:	00 e0       	ldi	r16, 0x00	; 0
     11a:	1f c0       	rjmp	.+62     	; 0x15a <bmi160_set_regs+0x82>
			(dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE)) {

			rslt = dev->write(dev->id, reg_addr, data, len);
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	6f 2d       	mov	r22, r15
     120:	a6 01       	movw	r20, r12
     122:	95 01       	movw	r18, r10
     124:	09 95       	icall
     126:	18 2f       	mov	r17, r24
			/* Kindly refer section 3.2.4 of data-sheet*/
			dev->delay_ms(1);
     128:	ee 8d       	ldd	r30, Y+30	; 0x1e
     12a:	ff 8d       	ldd	r31, Y+31	; 0x1f
     12c:	61 e0       	ldi	r22, 0x01	; 1
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	09 95       	icall
     136:	18 c0       	rjmp	.+48     	; 0x168 <bmi160_set_regs+0x90>
		} else {
			/*Burst write is not allowed in
			suspend & low power mode */
			for (; count < len; count++) {
				rslt = dev->write(dev->id, reg_addr, &data[count], 1);
     138:	4c 0d       	add	r20, r12
     13a:	5d 1d       	adc	r21, r13
     13c:	ec 8d       	ldd	r30, Y+28	; 0x1c
     13e:	fd 8d       	ldd	r31, Y+29	; 0x1d
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	21 e0       	ldi	r18, 0x01	; 1
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	09 95       	icall
     148:	18 2f       	mov	r17, r24
				reg_addr++;
				/* Kindly refer section 3.2.4 of data-sheet*/
				dev->delay_ms(1);
     14a:	ee 8d       	ldd	r30, Y+30	; 0x1e
     14c:	ff 8d       	ldd	r31, Y+31	; 0x1f
     14e:	61 e0       	ldi	r22, 0x01	; 1
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	09 95       	icall
			/* Kindly refer section 3.2.4 of data-sheet*/
			dev->delay_ms(1);
		} else {
			/*Burst write is not allowed in
			suspend & low power mode */
			for (; count < len; count++) {
     158:	0f 5f       	subi	r16, 0xFF	; 255
     15a:	60 2f       	mov	r22, r16
     15c:	6f 0d       	add	r22, r15
     15e:	40 2f       	mov	r20, r16
     160:	50 e0       	ldi	r21, 0x00	; 0
     162:	4a 15       	cp	r20, r10
     164:	5b 05       	cpc	r21, r11
     166:	40 f3       	brcs	.-48     	; 0x138 <bmi160_set_regs+0x60>
				/* Kindly refer section 3.2.4 of data-sheet*/
				dev->delay_ms(1);
			}
		}

		if (rslt != BMI160_OK)
     168:	11 23       	and	r17, r17
     16a:	19 f0       	breq	.+6      	; 0x172 <bmi160_set_regs+0x9a>
     16c:	1e ef       	ldi	r17, 0xFE	; 254
     16e:	01 c0       	rjmp	.+2      	; 0x172 <bmi160_set_regs+0x9a>
     170:	1f ef       	ldi	r17, 0xFF	; 255
			rslt = BMI160_E_COM_FAIL;
	}

	return rslt;
}
     172:	81 2f       	mov	r24, r17
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	1f 91       	pop	r17
     17a:	0f 91       	pop	r16
     17c:	ff 90       	pop	r15
     17e:	df 90       	pop	r13
     180:	cf 90       	pop	r12
     182:	bf 90       	pop	r11
     184:	af 90       	pop	r10
     186:	08 95       	ret

00000188 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	df 93       	push	r29
     194:	cf 93       	push	r28
     196:	0f 92       	push	r0
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	8c 01       	movw	r16, r24
	int8_t rslt;
	uint8_t data = BMI160_SOFT_RESET_CMD;

	/* Null-pointer check */
	if ((dev == NULL) || (dev->delay_ms == NULL)) {
     19e:	00 97       	sbiw	r24, 0x00	; 0
     1a0:	09 f4       	brne	.+2      	; 0x1a4 <bmi160_soft_reset+0x1c>
     1a2:	64 c0       	rjmp	.+200    	; 0x26c <bmi160_soft_reset+0xe4>
     1a4:	dc 01       	movw	r26, r24
     1a6:	5e 96       	adiw	r26, 0x1e	; 30
     1a8:	8d 91       	ld	r24, X+
     1aa:	9c 91       	ld	r25, X
     1ac:	5f 97       	sbiw	r26, 0x1f	; 31
     1ae:	89 2b       	or	r24, r25
     1b0:	09 f4       	brne	.+2      	; 0x1b4 <bmi160_soft_reset+0x2c>
     1b2:	5c c0       	rjmp	.+184    	; 0x26c <bmi160_soft_reset+0xe4>
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = BMI160_SOFT_RESET_CMD;
     1b4:	86 eb       	ldi	r24, 0xB6	; 182
     1b6:	89 83       	std	Y+1, r24	; 0x01
	/* Null-pointer check */
	if ((dev == NULL) || (dev->delay_ms == NULL)) {
		rslt = BMI160_E_NULL_PTR;
	} else {
		 /* Reset the device */
		rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
     1b8:	8e e7       	ldi	r24, 0x7E	; 126
     1ba:	6e 01       	movw	r12, r28
     1bc:	08 94       	sec
     1be:	c1 1c       	adc	r12, r1
     1c0:	d1 1c       	adc	r13, r1
     1c2:	b6 01       	movw	r22, r12
     1c4:	41 e0       	ldi	r20, 0x01	; 1
     1c6:	50 e0       	ldi	r21, 0x00	; 0
     1c8:	98 01       	movw	r18, r16
     1ca:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
     1ce:	f8 2e       	mov	r15, r24
		dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
     1d0:	d8 01       	movw	r26, r16
     1d2:	5e 96       	adiw	r26, 0x1e	; 30
     1d4:	ed 91       	ld	r30, X+
     1d6:	fc 91       	ld	r31, X
     1d8:	5f 97       	sbiw	r26, 0x1f	; 31
     1da:	6f e0       	ldi	r22, 0x0F	; 15
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	09 95       	icall
		if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF)) {
     1e4:	ff 20       	and	r15, r15
     1e6:	09 f0       	breq	.+2      	; 0x1ea <bmi160_soft_reset+0x62>
     1e8:	43 c0       	rjmp	.+134    	; 0x270 <bmi160_soft_reset+0xe8>
     1ea:	f8 01       	movw	r30, r16
     1ec:	82 81       	ldd	r24, Z+2	; 0x02
     1ee:	81 30       	cpi	r24, 0x01	; 1
     1f0:	59 f4       	brne	.+22     	; 0x208 <bmi160_soft_reset+0x80>
			/* Dummy read of 0x7F register to enable SPI Interface
			if SPI is used */
			rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
     1f2:	8f e7       	ldi	r24, 0x7F	; 127
     1f4:	b6 01       	movw	r22, r12
     1f6:	41 e0       	ldi	r20, 0x01	; 1
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	98 01       	movw	r18, r16
     1fc:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
		}
		if (rslt == BMI160_OK) {
     200:	88 23       	and	r24, r24
     202:	11 f0       	breq	.+4      	; 0x208 <bmi160_soft_reset+0x80>
     204:	f8 2e       	mov	r15, r24
     206:	34 c0       	rjmp	.+104    	; 0x270 <bmi160_soft_reset+0xe8>
 */
static void default_param_settg(struct bmi160_dev *dev)
{
	/* Initializing accel and gyro params with
	* default values */
	dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
     208:	22 e0       	ldi	r18, 0x02	; 2
     20a:	d8 01       	movw	r26, r16
     20c:	17 96       	adiw	r26, 0x07	; 7
     20e:	2c 93       	st	X, r18
     210:	17 97       	sbiw	r26, 0x07	; 7
	dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
     212:	98 e0       	ldi	r25, 0x08	; 8
     214:	15 96       	adiw	r26, 0x05	; 5
     216:	9c 93       	st	X, r25
     218:	15 97       	sbiw	r26, 0x05	; 5
	dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
     21a:	80 e1       	ldi	r24, 0x10	; 16
     21c:	14 96       	adiw	r26, 0x04	; 4
     21e:	8c 93       	st	X, r24
     220:	14 97       	sbiw	r26, 0x04	; 4
	dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
     222:	83 e0       	ldi	r24, 0x03	; 3
     224:	16 96       	adiw	r26, 0x06	; 6
     226:	8c 93       	st	X, r24
     228:	16 97       	sbiw	r26, 0x06	; 6
	dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
     22a:	1f 96       	adiw	r26, 0x0f	; 15
     22c:	2c 93       	st	X, r18
     22e:	1f 97       	sbiw	r26, 0x0f	; 15
	dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
     230:	1d 96       	adiw	r26, 0x0d	; 13
     232:	9c 93       	st	X, r25
     234:	1d 97       	sbiw	r26, 0x0d	; 13
	dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
     236:	84 e1       	ldi	r24, 0x14	; 20
     238:	1c 96       	adiw	r26, 0x0c	; 12
     23a:	8c 93       	st	X, r24
     23c:	1c 97       	sbiw	r26, 0x0c	; 12
	dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
     23e:	1e 96       	adiw	r26, 0x0e	; 14
     240:	1c 92       	st	X, r1
     242:	1e 97       	sbiw	r26, 0x0e	; 14

	/* To maintain the previous state of accel configuration */
	dev->prev_accel_cfg = dev->accel_cfg;
     244:	14 96       	adiw	r26, 0x04	; 4
     246:	8d 91       	ld	r24, X+
     248:	9d 91       	ld	r25, X+
     24a:	0d 90       	ld	r0, X+
     24c:	bc 91       	ld	r27, X
     24e:	a0 2d       	mov	r26, r0
     250:	f8 01       	movw	r30, r16
     252:	80 87       	std	Z+8, r24	; 0x08
     254:	91 87       	std	Z+9, r25	; 0x09
     256:	a2 87       	std	Z+10, r26	; 0x0a
     258:	b3 87       	std	Z+11, r27	; 0x0b
	/* To maintain the previous state of gyro configuration */
	dev->prev_gyro_cfg = dev->gyro_cfg;
     25a:	84 85       	ldd	r24, Z+12	; 0x0c
     25c:	95 85       	ldd	r25, Z+13	; 0x0d
     25e:	a6 85       	ldd	r26, Z+14	; 0x0e
     260:	b7 85       	ldd	r27, Z+15	; 0x0f
     262:	80 8b       	std	Z+16, r24	; 0x10
     264:	91 8b       	std	Z+17, r25	; 0x11
     266:	a2 8b       	std	Z+18, r26	; 0x12
     268:	b3 8b       	std	Z+19, r27	; 0x13
     26a:	02 c0       	rjmp	.+4      	; 0x270 <bmi160_soft_reset+0xe8>
     26c:	ff 24       	eor	r15, r15
     26e:	fa 94       	dec	r15
			default_param_settg(dev);
		}
	}

	return rslt;
}
     270:	8f 2d       	mov	r24, r15
     272:	0f 90       	pop	r0
     274:	cf 91       	pop	r28
     276:	df 91       	pop	r29
     278:	1f 91       	pop	r17
     27a:	0f 91       	pop	r16
     27c:	ff 90       	pop	r15
     27e:	df 90       	pop	r13
     280:	cf 90       	pop	r12
     282:	08 95       	ret

00000284 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
     284:	cf 92       	push	r12
     286:	df 92       	push	r13
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	00 d0       	rcall	.+0      	; 0x294 <bmi160_set_power_mode+0x10>
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	8c 01       	movw	r16, r24
	int8_t rslt = 0;

	/* Null-pointer check */
	if ((dev == NULL) || (dev->delay_ms == NULL)) {
     29a:	00 97       	sbiw	r24, 0x00	; 0
     29c:	09 f4       	brne	.+2      	; 0x2a0 <bmi160_set_power_mode+0x1c>
     29e:	ab c0       	rjmp	.+342    	; 0x3f6 <bmi160_set_power_mode+0x172>
     2a0:	dc 01       	movw	r26, r24
     2a2:	5e 96       	adiw	r26, 0x1e	; 30
     2a4:	8d 91       	ld	r24, X+
     2a6:	9c 91       	ld	r25, X
     2a8:	5f 97       	sbiw	r26, 0x1f	; 31
     2aa:	89 2b       	or	r24, r25
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <bmi160_set_power_mode+0x2c>
     2ae:	a3 c0       	rjmp	.+326    	; 0x3f6 <bmi160_set_power_mode+0x172>
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
	int8_t rslt = 0;
	uint8_t data = 0;

	if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) &&
     2b0:	14 96       	adiw	r26, 0x04	; 4
     2b2:	9c 91       	ld	r25, X
     2b4:	14 97       	sbiw	r26, 0x04	; 4
     2b6:	89 2f       	mov	r24, r25
     2b8:	80 51       	subi	r24, 0x10	; 16
     2ba:	83 30       	cpi	r24, 0x03	; 3
     2bc:	08 f0       	brcs	.+2      	; 0x2c0 <bmi160_set_power_mode+0x3c>
     2be:	a8 c0       	rjmp	.+336    	; 0x410 <bmi160_set_power_mode+0x18c>
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
	int8_t rslt = 0;
	uint8_t data = 0;
     2c0:	19 82       	std	Y+1, r1	; 0x01

	if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) &&
		(dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE)) {
		if (dev->accel_cfg.power != dev->prev_accel_cfg.power) {
     2c2:	18 96       	adiw	r26, 0x08	; 8
     2c4:	8c 91       	ld	r24, X
     2c6:	98 17       	cp	r25, r24
     2c8:	09 f4       	brne	.+2      	; 0x2cc <bmi160_set_power_mode+0x48>
     2ca:	57 c0       	rjmp	.+174    	; 0x37a <bmi160_set_power_mode+0xf6>
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t temp = 0;
	uint8_t pre_filter = 0;
     2cc:	1a 82       	std	Y+2, r1	; 0x02

	rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
     2ce:	80 e4       	ldi	r24, 0x40	; 64
     2d0:	6e 01       	movw	r12, r28
     2d2:	08 94       	sec
     2d4:	c1 1c       	adc	r12, r1
     2d6:	d1 1c       	adc	r13, r1
     2d8:	b6 01       	movw	r22, r12
     2da:	41 e0       	ldi	r20, 0x01	; 1
     2dc:	50 e0       	ldi	r21, 0x00	; 0
     2de:	98 01       	movw	r18, r16
     2e0:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
     2e4:	f8 2e       	mov	r15, r24
	if (rslt == BMI160_OK) {
     2e6:	88 23       	and	r24, r24
     2e8:	09 f0       	breq	.+2      	; 0x2ec <bmi160_set_power_mode+0x68>
     2ea:	87 c0       	rjmp	.+270    	; 0x3fa <bmi160_set_power_mode+0x176>
		if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE) {
     2ec:	f8 01       	movw	r30, r16
     2ee:	84 81       	ldd	r24, Z+4	; 0x04
     2f0:	99 81       	ldd	r25, Y+1	; 0x01
     2f2:	82 31       	cpi	r24, 0x12	; 18
     2f4:	a1 f4       	brne	.+40     	; 0x31e <bmi160_set_power_mode+0x9a>
			temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
			/* Set under-sampling parameter */
			*data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
     2f6:	90 68       	ori	r25, 0x80	; 128
     2f8:	99 83       	std	Y+1, r25	; 0x01
			/* Write data */
			rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
     2fa:	80 e4       	ldi	r24, 0x40	; 64
     2fc:	b6 01       	movw	r22, r12
     2fe:	41 e0       	ldi	r20, 0x01	; 1
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	98 01       	movw	r18, r16
     304:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
     308:	f8 2e       	mov	r15, r24
			/* disable the pre-filter data in
			 * low power mode */
			if (rslt == BMI160_OK)
     30a:	88 23       	and	r24, r24
     30c:	09 f0       	breq	.+2      	; 0x310 <bmi160_set_power_mode+0x8c>
     30e:	75 c0       	rjmp	.+234    	; 0x3fa <bmi160_set_power_mode+0x176>
				/* Disable the Pre-filter data*/
				rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &pre_filter, 2, dev);
     310:	88 e5       	ldi	r24, 0x58	; 88
     312:	be 01       	movw	r22, r28
     314:	6e 5f       	subi	r22, 0xFE	; 254
     316:	7f 4f       	sbci	r23, 0xFF	; 255
     318:	42 e0       	ldi	r20, 0x02	; 2
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	08 c0       	rjmp	.+16     	; 0x32e <bmi160_set_power_mode+0xaa>
		} else {
			if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK) {
     31e:	97 ff       	sbrs	r25, 7
     320:	0d c0       	rjmp	.+26     	; 0x33c <bmi160_set_power_mode+0xb8>

				temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
				/* disable under-sampling parameter
				if already enabled */
				*data = temp;
     322:	9f 77       	andi	r25, 0x7F	; 127
     324:	99 83       	std	Y+1, r25	; 0x01
				/* Write data */
				rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
     326:	80 e4       	ldi	r24, 0x40	; 64
     328:	b6 01       	movw	r22, r12
     32a:	41 e0       	ldi	r20, 0x01	; 1
     32c:	50 e0       	ldi	r21, 0x00	; 0
     32e:	98 01       	movw	r18, r16
     330:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
     334:	f8 2e       	mov	r15, r24

	if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) &&
		(dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE)) {
		if (dev->accel_cfg.power != dev->prev_accel_cfg.power) {
			rslt = process_under_sampling(&data, dev);
			if (rslt == BMI160_OK) {
     336:	88 23       	and	r24, r24
     338:	09 f0       	breq	.+2      	; 0x33c <bmi160_set_power_mode+0xb8>
     33a:	5f c0       	rjmp	.+190    	; 0x3fa <bmi160_set_power_mode+0x176>
				/* Write accel power */
				rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
     33c:	b8 01       	movw	r22, r16
     33e:	6c 5f       	subi	r22, 0xFC	; 252
     340:	7f 4f       	sbci	r23, 0xFF	; 255
     342:	8e e7       	ldi	r24, 0x7E	; 126
     344:	41 e0       	ldi	r20, 0x01	; 1
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	98 01       	movw	r18, r16
     34a:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
     34e:	f8 2e       	mov	r15, r24
				/* Add delay of 5 ms */
				if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
     350:	d8 01       	movw	r26, r16
     352:	18 96       	adiw	r26, 0x08	; 8
     354:	8c 91       	ld	r24, X
     356:	18 97       	sbiw	r26, 0x08	; 8
     358:	80 31       	cpi	r24, 0x10	; 16
     35a:	49 f4       	brne	.+18     	; 0x36e <bmi160_set_power_mode+0xea>
					dev->delay_ms(BMI160_ACCEL_DELAY_MS);
     35c:	5e 96       	adiw	r26, 0x1e	; 30
     35e:	ed 91       	ld	r30, X+
     360:	fc 91       	ld	r31, X
     362:	5f 97       	sbiw	r26, 0x1f	; 31
     364:	65 e0       	ldi	r22, 0x05	; 5
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	09 95       	icall
				dev->prev_accel_cfg.power = dev->accel_cfg.power;
     36e:	f8 01       	movw	r30, r16
     370:	84 81       	ldd	r24, Z+4	; 0x04
     372:	80 87       	std	Z+8, r24	; 0x08
	/* Null-pointer check */
	if ((dev == NULL) || (dev->delay_ms == NULL)) {
		rslt = BMI160_E_NULL_PTR;
	} else {
		rslt = set_accel_pwr(dev);
		if (rslt == BMI160_OK)
     374:	ff 20       	and	r15, r15
     376:	09 f0       	breq	.+2      	; 0x37a <bmi160_set_power_mode+0xf6>
     378:	40 c0       	rjmp	.+128    	; 0x3fa <bmi160_set_power_mode+0x176>
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
	int8_t rslt = 0;

	if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE)
     37a:	d8 01       	movw	r26, r16
     37c:	1c 96       	adiw	r26, 0x0c	; 12
     37e:	9c 91       	ld	r25, X
     380:	89 2f       	mov	r24, r25
     382:	84 51       	subi	r24, 0x14	; 20
     384:	82 30       	cpi	r24, 0x02	; 2
     386:	18 f0       	brcs	.+6      	; 0x38e <bmi160_set_power_mode+0x10a>
     388:	97 31       	cpi	r25, 0x17	; 23
     38a:	09 f0       	breq	.+2      	; 0x38e <bmi160_set_power_mode+0x10a>
     38c:	41 c0       	rjmp	.+130    	; 0x410 <bmi160_set_power_mode+0x18c>
		|| (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE)) {

		if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power) {
     38e:	f8 01       	movw	r30, r16
     390:	80 89       	ldd	r24, Z+16	; 0x10
     392:	98 17       	cp	r25, r24
     394:	11 f4       	brne	.+4      	; 0x39a <bmi160_set_power_mode+0x116>
     396:	ff 24       	eor	r15, r15
     398:	30 c0       	rjmp	.+96     	; 0x3fa <bmi160_set_power_mode+0x176>

			/* Write gyro power */
			rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
     39a:	b8 01       	movw	r22, r16
     39c:	64 5f       	subi	r22, 0xF4	; 244
     39e:	7f 4f       	sbci	r23, 0xFF	; 255
     3a0:	8e e7       	ldi	r24, 0x7E	; 126
     3a2:	41 e0       	ldi	r20, 0x01	; 1
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	98 01       	movw	r18, r16
     3a8:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
     3ac:	f8 2e       	mov	r15, r24
			if (dev->prev_gyro_cfg.power ==
     3ae:	d8 01       	movw	r26, r16
     3b0:	50 96       	adiw	r26, 0x10	; 16
     3b2:	8c 91       	ld	r24, X
     3b4:	50 97       	sbiw	r26, 0x10	; 16
     3b6:	84 31       	cpi	r24, 0x14	; 20
     3b8:	49 f4       	brne	.+18     	; 0x3cc <bmi160_set_power_mode+0x148>
				BMI160_GYRO_SUSPEND_MODE) {
				/* Delay of 81 ms */
				dev->delay_ms(BMI160_GYRO_DELAY_MS);
     3ba:	5e 96       	adiw	r26, 0x1e	; 30
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	5f 97       	sbiw	r26, 0x1f	; 31
     3c2:	61 e5       	ldi	r22, 0x51	; 81
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0d c0       	rjmp	.+26     	; 0x3e6 <bmi160_set_power_mode+0x162>
			} else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE)
     3cc:	87 31       	cpi	r24, 0x17	; 23
     3ce:	61 f4       	brne	.+24     	; 0x3e8 <bmi160_set_power_mode+0x164>
     3d0:	f8 01       	movw	r30, r16
     3d2:	84 85       	ldd	r24, Z+12	; 0x0c
     3d4:	85 31       	cpi	r24, 0x15	; 21
     3d6:	41 f4       	brne	.+16     	; 0x3e8 <bmi160_set_power_mode+0x164>
				&& (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE)) {
				/* This delay is required for transition from
				fast-startup mode to normal mode */
				dev->delay_ms(10);
     3d8:	06 8c       	ldd	r0, Z+30	; 0x1e
     3da:	f7 8d       	ldd	r31, Z+31	; 0x1f
     3dc:	e0 2d       	mov	r30, r0
     3de:	6a e0       	ldi	r22, 0x0A	; 10
     3e0:	70 e0       	ldi	r23, 0x00	; 0
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	09 95       	icall
			} else {
				/* do nothing */
			}
			dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
     3e8:	d8 01       	movw	r26, r16
     3ea:	1c 96       	adiw	r26, 0x0c	; 12
     3ec:	8c 91       	ld	r24, X
     3ee:	1c 97       	sbiw	r26, 0x0c	; 12
     3f0:	50 96       	adiw	r26, 0x10	; 16
     3f2:	8c 93       	st	X, r24
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <bmi160_set_power_mode+0x176>
     3f6:	ff 24       	eor	r15, r15
     3f8:	fa 94       	dec	r15
			rslt = set_gyro_pwr(dev);
	}

	return rslt;

}
     3fa:	8f 2d       	mov	r24, r15
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	cf 91       	pop	r28
     402:	df 91       	pop	r29
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	df 90       	pop	r13
     40c:	cf 90       	pop	r12
     40e:	08 95       	ret
				fast-startup mode to normal mode */
				dev->delay_ms(10);
			} else {
				/* do nothing */
			}
			dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
     410:	8c ef       	ldi	r24, 0xFC	; 252
     412:	f8 2e       	mov	r15, r24
     414:	f2 cf       	rjmp	.-28     	; 0x3fa <bmi160_set_power_mode+0x176>

00000416 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
     416:	ef 92       	push	r14
     418:	ff 92       	push	r15
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	df 93       	push	r29
     420:	cf 93       	push	r28
     422:	00 d0       	rcall	.+0      	; 0x424 <bmi160_set_sens_conf+0xe>
     424:	0f 92       	push	r0
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	8c 01       	movw	r16, r24
	int8_t rslt = BMI160_OK;

	/* Null-pointer check */
	if ((dev == NULL) || (dev->delay_ms == NULL)) {
     42c:	00 97       	sbiw	r24, 0x00	; 0
     42e:	09 f4       	brne	.+2      	; 0x432 <bmi160_set_sens_conf+0x1c>
     430:	d5 c0       	rjmp	.+426    	; 0x5dc <bmi160_set_sens_conf+0x1c6>
     432:	dc 01       	movw	r26, r24
     434:	5e 96       	adiw	r26, 0x1e	; 30
     436:	8d 91       	ld	r24, X+
     438:	9c 91       	ld	r25, X
     43a:	5f 97       	sbiw	r26, 0x1f	; 31
     43c:	89 2b       	or	r24, r25
     43e:	09 f4       	brne	.+2      	; 0x442 <bmi160_set_sens_conf+0x2c>
     440:	cd c0       	rjmp	.+410    	; 0x5dc <bmi160_set_sens_conf+0x1c6>
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data[2]  = {0};
     442:	1b 82       	std	Y+3, r1	; 0x03
     444:	1a 82       	std	Y+2, r1	; 0x02
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
	int8_t rslt;

	/* read accel Output data rate and bandwidth */
	rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
     446:	80 e4       	ldi	r24, 0x40	; 64
     448:	be 01       	movw	r22, r28
     44a:	6e 5f       	subi	r22, 0xFE	; 254
     44c:	7f 4f       	sbci	r23, 0xFF	; 255
     44e:	42 e0       	ldi	r20, 0x02	; 2
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	98 01       	movw	r18, r16
     454:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
     458:	88 23       	and	r24, r24
     45a:	09 f0       	breq	.+2      	; 0x45e <bmi160_set_sens_conf+0x48>
     45c:	c0 c0       	rjmp	.+384    	; 0x5de <bmi160_set_sens_conf+0x1c8>
{
	int8_t rslt = 0;
	uint8_t temp = 0;
	uint8_t odr = 0;

	if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_MAX) {
     45e:	f8 01       	movw	r30, r16
     460:	95 81       	ldd	r25, Z+5	; 0x05
     462:	90 31       	cpi	r25, 0x10	; 16
     464:	08 f0       	brcs	.+2      	; 0x468 <bmi160_set_sens_conf+0x52>
     466:	9b c0       	rjmp	.+310    	; 0x59e <bmi160_set_sens_conf+0x188>
		if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr) {
     468:	81 85       	ldd	r24, Z+9	; 0x09
     46a:	98 17       	cp	r25, r24
     46c:	09 f4       	brne	.+2      	; 0x470 <bmi160_set_sens_conf+0x5a>
     46e:	c1 c0       	rjmp	.+386    	; 0x5f2 <bmi160_set_sens_conf+0x1dc>
			odr = (uint8_t)dev->accel_cfg.odr;
			temp = *data & ~BMI160_ACCEL_ODR_MASK;
			/* Adding output data rate */
			*data = temp | (odr & BMI160_ACCEL_ODR_MASK);
     470:	9f 70       	andi	r25, 0x0F	; 15
     472:	8a 81       	ldd	r24, Y+2	; 0x02
     474:	80 7f       	andi	r24, 0xF0	; 240
     476:	98 2b       	or	r25, r24
     478:	9a 83       	std	Y+2, r25	; 0x02
     47a:	bb c0       	rjmp	.+374    	; 0x5f2 <bmi160_set_sens_conf+0x1dc>
	int8_t rslt = 0;
	uint8_t temp = 0;
	uint8_t bw = 0;

	if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_MAX) {
		if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw) {
     47c:	d8 01       	movw	r26, r16
     47e:	1b 96       	adiw	r26, 0x0b	; 11
     480:	8c 91       	ld	r24, X
     482:	98 17       	cp	r25, r24
     484:	09 f4       	brne	.+2      	; 0x488 <bmi160_set_sens_conf+0x72>
     486:	bc c0       	rjmp	.+376    	; 0x600 <bmi160_set_sens_conf+0x1ea>
			bw = (uint8_t)dev->accel_cfg.bw;
			temp = *data & ~BMI160_ACCEL_BW_MASK;
			/* Adding bandwidth */
			*data = temp | ((bw << 4) & BMI160_ACCEL_ODR_MASK);
     488:	8a 81       	ldd	r24, Y+2	; 0x02
     48a:	8f 78       	andi	r24, 0x8F	; 143
     48c:	8a 83       	std	Y+2, r24	; 0x02
     48e:	b8 c0       	rjmp	.+368    	; 0x600 <bmi160_set_sens_conf+0x1ea>
	int8_t rslt = 0;
	uint8_t temp = 0;
	uint8_t range = 0;

	if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_MAX) {
		if (dev->accel_cfg.range != dev->prev_accel_cfg.range) {
     490:	f8 01       	movw	r30, r16
     492:	82 85       	ldd	r24, Z+10	; 0x0a
     494:	98 17       	cp	r25, r24
     496:	09 f4       	brne	.+2      	; 0x49a <bmi160_set_sens_conf+0x84>
     498:	b9 c0       	rjmp	.+370    	; 0x60c <bmi160_set_sens_conf+0x1f6>
			range = (uint8_t)dev->accel_cfg.range;
			temp = *data & ~BMI160_ACCEL_RANGE_MASK;
			/* Adding range */
			*data = temp | (range & BMI160_ACCEL_RANGE_MASK);
     49a:	9f 70       	andi	r25, 0x0F	; 15
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	80 7f       	andi	r24, 0xF0	; 240
     4a0:	98 2b       	or	r25, r24
     4a2:	9b 83       	std	Y+3, r25	; 0x03
     4a4:	b3 c0       	rjmp	.+358    	; 0x60c <bmi160_set_sens_conf+0x1f6>
	rslt = check_accel_config(data, dev);
	if (rslt == BMI160_OK) {
		/* Write output data rate and bandwidth */
		rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
		if (rslt == BMI160_OK) {
			dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
     4a6:	d8 01       	movw	r26, r16
     4a8:	15 96       	adiw	r26, 0x05	; 5
     4aa:	8c 91       	ld	r24, X
     4ac:	15 97       	sbiw	r26, 0x05	; 5
     4ae:	19 96       	adiw	r26, 0x09	; 9
     4b0:	8c 93       	st	X, r24
     4b2:	19 97       	sbiw	r26, 0x09	; 9
			dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
     4b4:	17 96       	adiw	r26, 0x07	; 7
     4b6:	8c 91       	ld	r24, X
     4b8:	17 97       	sbiw	r26, 0x07	; 7
     4ba:	1b 96       	adiw	r26, 0x0b	; 11
     4bc:	8c 93       	st	X, r24
     4be:	1b 97       	sbiw	r26, 0x0b	; 11
			dev->delay_ms(BMI160_ONE_MS_DELAY);
     4c0:	5e 96       	adiw	r26, 0x1e	; 30
     4c2:	ed 91       	ld	r30, X+
     4c4:	fc 91       	ld	r31, X
     4c6:	5f 97       	sbiw	r26, 0x1f	; 31
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	09 95       	icall
			/* write accel range */
			rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
     4d2:	81 e4       	ldi	r24, 0x41	; 65
     4d4:	be 01       	movw	r22, r28
     4d6:	6d 5f       	subi	r22, 0xFD	; 253
     4d8:	7f 4f       	sbci	r23, 0xFF	; 255
     4da:	41 e0       	ldi	r20, 0x01	; 1
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	98 01       	movw	r18, r16
     4e0:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
			if (rslt == BMI160_OK)
     4e4:	88 23       	and	r24, r24
     4e6:	09 f0       	breq	.+2      	; 0x4ea <bmi160_set_sens_conf+0xd4>
     4e8:	7a c0       	rjmp	.+244    	; 0x5de <bmi160_set_sens_conf+0x1c8>
				dev->prev_accel_cfg.range = dev->accel_cfg.range;
     4ea:	f8 01       	movw	r30, r16
     4ec:	86 81       	ldd	r24, Z+6	; 0x06
     4ee:	82 87       	std	Z+10, r24	; 0x0a
}

static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data[2] = {0};
     4f0:	1b 82       	std	Y+3, r1	; 0x03
     4f2:	1a 82       	std	Y+2, r1	; 0x02
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
	int8_t rslt;

	/* read gyro Output data rate and bandwidth */
	rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
     4f4:	82 e4       	ldi	r24, 0x42	; 66
     4f6:	b7 01       	movw	r22, r14
     4f8:	42 e0       	ldi	r20, 0x02	; 2
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	98 01       	movw	r18, r16
     4fe:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
     502:	88 23       	and	r24, r24
     504:	09 f0       	breq	.+2      	; 0x508 <bmi160_set_sens_conf+0xf2>
     506:	6b c0       	rjmp	.+214    	; 0x5de <bmi160_set_sens_conf+0x1c8>
{
	int8_t rslt = 0;
	uint8_t temp = 0;
	uint8_t odr = 0;

	if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_MAX) {
     508:	d8 01       	movw	r26, r16
     50a:	1d 96       	adiw	r26, 0x0d	; 13
     50c:	9c 91       	ld	r25, X
     50e:	1d 97       	sbiw	r26, 0x0d	; 13
     510:	9e 30       	cpi	r25, 0x0E	; 14
     512:	08 f0       	brcs	.+2      	; 0x516 <bmi160_set_sens_conf+0x100>
     514:	44 c0       	rjmp	.+136    	; 0x59e <bmi160_set_sens_conf+0x188>
		if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr) {
     516:	51 96       	adiw	r26, 0x11	; 17
     518:	8c 91       	ld	r24, X
     51a:	98 17       	cp	r25, r24
     51c:	09 f4       	brne	.+2      	; 0x520 <bmi160_set_sens_conf+0x10a>
     51e:	85 c0       	rjmp	.+266    	; 0x62a <bmi160_set_sens_conf+0x214>
			odr = (uint8_t)dev->gyro_cfg.odr;
			temp = (*data & ~BMI160_GYRO_ODR_MASK);
			/* Adding output data rate */
			*data = temp | (odr & BMI160_GYRO_ODR_MASK);
     520:	9f 70       	andi	r25, 0x0F	; 15
     522:	8a 81       	ldd	r24, Y+2	; 0x02
     524:	80 7f       	andi	r24, 0xF0	; 240
     526:	98 2b       	or	r25, r24
     528:	9a 83       	std	Y+2, r25	; 0x02
     52a:	7f c0       	rjmp	.+254    	; 0x62a <bmi160_set_sens_conf+0x214>
	uint8_t temp = 0;
	uint8_t bw = 0;

	if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_MAX) {
		bw = (uint8_t)dev->gyro_cfg.bw;
		temp = *data & ~BMI160_GYRO_BW_MASK;
     52c:	3a 81       	ldd	r19, Y+2	; 0x02
{
	int8_t rslt = 0;
	uint8_t temp = 0;
	uint8_t range = 0;

	if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_MAX) {
     52e:	f8 01       	movw	r30, r16
     530:	96 85       	ldd	r25, Z+14	; 0x0e
     532:	95 30       	cpi	r25, 0x05	; 5
     534:	a0 f5       	brcc	.+104    	; 0x59e <bmi160_set_sens_conf+0x188>
		if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range) {
     536:	82 89       	ldd	r24, Z+18	; 0x12
     538:	98 17       	cp	r25, r24
     53a:	09 f4       	brne	.+2      	; 0x53e <bmi160_set_sens_conf+0x128>
     53c:	7d c0       	rjmp	.+250    	; 0x638 <bmi160_set_sens_conf+0x222>
			range = (uint8_t)dev->gyro_cfg.range;
			temp = *data & ~BMI160_GYRO_RANGE_MSK;
			/* Adding range */
			*data = temp | (range & BMI160_GYRO_RANGE_MSK);
     53e:	97 70       	andi	r25, 0x07	; 7
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	88 7f       	andi	r24, 0xF8	; 248
     544:	98 2b       	or	r25, r24
     546:	9b 83       	std	Y+3, r25	; 0x03
     548:	77 c0       	rjmp	.+238    	; 0x638 <bmi160_set_sens_conf+0x222>
	rslt = check_gyro_config(data, dev);
	if (rslt == BMI160_OK) {
		/* Write output data rate and bandwidth */
		rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
		if (rslt == BMI160_OK) {
			dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
     54a:	d8 01       	movw	r26, r16
     54c:	1d 96       	adiw	r26, 0x0d	; 13
     54e:	8c 91       	ld	r24, X
     550:	1d 97       	sbiw	r26, 0x0d	; 13
     552:	51 96       	adiw	r26, 0x11	; 17
     554:	8c 93       	st	X, r24
     556:	51 97       	sbiw	r26, 0x11	; 17
			dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
     558:	1f 96       	adiw	r26, 0x0f	; 15
     55a:	8c 91       	ld	r24, X
     55c:	1f 97       	sbiw	r26, 0x0f	; 15
     55e:	53 96       	adiw	r26, 0x13	; 19
     560:	8c 93       	st	X, r24
     562:	53 97       	sbiw	r26, 0x13	; 19
			dev->delay_ms(BMI160_ONE_MS_DELAY);
     564:	5e 96       	adiw	r26, 0x1e	; 30
     566:	ed 91       	ld	r30, X+
     568:	fc 91       	ld	r31, X
     56a:	5f 97       	sbiw	r26, 0x1f	; 31
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	09 95       	icall
			/* Write gyro range */
			rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
     576:	83 e4       	ldi	r24, 0x43	; 67
     578:	be 01       	movw	r22, r28
     57a:	6d 5f       	subi	r22, 0xFD	; 253
     57c:	7f 4f       	sbci	r23, 0xFF	; 255
     57e:	41 e0       	ldi	r20, 0x01	; 1
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	98 01       	movw	r18, r16
     584:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
			if (rslt == BMI160_OK)
     588:	88 23       	and	r24, r24
     58a:	49 f5       	brne	.+82     	; 0x5de <bmi160_set_sens_conf+0x1c8>
				dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
     58c:	f8 01       	movw	r30, r16
     58e:	86 85       	ldd	r24, Z+14	; 0x0e
     590:	82 8b       	std	Z+18, r24	; 0x12
		rslt = set_accel_conf(dev);
		if (rslt == BMI160_OK) {
			rslt = set_gyro_conf(dev);
			if (rslt == BMI160_OK) {
				/* write power mode for accel and gyro */
				rslt = bmi160_set_power_mode(dev);
     592:	c8 01       	movw	r24, r16
     594:	0e 94 42 01 	call	0x284	; 0x284 <bmi160_set_power_mode>
				if (rslt == BMI160_OK)
     598:	88 23       	and	r24, r24
     59a:	09 f5       	brne	.+66     	; 0x5de <bmi160_set_sens_conf+0x1c8>
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <bmi160_set_sens_conf+0x18c>
     59e:	8c ef       	ldi	r24, 0xFC	; 252
     5a0:	1e c0       	rjmp	.+60     	; 0x5de <bmi160_set_sens_conf+0x1c8>
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
     5a2:	19 82       	std	Y+1, r1	; 0x01

	/* read the error reg */
	rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	be 01       	movw	r22, r28
     5a8:	6f 5f       	subi	r22, 0xFF	; 255
     5aa:	7f 4f       	sbci	r23, 0xFF	; 255
     5ac:	41 e0       	ldi	r20, 0x01	; 1
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	98 01       	movw	r18, r16
     5b2:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>

	data = data >> 1;
	data = data & BMI160_ERR_REG_MASK;
     5b6:	99 81       	ldd	r25, Y+1	; 0x01
     5b8:	96 95       	lsr	r25
     5ba:	9f 70       	andi	r25, 0x0F	; 15
	if (data == 1)
     5bc:	91 30       	cpi	r25, 0x01	; 1
     5be:	11 f4       	brne	.+4      	; 0x5c4 <bmi160_set_sens_conf+0x1ae>
     5c0:	8a ef       	ldi	r24, 0xFA	; 250
     5c2:	0d c0       	rjmp	.+26     	; 0x5de <bmi160_set_sens_conf+0x1c8>
		rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
	else if (data == 2)
     5c4:	92 30       	cpi	r25, 0x02	; 2
     5c6:	11 f4       	brne	.+4      	; 0x5cc <bmi160_set_sens_conf+0x1b6>
     5c8:	89 ef       	ldi	r24, 0xF9	; 249
     5ca:	09 c0       	rjmp	.+18     	; 0x5de <bmi160_set_sens_conf+0x1c8>
		rslt = BMI160_E_GYRO_ODR_BW_INVALID;
	else if (data == 3)
     5cc:	93 30       	cpi	r25, 0x03	; 3
     5ce:	11 f4       	brne	.+4      	; 0x5d4 <bmi160_set_sens_conf+0x1be>
     5d0:	88 ef       	ldi	r24, 0xF8	; 248
     5d2:	05 c0       	rjmp	.+10     	; 0x5de <bmi160_set_sens_conf+0x1c8>
		rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
	else if (data == 7)
     5d4:	97 30       	cpi	r25, 0x07	; 7
     5d6:	19 f4       	brne	.+6      	; 0x5de <bmi160_set_sens_conf+0x1c8>
     5d8:	87 ef       	ldi	r24, 0xF7	; 247
     5da:	01 c0       	rjmp	.+2      	; 0x5de <bmi160_set_sens_conf+0x1c8>
     5dc:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
	}

	return rslt;
}
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	cf 91       	pop	r28
     5e6:	df 91       	pop	r29
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	08 95       	ret
{
	int8_t rslt = 0;
	uint8_t temp = 0;
	uint8_t bw = 0;

	if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_MAX) {
     5f2:	d8 01       	movw	r26, r16
     5f4:	17 96       	adiw	r26, 0x07	; 7
     5f6:	9c 91       	ld	r25, X
     5f8:	93 30       	cpi	r25, 0x03	; 3
     5fa:	08 f4       	brcc	.+2      	; 0x5fe <bmi160_set_sens_conf+0x1e8>
     5fc:	3f cf       	rjmp	.-386    	; 0x47c <bmi160_set_sens_conf+0x66>
     5fe:	cf cf       	rjmp	.-98     	; 0x59e <bmi160_set_sens_conf+0x188>
{
	int8_t rslt = 0;
	uint8_t temp = 0;
	uint8_t range = 0;

	if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_MAX) {
     600:	f8 01       	movw	r30, r16
     602:	96 81       	ldd	r25, Z+6	; 0x06
     604:	9d 30       	cpi	r25, 0x0D	; 13
     606:	08 f4       	brcc	.+2      	; 0x60a <bmi160_set_sens_conf+0x1f4>
     608:	43 cf       	rjmp	.-378    	; 0x490 <bmi160_set_sens_conf+0x7a>
     60a:	c9 cf       	rjmp	.-110    	; 0x59e <bmi160_set_sens_conf+0x188>
	uint8_t data[2]  = {0};

	rslt = check_accel_config(data, dev);
	if (rslt == BMI160_OK) {
		/* Write output data rate and bandwidth */
		rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	e9 2e       	mov	r14, r25
     610:	f1 2c       	mov	r15, r1
     612:	ec 0e       	add	r14, r28
     614:	fd 1e       	adc	r15, r29
     616:	80 e4       	ldi	r24, 0x40	; 64
     618:	b7 01       	movw	r22, r14
     61a:	41 e0       	ldi	r20, 0x01	; 1
     61c:	50 e0       	ldi	r21, 0x00	; 0
     61e:	98 01       	movw	r18, r16
     620:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
		if (rslt == BMI160_OK) {
     624:	88 23       	and	r24, r24
     626:	d9 f6       	brne	.-74     	; 0x5de <bmi160_set_sens_conf+0x1c8>
     628:	3e cf       	rjmp	.-388    	; 0x4a6 <bmi160_set_sens_conf+0x90>
{
	int8_t rslt = 0;
	uint8_t temp = 0;
	uint8_t bw = 0;

	if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_MAX) {
     62a:	d8 01       	movw	r26, r16
     62c:	1f 96       	adiw	r26, 0x0f	; 15
     62e:	2c 91       	ld	r18, X
     630:	23 30       	cpi	r18, 0x03	; 3
     632:	08 f4       	brcc	.+2      	; 0x636 <bmi160_set_sens_conf+0x220>
     634:	7b cf       	rjmp	.-266    	; 0x52c <bmi160_set_sens_conf+0x116>
     636:	b3 cf       	rjmp	.-154    	; 0x59e <bmi160_set_sens_conf+0x188>
		bw = (uint8_t)dev->gyro_cfg.bw;
		temp = *data & ~BMI160_GYRO_BW_MASK;
		/* Adding bandwidth */
		*data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
     638:	22 95       	swap	r18
     63a:	20 73       	andi	r18, 0x30	; 48
     63c:	3f 7c       	andi	r19, 0xCF	; 207
     63e:	23 2b       	or	r18, r19
     640:	2a 83       	std	Y+2, r18	; 0x02
	uint8_t data[2] = {0};

	rslt = check_gyro_config(data, dev);
	if (rslt == BMI160_OK) {
		/* Write output data rate and bandwidth */
		rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
     642:	82 e4       	ldi	r24, 0x42	; 66
     644:	be 01       	movw	r22, r28
     646:	6e 5f       	subi	r22, 0xFE	; 254
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	98 01       	movw	r18, r16
     650:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
		if (rslt == BMI160_OK) {
     654:	88 23       	and	r24, r24
     656:	19 f6       	brne	.-122    	; 0x5de <bmi160_set_sens_conf+0x1c8>
     658:	78 cf       	rjmp	.-272    	; 0x54a <bmi160_set_sens_conf+0x134>

0000065a <bmi160_get_sensor_data>:
 * @brief This API reads sensor data, stores it in
 * the bmi160_sensor_data structure pointer passed by the user.
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor, struct bmi160_sensor_data *accel, struct bmi160_sensor_data *gyro,
				const struct bmi160_dev *dev)
{
     65a:	df 92       	push	r13
     65c:	ef 92       	push	r14
     65e:	ff 92       	push	r15
     660:	0f 93       	push	r16
     662:	1f 93       	push	r17
     664:	df 93       	push	r29
     666:	cf 93       	push	r28
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	68 97       	sbiw	r28, 0x18	; 24
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
     678:	7b 01       	movw	r14, r22
     67a:	8a 01       	movw	r16, r20
	uint8_t time_sel;
	uint8_t sen_sel;
	uint8_t len = 0;

	/*Extract the sensor  and time select information*/
	sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
     67c:	48 2f       	mov	r20, r24
     67e:	47 70       	andi	r20, 0x07	; 7
	time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
	sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
	if (time_sel == 1)
     680:	84 2f       	mov	r24, r20
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	96 95       	lsr	r25
     686:	87 95       	ror	r24
     688:	96 95       	lsr	r25
     68a:	87 95       	ror	r24
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	19 f4       	brne	.+6      	; 0x696 <bmi160_get_sensor_data+0x3c>
     690:	53 e0       	ldi	r21, 0x03	; 3
     692:	d5 2e       	mov	r13, r21
     694:	01 c0       	rjmp	.+2      	; 0x698 <bmi160_get_sensor_data+0x3e>
     696:	dd 24       	eor	r13, r13
		len = 3;

	/* Null-pointer check */
	if (dev != NULL) {
     698:	21 15       	cp	r18, r1
     69a:	31 05       	cpc	r19, r1
     69c:	09 f4       	brne	.+2      	; 0x6a0 <bmi160_get_sensor_data+0x46>
     69e:	31 c1       	rjmp	.+610    	; 0x902 <__stack+0xa3>
		switch (sen_sel) {
     6a0:	84 2f       	mov	r24, r20
     6a2:	83 70       	andi	r24, 0x03	; 3
     6a4:	82 30       	cpi	r24, 0x02	; 2
     6a6:	09 f4       	brne	.+2      	; 0x6aa <bmi160_get_sensor_data+0x50>
     6a8:	4e c0       	rjmp	.+156    	; 0x746 <bmi160_get_sensor_data+0xec>
     6aa:	83 30       	cpi	r24, 0x03	; 3
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <bmi160_get_sensor_data+0x56>
     6ae:	ae c0       	rjmp	.+348    	; 0x80c <bmi160_get_sensor_data+0x1b2>
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	11 f0       	breq	.+4      	; 0x6b8 <bmi160_get_sensor_data+0x5e>
     6b4:	6b ef       	ldi	r22, 0xFB	; 251
     6b6:	28 c1       	rjmp	.+592    	; 0x908 <__stack+0xa9>
		case BMI160_ACCEL_ONLY:
			/* Null-pointer check */
			if (accel == NULL)
     6b8:	e1 14       	cp	r14, r1
     6ba:	f1 04       	cpc	r15, r1
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <bmi160_get_sensor_data+0x66>
     6be:	21 c1       	rjmp	.+578    	; 0x902 <__stack+0xa3>
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t idx = 0;
	uint8_t data_array[9] = {0};
     6c0:	fe 01       	movw	r30, r28
     6c2:	31 96       	adiw	r30, 0x01	; 1
     6c4:	89 e0       	ldi	r24, 0x09	; 9
     6c6:	df 01       	movw	r26, r30
     6c8:	1d 92       	st	X+, r1
     6ca:	8a 95       	dec	r24
     6cc:	e9 f7       	brne	.-6      	; 0x6c8 <bmi160_get_sensor_data+0x6e>
	uint8_t lsb;
	uint8_t msb;
	int16_t msblsb;

	/* read accel sensor data along with time if requested */
	rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
     6ce:	4d 2d       	mov	r20, r13
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	4a 5f       	subi	r20, 0xFA	; 250
     6d4:	5f 4f       	sbci	r21, 0xFF	; 255
     6d6:	82 e1       	ldi	r24, 0x12	; 18
     6d8:	bf 01       	movw	r22, r30
     6da:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
     6de:	68 2f       	mov	r22, r24
	if (rslt == BMI160_OK) {
     6e0:	88 23       	and	r24, r24
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <bmi160_get_sensor_data+0x8c>
     6e4:	10 c1       	rjmp	.+544    	; 0x906 <__stack+0xa7>

		/* Accel Data */
		lsb = data_array[idx++];
		msb = data_array[idx++];
		msblsb = (int16_t)((msb << 8) | lsb);
		accel->x = msblsb; /* Data in X axis */
     6e6:	9a 81       	ldd	r25, Y+2	; 0x02
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	29 81       	ldd	r18, Y+1	; 0x01
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	82 2b       	or	r24, r18
     6f0:	93 2b       	or	r25, r19
     6f2:	f7 01       	movw	r30, r14
     6f4:	91 83       	std	Z+1, r25	; 0x01
     6f6:	80 83       	st	Z, r24

		lsb = data_array[idx++];
		msb = data_array[idx++];
		msblsb = (int16_t)((msb << 8) | lsb);
		accel->y = msblsb; /* Data in Y axis */
     6f8:	9c 81       	ldd	r25, Y+4	; 0x04
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	2b 81       	ldd	r18, Y+3	; 0x03
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	82 2b       	or	r24, r18
     702:	93 2b       	or	r25, r19
     704:	93 83       	std	Z+3, r25	; 0x03
     706:	82 83       	std	Z+2, r24	; 0x02

		lsb = data_array[idx++];
		msb = data_array[idx++];
		msblsb = (int16_t)((msb << 8) | lsb);
		accel->z = msblsb; /* Data in Z axis */
     708:	9e 81       	ldd	r25, Y+6	; 0x06
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	2d 81       	ldd	r18, Y+5	; 0x05
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	82 2b       	or	r24, r18
     712:	93 2b       	or	r25, r19
     714:	95 83       	std	Z+5, r25	; 0x05
     716:	84 83       	std	Z+4, r24	; 0x04

		if (len == 3) {
     718:	f3 e0       	ldi	r31, 0x03	; 3
     71a:	df 16       	cp	r13, r31
     71c:	71 f4       	brne	.+28     	; 0x73a <bmi160_get_sensor_data+0xe0>
			time_0 = data_array[idx++];
			time_1 = (uint16_t)(data_array[idx++] << 8);
			time_2 = (uint32_t)(data_array[idx++] << 16);
			accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
     71e:	2f 81       	ldd	r18, Y+7	; 0x07
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	40 e0       	ldi	r20, 0x00	; 0
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	98 85       	ldd	r25, Y+8	; 0x08
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	a0 e0       	ldi	r26, 0x00	; 0
     72c:	b0 e0       	ldi	r27, 0x00	; 0
     72e:	28 2b       	or	r18, r24
     730:	39 2b       	or	r19, r25
     732:	4a 2b       	or	r20, r26
     734:	5b 2b       	or	r21, r27
     736:	d7 01       	movw	r26, r14
     738:	d0 c0       	rjmp	.+416    	; 0x8da <__stack+0x7b>
		} else {
			accel->sensortime = 0;
     73a:	f7 01       	movw	r30, r14
     73c:	16 82       	std	Z+6, r1	; 0x06
     73e:	17 82       	std	Z+7, r1	; 0x07
     740:	10 86       	std	Z+8, r1	; 0x08
     742:	11 86       	std	Z+9, r1	; 0x09
     744:	e1 c0       	rjmp	.+450    	; 0x908 <__stack+0xa9>
			else
				rslt = get_accel_data(len, accel, dev);
			break;
		case BMI160_GYRO_ONLY:
			/* Null-pointer check */
			if (gyro == NULL)
     746:	01 15       	cp	r16, r1
     748:	11 05       	cpc	r17, r1
     74a:	09 f4       	brne	.+2      	; 0x74e <bmi160_get_sensor_data+0xf4>
     74c:	da c0       	rjmp	.+436    	; 0x902 <__stack+0xa3>
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t idx = 0;
	uint8_t data_array[15] = {0};
     74e:	fe 01       	movw	r30, r28
     750:	3a 96       	adiw	r30, 0x0a	; 10
     752:	8f e0       	ldi	r24, 0x0F	; 15
     754:	df 01       	movw	r26, r30
     756:	1d 92       	st	X+, r1
     758:	8a 95       	dec	r24
     75a:	e9 f7       	brne	.-6      	; 0x756 <bmi160_get_sensor_data+0xfc>
	uint32_t time_2 = 0;
	uint8_t lsb;
	uint8_t msb;
	int16_t msblsb;

	if (len == 0) {
     75c:	dd 20       	and	r13, r13
     75e:	21 f5       	brne	.+72     	; 0x7a8 <bmi160_get_sensor_data+0x14e>
		/* read gyro data only */
		rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
     760:	8c e0       	ldi	r24, 0x0C	; 12
     762:	bf 01       	movw	r22, r30
     764:	46 e0       	ldi	r20, 0x06	; 6
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
     76c:	68 2f       	mov	r22, r24
		if (rslt == BMI160_OK) {
     76e:	88 23       	and	r24, r24
     770:	09 f0       	breq	.+2      	; 0x774 <bmi160_get_sensor_data+0x11a>
     772:	c9 c0       	rjmp	.+402    	; 0x906 <__stack+0xa7>
			/* Gyro Data */
			lsb = data_array[idx++];
			msb = data_array[idx++];
			msblsb = (int16_t)((msb << 8) | lsb);
			gyro->x = msblsb; /* Data in X axis */
     774:	9b 85       	ldd	r25, Y+11	; 0x0b
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	2a 85       	ldd	r18, Y+10	; 0x0a
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	82 2b       	or	r24, r18
     77e:	93 2b       	or	r25, r19
     780:	f8 01       	movw	r30, r16
     782:	91 83       	std	Z+1, r25	; 0x01
     784:	80 83       	st	Z, r24

			lsb = data_array[idx++];
			msb = data_array[idx++];
			msblsb = (int16_t)((msb << 8) | lsb);
			gyro->y = msblsb; /* Data in Y axis */
     786:	9d 85       	ldd	r25, Y+13	; 0x0d
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	2c 85       	ldd	r18, Y+12	; 0x0c
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	82 2b       	or	r24, r18
     790:	93 2b       	or	r25, r19
     792:	93 83       	std	Z+3, r25	; 0x03
     794:	82 83       	std	Z+2, r24	; 0x02

			lsb = data_array[idx++];
			msb = data_array[idx++];
			msblsb = (int16_t)((msb << 8) | lsb);
			gyro->z = msblsb; /* Data in Z axis */
     796:	9f 85       	ldd	r25, Y+15	; 0x0f
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	2e 85       	ldd	r18, Y+14	; 0x0e
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	82 2b       	or	r24, r18
     7a0:	93 2b       	or	r25, r19
     7a2:	95 83       	std	Z+5, r25	; 0x05
     7a4:	84 83       	std	Z+4, r24	; 0x04
     7a6:	a5 c0       	rjmp	.+330    	; 0x8f2 <__stack+0x93>
		} else {
			rslt = BMI160_E_COM_FAIL;
		}
	} else {
		/* read gyro sensor data along with time */
		rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
     7a8:	4d 2d       	mov	r20, r13
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	44 5f       	subi	r20, 0xF4	; 244
     7ae:	5f 4f       	sbci	r21, 0xFF	; 255
     7b0:	8c e0       	ldi	r24, 0x0C	; 12
     7b2:	bf 01       	movw	r22, r30
     7b4:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
     7b8:	68 2f       	mov	r22, r24
		if (rslt == BMI160_OK) {
     7ba:	88 23       	and	r24, r24
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <bmi160_get_sensor_data+0x166>
     7be:	a3 c0       	rjmp	.+326    	; 0x906 <__stack+0xa7>
			/* Gyro Data */
			lsb = data_array[idx++];
			msb = data_array[idx++];
			msblsb = (int16_t)((msb << 8) | lsb);
			gyro->x = msblsb; /* gyro X axis data */
     7c0:	9b 85       	ldd	r25, Y+11	; 0x0b
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	2a 85       	ldd	r18, Y+10	; 0x0a
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	82 2b       	or	r24, r18
     7ca:	93 2b       	or	r25, r19
     7cc:	f8 01       	movw	r30, r16
     7ce:	91 83       	std	Z+1, r25	; 0x01
     7d0:	80 83       	st	Z, r24

			lsb = data_array[idx++];
			msb = data_array[idx++];
			msblsb = (int16_t)((msb << 8) | lsb);
			gyro->y = msblsb; /* gyro Y axis data */
     7d2:	9d 85       	ldd	r25, Y+13	; 0x0d
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	2c 85       	ldd	r18, Y+12	; 0x0c
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	82 2b       	or	r24, r18
     7dc:	93 2b       	or	r25, r19
     7de:	93 83       	std	Z+3, r25	; 0x03
     7e0:	82 83       	std	Z+2, r24	; 0x02

			lsb = data_array[idx++];
			msb = data_array[idx++];
			msblsb = (int16_t)((msb << 8) | lsb);
			gyro->z = msblsb; /* gyro Z axis data */
     7e2:	9f 85       	ldd	r25, Y+15	; 0x0f
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	2e 85       	ldd	r18, Y+14	; 0x0e
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	82 2b       	or	r24, r18
     7ec:	93 2b       	or	r25, r19
     7ee:	95 83       	std	Z+5, r25	; 0x05
     7f0:	84 83       	std	Z+4, r24	; 0x04

			idx = idx + 6;
			time_0 = data_array[idx++];
			time_1 = (uint16_t)(data_array[idx++] << 8);
			time_2 = (uint32_t)(data_array[idx++] << 16);
			gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
     7f2:	2e 89       	ldd	r18, Y+22	; 0x16
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	9f 89       	ldd	r25, Y+23	; 0x17
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	28 2b       	or	r18, r24
     804:	39 2b       	or	r19, r25
     806:	4a 2b       	or	r20, r26
     808:	5b 2b       	or	r21, r27
     80a:	66 c0       	rjmp	.+204    	; 0x8d8 <__stack+0x79>
			else
				rslt = get_gyro_data(len, gyro, dev);
			break;
		case BMI160_BOTH_ACCEL_AND_GYRO:
			/* Null-pointer check */
			if ((gyro == NULL) || (accel == NULL))
     80c:	01 15       	cp	r16, r1
     80e:	11 05       	cpc	r17, r1
     810:	09 f4       	brne	.+2      	; 0x814 <bmi160_get_sensor_data+0x1ba>
     812:	77 c0       	rjmp	.+238    	; 0x902 <__stack+0xa3>
     814:	e1 14       	cp	r14, r1
     816:	f1 04       	cpc	r15, r1
     818:	09 f4       	brne	.+2      	; 0x81c <bmi160_get_sensor_data+0x1c2>
     81a:	73 c0       	rjmp	.+230    	; 0x902 <__stack+0xa3>
static int8_t get_accel_gyro_data(uint8_t len, struct bmi160_sensor_data *accel, struct bmi160_sensor_data *gyro,
					const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t idx = 0;
	uint8_t data_array[15] = {0};
     81c:	fe 01       	movw	r30, r28
     81e:	3a 96       	adiw	r30, 0x0a	; 10
     820:	8f e0       	ldi	r24, 0x0F	; 15
     822:	df 01       	movw	r26, r30
     824:	1d 92       	st	X+, r1
     826:	8a 95       	dec	r24
     828:	e9 f7       	brne	.-6      	; 0x824 <bmi160_get_sensor_data+0x1ca>
	uint8_t msb;
	int16_t msblsb;

	/* read both accel and gyro sensor data
	 * along with time if requested */
	rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
     82a:	4d 2d       	mov	r20, r13
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	44 5f       	subi	r20, 0xF4	; 244
     830:	5f 4f       	sbci	r21, 0xFF	; 255
     832:	8c e0       	ldi	r24, 0x0C	; 12
     834:	bf 01       	movw	r22, r30
     836:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
     83a:	68 2f       	mov	r22, r24
	if (rslt == BMI160_OK) {
     83c:	88 23       	and	r24, r24
     83e:	09 f0       	breq	.+2      	; 0x842 <bmi160_get_sensor_data+0x1e8>
     840:	62 c0       	rjmp	.+196    	; 0x906 <__stack+0xa7>
		/* Gyro Data */
		lsb = data_array[idx++];
		msb = data_array[idx++];
		msblsb = (int16_t)((msb << 8) | lsb);
		gyro->x = msblsb; /* gyro X axis data */
     842:	9b 85       	ldd	r25, Y+11	; 0x0b
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	2a 85       	ldd	r18, Y+10	; 0x0a
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	82 2b       	or	r24, r18
     84c:	93 2b       	or	r25, r19
     84e:	f8 01       	movw	r30, r16
     850:	91 83       	std	Z+1, r25	; 0x01
     852:	80 83       	st	Z, r24

		lsb = data_array[idx++];
		msb = data_array[idx++];
		msblsb = (int16_t)((msb << 8) | lsb);
		gyro->y = msblsb; /* gyro Y axis data */
     854:	9d 85       	ldd	r25, Y+13	; 0x0d
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	2c 85       	ldd	r18, Y+12	; 0x0c
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	82 2b       	or	r24, r18
     85e:	93 2b       	or	r25, r19
     860:	93 83       	std	Z+3, r25	; 0x03
     862:	82 83       	std	Z+2, r24	; 0x02

		lsb = data_array[idx++];
		msb = data_array[idx++];
		msblsb = (int16_t)((msb << 8) | lsb);
		gyro->z = msblsb; /* gyro Z axis data */
     864:	9f 85       	ldd	r25, Y+15	; 0x0f
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	2e 85       	ldd	r18, Y+14	; 0x0e
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	82 2b       	or	r24, r18
     86e:	93 2b       	or	r25, r19
     870:	95 83       	std	Z+5, r25	; 0x05
     872:	84 83       	std	Z+4, r24	; 0x04

		/* Accel Data */
		lsb = data_array[idx++];
		msb = data_array[idx++];
		msblsb = (int16_t)((msb << 8) | lsb);
		accel->x = (int16_t)msblsb; /* accel X axis data */
     874:	99 89       	ldd	r25, Y+17	; 0x11
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	28 89       	ldd	r18, Y+16	; 0x10
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	82 2b       	or	r24, r18
     87e:	93 2b       	or	r25, r19
     880:	d7 01       	movw	r26, r14
     882:	11 96       	adiw	r26, 0x01	; 1
     884:	9c 93       	st	X, r25
     886:	8e 93       	st	-X, r24

		lsb = data_array[idx++];
		msb = data_array[idx++];
		msblsb = (int16_t)((msb << 8) | lsb);
		accel->y = (int16_t)msblsb; /* accel Y axis data */
     888:	9b 89       	ldd	r25, Y+19	; 0x13
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	2a 89       	ldd	r18, Y+18	; 0x12
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	82 2b       	or	r24, r18
     892:	93 2b       	or	r25, r19
     894:	13 96       	adiw	r26, 0x03	; 3
     896:	9c 93       	st	X, r25
     898:	8e 93       	st	-X, r24
     89a:	12 97       	sbiw	r26, 0x02	; 2

		lsb = data_array[idx++];
		msb = data_array[idx++];
		msblsb = (int16_t)((msb << 8) | lsb);
		accel->z = (int16_t)msblsb; /* accel Z axis data */
     89c:	9d 89       	ldd	r25, Y+21	; 0x15
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	2c 89       	ldd	r18, Y+20	; 0x14
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	82 2b       	or	r24, r18
     8a6:	93 2b       	or	r25, r19
     8a8:	15 96       	adiw	r26, 0x05	; 5
     8aa:	9c 93       	st	X, r25
     8ac:	8e 93       	st	-X, r24
     8ae:	14 97       	sbiw	r26, 0x04	; 4

		if (len == 3) {
     8b0:	b3 e0       	ldi	r27, 0x03	; 3
     8b2:	db 16       	cp	r13, r27
     8b4:	c9 f4       	brne	.+50     	; 0x8e8 <__stack+0x89>
			time_0 = data_array[idx++];
			time_1 = (uint16_t)(data_array[idx++] << 8);
			time_2 = (uint32_t)(data_array[idx++] << 16);
			accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
     8b6:	2e 89       	ldd	r18, Y+22	; 0x16
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	9f 89       	ldd	r25, Y+23	; 0x17
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	a0 e0       	ldi	r26, 0x00	; 0
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	28 2b       	or	r18, r24
     8c8:	39 2b       	or	r19, r25
     8ca:	4a 2b       	or	r20, r26
     8cc:	5b 2b       	or	r21, r27
     8ce:	f7 01       	movw	r30, r14
     8d0:	26 83       	std	Z+6, r18	; 0x06
     8d2:	37 83       	std	Z+7, r19	; 0x07
     8d4:	40 87       	std	Z+8, r20	; 0x08
     8d6:	51 87       	std	Z+9, r21	; 0x09
			gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
     8d8:	d8 01       	movw	r26, r16
     8da:	16 96       	adiw	r26, 0x06	; 6
     8dc:	2d 93       	st	X+, r18
     8de:	3d 93       	st	X+, r19
     8e0:	4d 93       	st	X+, r20
     8e2:	5c 93       	st	X, r21
     8e4:	19 97       	sbiw	r26, 0x09	; 9
     8e6:	10 c0       	rjmp	.+32     	; 0x908 <__stack+0xa9>
		} else {
			accel->sensortime = 0;
     8e8:	f7 01       	movw	r30, r14
     8ea:	16 82       	std	Z+6, r1	; 0x06
     8ec:	17 82       	std	Z+7, r1	; 0x07
     8ee:	10 86       	std	Z+8, r1	; 0x08
     8f0:	11 86       	std	Z+9, r1	; 0x09
			gyro->sensortime = 0;
     8f2:	d8 01       	movw	r26, r16
     8f4:	16 96       	adiw	r26, 0x06	; 6
     8f6:	1d 92       	st	X+, r1
     8f8:	1d 92       	st	X+, r1
     8fa:	1d 92       	st	X+, r1
     8fc:	1c 92       	st	X, r1
     8fe:	19 97       	sbiw	r26, 0x09	; 9
     900:	03 c0       	rjmp	.+6      	; 0x908 <__stack+0xa9>
     902:	6f ef       	ldi	r22, 0xFF	; 255
     904:	01 c0       	rjmp	.+2      	; 0x908 <__stack+0xa9>
     906:	6e ef       	ldi	r22, 0xFE	; 254
		rslt = BMI160_E_NULL_PTR;
	}

	return rslt;

}
     908:	86 2f       	mov	r24, r22
     90a:	68 96       	adiw	r28, 0x18	; 24
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
     916:	cf 91       	pop	r28
     918:	df 91       	pop	r29
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	08 95       	ret

00000926 <bmi160_aux_read>:
/*!
 * @brief This API reads the mention no of byte of data from the given
 * register address of auxiliary sensor.
 */
int8_t bmi160_aux_read(uint8_t reg_addr, uint8_t *aux_data, uint16_t len, const struct bmi160_dev *dev)
{
     926:	2f 92       	push	r2
     928:	3f 92       	push	r3
     92a:	4f 92       	push	r4
     92c:	5f 92       	push	r5
     92e:	6f 92       	push	r6
     930:	7f 92       	push	r7
     932:	8f 92       	push	r8
     934:	9f 92       	push	r9
     936:	af 92       	push	r10
     938:	bf 92       	push	r11
     93a:	cf 92       	push	r12
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	df 93       	push	r29
     948:	cf 93       	push	r28
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	2c 97       	sbiw	r28, 0x0c	; 12
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	e8 2f       	mov	r30, r24
     95c:	7c 87       	std	Y+12, r23	; 0x0c
     95e:	6b 87       	std	Y+11, r22	; 0x0b
     960:	4a 01       	movw	r8, r20
     962:	59 01       	movw	r10, r18
	int8_t rslt = BMI160_OK;
	uint16_t map_len = 0;

	/* Null-pointer check */
	if ((dev == NULL) || (dev->read == NULL)) {
     964:	21 15       	cp	r18, r1
     966:	31 05       	cpc	r19, r1
     968:	09 f4       	brne	.+2      	; 0x96c <bmi160_aux_read+0x46>
     96a:	76 c0       	rjmp	.+236    	; 0xa58 <bmi160_aux_read+0x132>
     96c:	d9 01       	movw	r26, r18
     96e:	5a 96       	adiw	r26, 0x1a	; 26
     970:	8d 91       	ld	r24, X+
     972:	9c 91       	ld	r25, X
     974:	5b 97       	sbiw	r26, 0x1b	; 27
     976:	89 2b       	or	r24, r25
     978:	09 f4       	brne	.+2      	; 0x97c <bmi160_aux_read+0x56>
     97a:	6e c0       	rjmp	.+220    	; 0xa58 <bmi160_aux_read+0x132>
		rslt = BMI160_E_NULL_PTR;
	} else {
		if (dev->aux_cfg.aux_sensor_enable == BMI160_ENABLE) {
     97c:	54 96       	adiw	r26, 0x14	; 20
     97e:	8c 91       	ld	r24, X
     980:	80 ff       	sbrs	r24, 0
     982:	6c c0       	rjmp	.+216    	; 0xa5c <bmi160_aux_read+0x136>
 */
static int8_t map_read_len(uint16_t *len, const struct bmi160_dev *dev)
{
	int8_t rslt = BMI160_OK;

	switch (dev->aux_cfg.aux_rd_burst_len) {
     984:	86 95       	lsr	r24
     986:	86 95       	lsr	r24
     988:	83 70       	andi	r24, 0x03	; 3
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	91 05       	cpc	r25, r1
     990:	71 f0       	breq	.+28     	; 0x9ae <bmi160_aux_read+0x88>
     992:	82 30       	cpi	r24, 0x02	; 2
     994:	91 05       	cpc	r25, r1
     996:	24 f4       	brge	.+8      	; 0x9a0 <bmi160_aux_read+0x7a>
     998:	89 2b       	or	r24, r25
     99a:	09 f4       	brne	.+2      	; 0x99e <bmi160_aux_read+0x78>
     99c:	7a c0       	rjmp	.+244    	; 0xa92 <bmi160_aux_read+0x16c>
     99e:	5e c0       	rjmp	.+188    	; 0xa5c <bmi160_aux_read+0x136>
     9a0:	82 30       	cpi	r24, 0x02	; 2
     9a2:	91 05       	cpc	r25, r1
     9a4:	41 f0       	breq	.+16     	; 0x9b6 <bmi160_aux_read+0x90>
     9a6:	03 97       	sbiw	r24, 0x03	; 3
     9a8:	09 f0       	breq	.+2      	; 0x9ac <bmi160_aux_read+0x86>
     9aa:	58 c0       	rjmp	.+176    	; 0xa5c <bmi160_aux_read+0x136>
     9ac:	08 c0       	rjmp	.+16     	; 0x9be <bmi160_aux_read+0x98>
     9ae:	b2 e0       	ldi	r27, 0x02	; 2
     9b0:	eb 2e       	mov	r14, r27
     9b2:	f1 2c       	mov	r15, r1
     9b4:	71 c0       	rjmp	.+226    	; 0xa98 <bmi160_aux_read+0x172>
     9b6:	a6 e0       	ldi	r26, 0x06	; 6
     9b8:	ea 2e       	mov	r14, r26
     9ba:	f1 2c       	mov	r15, r1
     9bc:	6d c0       	rjmp	.+218    	; 0xa98 <bmi160_aux_read+0x172>
     9be:	f8 e0       	ldi	r31, 0x08	; 8
     9c0:	ef 2e       	mov	r14, r31
     9c2:	f1 2c       	mov	r15, r1
     9c4:	69 c0       	rjmp	.+210    	; 0xa98 <bmi160_aux_read+0x172>
	uint8_t read_count;
	uint8_t read_len = (uint8_t)map_len;

	for (; count < len;) {
		/* set address to read */
		rslt = bmi160_set_regs(BMI160_AUX_IF_2_ADDR, &reg_addr, 1, dev);
     9c6:	8d e4       	ldi	r24, 0x4D	; 77
     9c8:	be 01       	movw	r22, r28
     9ca:	6f 5f       	subi	r22, 0xFF	; 255
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	41 e0       	ldi	r20, 0x01	; 1
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	95 01       	movw	r18, r10
     9d4:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
     9d8:	18 2f       	mov	r17, r24
		dev->delay_ms(BMI160_AUX_COM_DELAY);
     9da:	d5 01       	movw	r26, r10
     9dc:	5e 96       	adiw	r26, 0x1e	; 30
     9de:	ed 91       	ld	r30, X+
     9e0:	fc 91       	ld	r31, X
     9e2:	5f 97       	sbiw	r26, 0x1f	; 31
     9e4:	6a e0       	ldi	r22, 0x0A	; 10
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	09 95       	icall
		if (rslt == BMI160_OK) {
     9ee:	11 23       	and	r17, r17
     9f0:	71 f5       	brne	.+92     	; 0xa4e <bmi160_aux_read+0x128>
			rslt = bmi160_get_regs(read_addr, data, map_len, dev);
     9f2:	84 e0       	ldi	r24, 0x04	; 4
     9f4:	60 2f       	mov	r22, r16
     9f6:	73 2d       	mov	r23, r3
     9f8:	a7 01       	movw	r20, r14
     9fa:	95 01       	movw	r18, r10
     9fc:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
			if (rslt == BMI160_OK) {
     a00:	88 23       	and	r24, r24
     a02:	11 f0       	breq	.+4      	; 0xa08 <bmi160_aux_read+0xe2>
     a04:	1e ef       	ldi	r17, 0xFE	; 254
     a06:	2b c0       	rjmp	.+86     	; 0xa5e <bmi160_aux_read+0x138>
				read_count = 0;
				/* if read len is less the burst read len
				 * mention by user*/
				if (len < map_len) {
     a08:	8e 14       	cp	r8, r14
     a0a:	9f 04       	cpc	r9, r15
     a0c:	10 f4       	brcc	.+4      	; 0xa12 <bmi160_aux_read+0xec>
					read_len = (uint8_t)len;
     a0e:	72 2c       	mov	r7, r2
     a10:	07 c0       	rjmp	.+14     	; 0xa20 <bmi160_aux_read+0xfa>
				} else {
					if ((len - count) < map_len)
     a12:	c4 01       	movw	r24, r8
     a14:	8c 19       	sub	r24, r12
     a16:	9d 09       	sbc	r25, r13
     a18:	8e 15       	cp	r24, r14
     a1a:	9f 05       	cpc	r25, r15
     a1c:	08 f4       	brcc	.+2      	; 0xa20 <bmi160_aux_read+0xfa>
     a1e:	75 2c       	mov	r7, r5
     a20:	ab 85       	ldd	r26, Y+11	; 0x0b
     a22:	bc 85       	ldd	r27, Y+12	; 0x0c
     a24:	ac 0d       	add	r26, r12
     a26:	bd 1d       	adc	r27, r13
     a28:	80 2f       	mov	r24, r16
     a2a:	93 2d       	mov	r25, r3
     a2c:	fc 01       	movw	r30, r24
     a2e:	02 c0       	rjmp	.+4      	; 0xa34 <bmi160_aux_read+0x10e>
						read_len = (uint8_t)(len - count);
				}

				for (; read_count < read_len; read_count++)
					aux_data[count + read_count] = data[read_count];
     a30:	81 91       	ld	r24, Z+
     a32:	8d 93       	st	X+, r24
				} else {
					if ((len - count) < map_len)
						read_len = (uint8_t)(len - count);
				}

				for (; read_count < read_len; read_count++)
     a34:	8e 2f       	mov	r24, r30
     a36:	80 1b       	sub	r24, r16
     a38:	87 15       	cp	r24, r7
     a3a:	d0 f3       	brcs	.-12     	; 0xa30 <bmi160_aux_read+0x10a>
					aux_data[count + read_count] = data[read_count];

				reg_addr += (uint8_t)map_len;
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	84 0d       	add	r24, r4
     a40:	89 83       	std	Y+1, r24	; 0x01
				count += (uint8_t)map_len;
     a42:	64 0c       	add	r6, r4
     a44:	ba 85       	ldd	r27, Y+10	; 0x0a
     a46:	5b 0e       	add	r5, r27
     a48:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t read_addr = BMI160_AUX_DATA_ADDR;
	uint8_t count = 0;
	uint8_t read_count;
	uint8_t read_len = (uint8_t)map_len;

	for (; count < len;) {
     a4a:	c6 2c       	mov	r12, r6
     a4c:	dd 24       	eor	r13, r13
     a4e:	c8 14       	cp	r12, r8
     a50:	d9 04       	cpc	r13, r9
     a52:	08 f4       	brcc	.+2      	; 0xa56 <bmi160_aux_read+0x130>
     a54:	b8 cf       	rjmp	.-144    	; 0x9c6 <bmi160_aux_read+0xa0>
     a56:	03 c0       	rjmp	.+6      	; 0xa5e <bmi160_aux_read+0x138>
     a58:	1f ef       	ldi	r17, 0xFF	; 255
     a5a:	01 c0       	rjmp	.+2      	; 0xa5e <bmi160_aux_read+0x138>
     a5c:	1b ef       	ldi	r17, 0xFB	; 251
			rslt = BMI160_E_INVALID_INPUT;
		}
	}

	return rslt;
}
     a5e:	81 2f       	mov	r24, r17
     a60:	2c 96       	adiw	r28, 0x0c	; 12
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	cf 91       	pop	r28
     a6e:	df 91       	pop	r29
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	df 90       	pop	r13
     a7a:	cf 90       	pop	r12
     a7c:	bf 90       	pop	r11
     a7e:	af 90       	pop	r10
     a80:	9f 90       	pop	r9
     a82:	8f 90       	pop	r8
     a84:	7f 90       	pop	r7
     a86:	6f 90       	pop	r6
     a88:	5f 90       	pop	r5
     a8a:	4f 90       	pop	r4
     a8c:	3f 90       	pop	r3
     a8e:	2f 90       	pop	r2
     a90:	08 95       	ret
	uint8_t read_addr = BMI160_AUX_DATA_ADDR;
	uint8_t count = 0;
	uint8_t read_count;
	uint8_t read_len = (uint8_t)map_len;

	for (; count < len;) {
     a92:	71 e0       	ldi	r23, 0x01	; 1
     a94:	e7 2e       	mov	r14, r23
     a96:	f1 2c       	mov	r15, r1
		rslt = BMI160_E_NULL_PTR;
	} else {
		if (dev->aux_cfg.aux_sensor_enable == BMI160_ENABLE) {
			rslt = map_read_len(&map_len, dev);
			if (rslt == BMI160_OK)
				rslt = extract_aux_read(map_len, reg_addr, aux_data, len, dev);
     a98:	e9 83       	std	Y+1, r30	; 0x01
 */
static int8_t extract_aux_read(uint16_t map_len, uint8_t reg_addr, uint8_t *aux_data, uint16_t len,
											const struct bmi160_dev *dev)
{
	int8_t rslt = BMI160_OK;
	uint8_t data[8] = {0,};
     a9a:	fe 01       	movw	r30, r28
     a9c:	32 96       	adiw	r30, 0x02	; 2
     a9e:	88 e0       	ldi	r24, 0x08	; 8
     aa0:	df 01       	movw	r26, r30
     aa2:	1d 92       	st	X+, r1
     aa4:	8a 95       	dec	r24
     aa6:	e9 f7       	brne	.-6      	; 0xaa2 <bmi160_aux_read+0x17c>
	uint8_t read_addr = BMI160_AUX_DATA_ADDR;
	uint8_t count = 0;
	uint8_t read_count;
	uint8_t read_len = (uint8_t)map_len;
     aa8:	4e 2c       	mov	r4, r14
     aaa:	be 2d       	mov	r27, r14
     aac:	b1 95       	neg	r27
     aae:	ba 87       	std	Y+10, r27	; 0x0a
     ab0:	58 2c       	mov	r5, r8
     ab2:	7e 2c       	mov	r7, r14
     ab4:	66 24       	eor	r6, r6
	for (; count < len;) {
		/* set address to read */
		rslt = bmi160_set_regs(BMI160_AUX_IF_2_ADDR, &reg_addr, 1, dev);
		dev->delay_ms(BMI160_AUX_COM_DELAY);
		if (rslt == BMI160_OK) {
			rslt = bmi160_get_regs(read_addr, data, map_len, dev);
     ab6:	0e 2f       	mov	r16, r30
     ab8:	3f 2e       	mov	r3, r31
			if (rslt == BMI160_OK) {
				read_count = 0;
				/* if read len is less the burst read len
				 * mention by user*/
				if (len < map_len) {
					read_len = (uint8_t)len;
     aba:	28 2c       	mov	r2, r8
     abc:	c5 cf       	rjmp	.-118    	; 0xa48 <bmi160_aux_read+0x122>

00000abe <bmi160_aux_write>:
/*!
 * @brief This API writes the mention no of byte of data to the given
 * register address of auxiliary sensor.
 */
int8_t bmi160_aux_write(uint8_t reg_addr, uint8_t *aux_data, uint16_t len, const struct bmi160_dev *dev)
{
     abe:	4f 92       	push	r4
     ac0:	5f 92       	push	r5
     ac2:	6f 92       	push	r6
     ac4:	7f 92       	push	r7
     ac6:	8f 92       	push	r8
     ac8:	9f 92       	push	r9
     aca:	af 92       	push	r10
     acc:	bf 92       	push	r11
     ace:	cf 92       	push	r12
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	df 93       	push	r29
     adc:	cf 93       	push	r28
     ade:	0f 92       	push	r0
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	89 83       	std	Y+1, r24	; 0x01
     ae6:	6b 01       	movw	r12, r22
     ae8:	4a 01       	movw	r8, r20
     aea:	89 01       	movw	r16, r18
	int8_t rslt = BMI160_OK;
	uint8_t count = 0;

	/* Null-pointer check */
	if ((dev == NULL) || (dev->write == NULL)) {
     aec:	21 15       	cp	r18, r1
     aee:	31 05       	cpc	r19, r1
     af0:	09 f4       	brne	.+2      	; 0xaf4 <bmi160_aux_write+0x36>
     af2:	4b c0       	rjmp	.+150    	; 0xb8a <bmi160_aux_write+0xcc>
     af4:	d9 01       	movw	r26, r18
     af6:	5c 96       	adiw	r26, 0x1c	; 28
     af8:	8d 91       	ld	r24, X+
     afa:	9c 91       	ld	r25, X
     afc:	5d 97       	sbiw	r26, 0x1d	; 29
     afe:	89 2b       	or	r24, r25
     b00:	09 f4       	brne	.+2      	; 0xb04 <bmi160_aux_write+0x46>
     b02:	43 c0       	rjmp	.+134    	; 0xb8a <bmi160_aux_write+0xcc>
     b04:	ff 24       	eor	r15, r15
     b06:	ee 24       	eor	r14, r14
			/* set data to write */
			rslt = bmi160_set_regs(BMI160_AUX_IF_4_ADDR, aux_data, 1, dev);
			dev->delay_ms(BMI160_AUX_COM_DELAY);
			if (rslt == BMI160_OK) {
				/* set address to write */
				rslt = bmi160_set_regs(BMI160_AUX_IF_3_ADDR, &reg_addr, 1, dev);
     b08:	2e 01       	movw	r4, r28
     b0a:	08 94       	sec
     b0c:	41 1c       	adc	r4, r1
     b0e:	51 1c       	adc	r5, r1
				dev->delay_ms(BMI160_AUX_COM_DELAY);
				if (rslt == BMI160_OK && (count < len - 1)) {
     b10:	3a 01       	movw	r6, r20
     b12:	08 94       	sec
     b14:	61 08       	sbc	r6, r1
     b16:	71 08       	sbc	r7, r1
     b18:	32 c0       	rjmp	.+100    	; 0xb7e <bmi160_aux_write+0xc0>
	if ((dev == NULL) || (dev->write == NULL)) {
		rslt = BMI160_E_NULL_PTR;
	} else {
		for (; count < len; count++) {
			/* set data to write */
			rslt = bmi160_set_regs(BMI160_AUX_IF_4_ADDR, aux_data, 1, dev);
     b1a:	8f e4       	ldi	r24, 0x4F	; 79
     b1c:	b6 01       	movw	r22, r12
     b1e:	41 e0       	ldi	r20, 0x01	; 1
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	98 01       	movw	r18, r16
     b24:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
     b28:	f8 2e       	mov	r15, r24
			dev->delay_ms(BMI160_AUX_COM_DELAY);
     b2a:	d8 01       	movw	r26, r16
     b2c:	5e 96       	adiw	r26, 0x1e	; 30
     b2e:	ed 91       	ld	r30, X+
     b30:	fc 91       	ld	r31, X
     b32:	5f 97       	sbiw	r26, 0x1f	; 31
     b34:	6a e0       	ldi	r22, 0x0A	; 10
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	09 95       	icall
			if (rslt == BMI160_OK) {
     b3e:	ff 20       	and	r15, r15
     b40:	e9 f4       	brne	.+58     	; 0xb7c <bmi160_aux_write+0xbe>
				/* set address to write */
				rslt = bmi160_set_regs(BMI160_AUX_IF_3_ADDR, &reg_addr, 1, dev);
     b42:	8e e4       	ldi	r24, 0x4E	; 78
     b44:	b2 01       	movw	r22, r4
     b46:	41 e0       	ldi	r20, 0x01	; 1
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	98 01       	movw	r18, r16
     b4c:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
     b50:	f8 2e       	mov	r15, r24
				dev->delay_ms(BMI160_AUX_COM_DELAY);
     b52:	d8 01       	movw	r26, r16
     b54:	5e 96       	adiw	r26, 0x1e	; 30
     b56:	ed 91       	ld	r30, X+
     b58:	fc 91       	ld	r31, X
     b5a:	5f 97       	sbiw	r26, 0x1f	; 31
     b5c:	6a e0       	ldi	r22, 0x0A	; 10
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	09 95       	icall
				if (rslt == BMI160_OK && (count < len - 1)) {
     b66:	ff 20       	and	r15, r15
     b68:	49 f4       	brne	.+18     	; 0xb7c <bmi160_aux_write+0xbe>
     b6a:	a6 14       	cp	r10, r6
     b6c:	b7 04       	cpc	r11, r7
     b6e:	30 f4       	brcc	.+12     	; 0xb7c <bmi160_aux_write+0xbe>
					aux_data++;
     b70:	08 94       	sec
     b72:	c1 1c       	adc	r12, r1
     b74:	d1 1c       	adc	r13, r1
					reg_addr++;
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	8f 5f       	subi	r24, 0xFF	; 255
     b7a:	89 83       	std	Y+1, r24	; 0x01

	/* Null-pointer check */
	if ((dev == NULL) || (dev->write == NULL)) {
		rslt = BMI160_E_NULL_PTR;
	} else {
		for (; count < len; count++) {
     b7c:	e3 94       	inc	r14
     b7e:	ae 2c       	mov	r10, r14
     b80:	bb 24       	eor	r11, r11
     b82:	a8 14       	cp	r10, r8
     b84:	b9 04       	cpc	r11, r9
     b86:	48 f2       	brcs	.-110    	; 0xb1a <bmi160_aux_write+0x5c>
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <bmi160_aux_write+0xd0>
     b8a:	ff 24       	eor	r15, r15
     b8c:	fa 94       	dec	r15
			}
		}
	}

	return rslt;
}
     b8e:	8f 2d       	mov	r24, r15
     b90:	0f 90       	pop	r0
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	ef 90       	pop	r14
     b9e:	df 90       	pop	r13
     ba0:	cf 90       	pop	r12
     ba2:	bf 90       	pop	r11
     ba4:	af 90       	pop	r10
     ba6:	9f 90       	pop	r9
     ba8:	8f 90       	pop	r8
     baa:	7f 90       	pop	r7
     bac:	6f 90       	pop	r6
     bae:	5f 90       	pop	r5
     bb0:	4f 90       	pop	r4
     bb2:	08 95       	ret

00000bb4 <bmi160_config_aux_mode>:
/*!
 * @brief This API configures the 0x4C register and settings like
 * Auxiliary sensor manual enable/ disable and aux burst read length.
 */
int8_t bmi160_config_aux_mode(const struct bmi160_dev *dev)
{
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	1f 93       	push	r17
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <bmi160_config_aux_mode+0xc>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	7c 01       	movw	r14, r24
	int8_t rslt;
	uint8_t aux_if[2] = {(uint8_t)(dev->aux_cfg.aux_i2c_addr * 2), 0};
     bc6:	dc 01       	movw	r26, r24
     bc8:	55 96       	adiw	r26, 0x15	; 21
     bca:	8c 91       	ld	r24, X
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	89 83       	std	Y+1, r24	; 0x01
     bd4:	1a 82       	std	Y+2, r1	; 0x02

	rslt = bmi160_get_regs(BMI160_AUX_IF_1_ADDR, &aux_if[1], 1, dev);
     bd6:	8c e4       	ldi	r24, 0x4C	; 76
     bd8:	be 01       	movw	r22, r28
     bda:	6e 5f       	subi	r22, 0xFE	; 254
     bdc:	7f 4f       	sbci	r23, 0xFF	; 255
     bde:	41 e0       	ldi	r20, 0x01	; 1
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	97 01       	movw	r18, r14
     be4:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
     be8:	18 2f       	mov	r17, r24
	if (rslt == BMI160_OK) {
     bea:	88 23       	and	r24, r24
     bec:	11 f5       	brne	.+68     	; 0xc32 <bmi160_config_aux_mode+0x7e>
		/* update the Auxiliary interface to manual/auto mode */
		aux_if[1] = BMI160_SET_BITS(aux_if[1], BMI160_MANUAL_MODE_EN, dev->aux_cfg.manual_enable);
		/* update the burst read length defined by user */
		aux_if[1] = BMI160_SET_BITS_POS_0(aux_if[1], BMI160_AUX_READ_BURST, dev->aux_cfg.aux_rd_burst_len);
     bee:	f7 01       	movw	r30, r14
     bf0:	94 89       	ldd	r25, Z+20	; 0x14
     bf2:	96 95       	lsr	r25
     bf4:	29 2f       	mov	r18, r25
     bf6:	27 95       	ror	r18
     bf8:	22 27       	eor	r18, r18
     bfa:	27 95       	ror	r18
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	8c 77       	andi	r24, 0x7C	; 124
     c00:	82 2b       	or	r24, r18
     c02:	96 95       	lsr	r25
     c04:	93 70       	andi	r25, 0x03	; 3
     c06:	89 2b       	or	r24, r25
     c08:	8a 83       	std	Y+2, r24	; 0x02
		/* Set the secondary interface address and manual mode
		 * along with burst read length */
		rslt = bmi160_set_regs(BMI160_AUX_IF_0_ADDR, &aux_if[0], 2, dev);
     c0a:	8b e4       	ldi	r24, 0x4B	; 75
     c0c:	be 01       	movw	r22, r28
     c0e:	6f 5f       	subi	r22, 0xFF	; 255
     c10:	7f 4f       	sbci	r23, 0xFF	; 255
     c12:	42 e0       	ldi	r20, 0x02	; 2
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	97 01       	movw	r18, r14
     c18:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
     c1c:	18 2f       	mov	r17, r24
		dev->delay_ms(BMI160_AUX_COM_DELAY);
     c1e:	d7 01       	movw	r26, r14
     c20:	5e 96       	adiw	r26, 0x1e	; 30
     c22:	ed 91       	ld	r30, X+
     c24:	fc 91       	ld	r31, X
     c26:	5f 97       	sbiw	r26, 0x1f	; 31
     c28:	6a e0       	ldi	r22, 0x0A	; 10
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	09 95       	icall
	}

	return rslt;
}
     c32:	81 2f       	mov	r24, r17
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	cf 91       	pop	r28
     c3a:	df 91       	pop	r29
     c3c:	1f 91       	pop	r17
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	08 95       	ret

00000c44 <bmi160_get_fifo_data>:

/*!
 * @brief This API reads the data from fifo buffer.
 */
int8_t bmi160_get_fifo_data(struct bmi160_dev const *dev)
{
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	df 93       	push	r29
     c4a:	cf 93       	push	r28
     c4c:	00 d0       	rcall	.+0      	; 0xc4e <bmi160_get_fifo_data+0xa>
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	8c 01       	movw	r16, r24
	uint16_t bytes_to_read = 0;
	uint16_t user_fifo_len = 0;
	uint8_t addr = BMI160_FIFO_DATA_ADDR;

	/* check the bmi160 structure as NULL*/
	if ((dev == NULL) || (dev->fifo->data == NULL)) {
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	09 f4       	brne	.+2      	; 0xc5a <bmi160_get_fifo_data+0x16>
     c58:	58 c0       	rjmp	.+176    	; 0xd0a <bmi160_get_fifo_data+0xc6>
     c5a:	dc 01       	movw	r26, r24
     c5c:	58 96       	adiw	r26, 0x18	; 24
     c5e:	ed 91       	ld	r30, X+
     c60:	fc 91       	ld	r31, X
     c62:	59 97       	sbiw	r26, 0x19	; 25
     c64:	80 81       	ld	r24, Z
     c66:	91 81       	ldd	r25, Z+1	; 0x01
     c68:	89 2b       	or	r24, r25
     c6a:	09 f4       	brne	.+2      	; 0xc6e <bmi160_get_fifo_data+0x2a>
     c6c:	4e c0       	rjmp	.+156    	; 0xd0a <bmi160_get_fifo_data+0xc6>
 */
static void reset_fifo_data_structure(const struct bmi160_dev *dev)
{
	/*Prepare for next FIFO read by resetting FIFO's
	internal data structures*/
	dev->fifo->accel_byte_start_idx = 0;
     c6e:	10 86       	std	Z+8, r1	; 0x08
     c70:	17 82       	std	Z+7, r1	; 0x07
	dev->fifo->gyro_byte_start_idx = 0;
     c72:	12 86       	std	Z+10, r1	; 0x0a
     c74:	11 86       	std	Z+9, r1	; 0x09
	dev->fifo->aux_byte_start_idx = 0;
     c76:	14 86       	std	Z+12, r1	; 0x0c
     c78:	13 86       	std	Z+11, r1	; 0x0b
	dev->fifo->sensor_time = 0;
     c7a:	15 86       	std	Z+13, r1	; 0x0d
     c7c:	16 86       	std	Z+14, r1	; 0x0e
     c7e:	17 86       	std	Z+15, r1	; 0x0f
     c80:	10 8a       	std	Z+16, r1	; 0x10
	dev->fifo->skipped_frame_count = 0;
     c82:	11 8a       	std	Z+17, r1	; 0x11
{
	int8_t rslt = 0;
	uint8_t data[2];
	uint8_t addr = BMI160_FIFO_LENGTH_ADDR;

	rslt |= bmi160_get_regs(addr, data, 2, dev);
     c84:	82 e2       	ldi	r24, 0x22	; 34
     c86:	be 01       	movw	r22, r28
     c88:	6f 5f       	subi	r22, 0xFF	; 255
     c8a:	7f 4f       	sbci	r23, 0xFF	; 255
     c8c:	42 e0       	ldi	r20, 0x02	; 2
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	98 01       	movw	r18, r16
     c92:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	data[1] = data[1] & BMI160_FIFO_BYTE_COUNTER_MASK;
     c96:	9a 81       	ldd	r25, Y+2	; 0x02

	/* Available data in FIFO is stored in bytes_to_read*/
	*bytes_to_read = (((uint16_t)data[1] << 8) | ((uint16_t)data[0]));
     c98:	29 81       	ldd	r18, Y+1	; 0x01
		rslt = BMI160_E_NULL_PTR;
	} else {
		reset_fifo_data_structure(dev);
		/* get current FIFO fill-level*/
		rslt = get_fifo_byte_counter(&bytes_to_read, dev);
		if (rslt == BMI160_OK) {
     c9a:	88 23       	and	r24, r24
     c9c:	b9 f5       	brne	.+110    	; 0xd0c <bmi160_get_fifo_data+0xc8>
	int8_t rslt = 0;
	uint8_t data[2];
	uint8_t addr = BMI160_FIFO_LENGTH_ADDR;

	rslt |= bmi160_get_regs(addr, data, 2, dev);
	data[1] = data[1] & BMI160_FIFO_BYTE_COUNTER_MASK;
     c9e:	79 2f       	mov	r23, r25
     ca0:	77 70       	andi	r23, 0x07	; 7

	/* Available data in FIFO is stored in bytes_to_read*/
	*bytes_to_read = (((uint16_t)data[1] << 8) | ((uint16_t)data[0]));
     ca2:	97 2f       	mov	r25, r23
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	28 2b       	or	r18, r24
     caa:	39 2b       	or	r19, r25
	} else {
		reset_fifo_data_structure(dev);
		/* get current FIFO fill-level*/
		rslt = get_fifo_byte_counter(&bytes_to_read, dev);
		if (rslt == BMI160_OK) {
			user_fifo_len = dev->fifo->length;
     cac:	d8 01       	movw	r26, r16
     cae:	58 96       	adiw	r26, 0x18	; 24
     cb0:	ed 91       	ld	r30, X+
     cb2:	fc 91       	ld	r31, X
     cb4:	59 97       	sbiw	r26, 0x19	; 25
     cb6:	42 81       	ldd	r20, Z+2	; 0x02
     cb8:	53 81       	ldd	r21, Z+3	; 0x03
			if (dev->fifo->length > bytes_to_read) {
     cba:	24 17       	cp	r18, r20
     cbc:	35 07       	cpc	r19, r21
     cbe:	10 f4       	brcc	.+4      	; 0xcc4 <bmi160_get_fifo_data+0x80>
				/* Handling the case where user requests
				more data than available in FIFO */
				dev->fifo->length = bytes_to_read;
     cc0:	33 83       	std	Z+3, r19	; 0x03
     cc2:	22 83       	std	Z+2, r18	; 0x02
			}

			if ((dev->fifo->fifo_time_enable == BMI160_FIFO_TIME_ENABLE)
     cc4:	84 81       	ldd	r24, Z+4	; 0x04
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	51 f4       	brne	.+20     	; 0xcde <bmi160_get_fifo_data+0x9a>
     cca:	2c 5f       	subi	r18, 0xFC	; 252
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	42 17       	cp	r20, r18
     cd0:	53 07       	cpc	r21, r19
     cd2:	28 f0       	brcs	.+10     	; 0xcde <bmi160_get_fifo_data+0x9a>
				&& (bytes_to_read + 4 <= user_fifo_len)) {
				/* Handling case of sensor time availability */
				dev->fifo->length = dev->fifo->length + 4;
     cd4:	82 81       	ldd	r24, Z+2	; 0x02
     cd6:	93 81       	ldd	r25, Z+3	; 0x03
     cd8:	04 96       	adiw	r24, 0x04	; 4
     cda:	93 83       	std	Z+3, r25	; 0x03
     cdc:	82 83       	std	Z+2, r24	; 0x02
			}

			if (dev->interface == BMI160_SPI_INTF) {
     cde:	d8 01       	movw	r26, r16
     ce0:	12 96       	adiw	r26, 0x02	; 2
     ce2:	8c 91       	ld	r24, X
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	11 f4       	brne	.+4      	; 0xcec <bmi160_get_fifo_data+0xa8>
     ce8:	64 ea       	ldi	r22, 0xA4	; 164
     cea:	01 c0       	rjmp	.+2      	; 0xcee <bmi160_get_fifo_data+0xaa>
     cec:	64 e2       	ldi	r22, 0x24	; 36
	int8_t rslt = 0;
	uint8_t data[2];
	uint8_t addr = BMI160_FIFO_LENGTH_ADDR;

	rslt |= bmi160_get_regs(addr, data, 2, dev);
	data[1] = data[1] & BMI160_FIFO_BYTE_COUNTER_MASK;
     cee:	7a 83       	std	Y+2, r23	; 0x02
				/* SPI read mask */
				addr = addr | BMI160_SPI_RD_MASK;
			}

			/* read only the filled bytes in the FIFO Buffer */
			rslt = dev->read(dev->id, addr, dev->fifo->data, dev->fifo->length);
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	33 81       	ldd	r19, Z+3	; 0x03
     cf8:	d8 01       	movw	r26, r16
     cfa:	5a 96       	adiw	r26, 0x1a	; 26
     cfc:	ed 91       	ld	r30, X+
     cfe:	fc 91       	ld	r31, X
     d00:	5b 97       	sbiw	r26, 0x1b	; 27
     d02:	11 96       	adiw	r26, 0x01	; 1
     d04:	8c 91       	ld	r24, X
     d06:	09 95       	icall
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <bmi160_get_fifo_data+0xc8>
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}

	return rslt;
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	1f 91       	pop	r17
     d16:	0f 91       	pop	r16
     d18:	08 95       	ret

00000d1a <bmi160_set_fifo_flush>:
 *  @brief This API writes fifo_flush command to command register.This
 *  action clears all data in the Fifo without changing fifo configuration
 *  settings
 */
int8_t bmi160_set_fifo_flush(const struct bmi160_dev *dev)
{
     d1a:	df 93       	push	r29
     d1c:	cf 93       	push	r28
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	9c 01       	movw	r18, r24
	int8_t rslt = 0;
	uint8_t data =  BMI160_FIFO_FLUSH_VALUE;
	uint8_t reg_addr = BMI160_COMMAND_REG_ADDR;

	/* Check the bmi160_dev structure for NULL address*/
	if (dev == NULL)
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	11 f4       	brne	.+4      	; 0xd2e <bmi160_set_fifo_flush+0x14>
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	0a c0       	rjmp	.+20     	; 0xd42 <bmi160_set_fifo_flush+0x28>
 *  settings
 */
int8_t bmi160_set_fifo_flush(const struct bmi160_dev *dev)
{
	int8_t rslt = 0;
	uint8_t data =  BMI160_FIFO_FLUSH_VALUE;
     d2e:	80 eb       	ldi	r24, 0xB0	; 176
     d30:	89 83       	std	Y+1, r24	; 0x01

	/* Check the bmi160_dev structure for NULL address*/
	if (dev == NULL)
		rslt = BMI160_E_NULL_PTR;
	else
		rslt = bmi160_set_regs(reg_addr, &data, BMI160_ONE, dev);
     d32:	8e e7       	ldi	r24, 0x7E	; 126
     d34:	be 01       	movw	r22, r28
     d36:	6f 5f       	subi	r22, 0xFF	; 255
     d38:	7f 4f       	sbci	r23, 0xFF	; 255
     d3a:	41 e0       	ldi	r20, 0x01	; 1
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>

	return rslt;
}
     d42:	0f 90       	pop	r0
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <bmi160_set_fifo_config>:

/*!
 * @brief This API sets the FIFO configuration in the sensor.
 */
int8_t bmi160_set_fifo_config(uint8_t config, uint8_t enable, struct bmi160_dev const *dev)
{
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	0f 92       	push	r0
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	f8 2e       	mov	r15, r24
     d5e:	e6 2e       	mov	r14, r22
     d60:	8a 01       	movw	r16, r20
	uint8_t data =  0;
	uint8_t reg_addr = BMI160_FIFO_CONFIG_1_ADDR;
	uint8_t fifo_config = config & BMI160_FIFO_CONFIG_1_MASK;

	/* Check the bmi160_dev structure for NULL address*/
	if (dev == NULL) {
     d62:	41 15       	cp	r20, r1
     d64:	51 05       	cpc	r21, r1
     d66:	11 f4       	brne	.+4      	; 0xd6c <bmi160_set_fifo_config+0x22>
     d68:	2f ef       	ldi	r18, 0xFF	; 255
     d6a:	3f c0       	rjmp	.+126    	; 0xdea <bmi160_set_fifo_config+0xa0>
 * @brief This API sets the FIFO configuration in the sensor.
 */
int8_t bmi160_set_fifo_config(uint8_t config, uint8_t enable, struct bmi160_dev const *dev)
{
	int8_t rslt = 0;
	uint8_t data =  0;
     d6c:	19 82       	std	Y+1, r1	; 0x01

	/* Check the bmi160_dev structure for NULL address*/
	if (dev == NULL) {
		rslt = BMI160_E_NULL_PTR;
	} else {
		rslt = bmi160_get_regs(reg_addr, &data, BMI160_ONE, dev);
     d6e:	87 e4       	ldi	r24, 0x47	; 71
     d70:	be 01       	movw	r22, r28
     d72:	6f 5f       	subi	r22, 0xFF	; 255
     d74:	7f 4f       	sbci	r23, 0xFF	; 255
     d76:	41 e0       	ldi	r20, 0x01	; 1
     d78:	50 e0       	ldi	r21, 0x00	; 0
     d7a:	98 01       	movw	r18, r16
     d7c:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
     d80:	28 2f       	mov	r18, r24

		if (rslt == BMI160_OK) {
     d82:	88 23       	and	r24, r24
     d84:	91 f5       	brne	.+100    	; 0xdea <bmi160_set_fifo_config+0xa0>
int8_t bmi160_set_fifo_config(uint8_t config, uint8_t enable, struct bmi160_dev const *dev)
{
	int8_t rslt = 0;
	uint8_t data =  0;
	uint8_t reg_addr = BMI160_FIFO_CONFIG_1_ADDR;
	uint8_t fifo_config = config & BMI160_FIFO_CONFIG_1_MASK;
     d86:	8f 2d       	mov	r24, r15
     d88:	8e 7f       	andi	r24, 0xFE	; 254
	} else {
		rslt = bmi160_get_regs(reg_addr, &data, BMI160_ONE, dev);

		if (rslt == BMI160_OK) {

			if (fifo_config > 0) {
     d8a:	49 f0       	breq	.+18     	; 0xd9e <bmi160_set_fifo_config+0x54>
     d8c:	99 81       	ldd	r25, Y+1	; 0x01

				if (enable == BMI160_ENABLE)
     d8e:	21 e0       	ldi	r18, 0x01	; 1
     d90:	e2 16       	cp	r14, r18
     d92:	11 f4       	brne	.+4      	; 0xd98 <bmi160_set_fifo_config+0x4e>
					data = data | fifo_config;
     d94:	98 2b       	or	r25, r24
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <bmi160_set_fifo_config+0x52>
				else
					data = data & (~fifo_config);
     d98:	80 95       	com	r24
     d9a:	98 23       	and	r25, r24
     d9c:	99 83       	std	Y+1, r25	; 0x01
			}
			/* write fifo frame content configuration*/
			rslt = bmi160_set_regs(reg_addr, &data, BMI160_ONE, dev);
     d9e:	87 e4       	ldi	r24, 0x47	; 71
     da0:	7e 01       	movw	r14, r28
     da2:	08 94       	sec
     da4:	e1 1c       	adc	r14, r1
     da6:	f1 1c       	adc	r15, r1
     da8:	b7 01       	movw	r22, r14
     daa:	41 e0       	ldi	r20, 0x01	; 1
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	98 01       	movw	r18, r16
     db0:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
     db4:	28 2f       	mov	r18, r24
			if (rslt == BMI160_OK) {
     db6:	88 23       	and	r24, r24
     db8:	c1 f4       	brne	.+48     	; 0xdea <bmi160_set_fifo_config+0xa0>
				/* read fifo frame content configuration*/
				rslt = bmi160_get_regs(reg_addr, &data, BMI160_ONE, dev);
     dba:	87 e4       	ldi	r24, 0x47	; 71
     dbc:	b7 01       	movw	r22, r14
     dbe:	41 e0       	ldi	r20, 0x01	; 1
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	98 01       	movw	r18, r16
     dc4:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
     dc8:	28 2f       	mov	r18, r24
				if (rslt == BMI160_OK) {
     dca:	88 23       	and	r24, r24
     dcc:	71 f4       	brne	.+28     	; 0xdea <bmi160_set_fifo_config+0xa0>
					/* extract fifo header enabled status */
					dev->fifo->fifo_header_enable = data & BMI160_FIFO_HEAD_ENABLE;
     dce:	d8 01       	movw	r26, r16
     dd0:	58 96       	adiw	r26, 0x18	; 24
     dd2:	ed 91       	ld	r30, X+
     dd4:	fc 91       	ld	r31, X
     dd6:	59 97       	sbiw	r26, 0x19	; 25
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	98 2f       	mov	r25, r24
     ddc:	90 71       	andi	r25, 0x10	; 16
     dde:	95 83       	std	Z+5, r25	; 0x05
					/* extract accel/gyr/aux. data enabled status */
					dev->fifo->fifo_data_enable = data & BMI160_FIFO_M_G_A_ENABLE;
     de0:	98 2f       	mov	r25, r24
     de2:	90 7e       	andi	r25, 0xE0	; 224
     de4:	96 83       	std	Z+6, r25	; 0x06
					/* extract fifo sensor time enabled status */
					dev->fifo->fifo_time_enable = data & BMI160_FIFO_TIME_ENABLE;
     de6:	82 70       	andi	r24, 0x02	; 2
     de8:	84 83       	std	Z+4, r24	; 0x04
			}
		}
	}

	return rslt;
}
     dea:	82 2f       	mov	r24, r18
     dec:	0f 90       	pop	r0
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	08 95       	ret

00000dfc <bmi160_set_fifo_down>:
 *  the accel and gyro data for FIFO.Also, it configures filtered or
 *  pre-filtered data for accel and gyro.
 *
 */
int8_t bmi160_set_fifo_down(uint8_t fifo_down, const struct bmi160_dev *dev)
{
     dfc:	df 92       	push	r13
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	0f 92       	push	r0
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	d8 2e       	mov	r13, r24
     e12:	8b 01       	movw	r16, r22
	int8_t rslt = 0;
	uint8_t data =  0;
	uint8_t reg_addr = BMI160_FIFO_DOWN_ADDR;

	/* Check the bmi160_dev structure for NULL address*/
	if (dev == NULL) {
     e14:	61 15       	cp	r22, r1
     e16:	71 05       	cpc	r23, r1
     e18:	11 f4       	brne	.+4      	; 0xe1e <bmi160_set_fifo_down+0x22>
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	18 c0       	rjmp	.+48     	; 0xe4e <bmi160_set_fifo_down+0x52>
 *
 */
int8_t bmi160_set_fifo_down(uint8_t fifo_down, const struct bmi160_dev *dev)
{
	int8_t rslt = 0;
	uint8_t data =  0;
     e1e:	19 82       	std	Y+1, r1	; 0x01

	/* Check the bmi160_dev structure for NULL address*/
	if (dev == NULL) {
		rslt = BMI160_E_NULL_PTR;
	} else {
		rslt = bmi160_get_regs(reg_addr, &data, BMI160_ONE, dev);
     e20:	85 e4       	ldi	r24, 0x45	; 69
     e22:	7e 01       	movw	r14, r28
     e24:	08 94       	sec
     e26:	e1 1c       	adc	r14, r1
     e28:	f1 1c       	adc	r15, r1
     e2a:	b7 01       	movw	r22, r14
     e2c:	41 e0       	ldi	r20, 0x01	; 1
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	98 01       	movw	r18, r16
     e32:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>

		 if (rslt == BMI160_OK) {
     e36:	88 23       	and	r24, r24
     e38:	51 f4       	brne	.+20     	; 0xe4e <bmi160_set_fifo_down+0x52>
			data = data | fifo_down;
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	8d 29       	or	r24, r13
     e3e:	89 83       	std	Y+1, r24	; 0x01
			rslt = bmi160_set_regs(reg_addr, &data, BMI160_ONE, dev);
     e40:	85 e4       	ldi	r24, 0x45	; 69
     e42:	b7 01       	movw	r22, r14
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	98 01       	movw	r18, r16
     e4a:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
		 }
	}

	return rslt;

}
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	df 90       	pop	r13
     e5e:	08 95       	ret

00000e60 <bmi160_set_fifo_wm>:
/*!
 *  @brief This API sets the FIFO watermark level in the sensor.
 *
 */
int8_t bmi160_set_fifo_wm(uint8_t fifo_wm, const struct bmi160_dev *dev)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	0f 92       	push	r0
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	9b 01       	movw	r18, r22
	int8_t rslt = 0;
	uint8_t data =  fifo_wm;
	uint8_t reg_addr = BMI160_FIFO_CONFIG_0_ADDR;

	/* Check the bmi160_dev structure for NULL address*/
	if (dev == NULL)
     e6c:	61 15       	cp	r22, r1
     e6e:	71 05       	cpc	r23, r1
     e70:	11 f4       	brne	.+4      	; 0xe76 <bmi160_set_fifo_wm+0x16>
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	09 c0       	rjmp	.+18     	; 0xe88 <bmi160_set_fifo_wm+0x28>
 *
 */
int8_t bmi160_set_fifo_wm(uint8_t fifo_wm, const struct bmi160_dev *dev)
{
	int8_t rslt = 0;
	uint8_t data =  fifo_wm;
     e76:	89 83       	std	Y+1, r24	; 0x01

	/* Check the bmi160_dev structure for NULL address*/
	if (dev == NULL)
		rslt = BMI160_E_NULL_PTR;
	else
		rslt = bmi160_set_regs(reg_addr, &data, BMI160_ONE, dev);
     e78:	86 e4       	ldi	r24, 0x46	; 70
     e7a:	be 01       	movw	r22, r28
     e7c:	6f 5f       	subi	r22, 0xFF	; 255
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	41 e0       	ldi	r20, 0x01	; 1
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>

	return rslt;

}
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <bmi160_update_nvm>:
/*!
 *  @brief This API writes the image registers values to NVM which is
 *  stored even after POR or soft reset
 */
int8_t bmi160_update_nvm(struct bmi160_dev const *dev)
{
     e90:	cf 92       	push	r12
     e92:	df 92       	push	r13
     e94:	ef 92       	push	r14
     e96:	ff 92       	push	r15
     e98:	1f 93       	push	r17
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	00 d0       	rcall	.+0      	; 0xea0 <bmi160_update_nvm+0x10>
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	7c 01       	movw	r14, r24
	int8_t rslt;
	uint8_t data;
	uint8_t cmd = BMI160_NVM_BACKUP_EN;
     ea6:	80 ea       	ldi	r24, 0xA0	; 160
     ea8:	8a 83       	std	Y+2, r24	; 0x02

	/* Read the nvm_prog_en configuration */
	rslt = bmi160_get_regs(BMI160_CONF_ADDR, &data, 1, dev);
     eaa:	8a e6       	ldi	r24, 0x6A	; 106
     eac:	6e 01       	movw	r12, r28
     eae:	08 94       	sec
     eb0:	c1 1c       	adc	r12, r1
     eb2:	d1 1c       	adc	r13, r1
     eb4:	b6 01       	movw	r22, r12
     eb6:	41 e0       	ldi	r20, 0x01	; 1
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	97 01       	movw	r18, r14
     ebc:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
     ec0:	18 2f       	mov	r17, r24
	if (rslt == BMI160_OK) {
     ec2:	88 23       	and	r24, r24
     ec4:	c9 f5       	brne	.+114    	; 0xf38 <bmi160_update_nvm+0xa8>
		data = BMI160_SET_BITS(data, BMI160_NVM_UPDATE, 1);
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	82 60       	ori	r24, 0x02	; 2
     eca:	89 83       	std	Y+1, r24	; 0x01
		/* Set the nvm_prog_en bit in the sensor */
		rslt = bmi160_set_regs(BMI160_CONF_ADDR, &data, 1, dev);
     ecc:	8a e6       	ldi	r24, 0x6A	; 106
     ece:	b6 01       	movw	r22, r12
     ed0:	41 e0       	ldi	r20, 0x01	; 1
     ed2:	50 e0       	ldi	r21, 0x00	; 0
     ed4:	97 01       	movw	r18, r14
     ed6:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
     eda:	18 2f       	mov	r17, r24
		if (rslt == BMI160_OK) {
     edc:	88 23       	and	r24, r24
     ede:	61 f5       	brne	.+88     	; 0xf38 <bmi160_update_nvm+0xa8>
			/* Update NVM */
			rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
     ee0:	8e e7       	ldi	r24, 0x7E	; 126
     ee2:	be 01       	movw	r22, r28
     ee4:	6e 5f       	subi	r22, 0xFE	; 254
     ee6:	7f 4f       	sbci	r23, 0xFF	; 255
     ee8:	41 e0       	ldi	r20, 0x01	; 1
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	97 01       	movw	r18, r14
     eee:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
     ef2:	18 2f       	mov	r17, r24
			if (rslt == BMI160_OK) {
     ef4:	88 23       	and	r24, r24
     ef6:	01 f5       	brne	.+64     	; 0xf38 <bmi160_update_nvm+0xa8>
				/* Check for NVM ready status */
				rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
     ef8:	8b e1       	ldi	r24, 0x1B	; 27
     efa:	b6 01       	movw	r22, r12
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	97 01       	movw	r18, r14
     f02:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
     f06:	18 2f       	mov	r17, r24
				if (rslt == BMI160_OK) {
     f08:	88 23       	and	r24, r24
     f0a:	b1 f4       	brne	.+44     	; 0xf38 <bmi160_update_nvm+0xa8>
					data = BMI160_GET_BITS(data, BMI160_NVM_STATUS);
					if (data != BMI160_ENABLE) {
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	80 71       	andi	r24, 0x10	; 16
     f12:	90 70       	andi	r25, 0x00	; 0
     f14:	24 e0       	ldi	r18, 0x04	; 4
     f16:	95 95       	asr	r25
     f18:	87 95       	ror	r24
     f1a:	2a 95       	dec	r18
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <bmi160_update_nvm+0x86>
     f1e:	81 30       	cpi	r24, 0x01	; 1
     f20:	59 f0       	breq	.+22     	; 0xf38 <bmi160_update_nvm+0xa8>
						/* Delay to update NVM */
						dev->delay_ms(25);
     f22:	d7 01       	movw	r26, r14
     f24:	5e 96       	adiw	r26, 0x1e	; 30
     f26:	ed 91       	ld	r30, X+
     f28:	fc 91       	ld	r31, X
     f2a:	5f 97       	sbiw	r26, 0x1f	; 31
			rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
			if (rslt == BMI160_OK) {
				/* Check for NVM ready status */
				rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
				if (rslt == BMI160_OK) {
					data = BMI160_GET_BITS(data, BMI160_NVM_STATUS);
     f2c:	19 82       	std	Y+1, r1	; 0x01
					if (data != BMI160_ENABLE) {
						/* Delay to update NVM */
						dev->delay_ms(25);
     f2e:	69 e1       	ldi	r22, 0x19	; 25
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	09 95       	icall
			}
		}
	}

	return rslt;
}
     f38:	81 2f       	mov	r24, r17
     f3a:	0f 90       	pop	r0
     f3c:	0f 90       	pop	r0
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	1f 91       	pop	r17
     f44:	ff 90       	pop	r15
     f46:	ef 90       	pop	r14
     f48:	df 90       	pop	r13
     f4a:	cf 90       	pop	r12
     f4c:	08 95       	ret

00000f4e <bmi160_get_int_status>:
/*!
 *  @brief This API gets the interrupt status from the sensor.
 */
int8_t bmi160_get_int_status(enum bmi160_int_status_sel int_status_sel,
				union bmi160_int_status *int_status, struct bmi160_dev const *dev)
{
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	eb 01       	movw	r28, r22
     f5a:	8a 01       	movw	r16, r20
	int8_t rslt = 0;

	/* To get the status of all interrupts */
	if (int_status_sel == BMI160_INT_STATUS_ALL) {
     f5c:	8f 30       	cpi	r24, 0x0F	; 15
     f5e:	21 f4       	brne	.+8      	; 0xf68 <bmi160_get_int_status+0x1a>
		rslt = bmi160_get_regs(BMI160_INT_STATUS_ADDR, &int_status->data[0], 4, dev);
     f60:	8c e1       	ldi	r24, 0x1C	; 28
     f62:	44 e0       	ldi	r20, 0x04	; 4
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	27 c0       	rjmp	.+78     	; 0xfb6 <bmi160_get_int_status+0x68>
	} else {
		if (int_status_sel & BMI160_INT_STATUS_0)
     f68:	f8 2e       	mov	r15, r24
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	f0 fe       	sbrs	r15, 0
     f6e:	06 c0       	rjmp	.+12     	; 0xf7c <bmi160_get_int_status+0x2e>
			rslt = bmi160_get_regs(BMI160_INT_STATUS_ADDR, &int_status->data[0], 1, dev);
     f70:	8c e1       	ldi	r24, 0x1C	; 28
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	98 01       	movw	r18, r16
     f78:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
		if (int_status_sel & BMI160_INT_STATUS_1)
     f7c:	f1 fe       	sbrs	r15, 1
     f7e:	09 c0       	rjmp	.+18     	; 0xf92 <bmi160_get_int_status+0x44>
			rslt = bmi160_get_regs(BMI160_INT_STATUS_ADDR + 1, &int_status->data[1], 1, dev);
     f80:	be 01       	movw	r22, r28
     f82:	6f 5f       	subi	r22, 0xFF	; 255
     f84:	7f 4f       	sbci	r23, 0xFF	; 255
     f86:	8d e1       	ldi	r24, 0x1D	; 29
     f88:	41 e0       	ldi	r20, 0x01	; 1
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	98 01       	movw	r18, r16
     f8e:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
		if (int_status_sel & BMI160_INT_STATUS_2)
     f92:	f2 fe       	sbrs	r15, 2
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <bmi160_get_int_status+0x5a>
			rslt = bmi160_get_regs(BMI160_INT_STATUS_ADDR + 2, &int_status->data[2], 1, dev);
     f96:	be 01       	movw	r22, r28
     f98:	6e 5f       	subi	r22, 0xFE	; 254
     f9a:	7f 4f       	sbci	r23, 0xFF	; 255
     f9c:	8e e1       	ldi	r24, 0x1E	; 30
     f9e:	41 e0       	ldi	r20, 0x01	; 1
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	98 01       	movw	r18, r16
     fa4:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
		if (int_status_sel & BMI160_INT_STATUS_3)
     fa8:	f3 fe       	sbrs	r15, 3
     faa:	08 c0       	rjmp	.+16     	; 0xfbc <bmi160_get_int_status+0x6e>
			rslt = bmi160_get_regs(BMI160_INT_STATUS_ADDR + 3, &int_status->data[3], 1, dev);
     fac:	23 96       	adiw	r28, 0x03	; 3
     fae:	8f e1       	ldi	r24, 0x1F	; 31
     fb0:	be 01       	movw	r22, r28
     fb2:	41 e0       	ldi	r20, 0x01	; 1
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	98 01       	movw	r18, r16
     fb8:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	}

	return rslt;
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	ff 90       	pop	r15
     fc6:	08 95       	ret

00000fc8 <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
     fc8:	cf 92       	push	r12
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	0f 92       	push	r0
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	7c 01       	movw	r14, r24
     fe0:	6b 01       	movw	r12, r22
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t temp = 0;
	uint8_t data = 0;
     fe2:	19 82       	std	Y+1, r1	; 0x01

	/* Configuration of output interrupt signals on pins INT1 and INT2 are
	 * done in BMI160_INT_OUT_CTRL_ADDR register*/
	rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
     fe4:	83 e5       	ldi	r24, 0x53	; 83
     fe6:	be 01       	movw	r22, r28
     fe8:	6f 5f       	subi	r22, 0xFF	; 255
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	41 e0       	ldi	r20, 0x01	; 1
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	96 01       	movw	r18, r12
     ff2:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>

	if (rslt == BMI160_OK) {
     ff6:	88 23       	and	r24, r24
     ff8:	09 f0       	breq	.+2      	; 0xffc <set_intr_pin_config+0x34>
     ffa:	a1 c0       	rjmp	.+322    	; 0x113e <set_intr_pin_config+0x176>
		/* updating the interrupt pin structure to local structure */
		const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);

		/* Configuring channel 1 */
		if (int_config->int_channel == BMI160_INT_CHANNEL_1) {
     ffc:	f7 01       	movw	r30, r14
     ffe:	80 81       	ld	r24, Z
    1000:	22 81       	ldd	r18, Z+2	; 0x02
    1002:	39 81       	ldd	r19, Y+1	; 0x01
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	19 f5       	brne	.+70     	; 0x104e <set_intr_pin_config+0x86>

			/* Output enable */
			temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
			data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
    1008:	82 2f       	mov	r24, r18
    100a:	81 70       	andi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	b3 e0       	ldi	r27, 0x03	; 3
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	ba 95       	dec	r27
    1016:	e1 f7       	brne	.-8      	; 0x1010 <set_intr_pin_config+0x48>
    1018:	88 70       	andi	r24, 0x08	; 8
    101a:	33 7f       	andi	r19, 0xF3	; 243

			/* Output mode */
			temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
			data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
    101c:	38 2b       	or	r19, r24
    101e:	82 2f       	mov	r24, r18
    1020:	86 95       	lsr	r24
    1022:	81 70       	andi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	84 70       	andi	r24, 0x04	; 4
    1030:	38 2b       	or	r19, r24

			/* Output type */
			temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
			data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
    1032:	26 95       	lsr	r18
    1034:	26 95       	lsr	r18
    1036:	82 2f       	mov	r24, r18
    1038:	81 70       	andi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	82 70       	andi	r24, 0x02	; 2
    1042:	3c 7f       	andi	r19, 0xFC	; 252

			/* edge control */
			temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
			data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
    1044:	38 2b       	or	r19, r24
    1046:	26 95       	lsr	r18
    1048:	21 70       	andi	r18, 0x01	; 1
    104a:	32 2b       	or	r19, r18
    104c:	29 c0       	rjmp	.+82     	; 0x10a0 <set_intr_pin_config+0xd8>

		} else {
			/* Configuring channel 2 */
			/* Output enable */
			temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
			data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
    104e:	82 2f       	mov	r24, r18
    1050:	87 95       	ror	r24
    1052:	88 27       	eor	r24, r24
    1054:	87 95       	ror	r24
    1056:	3f 73       	andi	r19, 0x3F	; 63

			/* Output mode */
			temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
			data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
    1058:	38 2b       	or	r19, r24
    105a:	82 2f       	mov	r24, r18
    105c:	86 95       	lsr	r24
    105e:	81 70       	andi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	e6 e0       	ldi	r30, 0x06	; 6
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	ea 95       	dec	r30
    106a:	e1 f7       	brne	.-8      	; 0x1064 <set_intr_pin_config+0x9c>
    106c:	80 74       	andi	r24, 0x40	; 64
    106e:	38 2b       	or	r19, r24

			/* Output type */
			temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
			data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
    1070:	26 95       	lsr	r18
    1072:	26 95       	lsr	r18
    1074:	82 2f       	mov	r24, r18
    1076:	81 70       	andi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	75 e0       	ldi	r23, 0x05	; 5
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	7a 95       	dec	r23
    1082:	e1 f7       	brne	.-8      	; 0x107c <set_intr_pin_config+0xb4>
    1084:	80 72       	andi	r24, 0x20	; 32
    1086:	3f 7c       	andi	r19, 0xCF	; 207

			/* edge control */
			temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
			data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
    1088:	38 2b       	or	r19, r24
    108a:	26 95       	lsr	r18
    108c:	21 70       	andi	r18, 0x01	; 1
    108e:	82 2f       	mov	r24, r18
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	64 e0       	ldi	r22, 0x04	; 4
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	6a 95       	dec	r22
    109a:	e1 f7       	brne	.-8      	; 0x1094 <set_intr_pin_config+0xcc>
    109c:	80 71       	andi	r24, 0x10	; 16
    109e:	38 2b       	or	r19, r24
    10a0:	39 83       	std	Y+1, r19	; 0x01
		}

		rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
    10a2:	83 e5       	ldi	r24, 0x53	; 83
    10a4:	8e 01       	movw	r16, r28
    10a6:	0f 5f       	subi	r16, 0xFF	; 255
    10a8:	1f 4f       	sbci	r17, 0xFF	; 255
    10aa:	b8 01       	movw	r22, r16
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	96 01       	movw	r18, r12
    10b2:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
{
	int8_t rslt;

	/* configure the behavioural settings of interrupt pin */
	rslt = config_int_out_ctrl(int_config, dev);
	if (rslt == BMI160_OK)
    10b6:	88 23       	and	r24, r24
    10b8:	09 f0       	breq	.+2      	; 0x10bc <set_intr_pin_config+0xf4>
    10ba:	41 c0       	rjmp	.+130    	; 0x113e <set_intr_pin_config+0x176>
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t temp = 0;
	uint8_t data = 0;
    10bc:	19 82       	std	Y+1, r1	; 0x01

	/* Configuration of latch on pins INT1 and INT2 are done in
	 * BMI160_INT_LATCH_ADDR register*/
	rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
    10be:	84 e5       	ldi	r24, 0x54	; 84
    10c0:	b8 01       	movw	r22, r16
    10c2:	41 e0       	ldi	r20, 0x01	; 1
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	96 01       	movw	r18, r12
    10c8:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>

	if (rslt == BMI160_OK) {
    10cc:	88 23       	and	r24, r24
    10ce:	b9 f5       	brne	.+110    	; 0x113e <set_intr_pin_config+0x176>
		/* updating the interrupt pin structure to local structure */
		const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);

		if (int_config->int_channel == BMI160_INT_CHANNEL_1) {
    10d0:	f7 01       	movw	r30, r14
    10d2:	80 81       	ld	r24, Z
    10d4:	22 81       	ldd	r18, Z+2	; 0x02
    10d6:	39 81       	ldd	r19, Y+1	; 0x01
    10d8:	81 30       	cpi	r24, 0x01	; 1
    10da:	61 f4       	brne	.+24     	; 0x10f4 <set_intr_pin_config+0x12c>
			/* Configuring channel 1 */
			/* Input enable */
			temp = data & ~BMI160_INT1_INPUT_EN_MASK;
			data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
    10dc:	22 95       	swap	r18
    10de:	21 70       	andi	r18, 0x01	; 1
    10e0:	82 2f       	mov	r24, r18
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	54 e0       	ldi	r21, 0x04	; 4
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	5a 95       	dec	r21
    10ec:	e1 f7       	brne	.-8      	; 0x10e6 <set_intr_pin_config+0x11e>
    10ee:	80 71       	andi	r24, 0x10	; 16
    10f0:	3f 7e       	andi	r19, 0xEF	; 239
    10f2:	0b c0       	rjmp	.+22     	; 0x110a <set_intr_pin_config+0x142>
		} else {
			/* Configuring channel 2 */
			/* Input enable */
			temp = data & ~BMI160_INT2_INPUT_EN_MASK;
			data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
    10f4:	22 95       	swap	r18
    10f6:	21 70       	andi	r18, 0x01	; 1
    10f8:	82 2f       	mov	r24, r18
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	45 e0       	ldi	r20, 0x05	; 5
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	4a 95       	dec	r20
    1104:	e1 f7       	brne	.-8      	; 0x10fe <set_intr_pin_config+0x136>
    1106:	80 72       	andi	r24, 0x20	; 32
    1108:	3f 7d       	andi	r19, 0xDF	; 223
    110a:	83 2b       	or	r24, r19
    110c:	89 83       	std	Y+1, r24	; 0x01

		/* In case of latch interrupt,update the latch duration */
		/* Latching holds the interrupt for the amount of latch
		 * duration time */
		temp = data & ~BMI160_INT_LATCH_MASK;
		data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
    110e:	f7 01       	movw	r30, r14
    1110:	82 81       	ldd	r24, Z+2	; 0x02
    1112:	82 95       	swap	r24
    1114:	86 95       	lsr	r24
    1116:	87 70       	andi	r24, 0x07	; 7
    1118:	93 81       	ldd	r25, Z+3	; 0x03
    111a:	91 70       	andi	r25, 0x01	; 1
    111c:	99 0f       	add	r25, r25
    111e:	99 0f       	add	r25, r25
    1120:	99 0f       	add	r25, r25
    1122:	98 2b       	or	r25, r24
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	80 7f       	andi	r24, 0xF0	; 240
    1128:	98 2b       	or	r25, r24
    112a:	99 83       	std	Y+1, r25	; 0x01

		/* OUT_CTRL_INT and LATCH_INT address lie consecutively,
		 * hence writing data to respective registers at one go */
		rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
    112c:	84 e5       	ldi	r24, 0x54	; 84
    112e:	be 01       	movw	r22, r28
    1130:	6f 5f       	subi	r22, 0xFF	; 255
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	41 e0       	ldi	r20, 0x01	; 1
    1136:	50 e0       	ldi	r21, 0x00	; 0
    1138:	96 01       	movw	r18, r12
    113a:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	rslt = config_int_out_ctrl(int_config, dev);
	if (rslt == BMI160_OK)
		rslt = config_int_latch(int_config, dev);

	return rslt;
}
    113e:	0f 90       	pop	r0
    1140:	cf 91       	pop	r28
    1142:	df 91       	pop	r29
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	ff 90       	pop	r15
    114a:	ef 90       	pop	r14
    114c:	df 90       	pop	r13
    114e:	cf 90       	pop	r12
    1150:	08 95       	ret

00001152 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
    1152:	fc 01       	movw	r30, r24
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
    1154:	00 97       	sbiw	r24, 0x00	; 0
    1156:	71 f0       	breq	.+28     	; 0x1174 <null_ptr_check+0x22>
    1158:	82 8d       	ldd	r24, Z+26	; 0x1a
    115a:	93 8d       	ldd	r25, Z+27	; 0x1b
    115c:	89 2b       	or	r24, r25
    115e:	51 f0       	breq	.+20     	; 0x1174 <null_ptr_check+0x22>
    1160:	84 8d       	ldd	r24, Z+28	; 0x1c
    1162:	95 8d       	ldd	r25, Z+29	; 0x1d
    1164:	89 2b       	or	r24, r25
    1166:	31 f0       	breq	.+12     	; 0x1174 <null_ptr_check+0x22>
    1168:	86 8d       	ldd	r24, Z+30	; 0x1e
    116a:	97 8d       	ldd	r25, Z+31	; 0x1f
    116c:	89 2b       	or	r24, r25
    116e:	11 f0       	breq	.+4      	; 0x1174 <null_ptr_check+0x22>
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	08 95       	ret
    1174:	8f ef       	ldi	r24, 0xFF	; 255
		/* Device structure is fine */
		rslt = BMI160_OK;
	}

	return rslt;
}
    1176:	08 95       	ret

00001178 <bmi160_set_offsets>:
 *  @brief This API writes the offset values of accel and gyro to
 *  the sensor but these values will be reset on POR or soft reset.
 */
int8_t bmi160_set_offsets(const struct bmi160_foc_conf *foc_conf, const struct bmi160_offsets *offset,
				struct bmi160_dev const *dev)
{
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	27 97       	sbiw	r28, 0x07	; 7
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	7c 01       	movw	r14, r24
    119a:	8b 01       	movw	r16, r22
    119c:	6a 01       	movw	r12, r20
	uint8_t data[7];
	uint8_t x_msb, y_msb, z_msb;


	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    119e:	ca 01       	movw	r24, r20
    11a0:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if (rslt != BMI160_OK) {
    11a4:	88 23       	and	r24, r24
    11a6:	11 f0       	breq	.+4      	; 0x11ac <bmi160_set_offsets+0x34>
    11a8:	8f ef       	ldi	r24, 0xFF	; 255
    11aa:	37 c0       	rjmp	.+110    	; 0x121a <bmi160_set_offsets+0xa2>
		rslt = BMI160_E_NULL_PTR;
	} else {
		/* Update the accel offset */
		data[0] = (uint8_t)offset->off_acc_x;
    11ac:	f8 01       	movw	r30, r16
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
		data[1] = (uint8_t)offset->off_acc_y;
    11b2:	81 81       	ldd	r24, Z+1	; 0x01
    11b4:	8a 83       	std	Y+2, r24	; 0x02
		data[2] = (uint8_t)offset->off_acc_z;
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	8b 83       	std	Y+3, r24	; 0x03

		/* Update the LSB of gyro offset */
		data[3] = BMI160_GET_LSB(offset->off_gyro_x);
    11ba:	83 81       	ldd	r24, Z+3	; 0x03
    11bc:	8c 83       	std	Y+4, r24	; 0x04
		data[4] = BMI160_GET_LSB(offset->off_gyro_y);
    11be:	85 81       	ldd	r24, Z+5	; 0x05
    11c0:	8d 83       	std	Y+5, r24	; 0x05
		data[5] = BMI160_GET_LSB(offset->off_gyro_z);
    11c2:	87 81       	ldd	r24, Z+7	; 0x07
    11c4:	90 85       	ldd	r25, Z+8	; 0x08
    11c6:	8e 83       	std	Y+6, r24	; 0x06

		/* Update the MSB of gyro offset */
		x_msb = BMI160_GET_BITS(offset->off_gyro_x, BMI160_GYRO_OFFSET);
		y_msb = BMI160_GET_BITS(offset->off_gyro_y, BMI160_GYRO_OFFSET);
		z_msb = BMI160_GET_BITS(offset->off_gyro_z, BMI160_GYRO_OFFSET);
		data[6] = (uint8_t)(z_msb << 4 | y_msb << 2 | x_msb);
    11c8:	80 70       	andi	r24, 0x00	; 0
    11ca:	93 70       	andi	r25, 0x03	; 3
    11cc:	39 2f       	mov	r19, r25
    11ce:	32 95       	swap	r19
    11d0:	30 7f       	andi	r19, 0xF0	; 240
    11d2:	85 81       	ldd	r24, Z+5	; 0x05
    11d4:	96 81       	ldd	r25, Z+6	; 0x06
    11d6:	80 70       	andi	r24, 0x00	; 0
    11d8:	93 70       	andi	r25, 0x03	; 3
    11da:	29 2f       	mov	r18, r25
    11dc:	22 0f       	add	r18, r18
    11de:	22 0f       	add	r18, r18
    11e0:	23 2b       	or	r18, r19
    11e2:	83 81       	ldd	r24, Z+3	; 0x03
    11e4:	94 81       	ldd	r25, Z+4	; 0x04
    11e6:	80 70       	andi	r24, 0x00	; 0
    11e8:	93 70       	andi	r25, 0x03	; 3
    11ea:	29 2b       	or	r18, r25

		/* Set the offset enable/disable for gyro and accel */
		data[6] = BMI160_SET_BITS(data[6], BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
    11ec:	f7 01       	movw	r30, r14
    11ee:	85 81       	ldd	r24, Z+5	; 0x05
    11f0:	87 95       	ror	r24
    11f2:	88 27       	eor	r24, r24
    11f4:	87 95       	ror	r24
    11f6:	2f 73       	andi	r18, 0x3F	; 63
		data[6] = BMI160_SET_BITS(data[6], BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
    11f8:	28 2b       	or	r18, r24
    11fa:	84 81       	ldd	r24, Z+4	; 0x04
    11fc:	82 95       	swap	r24
    11fe:	88 0f       	add	r24, r24
    1200:	88 0f       	add	r24, r24
    1202:	80 74       	andi	r24, 0x40	; 64
    1204:	28 2b       	or	r18, r24
    1206:	2f 83       	std	Y+7, r18	; 0x07

		/* Set the offset config and values in the sensor */
		rslt = bmi160_set_regs(BMI160_OFFSET_ADDR, data, 7, dev);
    1208:	81 e7       	ldi	r24, 0x71	; 113
    120a:	be 01       	movw	r22, r28
    120c:	6f 5f       	subi	r22, 0xFF	; 255
    120e:	7f 4f       	sbci	r23, 0xFF	; 255
    1210:	47 e0       	ldi	r20, 0x07	; 7
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	96 01       	movw	r18, r12
    1216:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	}

	return rslt;
}
    121a:	27 96       	adiw	r28, 0x07	; 7
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	df 90       	pop	r13
    1234:	cf 90       	pop	r12
    1236:	08 95       	ret

00001238 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	27 97       	sbiw	r28, 0x07	; 7
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	f8 94       	cli
    124e:	de bf       	out	0x3e, r29	; 62
    1250:	0f be       	out	0x3f, r0	; 63
    1252:	cd bf       	out	0x3d, r28	; 61
    1254:	7c 01       	movw	r14, r24
    1256:	8b 01       	movw	r16, r22
	int16_t offset_msb, offset_lsb;
	int16_t offset_data;


	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    1258:	cb 01       	movw	r24, r22
    125a:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if (rslt != BMI160_OK) {
    125e:	88 23       	and	r24, r24
    1260:	11 f0       	breq	.+4      	; 0x1266 <bmi160_get_offsets+0x2e>
    1262:	4f ef       	ldi	r20, 0xFF	; 255
    1264:	64 c0       	rjmp	.+200    	; 0x132e <bmi160_get_offsets+0xf6>
		rslt = BMI160_E_NULL_PTR;
	} else {
		/* Read the FOC config from the sensor */
		rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
    1266:	81 e7       	ldi	r24, 0x71	; 113
    1268:	be 01       	movw	r22, r28
    126a:	6f 5f       	subi	r22, 0xFF	; 255
    126c:	7f 4f       	sbci	r23, 0xFF	; 255
    126e:	47 e0       	ldi	r20, 0x07	; 7
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	98 01       	movw	r18, r16
    1274:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
    1278:	48 2f       	mov	r20, r24

		/* Accel offsets */
		offset->off_acc_x = (int8_t)data[0];
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	d7 01       	movw	r26, r14
    127e:	8c 93       	st	X, r24
		offset->off_acc_y = (int8_t)data[1];
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	11 96       	adiw	r26, 0x01	; 1
    1284:	8c 93       	st	X, r24
    1286:	11 97       	sbiw	r26, 0x01	; 1
		offset->off_acc_z = (int8_t)data[2];
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	12 96       	adiw	r26, 0x02	; 2
    128c:	8c 93       	st	X, r24
		msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
		offset_msb = (int16_t)(msb << 14);
		offset_lsb = lsb << 6;
		offset_data = offset_msb | offset_lsb;
		/* Divide by 64 to get the Right shift by 6 value */
		offset->off_gyro_x = (int16_t)(offset_data / 64);
    128e:	ef 81       	ldd	r30, Y+7	; 0x07
    1290:	9e 2f       	mov	r25, r30
    1292:	92 95       	swap	r25
    1294:	99 0f       	add	r25, r25
    1296:	99 0f       	add	r25, r25
    1298:	90 7c       	andi	r25, 0xC0	; 192
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	2c 81       	ldd	r18, Y+4	; 0x04
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	76 e0       	ldi	r23, 0x06	; 6
    12a2:	22 0f       	add	r18, r18
    12a4:	33 1f       	adc	r19, r19
    12a6:	7a 95       	dec	r23
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <bmi160_get_offsets+0x6a>
    12aa:	82 2b       	or	r24, r18
    12ac:	93 2b       	or	r25, r19
    12ae:	60 e4       	ldi	r22, 0x40	; 64
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__divmodhi4>
    12b6:	d7 01       	movw	r26, r14
    12b8:	14 96       	adiw	r26, 0x04	; 4
    12ba:	7c 93       	st	X, r23
    12bc:	6e 93       	st	-X, r22
    12be:	13 97       	sbiw	r26, 0x03	; 3
		msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
		offset_msb = (int16_t)(msb << 14);
		offset_lsb = lsb << 6;
		offset_data = offset_msb | offset_lsb;
		/* Divide by 64 to get the Right shift by 6 value */
		offset->off_gyro_y = (int16_t)(offset_data / 64);
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	f6 95       	lsr	r31
    12c4:	e7 95       	ror	r30
    12c6:	f6 95       	lsr	r31
    12c8:	e7 95       	ror	r30
    12ca:	9e 2f       	mov	r25, r30
    12cc:	92 95       	swap	r25
    12ce:	99 0f       	add	r25, r25
    12d0:	99 0f       	add	r25, r25
    12d2:	90 7c       	andi	r25, 0xC0	; 192
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	2d 81       	ldd	r18, Y+5	; 0x05
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	56 e0       	ldi	r21, 0x06	; 6
    12dc:	22 0f       	add	r18, r18
    12de:	33 1f       	adc	r19, r19
    12e0:	5a 95       	dec	r21
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <bmi160_get_offsets+0xa4>
    12e4:	82 2b       	or	r24, r18
    12e6:	93 2b       	or	r25, r19
    12e8:	60 e4       	ldi	r22, 0x40	; 64
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__divmodhi4>
    12f0:	d7 01       	movw	r26, r14
    12f2:	16 96       	adiw	r26, 0x06	; 6
    12f4:	7c 93       	st	X, r23
    12f6:	6e 93       	st	-X, r22
    12f8:	15 97       	sbiw	r26, 0x05	; 5
		msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
		offset_msb = (int16_t)(msb << 14);
		offset_lsb = lsb << 6;
		offset_data = offset_msb | offset_lsb;
		/* Divide by 64 to get the Right shift by 6 value */
		offset->off_gyro_z = (int16_t)(offset_data / 64);
    12fa:	f6 95       	lsr	r31
    12fc:	e7 95       	ror	r30
    12fe:	f6 95       	lsr	r31
    1300:	e7 95       	ror	r30
    1302:	9e 2f       	mov	r25, r30
    1304:	92 95       	swap	r25
    1306:	99 0f       	add	r25, r25
    1308:	99 0f       	add	r25, r25
    130a:	90 7c       	andi	r25, 0xC0	; 192
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	2e 81       	ldd	r18, Y+6	; 0x06
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	16 e0       	ldi	r17, 0x06	; 6
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	1a 95       	dec	r17
    131a:	e1 f7       	brne	.-8      	; 0x1314 <bmi160_get_offsets+0xdc>
    131c:	82 2b       	or	r24, r18
    131e:	93 2b       	or	r25, r19
    1320:	60 e4       	ldi	r22, 0x40	; 64
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__divmodhi4>
    1328:	f7 01       	movw	r30, r14
    132a:	70 87       	std	Z+8, r23	; 0x08
    132c:	67 83       	std	Z+7, r22	; 0x07
	}

	return rslt;
}
    132e:	84 2f       	mov	r24, r20
    1330:	27 96       	adiw	r28, 0x07	; 7
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	ff 90       	pop	r15
    1346:	ef 90       	pop	r14
    1348:	08 95       	ret

0000134a <bmi160_read_aux_data_auto_mode>:
/*!
 * @brief This API is used to read the raw uncompensated auxiliary sensor
 * data of 8 bytes from BMI160 register address 0x04 to 0x0B
 */
int8_t bmi160_read_aux_data_auto_mode(uint8_t *aux_data, const struct bmi160_dev *dev)
{
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	8c 01       	movw	r16, r24
    1354:	eb 01       	movw	r28, r22
	int8_t rslt;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    1356:	cb 01       	movw	r24, r22
    1358:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if (rslt != BMI160_OK) {
    135c:	88 23       	and	r24, r24
    135e:	11 f0       	breq	.+4      	; 0x1364 <bmi160_read_aux_data_auto_mode+0x1a>
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	0d c0       	rjmp	.+26     	; 0x137e <bmi160_read_aux_data_auto_mode+0x34>
		rslt = BMI160_E_NULL_PTR;
	} else {
		if ((dev->aux_cfg.aux_sensor_enable == BMI160_ENABLE) &&
    1364:	8c 89       	ldd	r24, Y+20	; 0x14
    1366:	83 70       	andi	r24, 0x03	; 3
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	11 f0       	breq	.+4      	; 0x1370 <bmi160_read_aux_data_auto_mode+0x26>
    136c:	8b ef       	ldi	r24, 0xFB	; 251
    136e:	07 c0       	rjmp	.+14     	; 0x137e <bmi160_read_aux_data_auto_mode+0x34>
			(dev->aux_cfg.manual_enable == BMI160_DISABLE)) {
			/* Read the aux. sensor's raw data */
			rslt = bmi160_get_regs(BMI160_AUX_DATA_ADDR, aux_data, 8, dev);
    1370:	84 e0       	ldi	r24, 0x04	; 4
    1372:	b8 01       	movw	r22, r16
    1374:	48 e0       	ldi	r20, 0x08	; 8
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	9e 01       	movw	r18, r28
    137a:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
			rslt = BMI160_E_INVALID_INPUT;
		}
	}

	return rslt;
}
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	08 95       	ret

00001388 <bmi160_read_step_counter>:

/*!
 * @brief This API reads the step counter value.
 */
int8_t bmi160_read_step_counter(uint16_t *step_val, const struct bmi160_dev *dev)
{
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <bmi160_read_step_counter+0xe>
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	7c 01       	movw	r14, r24
    139c:	8b 01       	movw	r16, r22
	int8_t rslt;
	uint8_t data[2] = {0, 0};
    139e:	19 82       	std	Y+1, r1	; 0x01
    13a0:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t msb = 0;
	uint8_t lsb = 0;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    13a2:	cb 01       	movw	r24, r22
    13a4:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if (rslt != BMI160_OK) {
    13a8:	88 23       	and	r24, r24
    13aa:	11 f0       	breq	.+4      	; 0x13b0 <bmi160_read_step_counter+0x28>
    13ac:	4f ef       	ldi	r20, 0xFF	; 255
    13ae:	15 c0       	rjmp	.+42     	; 0x13da <bmi160_read_step_counter+0x52>
		rslt = BMI160_E_NULL_PTR;
	} else {
		rslt = bmi160_get_regs(BMI160_INT_STEP_CNT_0_ADDR, data, 2, dev);
    13b0:	88 e7       	ldi	r24, 0x78	; 120
    13b2:	be 01       	movw	r22, r28
    13b4:	6f 5f       	subi	r22, 0xFF	; 255
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	42 e0       	ldi	r20, 0x02	; 2
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	98 01       	movw	r18, r16
    13be:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
    13c2:	48 2f       	mov	r20, r24
		if (rslt == BMI160_OK) {
    13c4:	88 23       	and	r24, r24
    13c6:	49 f4       	brne	.+18     	; 0x13da <bmi160_read_step_counter+0x52>
			lsb = data[0];
			msb = data[1] << 8;
			*step_val = msb | lsb;
    13c8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	29 81       	ldd	r18, Y+1	; 0x01
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	82 2b       	or	r24, r18
    13d2:	93 2b       	or	r25, r19
    13d4:	f7 01       	movw	r30, r14
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
		}
	}

	return rslt;
}
    13da:	84 2f       	mov	r24, r20
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	1f 91       	pop	r17
    13e6:	0f 91       	pop	r16
    13e8:	ff 90       	pop	r15
    13ea:	ef 90       	pop	r14
    13ec:	08 95       	ret

000013ee <bmi160_set_step_counter>:
/*!
 * @brief This API enables or disable the step counter feature.
 * 1 - enable step counter (0 - disable)
 */
int8_t bmi160_set_step_counter(uint8_t step_cnt_enable, const struct bmi160_dev *dev)
{
    13ee:	ff 92       	push	r15
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	df 93       	push	r29
    13f6:	cf 93       	push	r28
    13f8:	0f 92       	push	r0
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	f8 2e       	mov	r15, r24
    1400:	8b 01       	movw	r16, r22
	int8_t rslt;
	uint8_t data = 0;
    1402:	19 82       	std	Y+1, r1	; 0x01

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    1404:	cb 01       	movw	r24, r22
    1406:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if (rslt != BMI160_OK) {
    140a:	88 23       	and	r24, r24
    140c:	11 f0       	breq	.+4      	; 0x1412 <bmi160_set_step_counter+0x24>
    140e:	8f ef       	ldi	r24, 0xFF	; 255
    1410:	1c c0       	rjmp	.+56     	; 0x144a <bmi160_set_step_counter+0x5c>
		rslt = BMI160_E_NULL_PTR;
	} else {

		rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_1_ADDR, &data, 1, dev);
    1412:	8b e7       	ldi	r24, 0x7B	; 123
    1414:	be 01       	movw	r22, r28
    1416:	6f 5f       	subi	r22, 0xFF	; 255
    1418:	7f 4f       	sbci	r23, 0xFF	; 255
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	98 01       	movw	r18, r16
    1420:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
		if (rslt == BMI160_OK) {
    1424:	88 23       	and	r24, r24
    1426:	89 f4       	brne	.+34     	; 0x144a <bmi160_set_step_counter+0x5c>
    1428:	89 81       	ldd	r24, Y+1	; 0x01
			if (step_cnt_enable == BMI160_ENABLE)
    142a:	91 e0       	ldi	r25, 0x01	; 1
    142c:	f9 16       	cp	r15, r25
    142e:	11 f4       	brne	.+4      	; 0x1434 <bmi160_set_step_counter+0x46>
				data |= (uint8_t)(step_cnt_enable << 3);
    1430:	88 60       	ori	r24, 0x08	; 8
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <bmi160_set_step_counter+0x48>
			else
				data &= ~BMI160_STEP_COUNT_EN_BIT_MASK;
    1434:	87 7f       	andi	r24, 0xF7	; 247
    1436:	89 83       	std	Y+1, r24	; 0x01
			rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_1_ADDR, &data, 1, dev);
    1438:	8b e7       	ldi	r24, 0x7B	; 123
    143a:	be 01       	movw	r22, r28
    143c:	6f 5f       	subi	r22, 0xFF	; 255
    143e:	7f 4f       	sbci	r23, 0xFF	; 255
    1440:	41 e0       	ldi	r20, 0x01	; 1
    1442:	50 e0       	ldi	r21, 0x00	; 0
    1444:	98 01       	movw	r18, r16
    1446:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
		}
	}

	return rslt;
}
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	08 95       	ret

00001458 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <bmi160_init+0xa>
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	8c 01       	movw	r16, r24
	int8_t rslt;
	uint8_t data;
	uint8_t chip_id;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    1468:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	/* Dummy read of 0x7F register to enable SPI Interface
	 if SPI is used */
	if ((rslt == BMI160_OK) && (dev->interface == BMI160_SPI_INTF))
    146c:	88 23       	and	r24, r24
    146e:	31 f5       	brne	.+76     	; 0x14bc <bmi160_init+0x64>
    1470:	f8 01       	movw	r30, r16
    1472:	82 81       	ldd	r24, Z+2	; 0x02
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	59 f4       	brne	.+22     	; 0x148e <bmi160_init+0x36>
		rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
    1478:	8f e7       	ldi	r24, 0x7F	; 127
    147a:	be 01       	movw	r22, r28
    147c:	6f 5f       	subi	r22, 0xFF	; 255
    147e:	7f 4f       	sbci	r23, 0xFF	; 255
    1480:	41 e0       	ldi	r20, 0x01	; 1
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	98 01       	movw	r18, r16
    1486:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>

	if (rslt == BMI160_OK) {
    148a:	88 23       	and	r24, r24
    148c:	b9 f4       	brne	.+46     	; 0x14bc <bmi160_init+0x64>
		/* Read chip_id */
		rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &chip_id, 1, dev);
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	be 01       	movw	r22, r28
    1492:	6e 5f       	subi	r22, 0xFE	; 254
    1494:	7f 4f       	sbci	r23, 0xFF	; 255
    1496:	41 e0       	ldi	r20, 0x01	; 1
    1498:	50 e0       	ldi	r21, 0x00	; 0
    149a:	98 01       	movw	r18, r16
    149c:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>

		if ((rslt == BMI160_OK) && (chip_id == BMI160_CHIP_ID)) {
    14a0:	88 23       	and	r24, r24
    14a2:	59 f4       	brne	.+22     	; 0x14ba <bmi160_init+0x62>
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	81 3d       	cpi	r24, 0xD1	; 209
    14a8:	41 f4       	brne	.+16     	; 0x14ba <bmi160_init+0x62>
			dev->chip_id = chip_id;
    14aa:	f8 01       	movw	r30, r16
    14ac:	80 83       	st	Z, r24
			dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	83 83       	std	Z+3, r24	; 0x03
			/* Soft reset */
			rslt = bmi160_soft_reset(dev);
    14b2:	c8 01       	movw	r24, r16
    14b4:	0e 94 c4 00 	call	0x188	; 0x188 <bmi160_soft_reset>
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <bmi160_init+0x64>

	if (rslt == BMI160_OK) {
		/* Read chip_id */
		rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &chip_id, 1, dev);

		if ((rslt == BMI160_OK) && (chip_id == BMI160_CHIP_ID)) {
    14ba:	8d ef       	ldi	r24, 0xFD	; 253
			rslt = BMI160_E_DEV_NOT_FOUND;
		}
	}

	return rslt;
}
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	08 95       	ret

000014ca <bmi160_set_aux_auto_mode>:
 * @brief This API is used to setup the auxiliary sensor of bmi160 in auto mode
 * Thus enabling the auto update of 8 bytes of data from auxiliary sensor
 * to BMI160 register address 0x04 to 0x0B
 */
int8_t bmi160_set_aux_auto_mode(uint8_t *data_addr, struct bmi160_dev *dev)
{
    14ca:	cf 92       	push	r12
    14cc:	df 92       	push	r13
    14ce:	ef 92       	push	r14
    14d0:	ff 92       	push	r15
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	0f 92       	push	r0
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	7c 01       	movw	r14, r24
    14e2:	8b 01       	movw	r16, r22
	int8_t rslt;
	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    14e4:	cb 01       	movw	r24, r22
    14e6:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if (rslt != BMI160_OK) {
    14ea:	88 23       	and	r24, r24
    14ec:	19 f0       	breq	.+6      	; 0x14f4 <bmi160_set_aux_auto_mode+0x2a>
    14ee:	ff 24       	eor	r15, r15
    14f0:	fa 94       	dec	r15
    14f2:	4b c0       	rjmp	.+150    	; 0x158a <bmi160_set_aux_auto_mode+0xc0>
		rslt = BMI160_E_NULL_PTR;
	} else {
		if (dev->aux_cfg.aux_sensor_enable == BMI160_ENABLE) {
    14f4:	d8 01       	movw	r26, r16
    14f6:	54 96       	adiw	r26, 0x14	; 20
    14f8:	8c 91       	ld	r24, X
    14fa:	80 fd       	sbrc	r24, 0
    14fc:	03 c0       	rjmp	.+6      	; 0x1504 <bmi160_set_aux_auto_mode+0x3a>
    14fe:	eb ef       	ldi	r30, 0xFB	; 251
    1500:	fe 2e       	mov	r15, r30
    1502:	43 c0       	rjmp	.+134    	; 0x158a <bmi160_set_aux_auto_mode+0xc0>
			/* Write the aux. address to read in 0x4D of BMI160*/
			rslt = bmi160_set_regs(BMI160_AUX_IF_2_ADDR, data_addr, 1, dev);
    1504:	8d e4       	ldi	r24, 0x4D	; 77
    1506:	b7 01       	movw	r22, r14
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	98 01       	movw	r18, r16
    150e:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
    1512:	f8 2e       	mov	r15, r24
			dev->delay_ms(BMI160_AUX_COM_DELAY);
    1514:	d8 01       	movw	r26, r16
    1516:	5e 96       	adiw	r26, 0x1e	; 30
    1518:	ed 91       	ld	r30, X+
    151a:	fc 91       	ld	r31, X
    151c:	5f 97       	sbiw	r26, 0x1f	; 31
    151e:	6a e0       	ldi	r22, 0x0A	; 10
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	09 95       	icall
			if (rslt == BMI160_OK) {
    1528:	ff 20       	and	r15, r15
    152a:	79 f5       	brne	.+94     	; 0x158a <bmi160_set_aux_auto_mode+0xc0>
static int8_t config_aux_odr(const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t aux_odr;

	rslt = bmi160_get_regs(BMI160_AUX_ODR_ADDR, &aux_odr, 1, dev);
    152c:	84 e4       	ldi	r24, 0x44	; 68
    152e:	6e 01       	movw	r12, r28
    1530:	08 94       	sec
    1532:	c1 1c       	adc	r12, r1
    1534:	d1 1c       	adc	r13, r1
    1536:	b6 01       	movw	r22, r12
    1538:	41 e0       	ldi	r20, 0x01	; 1
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	98 01       	movw	r18, r16
    153e:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
    1542:	f8 2e       	mov	r15, r24
	if (rslt == BMI160_OK) {
    1544:	88 23       	and	r24, r24
    1546:	09 f5       	brne	.+66     	; 0x158a <bmi160_set_aux_auto_mode+0xc0>
		aux_odr = (uint8_t)(dev->aux_cfg.aux_odr);
    1548:	f8 01       	movw	r30, r16
    154a:	84 89       	ldd	r24, Z+20	; 0x14
    154c:	82 95       	swap	r24
    154e:	8f 70       	andi	r24, 0x0F	; 15
    1550:	89 83       	std	Y+1, r24	; 0x01
		/* Set the secondary interface ODR
		   i.e polling rate of secondary sensor */
		rslt = bmi160_set_regs(BMI160_AUX_ODR_ADDR, &aux_odr, 1, dev);
    1552:	84 e4       	ldi	r24, 0x44	; 68
    1554:	b6 01       	movw	r22, r12
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	98 01       	movw	r18, r16
    155c:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
    1560:	f8 2e       	mov	r15, r24
		dev->delay_ms(BMI160_AUX_COM_DELAY);
    1562:	d8 01       	movw	r26, r16
    1564:	5e 96       	adiw	r26, 0x1e	; 30
    1566:	ed 91       	ld	r30, X+
    1568:	fc 91       	ld	r31, X
    156a:	5f 97       	sbiw	r26, 0x1f	; 31
    156c:	6a e0       	ldi	r22, 0x0A	; 10
    156e:	70 e0       	ldi	r23, 0x00	; 0
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	09 95       	icall
			if (rslt == BMI160_OK) {
				/* Configure the polling ODR for
				auxiliary sensor */
					rslt = config_aux_odr(dev);

				if (rslt == BMI160_OK) {
    1576:	ff 20       	and	r15, r15
    1578:	41 f4       	brne	.+16     	; 0x158a <bmi160_set_aux_auto_mode+0xc0>
					/* Disable the aux. manual mode, i.e aux.
					 * sensor is in auto-mode (data-mode) */
					dev->aux_cfg.manual_enable = BMI160_DISABLE;
    157a:	f8 01       	movw	r30, r16
    157c:	84 89       	ldd	r24, Z+20	; 0x14
    157e:	8d 7f       	andi	r24, 0xFD	; 253
    1580:	84 8b       	std	Z+20, r24	; 0x14
					rslt = bmi160_config_aux_mode(dev);
    1582:	c8 01       	movw	r24, r16
    1584:	0e 94 da 05 	call	0xbb4	; 0xbb4 <bmi160_config_aux_mode>
    1588:	f8 2e       	mov	r15, r24
			rslt = BMI160_E_INVALID_INPUT;
		}
	}

	return rslt;
}
    158a:	8f 2d       	mov	r24, r15
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	1f 91       	pop	r17
    1594:	0f 91       	pop	r16
    1596:	ff 90       	pop	r15
    1598:	ef 90       	pop	r14
    159a:	df 90       	pop	r13
    159c:	cf 90       	pop	r12
    159e:	08 95       	ret

000015a0 <bmi160_aux_init>:
/*!
 * @brief This API initialize the auxiliary sensor
 * in order to access it.
 */
int8_t bmi160_aux_init(const struct bmi160_dev *dev)
{
    15a0:	ef 92       	push	r14
    15a2:	ff 92       	push	r15
    15a4:	0f 93       	push	r16
    15a6:	1f 93       	push	r17
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	00 d0       	rcall	.+0      	; 0x15ae <bmi160_aux_init+0xe>
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	8c 01       	movw	r16, r24
	int8_t rslt;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    15b4:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if (rslt != BMI160_OK) {
    15b8:	88 23       	and	r24, r24
    15ba:	11 f0       	breq	.+4      	; 0x15c0 <bmi160_aux_init+0x20>
    15bc:	8f ef       	ldi	r24, 0xFF	; 255
    15be:	3b c0       	rjmp	.+118    	; 0x1636 <bmi160_aux_init+0x96>
		rslt = BMI160_E_NULL_PTR;
	} else {
		if (dev->aux_cfg.aux_sensor_enable == BMI160_ENABLE) {
    15c0:	d8 01       	movw	r26, r16
    15c2:	54 96       	adiw	r26, 0x14	; 20
    15c4:	8c 91       	ld	r24, X
    15c6:	80 fd       	sbrc	r24, 0
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <bmi160_aux_init+0x2e>
    15ca:	8b ef       	ldi	r24, 0xFB	; 251
    15cc:	34 c0       	rjmp	.+104    	; 0x1636 <bmi160_aux_init+0x96>
 * @brief This API configure the secondary interface.
 */
static int8_t config_sec_if(const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t if_conf = 0;
    15ce:	19 82       	std	Y+1, r1	; 0x01
	uint8_t cmd = BMI160_AUX_NORMAL_MODE;
    15d0:	89 e1       	ldi	r24, 0x19	; 25
    15d2:	8a 83       	std	Y+2, r24	; 0x02

	/* set the aux power mode to normal*/
	rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
    15d4:	8e e7       	ldi	r24, 0x7E	; 126
    15d6:	be 01       	movw	r22, r28
    15d8:	6e 5f       	subi	r22, 0xFE	; 254
    15da:	7f 4f       	sbci	r23, 0xFF	; 255
    15dc:	41 e0       	ldi	r20, 0x01	; 1
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	98 01       	movw	r18, r16
    15e2:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	if (rslt == BMI160_OK) {
    15e6:	88 23       	and	r24, r24
    15e8:	31 f5       	brne	.+76     	; 0x1636 <bmi160_aux_init+0x96>
		dev->delay_ms(60);
    15ea:	d8 01       	movw	r26, r16
    15ec:	5e 96       	adiw	r26, 0x1e	; 30
    15ee:	ed 91       	ld	r30, X+
    15f0:	fc 91       	ld	r31, X
    15f2:	5f 97       	sbiw	r26, 0x1f	; 31
    15f4:	6c e3       	ldi	r22, 0x3C	; 60
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	09 95       	icall
		rslt = bmi160_get_regs(BMI160_IF_CONF_ADDR, &if_conf, 1, dev);
    15fe:	8b e6       	ldi	r24, 0x6B	; 107
    1600:	7e 01       	movw	r14, r28
    1602:	08 94       	sec
    1604:	e1 1c       	adc	r14, r1
    1606:	f1 1c       	adc	r15, r1
    1608:	b7 01       	movw	r22, r14
    160a:	41 e0       	ldi	r20, 0x01	; 1
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	98 01       	movw	r18, r16
    1610:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
		if_conf |= (uint8_t)(1 << 5);
    1614:	99 81       	ldd	r25, Y+1	; 0x01
		if (rslt == BMI160_OK)
    1616:	88 23       	and	r24, r24
    1618:	71 f4       	brne	.+28     	; 0x1636 <bmi160_aux_init+0x96>
	/* set the aux power mode to normal*/
	rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
	if (rslt == BMI160_OK) {
		dev->delay_ms(60);
		rslt = bmi160_get_regs(BMI160_IF_CONF_ADDR, &if_conf, 1, dev);
		if_conf |= (uint8_t)(1 << 5);
    161a:	90 62       	ori	r25, 0x20	; 32
    161c:	99 83       	std	Y+1, r25	; 0x01
		if (rslt == BMI160_OK)
			/*enable the secondary interface also*/
			rslt = bmi160_set_regs(BMI160_IF_CONF_ADDR, &if_conf, 1, dev);
    161e:	8b e6       	ldi	r24, 0x6B	; 107
    1620:	b7 01       	movw	r22, r14
    1622:	41 e0       	ldi	r20, 0x01	; 1
    1624:	50 e0       	ldi	r21, 0x00	; 0
    1626:	98 01       	movw	r18, r16
    1628:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
static int8_t config_aux_settg(const struct bmi160_dev *dev)
{
	int8_t rslt;

	rslt = config_sec_if(dev);
	if (rslt == BMI160_OK) {
    162c:	88 23       	and	r24, r24
    162e:	19 f4       	brne	.+6      	; 0x1636 <bmi160_aux_init+0x96>
		/* Configures the auxiliary interface settings */
		rslt = bmi160_config_aux_mode(dev);
    1630:	c8 01       	movw	r24, r16
    1632:	0e 94 da 05 	call	0xbb4	; 0xbb4 <bmi160_config_aux_mode>
			rslt = BMI160_E_INVALID_INPUT;
		}
	}

	return rslt;
}
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	1f 91       	pop	r17
    1640:	0f 91       	pop	r16
    1642:	ff 90       	pop	r15
    1644:	ef 90       	pop	r14
    1646:	08 95       	ret

00001648 <bmi160_perform_self_test>:

/*!
 * @brief This is used to perform self test of accel/gyro of the BMI160 sensor
 */
int8_t bmi160_perform_self_test(uint8_t select_sensor, struct bmi160_dev *dev)
{
    1648:	cf 92       	push	r12
    164a:	df 92       	push	r13
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	1f 93       	push	r17
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	65 97       	sbiw	r28, 0x15	; 21
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	18 2f       	mov	r17, r24
    1668:	7b 01       	movw	r14, r22
	int8_t rslt;
	int8_t self_test_rslt = 0;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    166a:	cb 01       	movw	r24, r22
    166c:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if (rslt != BMI160_OK) {
    1670:	88 23       	and	r24, r24
    1672:	11 f0       	breq	.+4      	; 0x1678 <bmi160_perform_self_test+0x30>
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	d9 c0       	rjmp	.+434    	; 0x182a <bmi160_perform_self_test+0x1e2>
		rslt = BMI160_E_NULL_PTR;
	} else {
		/* Proceed if null check is fine */
		switch (select_sensor) {
    1678:	11 30       	cpi	r17, 0x01	; 1
    167a:	21 f0       	breq	.+8      	; 0x1684 <bmi160_perform_self_test+0x3c>
    167c:	12 30       	cpi	r17, 0x02	; 2
    167e:	09 f0       	breq	.+2      	; 0x1682 <bmi160_perform_self_test+0x3a>
    1680:	e4 c0       	rjmp	.+456    	; 0x184a <bmi160_perform_self_test+0x202>
    1682:	87 c0       	rjmp	.+270    	; 0x1792 <bmi160_perform_self_test+0x14a>
{
	int8_t rslt;
	uint8_t reg_data;

	/* Set the Accel power mode as normal mode */
	dev->accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
    1684:	81 e1       	ldi	r24, 0x11	; 17
    1686:	d7 01       	movw	r26, r14
    1688:	14 96       	adiw	r26, 0x04	; 4
    168a:	8c 93       	st	X, r24
    168c:	14 97       	sbiw	r26, 0x04	; 4
	/* Set the sensor range configuration as 8G */
	dev->accel_cfg.range = BMI160_ACCEL_RANGE_8G;
    168e:	88 e0       	ldi	r24, 0x08	; 8
    1690:	16 96       	adiw	r26, 0x06	; 6
    1692:	8c 93       	st	X, r24
	rslt = bmi160_set_sens_conf(dev);
    1694:	c7 01       	movw	r24, r14
    1696:	0e 94 0b 02 	call	0x416	; 0x416 <bmi160_set_sens_conf>
    169a:	18 2f       	mov	r17, r24
	if (rslt == BMI160_OK) {
    169c:	88 23       	and	r24, r24
    169e:	09 f0       	breq	.+2      	; 0x16a2 <bmi160_perform_self_test+0x5a>
    16a0:	bc c0       	rjmp	.+376    	; 0x181a <bmi160_perform_self_test+0x1d2>
		/* Accel configurations are set to facilitate self test
		 * acc_odr - 1600Hz ; acc_bwp = 2 ; acc_us = 0 */
		reg_data = BMI160_ACCEL_SELF_TEST_CONFIG;
    16a2:	8c e2       	ldi	r24, 0x2C	; 44
    16a4:	89 83       	std	Y+1, r24	; 0x01
		rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &reg_data, 1, dev);
    16a6:	80 e4       	ldi	r24, 0x40	; 64
    16a8:	6e 01       	movw	r12, r28
    16aa:	08 94       	sec
    16ac:	c1 1c       	adc	r12, r1
    16ae:	d1 1c       	adc	r13, r1
    16b0:	b6 01       	movw	r22, r12
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	97 01       	movw	r18, r14
    16b8:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
    16bc:	18 2f       	mov	r17, r24
	int8_t rslt;
	struct bmi160_sensor_data accel_pos, accel_neg;

	/* Enable Gyro self test bit */
	rslt = enable_accel_self_test(dev);
	if (rslt == BMI160_OK) {
    16be:	88 23       	and	r24, r24
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <bmi160_perform_self_test+0x7c>
    16c2:	ab c0       	rjmp	.+342    	; 0x181a <bmi160_perform_self_test+0x1d2>
	int8_t rslt;
	uint8_t reg_data;

	/* Enable accel self test with positive self-test excitation
	   and with amplitude of deflection set as high */
	reg_data = BMI160_ACCEL_SELF_TEST_POSITIVE_EN;
    16c4:	8d e0       	ldi	r24, 0x0D	; 13
    16c6:	89 83       	std	Y+1, r24	; 0x01
	rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
    16c8:	8d e6       	ldi	r24, 0x6D	; 109
    16ca:	b6 01       	movw	r22, r12
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	50 e0       	ldi	r21, 0x00	; 0
    16d0:	97 01       	movw	r18, r14
    16d2:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
    16d6:	18 2f       	mov	r17, r24
	if (rslt == BMI160_OK) {
    16d8:	88 23       	and	r24, r24
    16da:	09 f0       	breq	.+2      	; 0x16de <bmi160_perform_self_test+0x96>
    16dc:	9e c0       	rjmp	.+316    	; 0x181a <bmi160_perform_self_test+0x1d2>
		/* Read the data after a delay of 50ms */
		dev->delay_ms(BMI160_ACCEL_SELF_TEST_DELAY);
    16de:	d7 01       	movw	r26, r14
    16e0:	5e 96       	adiw	r26, 0x1e	; 30
    16e2:	ed 91       	ld	r30, X+
    16e4:	fc 91       	ld	r31, X
    16e6:	5f 97       	sbiw	r26, 0x1f	; 31
    16e8:	62 e3       	ldi	r22, 0x32	; 50
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	09 95       	icall
		rslt = bmi160_get_sensor_data(BMI160_ACCEL_ONLY, accel_pos, NULL, dev);
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	be 01       	movw	r22, r28
    16f6:	6e 5f       	subi	r22, 0xFE	; 254
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	50 e0       	ldi	r21, 0x00	; 0
    16fe:	97 01       	movw	r18, r14
    1700:	0e 94 2d 03 	call	0x65a	; 0x65a <bmi160_get_sensor_data>
    1704:	18 2f       	mov	r17, r24
	/* Enable Gyro self test bit */
	rslt = enable_accel_self_test(dev);
	if (rslt == BMI160_OK) {
		/* Perform accel self test with positive excitation */
		rslt = accel_self_test_positive_excitation(&accel_pos, dev);
		if (rslt == BMI160_OK) {
    1706:	88 23       	and	r24, r24
    1708:	09 f0       	breq	.+2      	; 0x170c <bmi160_perform_self_test+0xc4>
    170a:	87 c0       	rjmp	.+270    	; 0x181a <bmi160_perform_self_test+0x1d2>
	int8_t rslt;
	uint8_t reg_data;

	/* Enable accel self test with negative self-test excitation
	   and with amplitude of deflection set as high */
	reg_data = BMI160_ACCEL_SELF_TEST_NEGATIVE_EN;
    170c:	89 e0       	ldi	r24, 0x09	; 9
    170e:	89 83       	std	Y+1, r24	; 0x01
	rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
    1710:	8d e6       	ldi	r24, 0x6D	; 109
    1712:	b6 01       	movw	r22, r12
    1714:	41 e0       	ldi	r20, 0x01	; 1
    1716:	50 e0       	ldi	r21, 0x00	; 0
    1718:	97 01       	movw	r18, r14
    171a:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
    171e:	18 2f       	mov	r17, r24
	if (rslt == BMI160_OK) {
    1720:	88 23       	and	r24, r24
    1722:	09 f0       	breq	.+2      	; 0x1726 <bmi160_perform_self_test+0xde>
    1724:	7a c0       	rjmp	.+244    	; 0x181a <bmi160_perform_self_test+0x1d2>
		/* Read the data after a delay of 50ms */
		dev->delay_ms(BMI160_ACCEL_SELF_TEST_DELAY);
    1726:	d7 01       	movw	r26, r14
    1728:	5e 96       	adiw	r26, 0x1e	; 30
    172a:	ed 91       	ld	r30, X+
    172c:	fc 91       	ld	r31, X
    172e:	5f 97       	sbiw	r26, 0x1f	; 31
    1730:	62 e3       	ldi	r22, 0x32	; 50
    1732:	70 e0       	ldi	r23, 0x00	; 0
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	09 95       	icall
		rslt = bmi160_get_sensor_data(BMI160_ACCEL_ONLY, accel_neg, NULL, dev);
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	be 01       	movw	r22, r28
    173e:	64 5f       	subi	r22, 0xF4	; 244
    1740:	7f 4f       	sbci	r23, 0xFF	; 255
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	50 e0       	ldi	r21, 0x00	; 0
    1746:	97 01       	movw	r18, r14
    1748:	0e 94 2d 03 	call	0x65a	; 0x65a <bmi160_get_sensor_data>
    174c:	18 2f       	mov	r17, r24
		/* Perform accel self test with positive excitation */
		rslt = accel_self_test_positive_excitation(&accel_pos, dev);
		if (rslt == BMI160_OK) {
			/* Perform accel self test with negative excitation */
			rslt = accel_self_test_negative_excitation(&accel_neg, dev);
			if (rslt == BMI160_OK) {
    174e:	88 23       	and	r24, r24
    1750:	09 f0       	breq	.+2      	; 0x1754 <bmi160_perform_self_test+0x10c>
    1752:	63 c0       	rjmp	.+198    	; 0x181a <bmi160_perform_self_test+0x1d2>
					const struct bmi160_sensor_data *accel_neg)
{
	int8_t rslt;

	/* Validate the results of self test */
	if (((accel_neg->x - accel_pos->x) > BMI160_ACCEL_SELF_TEST_LIMIT)
    1754:	8c 85       	ldd	r24, Y+12	; 0x0c
    1756:	9d 85       	ldd	r25, Y+13	; 0x0d
    1758:	2a 81       	ldd	r18, Y+2	; 0x02
    175a:	3b 81       	ldd	r19, Y+3	; 0x03
    175c:	82 1b       	sub	r24, r18
    175e:	93 0b       	sbc	r25, r19
    1760:	81 50       	subi	r24, 0x01	; 1
    1762:	90 42       	sbci	r25, 0x20	; 32
    1764:	08 f4       	brcc	.+2      	; 0x1768 <bmi160_perform_self_test+0x120>
    1766:	6f c0       	rjmp	.+222    	; 0x1846 <bmi160_perform_self_test+0x1fe>
    1768:	8e 85       	ldd	r24, Y+14	; 0x0e
    176a:	9f 85       	ldd	r25, Y+15	; 0x0f
    176c:	2c 81       	ldd	r18, Y+4	; 0x04
    176e:	3d 81       	ldd	r19, Y+5	; 0x05
    1770:	82 1b       	sub	r24, r18
    1772:	93 0b       	sbc	r25, r19
    1774:	81 50       	subi	r24, 0x01	; 1
    1776:	90 42       	sbci	r25, 0x20	; 32
    1778:	08 f4       	brcc	.+2      	; 0x177c <bmi160_perform_self_test+0x134>
    177a:	65 c0       	rjmp	.+202    	; 0x1846 <bmi160_perform_self_test+0x1fe>
    177c:	88 89       	ldd	r24, Y+16	; 0x10
    177e:	99 89       	ldd	r25, Y+17	; 0x11
    1780:	2e 81       	ldd	r18, Y+6	; 0x06
    1782:	3f 81       	ldd	r19, Y+7	; 0x07
    1784:	82 1b       	sub	r24, r18
    1786:	93 0b       	sbc	r25, r19
    1788:	81 50       	subi	r24, 0x01	; 1
    178a:	90 42       	sbci	r25, 0x20	; 32
    178c:	08 f4       	brcc	.+2      	; 0x1790 <bmi160_perform_self_test+0x148>
    178e:	5b c0       	rjmp	.+182    	; 0x1846 <bmi160_perform_self_test+0x1fe>
    1790:	46 c0       	rjmp	.+140    	; 0x181e <bmi160_perform_self_test+0x1d6>
			rslt = perform_accel_self_test(dev);
			break;

		case BMI160_GYRO_ONLY:
			/* Set the power mode as normal mode */
			dev->gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
    1792:	85 e1       	ldi	r24, 0x15	; 21
    1794:	d7 01       	movw	r26, r14
    1796:	1c 96       	adiw	r26, 0x0c	; 12
    1798:	8c 93       	st	X, r24
			rslt = bmi160_set_power_mode(dev);
    179a:	c7 01       	movw	r24, r14
    179c:	0e 94 42 01 	call	0x284	; 0x284 <bmi160_set_power_mode>
    17a0:	18 2f       	mov	r17, r24
			/* Perform gyro self test */
			if (rslt == BMI160_OK) {
    17a2:	88 23       	and	r24, r24
    17a4:	d1 f5       	brne	.+116    	; 0x181a <bmi160_perform_self_test+0x1d2>
{
	int8_t rslt;
	uint8_t reg_data;

	/* Enable the Gyro self test bit to trigger the self test */
	rslt = bmi160_get_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
    17a6:	8d e6       	ldi	r24, 0x6D	; 109
    17a8:	6e 01       	movw	r12, r28
    17aa:	08 94       	sec
    17ac:	c1 1c       	adc	r12, r1
    17ae:	d1 1c       	adc	r13, r1
    17b0:	b6 01       	movw	r22, r12
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	97 01       	movw	r18, r14
    17b8:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
    17bc:	18 2f       	mov	r17, r24
	if (rslt == BMI160_OK) {
    17be:	88 23       	and	r24, r24
    17c0:	61 f5       	brne	.+88     	; 0x181a <bmi160_perform_self_test+0x1d2>
		reg_data = BMI160_SET_BITS(reg_data, BMI160_GYRO_SELF_TEST, 1);
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	80 61       	ori	r24, 0x10	; 16
    17c6:	89 83       	std	Y+1, r24	; 0x01
		rslt = bmi160_set_regs(BMI160_SELF_TEST_ADDR, &reg_data, 1, dev);
    17c8:	8d e6       	ldi	r24, 0x6D	; 109
    17ca:	b6 01       	movw	r22, r12
    17cc:	41 e0       	ldi	r20, 0x01	; 1
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	97 01       	movw	r18, r14
    17d2:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
    17d6:	18 2f       	mov	r17, r24
		if (rslt == BMI160_OK) {
    17d8:	88 23       	and	r24, r24
    17da:	f9 f4       	brne	.+62     	; 0x181a <bmi160_perform_self_test+0x1d2>
			/* Delay to enable gyro self test */
			dev->delay_ms(BMI160_GYRO_SELF_TEST_DELAY);
    17dc:	d7 01       	movw	r26, r14
    17de:	5e 96       	adiw	r26, 0x1e	; 30
    17e0:	ed 91       	ld	r30, X+
    17e2:	fc 91       	ld	r31, X
    17e4:	5f 97       	sbiw	r26, 0x1f	; 31
    17e6:	64 e1       	ldi	r22, 0x14	; 20
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	09 95       	icall
{
	int8_t rslt;
	uint8_t reg_data;

	/* Validate the Gyro self test result */
	rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &reg_data, 1, dev);
    17f0:	8b e1       	ldi	r24, 0x1B	; 27
    17f2:	b6 01       	movw	r22, r12
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	97 01       	movw	r18, r14
    17fa:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
    17fe:	18 2f       	mov	r17, r24
	if (rslt == BMI160_OK) {
    1800:	88 23       	and	r24, r24
    1802:	59 f4       	brne	.+22     	; 0x181a <bmi160_perform_self_test+0x1d2>
		reg_data = BMI160_GET_BITS(reg_data, BMI160_GYRO_SELF_TEST_STATUS);
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	82 70       	andi	r24, 0x02	; 2
    180a:	90 70       	andi	r25, 0x00	; 0
    180c:	95 95       	asr	r25
    180e:	87 95       	ror	r24
    1810:	89 83       	std	Y+1, r24	; 0x01
		if (reg_data == BMI160_ENABLE) {
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	21 f0       	breq	.+8      	; 0x181e <bmi160_perform_self_test+0x1d6>
    1816:	11 e0       	ldi	r17, 0x01	; 1
    1818:	02 c0       	rjmp	.+4      	; 0x181e <bmi160_perform_self_test+0x1d6>
			rslt = BMI160_E_INVALID_INPUT;
			break;
		}

		/* Check to ensure bus error does not occur */
		if (rslt >= BMI160_OK) {
    181a:	17 fd       	sbrc	r17, 7
    181c:	05 c0       	rjmp	.+10     	; 0x1828 <bmi160_perform_self_test+0x1e0>
			/* Store the status of self test result */
			self_test_rslt = rslt;
			/* Perform soft reset */
			rslt = bmi160_soft_reset(dev);
    181e:	c7 01       	movw	r24, r14
    1820:	0e 94 c4 00 	call	0x188	; 0x188 <bmi160_soft_reset>
		}
		/* Check to ensure bus operations are success */
		if (rslt == BMI160_OK) {
    1824:	88 23       	and	r24, r24
    1826:	09 f4       	brne	.+2      	; 0x182a <bmi160_perform_self_test+0x1e2>
    1828:	81 2f       	mov	r24, r17
		}

	}

	return rslt;
}
    182a:	65 96       	adiw	r28, 0x15	; 21
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	f8 94       	cli
    1830:	de bf       	out	0x3e, r29	; 62
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	cd bf       	out	0x3d, r28	; 61
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	1f 91       	pop	r17
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	df 90       	pop	r13
    1842:	cf 90       	pop	r12
    1844:	08 95       	ret
			self_test_rslt = rslt;
			/* Perform soft reset */
			rslt = bmi160_soft_reset(dev);
		}
		/* Check to ensure bus operations are success */
		if (rslt == BMI160_OK) {
    1846:	12 e0       	ldi	r17, 0x02	; 2
    1848:	ea cf       	rjmp	.-44     	; 0x181e <bmi160_perform_self_test+0x1d6>
    184a:	1b ef       	ldi	r17, 0xFB	; 251
    184c:	ed cf       	rjmp	.-38     	; 0x1828 <bmi160_perform_self_test+0x1e0>

0000184e <bmi160_start_foc>:
 *  @note Accel FOC targets values of +1g , 0g , -1g
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf, struct bmi160_offsets *offset,
				struct bmi160_dev const *dev)
{
    184e:	8f 92       	push	r8
    1850:	9f 92       	push	r9
    1852:	af 92       	push	r10
    1854:	bf 92       	push	r11
    1856:	cf 92       	push	r12
    1858:	df 92       	push	r13
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	df 93       	push	r29
    1864:	cf 93       	push	r28
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	67 97       	sbiw	r28, 0x17	; 23
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	7c 01       	movw	r14, r24
    1878:	4b 01       	movw	r8, r22
    187a:	8a 01       	movw	r16, r20
	int8_t rslt;
	uint8_t data;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    187c:	ca 01       	movw	r24, r20
    187e:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if (rslt != BMI160_OK) {
    1882:	88 23       	and	r24, r24
    1884:	11 f0       	breq	.+4      	; 0x188a <bmi160_start_foc+0x3c>
    1886:	3f ef       	ldi	r19, 0xFF	; 255
    1888:	c5 c0       	rjmp	.+394    	; 0x1a14 <bmi160_start_foc+0x1c6>

	if (rslt != BMI160_OK) {
		rslt = BMI160_E_NULL_PTR;
	} else {
		/* Read the FOC config from the sensor */
		rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
    188a:	32 e0       	ldi	r19, 0x02	; 2
    188c:	c3 2e       	mov	r12, r19
    188e:	d1 2c       	mov	r13, r1
    1890:	cc 0e       	add	r12, r28
    1892:	dd 1e       	adc	r13, r29
    1894:	87 e7       	ldi	r24, 0x77	; 119
    1896:	b6 01       	movw	r22, r12
    1898:	41 e0       	ldi	r20, 0x01	; 1
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	98 01       	movw	r18, r16
    189e:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
    18a2:	38 2f       	mov	r19, r24

		if (rslt == BMI160_OK) {
    18a4:	88 23       	and	r24, r24
    18a6:	09 f0       	breq	.+2      	; 0x18aa <bmi160_start_foc+0x5c>
    18a8:	b5 c0       	rjmp	.+362    	; 0x1a14 <bmi160_start_foc+0x1c6>
			/* Set the offset enable/disable for gyro */
			data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);

			/* Set the offset enable/disable for accel */
			data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
    18aa:	d7 01       	movw	r26, r14
    18ac:	15 96       	adiw	r26, 0x05	; 5
    18ae:	8c 91       	ld	r24, X
    18b0:	15 97       	sbiw	r26, 0x05	; 5
    18b2:	87 95       	ror	r24
    18b4:	88 27       	eor	r24, r24
    18b6:	87 95       	ror	r24
    18b8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ba:	9f 73       	andi	r25, 0x3F	; 63
    18bc:	98 2b       	or	r25, r24
    18be:	14 96       	adiw	r26, 0x04	; 4
    18c0:	8c 91       	ld	r24, X
    18c2:	82 95       	swap	r24
    18c4:	88 0f       	add	r24, r24
    18c6:	88 0f       	add	r24, r24
    18c8:	80 74       	andi	r24, 0x40	; 64
    18ca:	98 2b       	or	r25, r24
    18cc:	9a 83       	std	Y+2, r25	; 0x02

			/* Set the offset config in the sensor */
			rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
    18ce:	87 e7       	ldi	r24, 0x77	; 119
    18d0:	b6 01       	movw	r22, r12
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	98 01       	movw	r18, r16
    18d8:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
    18dc:	38 2f       	mov	r19, r24
	if (rslt != BMI160_OK) {
		rslt = BMI160_E_NULL_PTR;
	} else {
		/* Set the offset enable bits */
		rslt = configure_offset_enable(foc_conf, dev);
		if (rslt == BMI160_OK) {
    18de:	88 23       	and	r24, r24
    18e0:	09 f0       	breq	.+2      	; 0x18e4 <bmi160_start_foc+0x96>
    18e2:	98 c0       	rjmp	.+304    	; 0x1a14 <bmi160_start_foc+0x1c6>
			/* Read the FOC config from the sensor */
			rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
    18e4:	89 e6       	ldi	r24, 0x69	; 105
    18e6:	5e 01       	movw	r10, r28
    18e8:	08 94       	sec
    18ea:	a1 1c       	adc	r10, r1
    18ec:	b1 1c       	adc	r11, r1
    18ee:	b5 01       	movw	r22, r10
    18f0:	41 e0       	ldi	r20, 0x01	; 1
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	98 01       	movw	r18, r16
    18f6:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
    18fa:	38 2f       	mov	r19, r24
			/* Set the FOC config for gyro */
			data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);

			/* Set the FOC config for accel xyz axes */
			data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
			data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
    18fc:	f7 01       	movw	r30, r14
    18fe:	80 81       	ld	r24, Z
    1900:	82 95       	swap	r24
    1902:	88 0f       	add	r24, r24
    1904:	88 0f       	add	r24, r24
    1906:	80 74       	andi	r24, 0x40	; 64
    1908:	29 81       	ldd	r18, Y+1	; 0x01
    190a:	2f 78       	andi	r18, 0x8F	; 143
    190c:	28 2b       	or	r18, r24
    190e:	81 81       	ldd	r24, Z+1	; 0x01
    1910:	82 95       	swap	r24
    1912:	80 73       	andi	r24, 0x30	; 48
    1914:	28 2b       	or	r18, r24
    1916:	23 7f       	andi	r18, 0xF3	; 243
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	88 0f       	add	r24, r24
    191c:	88 0f       	add	r24, r24
    191e:	8c 70       	andi	r24, 0x0C	; 12
    1920:	28 2b       	or	r18, r24
			data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
    1922:	83 81       	ldd	r24, Z+3	; 0x03

			if (rslt == BMI160_OK) {
    1924:	33 23       	and	r19, r19
    1926:	09 f0       	breq	.+2      	; 0x192a <bmi160_start_foc+0xdc>
    1928:	75 c0       	rjmp	.+234    	; 0x1a14 <bmi160_start_foc+0x1c6>
			data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);

			/* Set the FOC config for accel xyz axes */
			data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
			data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
			data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
    192a:	2c 7f       	andi	r18, 0xFC	; 252
    192c:	83 70       	andi	r24, 0x03	; 3
    192e:	28 2b       	or	r18, r24
    1930:	29 83       	std	Y+1, r18	; 0x01

			if (rslt == BMI160_OK) {
				/* Set the FOC config in the sensor */
				rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
    1932:	89 e6       	ldi	r24, 0x69	; 105
    1934:	b5 01       	movw	r22, r10
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	98 01       	movw	r18, r16
    193c:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
    1940:	38 2f       	mov	r19, r24
				if (rslt == BMI160_OK) {
    1942:	88 23       	and	r24, r24
    1944:	09 f0       	breq	.+2      	; 0x1948 <bmi160_start_foc+0xfa>
    1946:	66 c0       	rjmp	.+204    	; 0x1a14 <bmi160_start_foc+0x1c6>

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
	int8_t rslt;
	uint8_t foc_status;
	uint8_t cmd = BMI160_START_FOC_CMD;
    1948:	83 e0       	ldi	r24, 0x03	; 3
    194a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t timeout = 0;
	uint8_t data_array[20];

	/* Start the FOC process */
	rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
    194c:	8e e7       	ldi	r24, 0x7E	; 126
    194e:	b6 01       	movw	r22, r12
    1950:	41 e0       	ldi	r20, 0x01	; 1
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	98 01       	movw	r18, r16
    1956:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
    195a:	38 2f       	mov	r19, r24
	if (rslt == BMI160_OK) {
    195c:	88 23       	and	r24, r24
    195e:	09 f0       	breq	.+2      	; 0x1962 <bmi160_start_foc+0x114>
    1960:	59 c0       	rjmp	.+178    	; 0x1a14 <bmi160_start_foc+0x1c6>
{
	int8_t rslt;
	uint8_t data;

	/* Read the FOC status from sensor */
	rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
    1962:	8b e1       	ldi	r24, 0x1B	; 27
    1964:	be 01       	movw	r22, r28
    1966:	6d 5f       	subi	r22, 0xFD	; 253
    1968:	7f 4f       	sbci	r23, 0xFF	; 255
    196a:	41 e0       	ldi	r20, 0x01	; 1
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	98 01       	movw	r18, r16
    1970:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    1974:	88 23       	and	r24, r24
    1976:	59 f4       	brne	.+22     	; 0x198e <bmi160_start_foc+0x140>
	/* Start the FOC process */
	rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
	if (rslt == BMI160_OK) {
		/* Check the FOC status*/
		rslt = get_foc_status(&foc_status, dev);
		if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE)) {
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	88 70       	andi	r24, 0x08	; 8
    197e:	90 70       	andi	r25, 0x00	; 0
    1980:	23 e0       	ldi	r18, 0x03	; 3
    1982:	95 95       	asr	r25
    1984:	87 95       	ror	r24
    1986:	2a 95       	dec	r18
    1988:	e1 f7       	brne	.-8      	; 0x1982 <bmi160_start_foc+0x134>
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	b9 f1       	breq	.+110    	; 0x19fc <bmi160_start_foc+0x1ae>
    198e:	ff 24       	eor	r15, r15
{
	int8_t rslt;
	uint8_t data;

	/* Read the FOC status from sensor */
	rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
    1990:	b3 e0       	ldi	r27, 0x03	; 3
    1992:	cb 2e       	mov	r12, r27
    1994:	d1 2c       	mov	r13, r1
    1996:	cc 0e       	add	r12, r28
    1998:	dd 1e       	adc	r13, r29
		rslt = get_foc_status(&foc_status, dev);
		if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE)) {
			while ((foc_status != BMI160_ENABLE) && (timeout < 11)) {
				/* Maximum time of 250ms is given in 10
				 * steps of 25ms each */
				dev->delay_ms(25);
    199a:	d8 01       	movw	r26, r16
    199c:	5e 96       	adiw	r26, 0x1e	; 30
    199e:	ed 91       	ld	r30, X+
    19a0:	fc 91       	ld	r31, X
    19a2:	5f 97       	sbiw	r26, 0x1f	; 31
    19a4:	69 e1       	ldi	r22, 0x19	; 25
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	09 95       	icall
{
	int8_t rslt;
	uint8_t data;

	/* Read the FOC status from sensor */
	rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
    19ae:	8b e1       	ldi	r24, 0x1B	; 27
    19b0:	b6 01       	movw	r22, r12
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	50 e0       	ldi	r21, 0x00	; 0
    19b6:	98 01       	movw	r18, r16
    19b8:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
    19bc:	28 2f       	mov	r18, r24
	if (rslt == BMI160_OK) {
    19be:	88 23       	and	r24, r24
    19c0:	11 f0       	breq	.+4      	; 0x19c6 <bmi160_start_foc+0x178>
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	09 c0       	rjmp	.+18     	; 0x19d8 <bmi160_start_foc+0x18a>
		/* Get the foc_status bit */
		*foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	88 70       	andi	r24, 0x08	; 8
    19cc:	90 70       	andi	r25, 0x00	; 0
    19ce:	a3 e0       	ldi	r26, 0x03	; 3
    19d0:	95 95       	asr	r25
    19d2:	87 95       	ror	r24
    19d4:	aa 95       	dec	r26
    19d6:	e1 f7       	brne	.-8      	; 0x19d0 <bmi160_start_foc+0x182>
				/* Maximum time of 250ms is given in 10
				 * steps of 25ms each */
				dev->delay_ms(25);
				/* Check the FOC status*/
				rslt = get_foc_status(&foc_status, dev);
				timeout++;
    19d8:	f3 94       	inc	r15
	rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
	if (rslt == BMI160_OK) {
		/* Check the FOC status*/
		rslt = get_foc_status(&foc_status, dev);
		if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE)) {
			while ((foc_status != BMI160_ENABLE) && (timeout < 11)) {
    19da:	81 30       	cpi	r24, 0x01	; 1
    19dc:	21 f0       	breq	.+8      	; 0x19e6 <bmi160_start_foc+0x198>
    19de:	bb e0       	ldi	r27, 0x0B	; 11
    19e0:	fb 16       	cp	r15, r27
    19e2:	d9 f6       	brne	.-74     	; 0x199a <bmi160_start_foc+0x14c>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
				/* Check the FOC status*/
				rslt = get_foc_status(&foc_status, dev);
				timeout++;
			}

			if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE)) {
    19e6:	22 23       	and	r18, r18
    19e8:	a1 f4       	brne	.+40     	; 0x1a12 <bmi160_start_foc+0x1c4>
    19ea:	81 30       	cpi	r24, 0x01	; 1
    19ec:	91 f4       	brne	.+36     	; 0x1a12 <bmi160_start_foc+0x1c4>
				/* Get offset values from sensor */
				rslt = bmi160_get_offsets(offset, dev);
    19ee:	c4 01       	movw	r24, r8
    19f0:	b8 01       	movw	r22, r16
    19f2:	0e 94 1c 09 	call	0x1238	; 0x1238 <bmi160_get_offsets>
    19f6:	38 2f       	mov	r19, r24
				/* FOC failure case */
				rslt = BMI160_FOC_FAILURE;
			}
		}

		if (rslt == BMI160_OK) {
    19f8:	88 23       	and	r24, r24
    19fa:	61 f4       	brne	.+24     	; 0x1a14 <bmi160_start_foc+0x1c6>
			/* Read registers 0x04-0x17 */
			rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR,
    19fc:	8c e0       	ldi	r24, 0x0C	; 12
    19fe:	be 01       	movw	r22, r28
    1a00:	6c 5f       	subi	r22, 0xFC	; 252
    1a02:	7f 4f       	sbci	r23, 0xFF	; 255
    1a04:	44 e1       	ldi	r20, 0x14	; 20
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	98 01       	movw	r18, r16
    1a0a:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
    1a0e:	38 2f       	mov	r19, r24
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <bmi160_start_foc+0x1c6>
    1a12:	35 ef       	ldi	r19, 0xF5	; 245
			}
		}
	}

	return rslt;
}
    1a14:	83 2f       	mov	r24, r19
    1a16:	67 96       	adiw	r28, 0x17	; 23
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	cf 91       	pop	r28
    1a24:	df 91       	pop	r29
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	df 90       	pop	r13
    1a30:	cf 90       	pop	r12
    1a32:	bf 90       	pop	r11
    1a34:	af 90       	pop	r10
    1a36:	9f 90       	pop	r9
    1a38:	8f 90       	pop	r8
    1a3a:	08 95       	ret

00001a3c <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
    1a3c:	ef 92       	push	r14
    1a3e:	ff 92       	push	r15
    1a40:	0f 93       	push	r16
    1a42:	1f 93       	push	r17
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <map_feature_interrupt+0xe>
    1a4a:	0f 92       	push	r0
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	8c 01       	movw	r16, r24
    1a52:	7b 01       	movw	r14, r22
	int8_t rslt;
	uint8_t data[3] = {0, 0, 0};
    1a54:	de 01       	movw	r26, r28
    1a56:	11 96       	adiw	r26, 0x01	; 1
    1a58:	e0 e8       	ldi	r30, 0x80	; 128
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	83 e0       	ldi	r24, 0x03	; 3
    1a5e:	01 90       	ld	r0, Z+
    1a60:	0d 92       	st	X+, r0
    1a62:	81 50       	subi	r24, 0x01	; 1
    1a64:	e1 f7       	brne	.-8      	; 0x1a5e <map_feature_interrupt+0x22>
	uint8_t temp[3] = {0, 0, 0};

	rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
    1a66:	85 e5       	ldi	r24, 0x55	; 85
    1a68:	be 01       	movw	r22, r28
    1a6a:	6f 5f       	subi	r22, 0xFF	; 255
    1a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6e:	43 e0       	ldi	r20, 0x03	; 3
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	97 01       	movw	r18, r14
    1a74:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>

	if (rslt == BMI160_OK) {
    1a78:	88 23       	and	r24, r24
    1a7a:	69 f5       	brne	.+90     	; 0x1ad6 <map_feature_interrupt+0x9a>
		temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
    1a7c:	d8 01       	movw	r26, r16
    1a7e:	11 96       	adiw	r26, 0x01	; 1
    1a80:	ec 91       	ld	r30, X
    1a82:	11 97       	sbiw	r26, 0x01	; 1
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	ed 58       	subi	r30, 0x8D	; 141
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	e0 81       	ld	r30, Z
    1a8c:	8e 2f       	mov	r24, r30
    1a8e:	80 95       	com	r24
    1a90:	29 81       	ldd	r18, Y+1	; 0x01
    1a92:	28 23       	and	r18, r24
		temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
    1a94:	3b 81       	ldd	r19, Y+3	; 0x03
    1a96:	38 23       	and	r19, r24

		switch (int_config->int_channel) {
    1a98:	8c 91       	ld	r24, X
    1a9a:	81 30       	cpi	r24, 0x01	; 1
    1a9c:	41 f0       	breq	.+16     	; 0x1aae <map_feature_interrupt+0x72>
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	38 f0       	brcs	.+14     	; 0x1ab0 <map_feature_interrupt+0x74>
    1aa2:	82 30       	cpi	r24, 0x02	; 2
    1aa4:	39 f0       	breq	.+14     	; 0x1ab4 <map_feature_interrupt+0x78>
    1aa6:	83 30       	cpi	r24, 0x03	; 3
    1aa8:	49 f0       	breq	.+18     	; 0x1abc <map_feature_interrupt+0x80>
    1aaa:	8c ef       	ldi	r24, 0xFC	; 252
    1aac:	14 c0       	rjmp	.+40     	; 0x1ad6 <map_feature_interrupt+0x9a>
		case BMI160_INT_CHANNEL_NONE:
			data[0] = temp[0];
			data[2] = temp[2];
			break;
		case BMI160_INT_CHANNEL_1:
			data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
    1aae:	2e 2b       	or	r18, r30
    1ab0:	29 83       	std	Y+1, r18	; 0x01
    1ab2:	07 c0       	rjmp	.+14     	; 0x1ac2 <map_feature_interrupt+0x86>
			data[2] = temp[2];
			break;
		case BMI160_INT_CHANNEL_2:
			data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
    1ab4:	3e 2b       	or	r19, r30
    1ab6:	3b 83       	std	Y+3, r19	; 0x03
			data[0] = temp[0];
    1ab8:	29 83       	std	Y+1, r18	; 0x01
    1aba:	04 c0       	rjmp	.+8      	; 0x1ac4 <map_feature_interrupt+0x88>
			break;
		case BMI160_INT_CHANNEL_BOTH:
			data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
    1abc:	2e 2b       	or	r18, r30
    1abe:	29 83       	std	Y+1, r18	; 0x01
			data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
    1ac0:	3e 2b       	or	r19, r30
    1ac2:	3b 83       	std	Y+3, r19	; 0x03
			break;
		default:
			rslt = BMI160_E_OUT_OF_RANGE;
		}
		if (rslt == BMI160_OK)
			rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
    1ac4:	85 e5       	ldi	r24, 0x55	; 85
    1ac6:	be 01       	movw	r22, r28
    1ac8:	6f 5f       	subi	r22, 0xFF	; 255
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	43 e0       	ldi	r20, 0x03	; 3
    1ace:	50 e0       	ldi	r21, 0x00	; 0
    1ad0:	97 01       	movw	r18, r14
    1ad2:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	}

	return rslt;
}
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	ff 90       	pop	r15
    1ae6:	ef 90       	pop	r14
    1ae8:	08 95       	ret

00001aea <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
    1aea:	ef 92       	push	r14
    1aec:	ff 92       	push	r15
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	0f 92       	push	r0
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	8c 01       	movw	r16, r24
    1afe:	7b 01       	movw	r14, r22
	int8_t rslt;
	uint8_t data = 0;
    1b00:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
    1b02:	86 e5       	ldi	r24, 0x56	; 86
    1b04:	be 01       	movw	r22, r28
    1b06:	6f 5f       	subi	r22, 0xFF	; 255
    1b08:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0a:	41 e0       	ldi	r20, 0x01	; 1
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	97 01       	movw	r18, r14
    1b10:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>

	if (rslt == BMI160_OK) {
    1b14:	88 23       	and	r24, r24
    1b16:	59 f5       	brne	.+86     	; 0x1b6e <map_hardware_interrupt+0x84>
		temp = data & ~int_mask_lookup_table[int_config->int_type];
    1b18:	d8 01       	movw	r26, r16
    1b1a:	11 96       	adiw	r26, 0x01	; 1
    1b1c:	ec 91       	ld	r30, X
    1b1e:	11 97       	sbiw	r26, 0x01	; 1
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	ed 58       	subi	r30, 0x8D	; 141
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	e0 81       	ld	r30, Z
		temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
    1b28:	9e 2f       	mov	r25, r30
    1b2a:	92 95       	swap	r25
    1b2c:	90 7f       	andi	r25, 0xF0	; 240
    1b2e:	2e 2f       	mov	r18, r30
    1b30:	20 95       	com	r18
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	28 23       	and	r18, r24
    1b36:	89 2f       	mov	r24, r25
    1b38:	80 95       	com	r24
    1b3a:	28 23       	and	r18, r24
		switch (int_config->int_channel) {
    1b3c:	8c 91       	ld	r24, X
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	59 f0       	breq	.+22     	; 0x1b58 <map_hardware_interrupt+0x6e>
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	50 f0       	brcs	.+20     	; 0x1b5a <map_hardware_interrupt+0x70>
    1b46:	82 30       	cpi	r24, 0x02	; 2
    1b48:	21 f0       	breq	.+8      	; 0x1b52 <map_hardware_interrupt+0x68>
    1b4a:	83 30       	cpi	r24, 0x03	; 3
    1b4c:	21 f0       	breq	.+8      	; 0x1b56 <map_hardware_interrupt+0x6c>
    1b4e:	8c ef       	ldi	r24, 0xFC	; 252
    1b50:	0e c0       	rjmp	.+28     	; 0x1b6e <map_hardware_interrupt+0x84>
			break;
		case BMI160_INT_CHANNEL_1:
			data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
			break;
		case BMI160_INT_CHANNEL_2:
			data = temp | int_mask_lookup_table[int_config->int_type];
    1b52:	2e 2b       	or	r18, r30
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <map_hardware_interrupt+0x70>
			break;
		case BMI160_INT_CHANNEL_BOTH:
			data = temp | int_mask_lookup_table[int_config->int_type];
    1b56:	2e 2b       	or	r18, r30
			data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
    1b58:	29 2b       	or	r18, r25
    1b5a:	29 83       	std	Y+1, r18	; 0x01
			break;
		default:
			rslt = BMI160_E_OUT_OF_RANGE;
		}
		if (rslt == BMI160_OK)
			rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
    1b5c:	86 e5       	ldi	r24, 0x56	; 86
    1b5e:	be 01       	movw	r22, r28
    1b60:	6f 5f       	subi	r22, 0xFF	; 255
    1b62:	7f 4f       	sbci	r23, 0xFF	; 255
    1b64:	41 e0       	ldi	r20, 0x01	; 1
    1b66:	50 e0       	ldi	r21, 0x00	; 0
    1b68:	97 01       	movw	r18, r14
    1b6a:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	}

	return rslt;
}
    1b6e:	0f 90       	pop	r0
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	ff 90       	pop	r15
    1b7a:	ef 90       	pop	r14
    1b7c:	08 95       	ret

00001b7e <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
    1b7e:	cf 92       	push	r12
    1b80:	df 92       	push	r13
    1b82:	ef 92       	push	r14
    1b84:	ff 92       	push	r15
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <bmi160_set_int_config+0x12>
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <bmi160_set_int_config+0x14>
    1b92:	00 d0       	rcall	.+0      	; 0x1b94 <bmi160_set_int_config+0x16>
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	7c 01       	movw	r14, r24
    1b9a:	8b 01       	movw	r16, r22
	int8_t rslt = BMI160_OK;

	switch (int_config->int_type) {
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ba0:	86 30       	cpi	r24, 0x06	; 6
    1ba2:	09 f4       	brne	.+2      	; 0x1ba6 <bmi160_set_int_config+0x28>
    1ba4:	bc c3       	rjmp	.+1912   	; 0x231e <bmi160_set_int_config+0x7a0>
    1ba6:	87 30       	cpi	r24, 0x07	; 7
    1ba8:	70 f4       	brcc	.+28     	; 0x1bc6 <bmi160_set_int_config+0x48>
    1baa:	82 30       	cpi	r24, 0x02	; 2
    1bac:	09 f4       	brne	.+2      	; 0x1bb0 <bmi160_set_int_config+0x32>
    1bae:	d5 c2       	rjmp	.+1450   	; 0x215a <bmi160_set_int_config+0x5dc>
    1bb0:	83 30       	cpi	r24, 0x03	; 3
    1bb2:	28 f4       	brcc	.+10     	; 0x1bbe <bmi160_set_int_config+0x40>
    1bb4:	88 23       	and	r24, r24
    1bb6:	f1 f0       	breq	.+60     	; 0x1bf4 <bmi160_set_int_config+0x76>
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	d1 f4       	brne	.+52     	; 0x1bf0 <bmi160_set_int_config+0x72>
    1bbc:	cb c0       	rjmp	.+406    	; 0x1d54 <bmi160_set_int_config+0x1d6>
    1bbe:	85 30       	cpi	r24, 0x05	; 5
    1bc0:	08 f4       	brcc	.+2      	; 0x1bc4 <bmi160_set_int_config+0x46>
    1bc2:	07 c2       	rjmp	.+1038   	; 0x1fd2 <bmi160_set_int_config+0x454>
    1bc4:	44 c3       	rjmp	.+1672   	; 0x224e <bmi160_set_int_config+0x6d0>
    1bc6:	8a 30       	cpi	r24, 0x0A	; 10
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <bmi160_set_int_config+0x4e>
    1bca:	48 c5       	rjmp	.+2704   	; 0x265c <bmi160_set_int_config+0xade>
    1bcc:	8b 30       	cpi	r24, 0x0B	; 11
    1bce:	38 f4       	brcc	.+14     	; 0x1bde <bmi160_set_int_config+0x60>
    1bd0:	88 30       	cpi	r24, 0x08	; 8
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <bmi160_set_int_config+0x58>
    1bd4:	10 c4       	rjmp	.+2080   	; 0x23f6 <bmi160_set_int_config+0x878>
    1bd6:	89 30       	cpi	r24, 0x09	; 9
    1bd8:	08 f0       	brcs	.+2      	; 0x1bdc <bmi160_set_int_config+0x5e>
    1bda:	54 c1       	rjmp	.+680    	; 0x1e84 <bmi160_set_int_config+0x306>
    1bdc:	a1 c4       	rjmp	.+2370   	; 0x2520 <bmi160_set_int_config+0x9a2>
    1bde:	8c 30       	cpi	r24, 0x0C	; 12
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <bmi160_set_int_config+0x66>
    1be2:	7e c5       	rjmp	.+2812   	; 0x26e0 <bmi160_set_int_config+0xb62>
    1be4:	8c 30       	cpi	r24, 0x0C	; 12
    1be6:	08 f4       	brcc	.+2      	; 0x1bea <bmi160_set_int_config+0x6c>
    1be8:	55 c5       	rjmp	.+2730   	; 0x2694 <bmi160_set_int_config+0xb16>
    1bea:	8d 30       	cpi	r24, 0x0D	; 13
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <bmi160_set_int_config+0x72>
    1bee:	b1 c5       	rjmp	.+2914   	; 0x2752 <bmi160_set_int_config+0xbd4>
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	b4 c5       	rjmp	.+2920   	; 0x275c <bmi160_set_int_config+0xbde>
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
	int8_t rslt;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if ((rslt != BMI160_OK) || (int_config == NULL)) {
    1bfa:	88 23       	and	r24, r24
    1bfc:	09 f0       	breq	.+2      	; 0x1c00 <bmi160_set_int_config+0x82>
    1bfe:	ad c5       	rjmp	.+2906   	; 0x275a <bmi160_set_int_config+0xbdc>
    1c00:	e1 14       	cp	r14, r1
    1c02:	f1 04       	cpc	r15, r1
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <bmi160_set_int_config+0x8a>
    1c06:	a9 c5       	rjmp	.+2898   	; 0x275a <bmi160_set_int_config+0xbdc>
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
						struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    1c08:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Enable any motion x, any motion y, any motion z
	in Int Enable 0 register */
	rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
    1c0a:	80 e5       	ldi	r24, 0x50	; 80
    1c0c:	be 01       	movw	r22, r28
    1c0e:	6f 5f       	subi	r22, 0xFF	; 255
    1c10:	7f 4f       	sbci	r23, 0xFF	; 255
    1c12:	41 e0       	ldi	r20, 0x01	; 1
    1c14:	50 e0       	ldi	r21, 0x00	; 0
    1c16:	98 01       	movw	r18, r16
    1c18:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    1c1c:	88 23       	and	r24, r24
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <bmi160_set_int_config+0xa4>
    1c20:	9d c5       	rjmp	.+2874   	; 0x275c <bmi160_set_int_config+0xbde>

		if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE) {
    1c22:	f7 01       	movw	r30, r14
    1c24:	24 81       	ldd	r18, Z+4	; 0x04
    1c26:	39 81       	ldd	r19, Y+1	; 0x01
    1c28:	20 ff       	sbrs	r18, 0
    1c2a:	1d c0       	rjmp	.+58     	; 0x1c66 <bmi160_set_int_config+0xe8>
			temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
			/* Adding Any_motion x axis */
			data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
    1c2c:	82 2f       	mov	r24, r18
    1c2e:	86 95       	lsr	r24
    1c30:	81 70       	andi	r24, 0x01	; 1
    1c32:	3c 7f       	andi	r19, 0xFC	; 252


			temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
			/* Adding Any_motion y axis */
			data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
    1c34:	38 2b       	or	r19, r24
    1c36:	26 95       	lsr	r18
    1c38:	26 95       	lsr	r18
    1c3a:	82 2f       	mov	r24, r18
    1c3c:	81 70       	andi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	82 70       	andi	r24, 0x02	; 2
    1c46:	38 2b       	or	r19, r24


			temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
			/* Adding Any_motion z axis */
			data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
    1c48:	3b 7f       	andi	r19, 0xFB	; 251
    1c4a:	26 95       	lsr	r18
    1c4c:	21 70       	andi	r18, 0x01	; 1
    1c4e:	82 2f       	mov	r24, r18
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	84 70       	andi	r24, 0x04	; 4
    1c5c:	38 2b       	or	r19, r24
    1c5e:	39 83       	std	Y+1, r19	; 0x01

			/* any-motion feature selected*/
			dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
    1c60:	f8 01       	movw	r30, r16
    1c62:	13 82       	std	Z+3, r1	; 0x03
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <bmi160_set_int_config+0xf2>
		} else {
			data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
    1c66:	38 7f       	andi	r19, 0xF8	; 248
    1c68:	39 83       	std	Y+1, r19	; 0x01
			/* neither any-motion feature nor sig-motion selected */
			dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
    1c6a:	8f ef       	ldi	r24, 0xFF	; 255
    1c6c:	f8 01       	movw	r30, r16
    1c6e:	83 83       	std	Z+3, r24	; 0x03
		}

		/* write data to Int Enable 0 register */
		rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
    1c70:	80 e5       	ldi	r24, 0x50	; 80
    1c72:	6e 01       	movw	r12, r28
    1c74:	08 94       	sec
    1c76:	c1 1c       	adc	r12, r1
    1c78:	d1 1c       	adc	r13, r1
    1c7a:	b6 01       	movw	r22, r12
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	98 01       	movw	r18, r16
    1c82:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	} else {
		/* updating the interrupt structure to local structure */
		struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);

		rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
		if (rslt == BMI160_OK)
    1c86:	88 23       	and	r24, r24
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <bmi160_set_int_config+0x10e>
    1c8a:	68 c5       	rjmp	.+2768   	; 0x275c <bmi160_set_int_config+0xbde>
					const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
					const struct bmi160_dev *dev)
{
	int8_t rslt;
	/* Configure Interrupt pins */
	rslt = set_intr_pin_config(int_config, dev);
    1c8c:	c7 01       	movw	r24, r14
    1c8e:	b8 01       	movw	r22, r16
    1c90:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_intr_pin_config>
	if (rslt == BMI160_OK) {
    1c94:	88 23       	and	r24, r24
    1c96:	09 f0       	breq	.+2      	; 0x1c9a <bmi160_set_int_config+0x11c>
    1c98:	61 c5       	rjmp	.+2754   	; 0x275c <bmi160_set_int_config+0xbde>
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    1c9a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Disabling Significant motion interrupt if enabled */
	rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
    1c9c:	82 e6       	ldi	r24, 0x62	; 98
    1c9e:	b6 01       	movw	r22, r12
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	50 e0       	ldi	r21, 0x00	; 0
    1ca4:	98 01       	movw	r18, r16
    1ca6:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    1caa:	88 23       	and	r24, r24
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <bmi160_set_int_config+0x132>
    1cae:	56 c5       	rjmp	.+2732   	; 0x275c <bmi160_set_int_config+0xbde>
		temp = (data & BMI160_SIG_MOTION_SEL_MASK);
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
		if (temp) {
    1cb2:	81 ff       	sbrs	r24, 1
    1cb4:	0c c0       	rjmp	.+24     	; 0x1cce <bmi160_set_int_config+0x150>
			temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
			data = temp;
    1cb6:	8d 7f       	andi	r24, 0xFD	; 253
    1cb8:	89 83       	std	Y+1, r24	; 0x01
			/* Write data to register */
			rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
    1cba:	82 e6       	ldi	r24, 0x62	; 98
    1cbc:	b6 01       	movw	r22, r12
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	50 e0       	ldi	r21, 0x00	; 0
    1cc2:	98 01       	movw	r18, r16
    1cc4:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	int8_t rslt;
	/* Configure Interrupt pins */
	rslt = set_intr_pin_config(int_config, dev);
	if (rslt == BMI160_OK) {
		rslt = disable_sig_motion_int(dev);
		if (rslt == BMI160_OK) {
    1cc8:	88 23       	and	r24, r24
    1cca:	09 f0       	breq	.+2      	; 0x1cce <bmi160_set_int_config+0x150>
    1ccc:	47 c5       	rjmp	.+2702   	; 0x275c <bmi160_set_int_config+0xbde>
			rslt = map_feature_interrupt(int_config, dev);
    1cce:	c7 01       	movw	r24, r14
    1cd0:	b8 01       	movw	r22, r16
    1cd2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <map_feature_interrupt>
			if (rslt == BMI160_OK) {
    1cd6:	88 23       	and	r24, r24
    1cd8:	09 f0       	breq	.+2      	; 0x1cdc <bmi160_set_int_config+0x15e>
    1cda:	40 c5       	rjmp	.+2688   	; 0x275c <bmi160_set_int_config+0xbde>
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
					const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    1cdc:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Configure Int data 1 register to add source of interrupt */
	rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
    1cde:	89 e5       	ldi	r24, 0x59	; 89
    1ce0:	6e 01       	movw	r12, r28
    1ce2:	08 94       	sec
    1ce4:	c1 1c       	adc	r12, r1
    1ce6:	d1 1c       	adc	r13, r1
    1ce8:	b6 01       	movw	r22, r12
    1cea:	41 e0       	ldi	r20, 0x01	; 1
    1cec:	50 e0       	ldi	r21, 0x00	; 0
    1cee:	98 01       	movw	r18, r16
    1cf0:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    1cf4:	88 23       	and	r24, r24
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <bmi160_set_int_config+0x17c>
    1cf8:	31 c5       	rjmp	.+2658   	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data & ~BMI160_MOTION_SRC_INT_MASK;
		data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
    1cfa:	f7 01       	movw	r30, r14
    1cfc:	84 81       	ldd	r24, Z+4	; 0x04
    1cfe:	82 95       	swap	r24
    1d00:	86 95       	lsr	r24
    1d02:	86 95       	lsr	r24
    1d04:	83 70       	andi	r24, 0x03	; 3
    1d06:	87 95       	ror	r24
    1d08:	88 27       	eor	r24, r24
    1d0a:	87 95       	ror	r24
    1d0c:	99 81       	ldd	r25, Y+1	; 0x01
    1d0e:	9f 77       	andi	r25, 0x7F	; 127
    1d10:	89 2b       	or	r24, r25
    1d12:	89 83       	std	Y+1, r24	; 0x01
		/* Write data to DATA 1 address */
		rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
    1d14:	89 e5       	ldi	r24, 0x59	; 89
    1d16:	b6 01       	movw	r22, r12
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	98 01       	movw	r18, r16
    1d1e:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
		rslt = disable_sig_motion_int(dev);
		if (rslt == BMI160_OK) {
			rslt = map_feature_interrupt(int_config, dev);
			if (rslt == BMI160_OK) {
				rslt = config_any_motion_src(any_motion_int_cfg, dev);
				if (rslt == BMI160_OK)
    1d22:	88 23       	and	r24, r24
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <bmi160_set_int_config+0x1aa>
    1d26:	1a c5       	rjmp	.+2612   	; 0x275c <bmi160_set_int_config+0xbde>
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
					const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    1d28:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;
	uint8_t data_array[2] = {0};
    1d2a:	1b 82       	std	Y+3, r1	; 0x03
    1d2c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t dur;

	/* Configure Int Motion 0 register */
	rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
    1d2e:	8f e5       	ldi	r24, 0x5F	; 95
    1d30:	b6 01       	movw	r22, r12
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	50 e0       	ldi	r21, 0x00	; 0
    1d36:	98 01       	movw	r18, r16
    1d38:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    1d3c:	88 23       	and	r24, r24
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <bmi160_set_int_config+0x1c4>
    1d40:	0d c5       	rjmp	.+2586   	; 0x275c <bmi160_set_int_config+0xbde>
		/* slope duration */
		dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
		temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
		data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	8c 7f       	andi	r24, 0xFC	; 252
    1d46:	89 83       	std	Y+1, r24	; 0x01
		data_array[0] = data;
    1d48:	8a 83       	std	Y+2, r24	; 0x02
		/* add slope threshold */
		data_array[1] = any_motion_int_cfg->anymotion_thr;
    1d4a:	f7 01       	movw	r30, r14
    1d4c:	85 81       	ldd	r24, Z+5	; 0x05
    1d4e:	8b 83       	std	Y+3, r24	; 0x03

		/* INT MOTION 0 and INT MOTION 1 address lie consecutively,
		hence writing data to respective registers at one go */
		/* Writing to Int_motion 0 and
		Int_motion 1 Address simultaneously */
		rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
    1d50:	8f e5       	ldi	r24, 0x5F	; 95
    1d52:	fd c1       	rjmp	.+1018   	; 0x214e <bmi160_set_int_config+0x5d0>
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
	int8_t rslt;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    1d54:	cb 01       	movw	r24, r22
    1d56:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if ((rslt != BMI160_OK) || (int_config == NULL)) {
    1d5a:	88 23       	and	r24, r24
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <bmi160_set_int_config+0x1e2>
    1d5e:	fd c4       	rjmp	.+2554   	; 0x275a <bmi160_set_int_config+0xbdc>
    1d60:	e1 14       	cp	r14, r1
    1d62:	f1 04       	cpc	r15, r1
    1d64:	09 f4       	brne	.+2      	; 0x1d68 <bmi160_set_int_config+0x1ea>
    1d66:	f9 c4       	rjmp	.+2546   	; 0x275a <bmi160_set_int_config+0xbdc>
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    1d68:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* For significant motion,enable any motion x,any motion y,
	 * any motion z in Int Enable 0 register */
	rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
    1d6a:	80 e5       	ldi	r24, 0x50	; 80
    1d6c:	be 01       	movw	r22, r28
    1d6e:	6f 5f       	subi	r22, 0xFF	; 255
    1d70:	7f 4f       	sbci	r23, 0xFF	; 255
    1d72:	41 e0       	ldi	r20, 0x01	; 1
    1d74:	50 e0       	ldi	r21, 0x00	; 0
    1d76:	98 01       	movw	r18, r16
    1d78:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    1d7c:	88 23       	and	r24, r24
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <bmi160_set_int_config+0x204>
    1d80:	ed c4       	rjmp	.+2522   	; 0x275c <bmi160_set_int_config+0xbde>
		if (sig_mot_int_cfg->sig_en == BMI160_ENABLE) {
    1d82:	f7 01       	movw	r30, r14
    1d84:	84 81       	ldd	r24, Z+4	; 0x04
    1d86:	99 81       	ldd	r25, Y+1	; 0x01
    1d88:	85 ff       	sbrs	r24, 5
    1d8a:	04 c0       	rjmp	.+8      	; 0x1d94 <bmi160_set_int_config+0x216>
			temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
			data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
    1d8c:	97 60       	ori	r25, 0x07	; 7
    1d8e:	99 83       	std	Y+1, r25	; 0x01
			/* sig-motion feature selected*/
			dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	03 c0       	rjmp	.+6      	; 0x1d9a <bmi160_set_int_config+0x21c>
		} else {
			data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
    1d94:	98 7f       	andi	r25, 0xF8	; 248
    1d96:	99 83       	std	Y+1, r25	; 0x01
			/* neither any-motion feature nor sig-motion selected */
			dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
    1d98:	8f ef       	ldi	r24, 0xFF	; 255
    1d9a:	f8 01       	movw	r30, r16
    1d9c:	83 83       	std	Z+3, r24	; 0x03
		}
		/* write data to Int Enable 0 register */
		rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
    1d9e:	80 e5       	ldi	r24, 0x50	; 80
    1da0:	6e 01       	movw	r12, r28
    1da2:	08 94       	sec
    1da4:	c1 1c       	adc	r12, r1
    1da6:	d1 1c       	adc	r13, r1
    1da8:	b6 01       	movw	r22, r12
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	50 e0       	ldi	r21, 0x00	; 0
    1dae:	98 01       	movw	r18, r16
    1db0:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	} else {
		/* updating the interrupt structure to local structure */
		struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);

		rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
		if (rslt == BMI160_OK)
    1db4:	88 23       	and	r24, r24
    1db6:	09 f0       	breq	.+2      	; 0x1dba <bmi160_set_int_config+0x23c>
    1db8:	d1 c4       	rjmp	.+2466   	; 0x275c <bmi160_set_int_config+0xbde>
					const struct bmi160_dev *dev)
{
	int8_t rslt;

	/* Configure Interrupt pins */
	rslt = set_intr_pin_config(int_config, dev);
    1dba:	c7 01       	movw	r24, r14
    1dbc:	b8 01       	movw	r22, r16
    1dbe:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_intr_pin_config>
	if (rslt == BMI160_OK) {
    1dc2:	88 23       	and	r24, r24
    1dc4:	09 f0       	breq	.+2      	; 0x1dc8 <bmi160_set_int_config+0x24a>
    1dc6:	ca c4       	rjmp	.+2452   	; 0x275c <bmi160_set_int_config+0xbde>
		rslt = map_feature_interrupt(int_config, dev);
    1dc8:	c7 01       	movw	r24, r14
    1dca:	b8 01       	movw	r22, r16
    1dcc:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <map_feature_interrupt>
		if (rslt == BMI160_OK) {
    1dd0:	88 23       	and	r24, r24
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <bmi160_set_int_config+0x258>
    1dd4:	c3 c4       	rjmp	.+2438   	; 0x275c <bmi160_set_int_config+0xbde>
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
					const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    1dd6:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Configure Int data 1 register to add source of interrupt */
	rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
    1dd8:	89 e5       	ldi	r24, 0x59	; 89
    1dda:	b6 01       	movw	r22, r12
    1ddc:	41 e0       	ldi	r20, 0x01	; 1
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	98 01       	movw	r18, r16
    1de2:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    1de6:	88 23       	and	r24, r24
    1de8:	09 f0       	breq	.+2      	; 0x1dec <bmi160_set_int_config+0x26e>
    1dea:	b8 c4       	rjmp	.+2416   	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data & ~BMI160_MOTION_SRC_INT_MASK;
		data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
    1dec:	f7 01       	movw	r30, r14
    1dee:	84 81       	ldd	r24, Z+4	; 0x04
    1df0:	82 95       	swap	r24
    1df2:	8f 70       	andi	r24, 0x0F	; 15
    1df4:	87 95       	ror	r24
    1df6:	88 27       	eor	r24, r24
    1df8:	87 95       	ror	r24
    1dfa:	99 81       	ldd	r25, Y+1	; 0x01
    1dfc:	9f 77       	andi	r25, 0x7F	; 127
    1dfe:	89 2b       	or	r24, r25
    1e00:	89 83       	std	Y+1, r24	; 0x01
		/* Write data to DATA 1 address */
		rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
    1e02:	89 e5       	ldi	r24, 0x59	; 89
    1e04:	b6 01       	movw	r22, r12
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	50 e0       	ldi	r21, 0x00	; 0
    1e0a:	98 01       	movw	r18, r16
    1e0c:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	rslt = set_intr_pin_config(int_config, dev);
	if (rslt == BMI160_OK) {
		rslt = map_feature_interrupt(int_config, dev);
		if (rslt == BMI160_OK) {
			rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
			if (rslt == BMI160_OK)
    1e10:	88 23       	and	r24, r24
    1e12:	09 f0       	breq	.+2      	; 0x1e16 <bmi160_set_int_config+0x298>
    1e14:	a3 c4       	rjmp	.+2374   	; 0x275c <bmi160_set_int_config+0xbde>
	uint8_t temp = 0;

	/* Configuring INT_MOTION registers */
	/* Write significant motion threshold.
	 * This threshold is same as any motion threshold */
	data = sig_mot_int_cfg->sig_mot_thres;
    1e16:	f7 01       	movw	r30, r14
    1e18:	85 81       	ldd	r24, Z+5	; 0x05
    1e1a:	89 83       	std	Y+1, r24	; 0x01
	/* Write data to INT_MOTION 1 address */
	rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
    1e1c:	80 e6       	ldi	r24, 0x60	; 96
    1e1e:	b6 01       	movw	r22, r12
    1e20:	41 e0       	ldi	r20, 0x01	; 1
    1e22:	50 e0       	ldi	r21, 0x00	; 0
    1e24:	98 01       	movw	r18, r16
    1e26:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	if (rslt == BMI160_OK) {
    1e2a:	88 23       	and	r24, r24
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <bmi160_set_int_config+0x2b2>
    1e2e:	96 c4       	rjmp	.+2348   	; 0x275c <bmi160_set_int_config+0xbde>
		rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
    1e30:	82 e6       	ldi	r24, 0x62	; 98
    1e32:	b6 01       	movw	r22, r12
    1e34:	41 e0       	ldi	r20, 0x01	; 1
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	98 01       	movw	r18, r16
    1e3a:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
		if (rslt == BMI160_OK) {
    1e3e:	88 23       	and	r24, r24
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <bmi160_set_int_config+0x2c6>
    1e42:	8c c4       	rjmp	.+2328   	; 0x275c <bmi160_set_int_config+0xbde>
			temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
			/* adding skip time of sig_motion interrupt*/
			data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
    1e44:	f7 01       	movw	r30, r14
    1e46:	84 81       	ldd	r24, Z+4	; 0x04
    1e48:	28 2f       	mov	r18, r24
    1e4a:	23 70       	andi	r18, 0x03	; 3
    1e4c:	22 0f       	add	r18, r18
    1e4e:	22 0f       	add	r18, r18
    1e50:	39 81       	ldd	r19, Y+1	; 0x01
    1e52:	33 7c       	andi	r19, 0xC3	; 195
			temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
			 /* adding proof time of sig_motion interrupt */
			data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
    1e54:	32 2b       	or	r19, r18
    1e56:	28 2f       	mov	r18, r24
    1e58:	22 0f       	add	r18, r18
    1e5a:	22 0f       	add	r18, r18
    1e5c:	20 73       	andi	r18, 0x30	; 48
    1e5e:	32 2b       	or	r19, r18
			/* configure the int_sig_mot_sel bit to select
			 * significant motion interrupt */
			temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
			data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
    1e60:	3d 7f       	andi	r19, 0xFD	; 253
    1e62:	82 95       	swap	r24
    1e64:	86 95       	lsr	r24
    1e66:	81 70       	andi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	82 70       	andi	r24, 0x02	; 2
    1e70:	38 2b       	or	r19, r24
    1e72:	39 83       	std	Y+1, r19	; 0x01

			rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
    1e74:	82 e6       	ldi	r24, 0x62	; 98
    1e76:	b6 01       	movw	r22, r12
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	50 e0       	ldi	r21, 0x00	; 0
    1e7c:	98 01       	movw	r18, r16
    1e7e:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
    1e82:	6c c4       	rjmp	.+2264   	; 0x275c <bmi160_set_int_config+0xbde>
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    1e84:	cb 01       	movw	r24, r22
    1e86:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if ((rslt != BMI160_OK) || (int_config == NULL)) {
    1e8a:	88 23       	and	r24, r24
    1e8c:	09 f0       	breq	.+2      	; 0x1e90 <bmi160_set_int_config+0x312>
    1e8e:	65 c4       	rjmp	.+2250   	; 0x275a <bmi160_set_int_config+0xbdc>
    1e90:	e1 14       	cp	r14, r1
    1e92:	f1 04       	cpc	r15, r1
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <bmi160_set_int_config+0x31a>
    1e96:	61 c4       	rjmp	.+2242   	; 0x275a <bmi160_set_int_config+0xbdc>
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
					const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    1e98:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;
	/* Enable no motion x, no motion y, no motion z
	in Int Enable 2 register */
	rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
    1e9a:	82 e5       	ldi	r24, 0x52	; 82
    1e9c:	be 01       	movw	r22, r28
    1e9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	50 e0       	ldi	r21, 0x00	; 0
    1ea6:	98 01       	movw	r18, r16
    1ea8:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    1eac:	88 23       	and	r24, r24
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <bmi160_set_int_config+0x334>
    1eb0:	55 c4       	rjmp	.+2218   	; 0x275c <bmi160_set_int_config+0xbde>
		if (no_mot_int_cfg->no_motion_x == 1) {
    1eb2:	f7 01       	movw	r30, r14
    1eb4:	84 81       	ldd	r24, Z+4	; 0x04
    1eb6:	80 ff       	sbrs	r24, 0
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <bmi160_set_int_config+0x342>
			temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
			/* Adding No_motion x axis */
			data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	81 60       	ori	r24, 0x01	; 1
    1ebe:	89 83       	std	Y+1, r24	; 0x01
		}
		if (no_mot_int_cfg->no_motion_y == 1) {
    1ec0:	f7 01       	movw	r30, r14
    1ec2:	84 81       	ldd	r24, Z+4	; 0x04
    1ec4:	81 ff       	sbrs	r24, 1
    1ec6:	03 c0       	rjmp	.+6      	; 0x1ece <bmi160_set_int_config+0x350>
			temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
			/* Adding No_motion x axis */
			data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	82 60       	ori	r24, 0x02	; 2
    1ecc:	89 83       	std	Y+1, r24	; 0x01
		}
		if (no_mot_int_cfg->no_motion_z == 1) {
    1ece:	f7 01       	movw	r30, r14
    1ed0:	84 81       	ldd	r24, Z+4	; 0x04
    1ed2:	82 ff       	sbrs	r24, 2
    1ed4:	03 c0       	rjmp	.+6      	; 0x1edc <bmi160_set_int_config+0x35e>
			temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
			/* Adding No_motion x axis */
			data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	84 60       	ori	r24, 0x04	; 4
    1eda:	89 83       	std	Y+1, r24	; 0x01
		}
		/* write data to Int Enable 2 register */
		rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
    1edc:	82 e5       	ldi	r24, 0x52	; 82
    1ede:	6e 01       	movw	r12, r28
    1ee0:	08 94       	sec
    1ee2:	c1 1c       	adc	r12, r1
    1ee4:	d1 1c       	adc	r13, r1
    1ee6:	b6 01       	movw	r22, r12
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	50 e0       	ldi	r21, 0x00	; 0
    1eec:	98 01       	movw	r18, r16
    1eee:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	} else {
		/* updating the interrupt structure to local structure */
		struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);

		rslt = enable_no_motion_int(no_mot_int_cfg, dev);
		if (rslt == BMI160_OK)
    1ef2:	88 23       	and	r24, r24
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <bmi160_set_int_config+0x37a>
    1ef6:	32 c4       	rjmp	.+2148   	; 0x275c <bmi160_set_int_config+0xbde>
					const struct bmi160_dev *dev)
{
	int8_t rslt;

	/* Configure Interrupt pins */
	rslt = set_intr_pin_config(int_config, dev);
    1ef8:	c7 01       	movw	r24, r14
    1efa:	b8 01       	movw	r22, r16
    1efc:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_intr_pin_config>
	if (rslt == BMI160_OK) {
    1f00:	88 23       	and	r24, r24
    1f02:	09 f0       	breq	.+2      	; 0x1f06 <bmi160_set_int_config+0x388>
    1f04:	2b c4       	rjmp	.+2134   	; 0x275c <bmi160_set_int_config+0xbde>
		rslt = map_feature_interrupt(int_config, dev);
    1f06:	c7 01       	movw	r24, r14
    1f08:	b8 01       	movw	r22, r16
    1f0a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <map_feature_interrupt>
		if (rslt == BMI160_OK) {
    1f0e:	88 23       	and	r24, r24
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <bmi160_set_int_config+0x396>
    1f12:	24 c4       	rjmp	.+2120   	; 0x275c <bmi160_set_int_config+0xbde>
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
					const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    1f14:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Configure Int data 1 register to add source of interrupt */
	rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
    1f16:	89 e5       	ldi	r24, 0x59	; 89
    1f18:	b6 01       	movw	r22, r12
    1f1a:	41 e0       	ldi	r20, 0x01	; 1
    1f1c:	50 e0       	ldi	r21, 0x00	; 0
    1f1e:	98 01       	movw	r18, r16
    1f20:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    1f24:	88 23       	and	r24, r24
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <bmi160_set_int_config+0x3ac>
    1f28:	19 c4       	rjmp	.+2098   	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data & ~BMI160_MOTION_SRC_INT_MASK;
		data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
    1f2a:	f7 01       	movw	r30, r14
    1f2c:	85 81       	ldd	r24, Z+5	; 0x05
    1f2e:	86 95       	lsr	r24
    1f30:	86 95       	lsr	r24
    1f32:	87 95       	ror	r24
    1f34:	88 27       	eor	r24, r24
    1f36:	87 95       	ror	r24
    1f38:	99 81       	ldd	r25, Y+1	; 0x01
    1f3a:	9f 77       	andi	r25, 0x7F	; 127
    1f3c:	89 2b       	or	r24, r25
    1f3e:	89 83       	std	Y+1, r24	; 0x01
		/* Write data to DATA 1 address */
		rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
    1f40:	89 e5       	ldi	r24, 0x59	; 89
    1f42:	b6 01       	movw	r22, r12
    1f44:	41 e0       	ldi	r20, 0x01	; 1
    1f46:	50 e0       	ldi	r21, 0x00	; 0
    1f48:	98 01       	movw	r18, r16
    1f4a:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	rslt = set_intr_pin_config(int_config, dev);
	if (rslt == BMI160_OK) {
		rslt = map_feature_interrupt(int_config, dev);
		if (rslt == BMI160_OK) {
			rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
			if (rslt == BMI160_OK)
    1f4e:	88 23       	and	r24, r24
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <bmi160_set_int_config+0x3d6>
    1f52:	04 c4       	rjmp	.+2056   	; 0x275c <bmi160_set_int_config+0xbde>
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
					const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    1f54:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;
	uint8_t temp_1 = 0;
	uint8_t reg_addr;
	uint8_t data_array[2] = {0};
    1f56:	1b 82       	std	Y+3, r1	; 0x03
    1f58:	1a 82       	std	Y+2, r1	; 0x02

	/* Configuring INT_MOTION register */
	reg_addr = BMI160_INT_MOTION_0_ADDR;
	rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
    1f5a:	8f e5       	ldi	r24, 0x5F	; 95
    1f5c:	b6 01       	movw	r22, r12
    1f5e:	41 e0       	ldi	r20, 0x01	; 1
    1f60:	50 e0       	ldi	r21, 0x00	; 0
    1f62:	98 01       	movw	r18, r16
    1f64:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    1f68:	88 23       	and	r24, r24
    1f6a:	09 f0       	breq	.+2      	; 0x1f6e <bmi160_set_int_config+0x3f0>
    1f6c:	f7 c3       	rjmp	.+2030   	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
		/* Adding no_motion duration */
		data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
    1f6e:	f7 01       	movw	r30, r14
    1f70:	84 81       	ldd	r24, Z+4	; 0x04
    1f72:	86 95       	lsr	r24
    1f74:	86 95       	lsr	r24
    1f76:	86 95       	lsr	r24
    1f78:	95 81       	ldd	r25, Z+5	; 0x05
    1f7a:	91 70       	andi	r25, 0x01	; 1
    1f7c:	92 95       	swap	r25
    1f7e:	99 0f       	add	r25, r25
    1f80:	90 7e       	andi	r25, 0xE0	; 224
    1f82:	98 2b       	or	r25, r24
    1f84:	99 0f       	add	r25, r25
    1f86:	99 0f       	add	r25, r25
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
    1f8a:	83 70       	andi	r24, 0x03	; 3
    1f8c:	98 2b       	or	r25, r24
    1f8e:	99 83       	std	Y+1, r25	; 0x01
		/* Write data to NO_MOTION 0 address */
		rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
    1f90:	8f e5       	ldi	r24, 0x5F	; 95
    1f92:	b6 01       	movw	r22, r12
    1f94:	41 e0       	ldi	r20, 0x01	; 1
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	98 01       	movw	r18, r16
    1f9a:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
		if (rslt == BMI160_OK) {
    1f9e:	88 23       	and	r24, r24
    1fa0:	09 f0       	breq	.+2      	; 0x1fa4 <bmi160_set_int_config+0x426>
    1fa2:	dc c3       	rjmp	.+1976   	; 0x275c <bmi160_set_int_config+0xbde>
			reg_addr = BMI160_INT_MOTION_3_ADDR;
			rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
    1fa4:	82 e6       	ldi	r24, 0x62	; 98
    1fa6:	b6 01       	movw	r22, r12
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	50 e0       	ldi	r21, 0x00	; 0
    1fac:	98 01       	movw	r18, r16
    1fae:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
			if (rslt == BMI160_OK) {
    1fb2:	88 23       	and	r24, r24
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <bmi160_set_int_config+0x43a>
    1fb6:	d2 c3       	rjmp	.+1956   	; 0x275c <bmi160_set_int_config+0xbde>
				temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
				/* Adding no_motion_sel bit */
				temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
				data = (temp | temp_1);
    1fb8:	f7 01       	movw	r30, r14
    1fba:	85 81       	ldd	r24, Z+5	; 0x05
    1fbc:	86 95       	lsr	r24
    1fbe:	81 70       	andi	r24, 0x01	; 1
    1fc0:	99 81       	ldd	r25, Y+1	; 0x01
    1fc2:	9e 7f       	andi	r25, 0xFE	; 254
    1fc4:	89 2b       	or	r24, r25
    1fc6:	89 83       	std	Y+1, r24	; 0x01
				data_array[1] = data;
    1fc8:	8b 83       	std	Y+3, r24	; 0x03
				/* Adding no motion threshold */
				data_array[0] = no_mot_int_cfg->no_motion_thres;
    1fca:	86 81       	ldd	r24, Z+6	; 0x06
    1fcc:	8a 83       	std	Y+2, r24	; 0x02
				reg_addr = BMI160_INT_MOTION_2_ADDR;
				/* writing data to INT_MOTION 2 and INT_MOTION 3
				 * address simultaneously */
				rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
    1fce:	81 e6       	ldi	r24, 0x61	; 97
    1fd0:	be c0       	rjmp	.+380    	; 0x214e <bmi160_set_int_config+0x5d0>
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if ((rslt != BMI160_OK) || (int_config == NULL)) {
    1fd8:	88 23       	and	r24, r24
    1fda:	09 f0       	breq	.+2      	; 0x1fde <bmi160_set_int_config+0x460>
    1fdc:	be c3       	rjmp	.+1916   	; 0x275a <bmi160_set_int_config+0xbdc>
    1fde:	e1 14       	cp	r14, r1
    1fe0:	f1 04       	cpc	r15, r1
    1fe2:	09 f4       	brne	.+2      	; 0x1fe6 <bmi160_set_int_config+0x468>
    1fe4:	ba c3       	rjmp	.+1908   	; 0x275a <bmi160_set_int_config+0xbdc>
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
				const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
				const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    1fe6:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Enable single tap or double tap interrupt in Int Enable 0 register */
	rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
    1fe8:	80 e5       	ldi	r24, 0x50	; 80
    1fea:	be 01       	movw	r22, r28
    1fec:	6f 5f       	subi	r22, 0xFF	; 255
    1fee:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff0:	41 e0       	ldi	r20, 0x01	; 1
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	98 01       	movw	r18, r16
    1ff6:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    1ffa:	88 23       	and	r24, r24
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <bmi160_set_int_config+0x482>
    1ffe:	ae c3       	rjmp	.+1884   	; 0x275c <bmi160_set_int_config+0xbde>
		if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT) {
    2000:	f7 01       	movw	r30, r14
    2002:	81 81       	ldd	r24, Z+1	; 0x01
    2004:	95 81       	ldd	r25, Z+5	; 0x05
    2006:	29 81       	ldd	r18, Y+1	; 0x01
    2008:	84 30       	cpi	r24, 0x04	; 4
    200a:	71 f4       	brne	.+28     	; 0x2028 <bmi160_set_int_config+0x4aa>
			temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
			data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
    200c:	96 95       	lsr	r25
    200e:	96 95       	lsr	r25
    2010:	96 95       	lsr	r25
    2012:	91 70       	andi	r25, 0x01	; 1
    2014:	89 2f       	mov	r24, r25
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	b5 e0       	ldi	r27, 0x05	; 5
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	ba 95       	dec	r27
    2020:	e1 f7       	brne	.-8      	; 0x201a <bmi160_set_int_config+0x49c>
    2022:	80 72       	andi	r24, 0x20	; 32
    2024:	2f 7d       	andi	r18, 0xDF	; 223
    2026:	0d c0       	rjmp	.+26     	; 0x2042 <bmi160_set_int_config+0x4c4>
		} else {
			temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
			data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
    2028:	96 95       	lsr	r25
    202a:	96 95       	lsr	r25
    202c:	96 95       	lsr	r25
    202e:	91 70       	andi	r25, 0x01	; 1
    2030:	89 2f       	mov	r24, r25
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a4 e0       	ldi	r26, 0x04	; 4
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	aa 95       	dec	r26
    203c:	e1 f7       	brne	.-8      	; 0x2036 <bmi160_set_int_config+0x4b8>
    203e:	80 71       	andi	r24, 0x10	; 16
    2040:	2f 7e       	andi	r18, 0xEF	; 239
    2042:	82 2b       	or	r24, r18
    2044:	89 83       	std	Y+1, r24	; 0x01
		}
		/* Write to Enable 0 Address */
		rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
    2046:	80 e5       	ldi	r24, 0x50	; 80
    2048:	6e 01       	movw	r12, r28
    204a:	08 94       	sec
    204c:	c1 1c       	adc	r12, r1
    204e:	d1 1c       	adc	r13, r1
    2050:	b6 01       	movw	r22, r12
    2052:	41 e0       	ldi	r20, 0x01	; 1
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	98 01       	movw	r18, r16
    2058:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>

		/* updating the interrupt structure to local structure */
		struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);

		rslt = enable_tap_int(int_config, tap_int_cfg, dev);
		if (rslt == BMI160_OK) {
    205c:	88 23       	and	r24, r24
    205e:	09 f0       	breq	.+2      	; 0x2062 <bmi160_set_int_config+0x4e4>
    2060:	7d c3       	rjmp	.+1786   	; 0x275c <bmi160_set_int_config+0xbde>
			/* Configure Interrupt pins */
			rslt = set_intr_pin_config(int_config, dev);
    2062:	c7 01       	movw	r24, r14
    2064:	b8 01       	movw	r22, r16
    2066:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_intr_pin_config>
			if (rslt == BMI160_OK)
    206a:	88 23       	and	r24, r24
    206c:	09 f0       	breq	.+2      	; 0x2070 <bmi160_set_int_config+0x4f2>
    206e:	76 c3       	rjmp	.+1772   	; 0x275c <bmi160_set_int_config+0xbde>
					const struct bmi160_dev *dev)
{
	int8_t rslt;

	/* Configure Interrupt pins */
	rslt = set_intr_pin_config(int_config, dev);
    2070:	c7 01       	movw	r24, r14
    2072:	b8 01       	movw	r22, r16
    2074:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_intr_pin_config>
	if (rslt == BMI160_OK) {
    2078:	88 23       	and	r24, r24
    207a:	09 f0       	breq	.+2      	; 0x207e <bmi160_set_int_config+0x500>
    207c:	6f c3       	rjmp	.+1758   	; 0x275c <bmi160_set_int_config+0xbde>
		rslt = map_feature_interrupt(int_config, dev);
    207e:	c7 01       	movw	r24, r14
    2080:	b8 01       	movw	r22, r16
    2082:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <map_feature_interrupt>
		if (rslt == BMI160_OK) {
    2086:	88 23       	and	r24, r24
    2088:	09 f0       	breq	.+2      	; 0x208c <bmi160_set_int_config+0x50e>
    208a:	68 c3       	rjmp	.+1744   	; 0x275c <bmi160_set_int_config+0xbde>
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    208c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Configure Int data 0 register to add source of interrupt */
	rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
    208e:	88 e5       	ldi	r24, 0x58	; 88
    2090:	b6 01       	movw	r22, r12
    2092:	41 e0       	ldi	r20, 0x01	; 1
    2094:	50 e0       	ldi	r21, 0x00	; 0
    2096:	98 01       	movw	r18, r16
    2098:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    209c:	88 23       	and	r24, r24
    209e:	09 f0       	breq	.+2      	; 0x20a2 <bmi160_set_int_config+0x524>
    20a0:	5d c3       	rjmp	.+1722   	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data & ~BMI160_TAP_SRC_INT_MASK;
		data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
    20a2:	f7 01       	movw	r30, r14
    20a4:	85 81       	ldd	r24, Z+5	; 0x05
    20a6:	86 95       	lsr	r24
    20a8:	86 95       	lsr	r24
    20aa:	81 70       	andi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	f3 e0       	ldi	r31, 0x03	; 3
    20b0:	88 0f       	add	r24, r24
    20b2:	99 1f       	adc	r25, r25
    20b4:	fa 95       	dec	r31
    20b6:	e1 f7       	brne	.-8      	; 0x20b0 <bmi160_set_int_config+0x532>
    20b8:	88 70       	andi	r24, 0x08	; 8
    20ba:	29 81       	ldd	r18, Y+1	; 0x01
    20bc:	27 7f       	andi	r18, 0xF7	; 247
    20be:	82 2b       	or	r24, r18
    20c0:	89 83       	std	Y+1, r24	; 0x01
		/* Write data to Data 0 address */
		rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
    20c2:	88 e5       	ldi	r24, 0x58	; 88
    20c4:	b6 01       	movw	r22, r12
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	98 01       	movw	r18, r16
    20cc:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	rslt = set_intr_pin_config(int_config, dev);
	if (rslt == BMI160_OK) {
		rslt = map_feature_interrupt(int_config, dev);
		if (rslt == BMI160_OK) {
			rslt = config_tap_data_src(tap_int_cfg, dev);
			if (rslt == BMI160_OK)
    20d0:	88 23       	and	r24, r24
    20d2:	09 f0       	breq	.+2      	; 0x20d6 <bmi160_set_int_config+0x558>
    20d4:	43 c3       	rjmp	.+1670   	; 0x275c <bmi160_set_int_config+0xbde>
				const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t temp = 0;
	uint8_t data = 0;
	uint8_t data_array[2] = {0};
    20d6:	1b 82       	std	Y+3, r1	; 0x03
    20d8:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t count = 0;
	uint8_t dur, shock, quiet, thres;

	/* Configure tap 0 register for tap shock,tap quiet duration
	 * in case of single tap interrupt */
	rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
    20da:	83 e6       	ldi	r24, 0x63	; 99
    20dc:	be 01       	movw	r22, r28
    20de:	6e 5f       	subi	r22, 0xFE	; 254
    20e0:	7f 4f       	sbci	r23, 0xFF	; 255
    20e2:	42 e0       	ldi	r20, 0x02	; 2
    20e4:	50 e0       	ldi	r21, 0x00	; 0
    20e6:	98 01       	movw	r18, r16
    20e8:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    20ec:	88 23       	and	r24, r24
    20ee:	09 f0       	breq	.+2      	; 0x20f2 <bmi160_set_int_config+0x574>
    20f0:	35 c3       	rjmp	.+1642   	; 0x275c <bmi160_set_int_config+0xbde>
		data = data_array[count];
    20f2:	3a 81       	ldd	r19, Y+2	; 0x02

		if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT) {
    20f4:	f7 01       	movw	r30, r14
    20f6:	81 81       	ldd	r24, Z+1	; 0x01
    20f8:	83 30       	cpi	r24, 0x03	; 3
    20fa:	51 f4       	brne	.+20     	; 0x2110 <bmi160_set_int_config+0x592>
			dur  = (uint8_t)tap_int_cfg->tap_dur;
			temp = (data & ~BMI160_TAP_DUR_MASK);
			/* Add tap duration data in case of
			 * double tap interrupt */
			data = temp | (dur & BMI160_TAP_DUR_MASK);
    20fc:	94 81       	ldd	r25, Z+4	; 0x04
    20fe:	99 1f       	adc	r25, r25
    2100:	99 27       	eor	r25, r25
    2102:	99 1f       	adc	r25, r25
    2104:	85 81       	ldd	r24, Z+5	; 0x05
    2106:	83 70       	andi	r24, 0x03	; 3
    2108:	88 0f       	add	r24, r24
    210a:	89 2b       	or	r24, r25
    210c:	38 7f       	andi	r19, 0xF8	; 248
    210e:	38 2b       	or	r19, r24
		}

		shock = (uint8_t)tap_int_cfg->tap_shock;
		temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
		data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
    2110:	f7 01       	movw	r30, r14
    2112:	24 81       	ldd	r18, Z+4	; 0x04
    2114:	82 2f       	mov	r24, r18
    2116:	82 95       	swap	r24
    2118:	86 95       	lsr	r24
    211a:	81 70       	andi	r24, 0x01	; 1
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	e6 e0       	ldi	r30, 0x06	; 6
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	ea 95       	dec	r30
    2126:	e1 f7       	brne	.-8      	; 0x2120 <bmi160_set_int_config+0x5a2>
    2128:	80 74       	andi	r24, 0x40	; 64
    212a:	3f 73       	andi	r19, 0x3F	; 63

		quiet = (uint8_t)tap_int_cfg->tap_quiet;
		temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
		data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
    212c:	38 2b       	or	r19, r24
    212e:	82 2f       	mov	r24, r18
    2130:	82 95       	swap	r24
    2132:	86 95       	lsr	r24
    2134:	86 95       	lsr	r24
    2136:	83 70       	andi	r24, 0x03	; 3
    2138:	87 95       	ror	r24
    213a:	88 27       	eor	r24, r24
    213c:	87 95       	ror	r24
    213e:	83 2b       	or	r24, r19

		data_array[count++] = data;
    2140:	8a 83       	std	Y+2, r24	; 0x02

		data = data_array[count];
		thres = (uint8_t)tap_int_cfg->tap_thr;
		temp = data & ~BMI160_TAP_THRES_MASK;
		data = temp | (thres & BMI160_TAP_THRES_MASK);
    2142:	2f 71       	andi	r18, 0x1F	; 31
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	80 7e       	andi	r24, 0xE0	; 224
    2148:	28 2b       	or	r18, r24

		data_array[count++] = data;
    214a:	2b 83       	std	Y+3, r18	; 0x03
		/* TAP 0 and TAP 1 address lie consecutively,
		hence writing data to respective registers at one go */
		/* Writing to Tap 0 and Tap 1 Address simultaneously */
		rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
    214c:	83 e6       	ldi	r24, 0x63	; 99
    214e:	be 01       	movw	r22, r28
    2150:	6e 5f       	subi	r22, 0xFE	; 254
    2152:	7f 4f       	sbci	r23, 0xFF	; 255
    2154:	42 e0       	ldi	r20, 0x02	; 2
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	91 ce       	rjmp	.-734    	; 0x1e7c <bmi160_set_int_config+0x2fe>
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    215a:	cb 01       	movw	r24, r22
    215c:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if ((rslt != BMI160_OK) || (int_config == NULL)) {
    2160:	88 23       	and	r24, r24
    2162:	09 f0       	breq	.+2      	; 0x2166 <bmi160_set_int_config+0x5e8>
    2164:	fa c2       	rjmp	.+1524   	; 0x275a <bmi160_set_int_config+0xbdc>
    2166:	e1 14       	cp	r14, r1
    2168:	f1 04       	cpc	r15, r1
    216a:	09 f4       	brne	.+2      	; 0x216e <bmi160_set_int_config+0x5f0>
    216c:	f6 c2       	rjmp	.+1516   	; 0x275a <bmi160_set_int_config+0xbdc>
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
					const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    216e:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Enable data ready interrupt in Int Enable 2 register */
	rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
    2170:	82 e5       	ldi	r24, 0x52	; 82
    2172:	6e 01       	movw	r12, r28
    2174:	08 94       	sec
    2176:	c1 1c       	adc	r12, r1
    2178:	d1 1c       	adc	r13, r1
    217a:	b6 01       	movw	r22, r12
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	98 01       	movw	r18, r16
    2182:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    2186:	88 23       	and	r24, r24
    2188:	09 f0       	breq	.+2      	; 0x218c <bmi160_set_int_config+0x60e>
    218a:	e8 c2       	rjmp	.+1488   	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
		data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
    218c:	f7 01       	movw	r30, r14
    218e:	84 81       	ldd	r24, Z+4	; 0x04
    2190:	81 70       	andi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	73 e0       	ldi	r23, 0x03	; 3
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	7a 95       	dec	r23
    219c:	e1 f7       	brne	.-8      	; 0x2196 <bmi160_set_int_config+0x618>
    219e:	88 70       	andi	r24, 0x08	; 8
    21a0:	29 81       	ldd	r18, Y+1	; 0x01
    21a2:	27 7f       	andi	r18, 0xF7	; 247
    21a4:	82 2b       	or	r24, r18
    21a6:	89 83       	std	Y+1, r24	; 0x01
		/* Writing data to INT ENABLE 2 Address */
		rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
    21a8:	82 e5       	ldi	r24, 0x52	; 82
    21aa:	b6 01       	movw	r22, r12
    21ac:	41 e0       	ldi	r20, 0x01	; 1
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	98 01       	movw	r18, r16
    21b2:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
		/* updating the interrupt structure to local structure */
		struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg =
								&(int_config->int_type_cfg.acc_step_detect_int);

		rslt = enable_step_detect_int(step_detect_int_cfg, dev);
		if (rslt == BMI160_OK) {
    21b6:	88 23       	and	r24, r24
    21b8:	09 f0       	breq	.+2      	; 0x21bc <bmi160_set_int_config+0x63e>
    21ba:	d0 c2       	rjmp	.+1440   	; 0x275c <bmi160_set_int_config+0xbde>
			/* Configure Interrupt pins */
			rslt = set_intr_pin_config(int_config, dev);
    21bc:	c7 01       	movw	r24, r14
    21be:	b8 01       	movw	r22, r16
    21c0:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_intr_pin_config>
			if (rslt == BMI160_OK) {
    21c4:	88 23       	and	r24, r24
    21c6:	09 f0       	breq	.+2      	; 0x21ca <bmi160_set_int_config+0x64c>
    21c8:	c9 c2       	rjmp	.+1426   	; 0x275c <bmi160_set_int_config+0xbde>
				rslt = map_feature_interrupt(int_config, dev);
    21ca:	c7 01       	movw	r24, r14
    21cc:	b8 01       	movw	r22, r16
    21ce:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <map_feature_interrupt>
				if (rslt == BMI160_OK)
    21d2:	88 23       	and	r24, r24
    21d4:	09 f0       	breq	.+2      	; 0x21d8 <bmi160_set_int_config+0x65a>
    21d6:	c2 c2       	rjmp	.+1412   	; 0x275c <bmi160_set_int_config+0xbde>
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
				const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t temp = 0;
	uint8_t data_array[2] = {0};
    21d8:	1b 82       	std	Y+3, r1	; 0x03
    21da:	1a 82       	std	Y+2, r1	; 0x02


	if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL) {
    21dc:	f7 01       	movw	r30, r14
    21de:	84 81       	ldd	r24, Z+4	; 0x04
    21e0:	80 7c       	andi	r24, 0xC0	; 192
    21e2:	21 f4       	brne	.+8      	; 0x21ec <bmi160_set_int_config+0x66e>
		/* Normal mode setting */
		data_array[0] = 0x15;
    21e4:	85 e1       	ldi	r24, 0x15	; 21
    21e6:	8a 83       	std	Y+2, r24	; 0x02
		data_array[1] = 0x03;
    21e8:	83 e0       	ldi	r24, 0x03	; 3
    21ea:	0b c0       	rjmp	.+22     	; 0x2202 <bmi160_set_int_config+0x684>
	} else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE) {
    21ec:	80 34       	cpi	r24, 0x40	; 64
    21ee:	21 f4       	brne	.+8      	; 0x21f8 <bmi160_set_int_config+0x67a>
		/* Sensitive mode setting */
		data_array[0] = 0x2D;
    21f0:	8d e2       	ldi	r24, 0x2D	; 45
    21f2:	8a 83       	std	Y+2, r24	; 0x02
		data_array[1] = 0x00;
    21f4:	1b 82       	std	Y+3, r1	; 0x03
    21f6:	29 c0       	rjmp	.+82     	; 0x224a <bmi160_set_int_config+0x6cc>
	} else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST) {
    21f8:	80 38       	cpi	r24, 0x80	; 128
    21fa:	29 f4       	brne	.+10     	; 0x2206 <bmi160_set_int_config+0x688>
		/* Robust mode setting */
		data_array[0] = 0x1D;
    21fc:	8d e1       	ldi	r24, 0x1D	; 29
    21fe:	8a 83       	std	Y+2, r24	; 0x02
		data_array[1] = 0x07;
    2200:	87 e0       	ldi	r24, 0x07	; 7
    2202:	8b 83       	std	Y+3, r24	; 0x03
    2204:	22 c0       	rjmp	.+68     	; 0x224a <bmi160_set_int_config+0x6cc>
	} else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE) {
    2206:	80 3c       	cpi	r24, 0xC0	; 192
    2208:	01 f5       	brne	.+64     	; 0x224a <bmi160_set_int_config+0x6cc>
		/* Non recommended User defined setting */
		/* Configuring STEP_CONFIG register */
		rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
    220a:	8a e7       	ldi	r24, 0x7A	; 122
    220c:	be 01       	movw	r22, r28
    220e:	6e 5f       	subi	r22, 0xFE	; 254
    2210:	7f 4f       	sbci	r23, 0xFF	; 255
    2212:	42 e0       	ldi	r20, 0x02	; 2
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	98 01       	movw	r18, r16
    2218:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>

		if (rslt == BMI160_OK) {
    221c:	88 23       	and	r24, r24
    221e:	a9 f4       	brne	.+42     	; 0x224a <bmi160_set_int_config+0x6cc>
			temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
			/* Adding min_threshold */
			data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3)
    2220:	f7 01       	movw	r30, r14
    2222:	24 81       	ldd	r18, Z+4	; 0x04
    2224:	92 2f       	mov	r25, r18
    2226:	99 0f       	add	r25, r25
    2228:	99 0f       	add	r25, r25
    222a:	98 71       	andi	r25, 0x18	; 24
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	80 7e       	andi	r24, 0xE0	; 224
					& BMI160_STEP_DETECT_MIN_THRES_MASK);

			temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
			/* Adding steptime_min */
			data_array[0] = temp | ((step_detect_int_cfg->steptime_min)
    2230:	89 2b       	or	r24, r25
    2232:	26 95       	lsr	r18
    2234:	26 95       	lsr	r18
    2236:	26 95       	lsr	r18
    2238:	27 70       	andi	r18, 0x07	; 7
    223a:	82 2b       	or	r24, r18
    223c:	8a 83       	std	Y+2, r24	; 0x02
					& BMI160_STEP_DETECT_STEPTIME_MIN_MASK);

			temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
			/* Adding steptime_min */
			data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
    223e:	95 81       	ldd	r25, Z+5	; 0x05
    2240:	97 70       	andi	r25, 0x07	; 7
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	88 7f       	andi	r24, 0xF8	; 248
    2246:	98 2b       	or	r25, r24
    2248:	9b 83       	std	Y+3, r25	; 0x03

		}
	}

	/* Write data to STEP_CONFIG register */
	rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
    224a:	8a e7       	ldi	r24, 0x7A	; 122
    224c:	80 cf       	rjmp	.-256    	; 0x214e <bmi160_set_int_config+0x5d0>
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    224e:	cb 01       	movw	r24, r22
    2250:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if ((rslt != BMI160_OK) || (int_config == NULL)) {
    2254:	88 23       	and	r24, r24
    2256:	09 f0       	breq	.+2      	; 0x225a <bmi160_set_int_config+0x6dc>
    2258:	80 c2       	rjmp	.+1280   	; 0x275a <bmi160_set_int_config+0xbdc>
    225a:	e1 14       	cp	r14, r1
    225c:	f1 04       	cpc	r15, r1
    225e:	09 f4       	brne	.+2      	; 0x2262 <bmi160_set_int_config+0x6e4>
    2260:	7c c2       	rjmp	.+1272   	; 0x275a <bmi160_set_int_config+0xbdc>
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    2262:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Enable data ready interrupt in Int Enable 0 register */
	rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
    2264:	80 e5       	ldi	r24, 0x50	; 80
    2266:	6e 01       	movw	r12, r28
    2268:	08 94       	sec
    226a:	c1 1c       	adc	r12, r1
    226c:	d1 1c       	adc	r13, r1
    226e:	b6 01       	movw	r22, r12
    2270:	41 e0       	ldi	r20, 0x01	; 1
    2272:	50 e0       	ldi	r21, 0x00	; 0
    2274:	98 01       	movw	r18, r16
    2276:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    227a:	88 23       	and	r24, r24
    227c:	09 f0       	breq	.+2      	; 0x2280 <bmi160_set_int_config+0x702>
    227e:	6e c2       	rjmp	.+1244   	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data & ~BMI160_ORIENT_INT_EN_MASK;
		data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
    2280:	f7 01       	movw	r30, r14
    2282:	86 81       	ldd	r24, Z+6	; 0x06
    2284:	81 70       	andi	r24, 0x01	; 1
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	66 e0       	ldi	r22, 0x06	; 6
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	6a 95       	dec	r22
    2290:	e1 f7       	brne	.-8      	; 0x228a <bmi160_set_int_config+0x70c>
    2292:	80 74       	andi	r24, 0x40	; 64
    2294:	29 81       	ldd	r18, Y+1	; 0x01
    2296:	2f 7b       	andi	r18, 0xBF	; 191
    2298:	82 2b       	or	r24, r18
    229a:	89 83       	std	Y+1, r24	; 0x01
		/* write data to Int Enable 0 register */
		rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
    229c:	80 e5       	ldi	r24, 0x50	; 80
    229e:	b6 01       	movw	r22, r12
    22a0:	41 e0       	ldi	r20, 0x01	; 1
    22a2:	50 e0       	ldi	r21, 0x00	; 0
    22a4:	98 01       	movw	r18, r16
    22a6:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	} else {
		/* updating the interrupt structure to local structure */
		struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);

		rslt = enable_orient_int(orient_int_cfg, dev);
		if (rslt == BMI160_OK) {
    22aa:	88 23       	and	r24, r24
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <bmi160_set_int_config+0x732>
    22ae:	56 c2       	rjmp	.+1196   	; 0x275c <bmi160_set_int_config+0xbde>
			/* Configure Interrupt pins */
			rslt = set_intr_pin_config(int_config, dev);
    22b0:	c7 01       	movw	r24, r14
    22b2:	b8 01       	movw	r22, r16
    22b4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_intr_pin_config>
			if (rslt == BMI160_OK) {
    22b8:	88 23       	and	r24, r24
    22ba:	09 f0       	breq	.+2      	; 0x22be <bmi160_set_int_config+0x740>
    22bc:	4f c2       	rjmp	.+1182   	; 0x275c <bmi160_set_int_config+0xbde>
				/* map INT pin to orient interrupt */
				rslt = map_feature_interrupt(int_config, dev);
    22be:	c7 01       	movw	r24, r14
    22c0:	b8 01       	movw	r22, r16
    22c2:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <map_feature_interrupt>
				if (rslt == BMI160_OK)
    22c6:	88 23       	and	r24, r24
    22c8:	09 f0       	breq	.+2      	; 0x22cc <bmi160_set_int_config+0x74e>
    22ca:	48 c2       	rjmp	.+1168   	; 0x275c <bmi160_set_int_config+0xbde>
					const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
	uint8_t temp = 0;
	uint8_t data_array[2] = {0, 0};
    22cc:	1a 82       	std	Y+2, r1	; 0x02
    22ce:	1b 82       	std	Y+3, r1	; 0x03

	/* Configuring INT_ORIENT registers */
	rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
    22d0:	52 e0       	ldi	r21, 0x02	; 2
    22d2:	c5 2e       	mov	r12, r21
    22d4:	d1 2c       	mov	r13, r1
    22d6:	cc 0e       	add	r12, r28
    22d8:	dd 1e       	adc	r13, r29
    22da:	85 e6       	ldi	r24, 0x65	; 101
    22dc:	b6 01       	movw	r22, r12
    22de:	42 e0       	ldi	r20, 0x02	; 2
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	98 01       	movw	r18, r16
    22e4:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    22e8:	88 23       	and	r24, r24
    22ea:	09 f0       	breq	.+2      	; 0x22ee <bmi160_set_int_config+0x770>
    22ec:	37 c2       	rjmp	.+1134   	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data & ~BMI160_ORIENT_BLOCK_MASK;
		/* Adding Orientation blocking */
		data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
		temp = data & ~BMI160_ORIENT_HYST_MASK;
		 /* Adding Orientation hysteresis */
		data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
    22ee:	f7 01       	movw	r30, r14
    22f0:	84 81       	ldd	r24, Z+4	; 0x04
		data_array[0] = data;
    22f2:	8a 83       	std	Y+2, r24	; 0x02

		data = data_array[1];
		temp = data & ~BMI160_ORIENT_THETA_MASK;
		/* Adding Orientation threshold */
		data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
    22f4:	25 81       	ldd	r18, Z+5	; 0x05
    22f6:	32 2f       	mov	r19, r18
    22f8:	3f 73       	andi	r19, 0x3F	; 63
		temp = data & ~BMI160_ORIENT_UD_ENABLE;
		/* Adding Orient_ud_en */
		data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
    22fa:	82 2f       	mov	r24, r18
    22fc:	82 95       	swap	r24
    22fe:	86 95       	lsr	r24
    2300:	86 95       	lsr	r24
    2302:	81 70       	andi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	46 e0       	ldi	r20, 0x06	; 6
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	4a 95       	dec	r20
    230e:	e1 f7       	brne	.-8      	; 0x2308 <bmi160_set_int_config+0x78a>
    2310:	80 74       	andi	r24, 0x40	; 64
		temp = data & ~BMI160_AXES_EN_MASK;
		/* Adding axes_en */
		data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
    2312:	38 2b       	or	r19, r24
    2314:	20 78       	andi	r18, 0x80	; 128
    2316:	23 2b       	or	r18, r19
		data_array[1] = data;
    2318:	2b 83       	std	Y+3, r18	; 0x03
		/* Writing data to INT_ORIENT 0 and INT_ORIENT 1
		 * registers simultaneously */
		rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
    231a:	85 e6       	ldi	r24, 0x65	; 101
    231c:	6a c0       	rjmp	.+212    	; 0x23f2 <bmi160_set_int_config+0x874>
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    231e:	cb 01       	movw	r24, r22
    2320:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if ((rslt != BMI160_OK) || (int_config == NULL)) {
    2324:	88 23       	and	r24, r24
    2326:	09 f0       	breq	.+2      	; 0x232a <bmi160_set_int_config+0x7ac>
    2328:	18 c2       	rjmp	.+1072   	; 0x275a <bmi160_set_int_config+0xbdc>
    232a:	e1 14       	cp	r14, r1
    232c:	f1 04       	cpc	r15, r1
    232e:	09 f4       	brne	.+2      	; 0x2332 <bmi160_set_int_config+0x7b4>
    2330:	14 c2       	rjmp	.+1064   	; 0x275a <bmi160_set_int_config+0xbdc>
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    2332:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Enable flat interrupt in Int Enable 0 register */
	rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
    2334:	80 e5       	ldi	r24, 0x50	; 80
    2336:	6e 01       	movw	r12, r28
    2338:	08 94       	sec
    233a:	c1 1c       	adc	r12, r1
    233c:	d1 1c       	adc	r13, r1
    233e:	b6 01       	movw	r22, r12
    2340:	41 e0       	ldi	r20, 0x01	; 1
    2342:	50 e0       	ldi	r21, 0x00	; 0
    2344:	98 01       	movw	r18, r16
    2346:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    234a:	88 23       	and	r24, r24
    234c:	09 f0       	breq	.+2      	; 0x2350 <bmi160_set_int_config+0x7d2>
    234e:	06 c2       	rjmp	.+1036   	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data & ~BMI160_FLAT_INT_EN_MASK;
		data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
    2350:	f7 01       	movw	r30, r14
    2352:	85 81       	ldd	r24, Z+5	; 0x05
    2354:	86 95       	lsr	r24
    2356:	86 95       	lsr	r24
    2358:	86 95       	lsr	r24
    235a:	87 95       	ror	r24
    235c:	88 27       	eor	r24, r24
    235e:	87 95       	ror	r24
    2360:	99 81       	ldd	r25, Y+1	; 0x01
    2362:	9f 77       	andi	r25, 0x7F	; 127
    2364:	89 2b       	or	r24, r25
    2366:	89 83       	std	Y+1, r24	; 0x01
		/* write data to Int Enable 0 register */
		rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
    2368:	80 e5       	ldi	r24, 0x50	; 80
    236a:	b6 01       	movw	r22, r12
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	50 e0       	ldi	r21, 0x00	; 0
    2370:	98 01       	movw	r18, r16
    2372:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
		/* updating the interrupt structure to local structure */
		struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);

		/* enable the flat interrupt */
		rslt = enable_flat_int(flat_detect_int, dev);
		if (rslt == BMI160_OK) {
    2376:	88 23       	and	r24, r24
    2378:	09 f0       	breq	.+2      	; 0x237c <bmi160_set_int_config+0x7fe>
    237a:	f0 c1       	rjmp	.+992    	; 0x275c <bmi160_set_int_config+0xbde>
			/* Configure Interrupt pins */
			rslt = set_intr_pin_config(int_config, dev);
    237c:	c7 01       	movw	r24, r14
    237e:	b8 01       	movw	r22, r16
    2380:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_intr_pin_config>
			if (rslt == BMI160_OK) {
    2384:	88 23       	and	r24, r24
    2386:	09 f0       	breq	.+2      	; 0x238a <bmi160_set_int_config+0x80c>
    2388:	e9 c1       	rjmp	.+978    	; 0x275c <bmi160_set_int_config+0xbde>
				/* map INT pin to flat interrupt */
				rslt = map_feature_interrupt(int_config, dev);
    238a:	c7 01       	movw	r24, r14
    238c:	b8 01       	movw	r22, r16
    238e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <map_feature_interrupt>
				if (rslt == BMI160_OK)
    2392:	88 23       	and	r24, r24
    2394:	09 f0       	breq	.+2      	; 0x2398 <bmi160_set_int_config+0x81a>
    2396:	e2 c1       	rjmp	.+964    	; 0x275c <bmi160_set_int_config+0xbde>
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
	uint8_t temp = 0;
	uint8_t data_array[2] = {0, 0};
    2398:	1a 82       	std	Y+2, r1	; 0x02
    239a:	1b 82       	std	Y+3, r1	; 0x03

	/* Configuring INT_FLAT register */
	rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
    239c:	82 e0       	ldi	r24, 0x02	; 2
    239e:	c8 2e       	mov	r12, r24
    23a0:	d1 2c       	mov	r13, r1
    23a2:	cc 0e       	add	r12, r28
    23a4:	dd 1e       	adc	r13, r29
    23a6:	87 e6       	ldi	r24, 0x67	; 103
    23a8:	b6 01       	movw	r22, r12
    23aa:	42 e0       	ldi	r20, 0x02	; 2
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	98 01       	movw	r18, r16
    23b0:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    23b4:	88 23       	and	r24, r24
    23b6:	09 f0       	breq	.+2      	; 0x23ba <bmi160_set_int_config+0x83c>
    23b8:	d1 c1       	rjmp	.+930    	; 0x275c <bmi160_set_int_config+0xbde>
		data = data_array[0];
		temp = data & ~BMI160_FLAT_THRES_MASK;
		/* Adding flat theta */
		data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
    23ba:	f7 01       	movw	r30, r14
    23bc:	34 81       	ldd	r19, Z+4	; 0x04
    23be:	93 2f       	mov	r25, r19
    23c0:	9f 73       	andi	r25, 0x3F	; 63
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	80 7c       	andi	r24, 0xC0	; 192
    23c6:	98 2b       	or	r25, r24
		data_array[0] = data;
    23c8:	9a 83       	std	Y+2, r25	; 0x02

		data = data_array[1];
		temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
		/* Adding flat hold time */
		data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
    23ca:	95 81       	ldd	r25, Z+5	; 0x05
    23cc:	29 2f       	mov	r18, r25
    23ce:	22 0f       	add	r18, r18
    23d0:	22 0f       	add	r18, r18
    23d2:	22 0f       	add	r18, r18
    23d4:	20 73       	andi	r18, 0x30	; 48
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	88 7c       	andi	r24, 0xC8	; 200
		temp = data & ~BMI160_FLAT_HYST_MASK;
		/* Adding flat hysteresis */
		data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
    23da:	82 2b       	or	r24, r18
    23dc:	32 95       	swap	r19
    23de:	36 95       	lsr	r19
    23e0:	36 95       	lsr	r19
    23e2:	33 70       	andi	r19, 0x03	; 3
    23e4:	91 70       	andi	r25, 0x01	; 1
    23e6:	99 0f       	add	r25, r25
    23e8:	99 0f       	add	r25, r25
    23ea:	93 2b       	or	r25, r19
    23ec:	89 2b       	or	r24, r25
		data_array[1] = data;
    23ee:	8b 83       	std	Y+3, r24	; 0x03
		/* Writing data to INT_FLAT 0 and INT_FLAT 1
		 * registers simultaneously */
		rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
    23f0:	87 e6       	ldi	r24, 0x67	; 103
    23f2:	b6 01       	movw	r22, r12
    23f4:	af ce       	rjmp	.-674    	; 0x2154 <bmi160_set_int_config+0x5d6>
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    23f6:	cb 01       	movw	r24, r22
    23f8:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if ((rslt != BMI160_OK) || (int_config == NULL)) {
    23fc:	88 23       	and	r24, r24
    23fe:	09 f0       	breq	.+2      	; 0x2402 <bmi160_set_int_config+0x884>
    2400:	ac c1       	rjmp	.+856    	; 0x275a <bmi160_set_int_config+0xbdc>
    2402:	e1 14       	cp	r14, r1
    2404:	f1 04       	cpc	r15, r1
    2406:	09 f4       	brne	.+2      	; 0x240a <bmi160_set_int_config+0x88c>
    2408:	a8 c1       	rjmp	.+848    	; 0x275a <bmi160_set_int_config+0xbdc>
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    240a:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Enable low-g interrupt in Int Enable 1 register */
	rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
    240c:	81 e5       	ldi	r24, 0x51	; 81
    240e:	6e 01       	movw	r12, r28
    2410:	08 94       	sec
    2412:	c1 1c       	adc	r12, r1
    2414:	d1 1c       	adc	r13, r1
    2416:	b6 01       	movw	r22, r12
    2418:	41 e0       	ldi	r20, 0x01	; 1
    241a:	50 e0       	ldi	r21, 0x00	; 0
    241c:	98 01       	movw	r18, r16
    241e:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    2422:	88 23       	and	r24, r24
    2424:	09 f0       	breq	.+2      	; 0x2428 <bmi160_set_int_config+0x8aa>
    2426:	9a c1       	rjmp	.+820    	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data & ~BMI160_LOW_G_INT_EN_MASK;
		data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
    2428:	f7 01       	movw	r30, r14
    242a:	86 81       	ldd	r24, Z+6	; 0x06
    242c:	82 95       	swap	r24
    242e:	81 70       	andi	r24, 0x01	; 1
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	b3 e0       	ldi	r27, 0x03	; 3
    2434:	88 0f       	add	r24, r24
    2436:	99 1f       	adc	r25, r25
    2438:	ba 95       	dec	r27
    243a:	e1 f7       	brne	.-8      	; 0x2434 <bmi160_set_int_config+0x8b6>
    243c:	88 70       	andi	r24, 0x08	; 8
    243e:	29 81       	ldd	r18, Y+1	; 0x01
    2440:	27 7f       	andi	r18, 0xF7	; 247
    2442:	82 2b       	or	r24, r18
    2444:	89 83       	std	Y+1, r24	; 0x01
		/* write data to Int Enable 0 register */
		rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
    2446:	81 e5       	ldi	r24, 0x51	; 81
    2448:	b6 01       	movw	r22, r12
    244a:	41 e0       	ldi	r20, 0x01	; 1
    244c:	50 e0       	ldi	r21, 0x00	; 0
    244e:	98 01       	movw	r18, r16
    2450:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
		/* updating the interrupt structure to local structure */
		struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);

		/* Enable the low-g interrupt*/
		rslt = enable_low_g_int (low_g_int, dev);
		if (rslt == BMI160_OK) {
    2454:	88 23       	and	r24, r24
    2456:	09 f0       	breq	.+2      	; 0x245a <bmi160_set_int_config+0x8dc>
    2458:	81 c1       	rjmp	.+770    	; 0x275c <bmi160_set_int_config+0xbde>
			/* Configure Interrupt pins */
			rslt = set_intr_pin_config(int_config, dev);
    245a:	c7 01       	movw	r24, r14
    245c:	b8 01       	movw	r22, r16
    245e:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_intr_pin_config>
			if (rslt == BMI160_OK) {
    2462:	88 23       	and	r24, r24
    2464:	09 f0       	breq	.+2      	; 0x2468 <bmi160_set_int_config+0x8ea>
    2466:	7a c1       	rjmp	.+756    	; 0x275c <bmi160_set_int_config+0xbde>
				/* Map INT pin to low-g interrupt */
				rslt = map_feature_interrupt(int_config, dev);
    2468:	c7 01       	movw	r24, r14
    246a:	b8 01       	movw	r22, r16
    246c:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <map_feature_interrupt>
				if (rslt == BMI160_OK) {
    2470:	88 23       	and	r24, r24
    2472:	09 f0       	breq	.+2      	; 0x2476 <bmi160_set_int_config+0x8f8>
    2474:	73 c1       	rjmp	.+742    	; 0x275c <bmi160_set_int_config+0xbde>
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    2476:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Configure Int data 0 register to add source of interrupt */
	rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
    2478:	88 e5       	ldi	r24, 0x58	; 88
    247a:	6e 01       	movw	r12, r28
    247c:	08 94       	sec
    247e:	c1 1c       	adc	r12, r1
    2480:	d1 1c       	adc	r13, r1
    2482:	b6 01       	movw	r22, r12
    2484:	41 e0       	ldi	r20, 0x01	; 1
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	98 01       	movw	r18, r16
    248a:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    248e:	88 23       	and	r24, r24
    2490:	09 f0       	breq	.+2      	; 0x2494 <bmi160_set_int_config+0x916>
    2492:	64 c1       	rjmp	.+712    	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
		data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
    2494:	f7 01       	movw	r30, r14
    2496:	86 81       	ldd	r24, Z+6	; 0x06
    2498:	86 95       	lsr	r24
    249a:	86 95       	lsr	r24
    249c:	86 95       	lsr	r24
    249e:	87 95       	ror	r24
    24a0:	88 27       	eor	r24, r24
    24a2:	87 95       	ror	r24
    24a4:	99 81       	ldd	r25, Y+1	; 0x01
    24a6:	9f 77       	andi	r25, 0x7F	; 127
    24a8:	89 2b       	or	r24, r25
    24aa:	89 83       	std	Y+1, r24	; 0x01
		/* Write data to Data 0 address */
		rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
    24ac:	88 e5       	ldi	r24, 0x58	; 88
    24ae:	b6 01       	movw	r22, r12
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	98 01       	movw	r18, r16
    24b6:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
				rslt = map_feature_interrupt(int_config, dev);
				if (rslt == BMI160_OK) {
					/* configure the data source
					 * for low-g interrupt*/
					rslt = config_low_g_data_src(low_g_int, dev);
					if (rslt == BMI160_OK)
    24ba:	88 23       	and	r24, r24
    24bc:	09 f0       	breq	.+2      	; 0x24c0 <bmi160_set_int_config+0x942>
    24be:	4e c1       	rjmp	.+668    	; 0x275c <bmi160_set_int_config+0xbde>
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int,  const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t temp = 0;
	uint8_t data_array[3] = {0, 0, 0};
    24c0:	de 01       	movw	r26, r28
    24c2:	14 96       	adiw	r26, 0x04	; 4
    24c4:	e3 e8       	ldi	r30, 0x83	; 131
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	83 e0       	ldi	r24, 0x03	; 3
    24ca:	01 90       	ld	r0, Z+
    24cc:	0d 92       	st	X+, r0
    24ce:	81 50       	subi	r24, 0x01	; 1
    24d0:	e1 f7       	brne	.-8      	; 0x24ca <bmi160_set_int_config+0x94c>

	/* Configuring INT_LOWHIGH register for low-g interrupt */
	rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
    24d2:	8c e5       	ldi	r24, 0x5C	; 92
    24d4:	be 01       	movw	r22, r28
    24d6:	6a 5f       	subi	r22, 0xFA	; 250
    24d8:	7f 4f       	sbci	r23, 0xFF	; 255
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	98 01       	movw	r18, r16
    24e0:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>

	if (rslt == BMI160_OK) {
    24e4:	88 23       	and	r24, r24
    24e6:	09 f0       	breq	.+2      	; 0x24ea <bmi160_set_int_config+0x96c>
    24e8:	39 c1       	rjmp	.+626    	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
		/* Adding low-g hysteresis */
		data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
    24ea:	f7 01       	movw	r30, r14
    24ec:	86 81       	ldd	r24, Z+6	; 0x06
    24ee:	38 2f       	mov	r19, r24
    24f0:	33 70       	andi	r19, 0x03	; 3
    24f2:	2e 81       	ldd	r18, Y+6	; 0x06
    24f4:	28 7f       	andi	r18, 0xF8	; 248
		temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
		/* Adding low-mode */
		data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
    24f6:	23 2b       	or	r18, r19
    24f8:	86 95       	lsr	r24
    24fa:	86 95       	lsr	r24
    24fc:	81 70       	andi	r24, 0x01	; 1
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	84 70       	andi	r24, 0x04	; 4
    250a:	28 2b       	or	r18, r24
    250c:	2e 83       	std	Y+6, r18	; 0x06

		/* Adding low-g threshold */
		data_array[1] = low_g_int->low_thres;
    250e:	85 81       	ldd	r24, Z+5	; 0x05
    2510:	8d 83       	std	Y+5, r24	; 0x05
		/* Adding low-g interrupt delay */
		data_array[0] = low_g_int->low_dur;
    2512:	84 81       	ldd	r24, Z+4	; 0x04
    2514:	8c 83       	std	Y+4, r24	; 0x04
		/* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
		rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
    2516:	8a e5       	ldi	r24, 0x5A	; 90
    2518:	be 01       	movw	r22, r28
    251a:	6c 5f       	subi	r22, 0xFC	; 252
    251c:	7f 4f       	sbci	r23, 0xFF	; 255
    251e:	9b c0       	rjmp	.+310    	; 0x2656 <bmi160_set_int_config+0xad8>
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    2520:	cb 01       	movw	r24, r22
    2522:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if ((rslt != BMI160_OK) || (int_config == NULL)) {
    2526:	88 23       	and	r24, r24
    2528:	09 f0       	breq	.+2      	; 0x252c <bmi160_set_int_config+0x9ae>
    252a:	17 c1       	rjmp	.+558    	; 0x275a <bmi160_set_int_config+0xbdc>
    252c:	e1 14       	cp	r14, r1
    252e:	f1 04       	cpc	r15, r1
    2530:	09 f4       	brne	.+2      	; 0x2534 <bmi160_set_int_config+0x9b6>
    2532:	13 c1       	rjmp	.+550    	; 0x275a <bmi160_set_int_config+0xbdc>
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    2534:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Enable low-g interrupt in Int Enable 1 register */
	rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
    2536:	81 e5       	ldi	r24, 0x51	; 81
    2538:	6e 01       	movw	r12, r28
    253a:	08 94       	sec
    253c:	c1 1c       	adc	r12, r1
    253e:	d1 1c       	adc	r13, r1
    2540:	b6 01       	movw	r22, r12
    2542:	41 e0       	ldi	r20, 0x01	; 1
    2544:	50 e0       	ldi	r21, 0x00	; 0
    2546:	98 01       	movw	r18, r16
    2548:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>

	if (rslt == BMI160_OK) {
    254c:	88 23       	and	r24, r24
    254e:	09 f0       	breq	.+2      	; 0x2552 <bmi160_set_int_config+0x9d4>
    2550:	05 c1       	rjmp	.+522    	; 0x275c <bmi160_set_int_config+0xbde>

		/* Adding high-g X-axis */
		temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
		data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
    2552:	f7 01       	movw	r30, r14
    2554:	24 81       	ldd	r18, Z+4	; 0x04
    2556:	82 2f       	mov	r24, r18
    2558:	81 70       	andi	r24, 0x01	; 1
    255a:	49 81       	ldd	r20, Y+1	; 0x01
    255c:	4c 7f       	andi	r20, 0xFC	; 252

		/* Adding high-g Y-axis */
		temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
		data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
    255e:	48 2b       	or	r20, r24
    2560:	26 95       	lsr	r18
    2562:	82 2f       	mov	r24, r18
    2564:	81 70       	andi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	88 0f       	add	r24, r24
    256a:	99 1f       	adc	r25, r25
    256c:	82 70       	andi	r24, 0x02	; 2
    256e:	48 2b       	or	r20, r24

		/* Adding high-g Z-axis */
		temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
		data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
    2570:	4b 7f       	andi	r20, 0xFB	; 251
    2572:	26 95       	lsr	r18
    2574:	21 70       	andi	r18, 0x01	; 1
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	22 0f       	add	r18, r18
    257a:	33 1f       	adc	r19, r19
    257c:	22 0f       	add	r18, r18
    257e:	33 1f       	adc	r19, r19
    2580:	24 70       	andi	r18, 0x04	; 4
    2582:	42 2b       	or	r20, r18
    2584:	49 83       	std	Y+1, r20	; 0x01

		/* write data to Int Enable 0 register */
		rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
    2586:	81 e5       	ldi	r24, 0x51	; 81
    2588:	b6 01       	movw	r22, r12
    258a:	41 e0       	ldi	r20, 0x01	; 1
    258c:	50 e0       	ldi	r21, 0x00	; 0
    258e:	98 01       	movw	r18, r16
    2590:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
		/* updating the interrupt structure to local structure */
		struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);

		/* Enable the high-g interrupt */
		rslt = enable_high_g_int(high_g_int_cfg, dev);
		if (rslt == BMI160_OK) {
    2594:	88 23       	and	r24, r24
    2596:	09 f0       	breq	.+2      	; 0x259a <bmi160_set_int_config+0xa1c>
    2598:	e1 c0       	rjmp	.+450    	; 0x275c <bmi160_set_int_config+0xbde>
			/* Configure Interrupt pins */
			rslt = set_intr_pin_config(int_config, dev);
    259a:	c7 01       	movw	r24, r14
    259c:	b8 01       	movw	r22, r16
    259e:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_intr_pin_config>
			if (rslt == BMI160_OK) {
    25a2:	88 23       	and	r24, r24
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <bmi160_set_int_config+0xa2a>
    25a6:	da c0       	rjmp	.+436    	; 0x275c <bmi160_set_int_config+0xbde>
				/* Map INT pin to high-g interrupt */
				rslt = map_feature_interrupt(int_config, dev);
    25a8:	c7 01       	movw	r24, r14
    25aa:	b8 01       	movw	r22, r16
    25ac:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <map_feature_interrupt>
				if (rslt == BMI160_OK) {
    25b0:	88 23       	and	r24, r24
    25b2:	09 f0       	breq	.+2      	; 0x25b6 <bmi160_set_int_config+0xa38>
    25b4:	d3 c0       	rjmp	.+422    	; 0x275c <bmi160_set_int_config+0xbde>
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
					const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    25b6:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Configure Int data 0 register to add source of interrupt */
	rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
    25b8:	88 e5       	ldi	r24, 0x58	; 88
    25ba:	6e 01       	movw	r12, r28
    25bc:	08 94       	sec
    25be:	c1 1c       	adc	r12, r1
    25c0:	d1 1c       	adc	r13, r1
    25c2:	b6 01       	movw	r22, r12
    25c4:	41 e0       	ldi	r20, 0x01	; 1
    25c6:	50 e0       	ldi	r21, 0x00	; 0
    25c8:	98 01       	movw	r18, r16
    25ca:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    25ce:	88 23       	and	r24, r24
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <bmi160_set_int_config+0xa56>
    25d2:	c4 c0       	rjmp	.+392    	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
		data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
    25d4:	f7 01       	movw	r30, r14
    25d6:	84 81       	ldd	r24, Z+4	; 0x04
    25d8:	82 95       	swap	r24
    25da:	86 95       	lsr	r24
    25dc:	87 70       	andi	r24, 0x07	; 7
    25de:	87 95       	ror	r24
    25e0:	88 27       	eor	r24, r24
    25e2:	87 95       	ror	r24
    25e4:	99 81       	ldd	r25, Y+1	; 0x01
    25e6:	9f 77       	andi	r25, 0x7F	; 127
    25e8:	89 2b       	or	r24, r25
    25ea:	89 83       	std	Y+1, r24	; 0x01
		/* Write data to Data 0 address */
		rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
    25ec:	88 e5       	ldi	r24, 0x58	; 88
    25ee:	b6 01       	movw	r22, r12
    25f0:	41 e0       	ldi	r20, 0x01	; 1
    25f2:	50 e0       	ldi	r21, 0x00	; 0
    25f4:	98 01       	movw	r18, r16
    25f6:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
				rslt = map_feature_interrupt(int_config, dev);
				if (rslt == BMI160_OK) {
					/* configure the data source
					* for high-g interrupt*/
					rslt = config_high_g_data_src(high_g_int_cfg, dev);
					if (rslt == BMI160_OK)
    25fa:	88 23       	and	r24, r24
    25fc:	09 f0       	breq	.+2      	; 0x2600 <bmi160_set_int_config+0xa82>
    25fe:	ae c0       	rjmp	.+348    	; 0x275c <bmi160_set_int_config+0xbde>
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
					const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t temp = 0;
	uint8_t data_array[3] = {0, 0, 0};
    2600:	de 01       	movw	r26, r28
    2602:	14 96       	adiw	r26, 0x04	; 4
    2604:	e6 e8       	ldi	r30, 0x86	; 134
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	01 90       	ld	r0, Z+
    260c:	0d 92       	st	X+, r0
    260e:	81 50       	subi	r24, 0x01	; 1
    2610:	e1 f7       	brne	.-8      	; 0x260a <bmi160_set_int_config+0xa8c>

	rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
    2612:	64 e0       	ldi	r22, 0x04	; 4
    2614:	c6 2e       	mov	r12, r22
    2616:	d1 2c       	mov	r13, r1
    2618:	cc 0e       	add	r12, r28
    261a:	dd 1e       	adc	r13, r29
    261c:	8c e5       	ldi	r24, 0x5C	; 92
    261e:	b6 01       	movw	r22, r12
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	50 e0       	ldi	r21, 0x00	; 0
    2624:	98 01       	movw	r18, r16
    2626:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    262a:	88 23       	and	r24, r24
    262c:	09 f0       	breq	.+2      	; 0x2630 <bmi160_set_int_config+0xab2>
    262e:	96 c0       	rjmp	.+300    	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
		/* Adding high-g hysteresis */
		data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
    2630:	f7 01       	movw	r30, r14
    2632:	84 81       	ldd	r24, Z+4	; 0x04
    2634:	86 95       	lsr	r24
    2636:	86 95       	lsr	r24
    2638:	86 95       	lsr	r24
    263a:	82 95       	swap	r24
    263c:	88 0f       	add	r24, r24
    263e:	88 0f       	add	r24, r24
    2640:	80 7c       	andi	r24, 0xC0	; 192
    2642:	9c 81       	ldd	r25, Y+4	; 0x04
    2644:	9f 73       	andi	r25, 0x3F	; 63
    2646:	89 2b       	or	r24, r25
    2648:	8c 83       	std	Y+4, r24	; 0x04
		/* Adding high-g duration */
		data_array[1] = high_g_int_cfg->high_dur;
    264a:	86 81       	ldd	r24, Z+6	; 0x06
    264c:	8d 83       	std	Y+5, r24	; 0x05
		/* Adding high-g threshold */
		data_array[2] = high_g_int_cfg->high_thres;
    264e:	85 81       	ldd	r24, Z+5	; 0x05
    2650:	8e 83       	std	Y+6, r24	; 0x06
		rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
    2652:	8c e5       	ldi	r24, 0x5C	; 92
    2654:	b6 01       	movw	r22, r12
    2656:	43 e0       	ldi	r20, 0x03	; 3
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	10 cc       	rjmp	.-2016   	; 0x1e7c <bmi160_set_int_config+0x2fe>
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt;

	/* Null-pointer check */
	rslt = null_ptr_check(dev);
    265c:	cb 01       	movw	r24, r22
    265e:	0e 94 a9 08 	call	0x1152	; 0x1152 <null_ptr_check>

	if ((rslt != BMI160_OK) || (int_config == NULL)) {
    2662:	88 23       	and	r24, r24
    2664:	09 f0       	breq	.+2      	; 0x2668 <bmi160_set_int_config+0xaea>
    2666:	79 c0       	rjmp	.+242    	; 0x275a <bmi160_set_int_config+0xbdc>
    2668:	e1 14       	cp	r14, r1
    266a:	f1 04       	cpc	r15, r1
    266c:	09 f4       	brne	.+2      	; 0x2670 <bmi160_set_int_config+0xaf2>
    266e:	75 c0       	rjmp	.+234    	; 0x275a <bmi160_set_int_config+0xbdc>
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    2670:	19 82       	std	Y+1, r1	; 0x01
	uint8_t temp = 0;

	/* Enable data ready interrupt in Int Enable 1 register */
	rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
    2672:	81 e5       	ldi	r24, 0x51	; 81
    2674:	6e 01       	movw	r12, r28
    2676:	08 94       	sec
    2678:	c1 1c       	adc	r12, r1
    267a:	d1 1c       	adc	r13, r1
    267c:	b6 01       	movw	r22, r12
    267e:	41 e0       	ldi	r20, 0x01	; 1
    2680:	50 e0       	ldi	r21, 0x00	; 0
    2682:	98 01       	movw	r18, r16
    2684:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>
	if (rslt == BMI160_OK) {
    2688:	88 23       	and	r24, r24
    268a:	09 f0       	breq	.+2      	; 0x268e <bmi160_set_int_config+0xb10>
    268c:	67 c0       	rjmp	.+206    	; 0x275c <bmi160_set_int_config+0xbde>
		temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
		data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	80 61       	ori	r24, 0x10	; 16
    2692:	4a c0       	rjmp	.+148    	; 0x2728 <bmi160_set_int_config+0xbaa>
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt = BMI160_OK;

	/* Null-pointer check */
	if ((dev == NULL) || (dev->delay_ms == NULL)) {
    2694:	61 15       	cp	r22, r1
    2696:	71 05       	cpc	r23, r1
    2698:	09 f4       	brne	.+2      	; 0x269c <bmi160_set_int_config+0xb1e>
    269a:	5f c0       	rjmp	.+190    	; 0x275a <bmi160_set_int_config+0xbdc>
    269c:	fb 01       	movw	r30, r22
    269e:	86 8d       	ldd	r24, Z+30	; 0x1e
    26a0:	97 8d       	ldd	r25, Z+31	; 0x1f
    26a2:	89 2b       	or	r24, r25
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <bmi160_set_int_config+0xb2a>
    26a6:	59 c0       	rjmp	.+178    	; 0x275a <bmi160_set_int_config+0xbdc>
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    26a8:	19 82       	std	Y+1, r1	; 0x01

	rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
    26aa:	81 e5       	ldi	r24, 0x51	; 81
    26ac:	6e 01       	movw	r12, r28
    26ae:	08 94       	sec
    26b0:	c1 1c       	adc	r12, r1
    26b2:	d1 1c       	adc	r13, r1
    26b4:	b6 01       	movw	r22, r12
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	98 01       	movw	r18, r16
    26bc:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>

	if (rslt == BMI160_OK) {
    26c0:	88 23       	and	r24, r24
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <bmi160_set_int_config+0xb48>
    26c4:	4b c0       	rjmp	.+150    	; 0x275c <bmi160_set_int_config+0xbde>
		data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
    26c6:	f7 01       	movw	r30, r14
    26c8:	87 81       	ldd	r24, Z+7	; 0x07
    26ca:	81 70       	andi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	55 e0       	ldi	r21, 0x05	; 5
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	5a 95       	dec	r21
    26d6:	e1 f7       	brne	.-8      	; 0x26d0 <bmi160_set_int_config+0xb52>
    26d8:	80 72       	andi	r24, 0x20	; 32
    26da:	29 81       	ldd	r18, Y+1	; 0x01
    26dc:	2f 7d       	andi	r18, 0xDF	; 223
    26de:	23 c0       	rjmp	.+70     	; 0x2726 <bmi160_set_int_config+0xba8>
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt = BMI160_OK;

	if ((dev == NULL) || (dev->delay_ms == NULL)) {
    26e0:	61 15       	cp	r22, r1
    26e2:	71 05       	cpc	r23, r1
    26e4:	d1 f1       	breq	.+116    	; 0x275a <bmi160_set_int_config+0xbdc>
    26e6:	fb 01       	movw	r30, r22
    26e8:	86 8d       	ldd	r24, Z+30	; 0x1e
    26ea:	97 8d       	ldd	r25, Z+31	; 0x1f
    26ec:	89 2b       	or	r24, r25
    26ee:	a9 f1       	breq	.+106    	; 0x275a <bmi160_set_int_config+0xbdc>
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
	int8_t rslt;
	uint8_t data = 0;
    26f0:	19 82       	std	Y+1, r1	; 0x01

	rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
    26f2:	81 e5       	ldi	r24, 0x51	; 81
    26f4:	6e 01       	movw	r12, r28
    26f6:	08 94       	sec
    26f8:	c1 1c       	adc	r12, r1
    26fa:	d1 1c       	adc	r13, r1
    26fc:	b6 01       	movw	r22, r12
    26fe:	41 e0       	ldi	r20, 0x01	; 1
    2700:	50 e0       	ldi	r21, 0x00	; 0
    2702:	98 01       	movw	r18, r16
    2704:	0e 94 41 00 	call	0x82	; 0x82 <bmi160_get_regs>

	if (rslt == BMI160_OK) {
    2708:	88 23       	and	r24, r24
    270a:	41 f5       	brne	.+80     	; 0x275c <bmi160_set_int_config+0xbde>
		data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_WTM_int_en);
    270c:	f7 01       	movw	r30, r14
    270e:	87 81       	ldd	r24, Z+7	; 0x07
    2710:	86 95       	lsr	r24
    2712:	81 70       	andi	r24, 0x01	; 1
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	46 e0       	ldi	r20, 0x06	; 6
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	4a 95       	dec	r20
    271e:	e1 f7       	brne	.-8      	; 0x2718 <bmi160_set_int_config+0xb9a>
    2720:	80 74       	andi	r24, 0x40	; 64
    2722:	29 81       	ldd	r18, Y+1	; 0x01
    2724:	2f 7b       	andi	r18, 0xBF	; 191
    2726:	82 2b       	or	r24, r18
    2728:	89 83       	std	Y+1, r24	; 0x01
		/* Writing data to INT ENABLE 1 Address */
		rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
    272a:	81 e5       	ldi	r24, 0x51	; 81
    272c:	b6 01       	movw	r22, r12
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	50 e0       	ldi	r21, 0x00	; 0
    2732:	98 01       	movw	r18, r16
    2734:	0e 94 6c 00 	call	0xd8	; 0xd8 <bmi160_set_regs>
	if ((dev == NULL) || (dev->delay_ms == NULL)) {
		rslt = BMI160_E_NULL_PTR;
	} else {
		/* Enable fifo-watermark interrupt in Int Enable 1 register */
		rslt = enable_fifo_wtm_int(int_config, dev);
		if (rslt == BMI160_OK) {
    2738:	88 23       	and	r24, r24
    273a:	81 f4       	brne	.+32     	; 0x275c <bmi160_set_int_config+0xbde>
			/* Configure Interrupt pins */
			rslt = set_intr_pin_config(int_config, dev);
    273c:	c7 01       	movw	r24, r14
    273e:	b8 01       	movw	r22, r16
    2740:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_intr_pin_config>
			if (rslt == BMI160_OK)
    2744:	88 23       	and	r24, r24
    2746:	51 f4       	brne	.+20     	; 0x275c <bmi160_set_int_config+0xbde>
				rslt = map_hardware_interrupt(int_config, dev);
    2748:	c7 01       	movw	r24, r14
    274a:	b8 01       	movw	r22, r16
    274c:	0e 94 75 0d 	call	0x1aea	; 0x1aea <map_hardware_interrupt>
    2750:	05 c0       	rjmp	.+10     	; 0x275c <bmi160_set_int_config+0xbde>
		rslt = set_fifo_watermark_int(int_config, dev);
		break;
	case BMI160_FIFO_TAG_INT_PIN:
		/* Fifo tagging feature support */
		/* Configure Interrupt pins */
		rslt = set_intr_pin_config(int_config, dev);
    2752:	c7 01       	movw	r24, r14
    2754:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <set_intr_pin_config>
    2758:	01 c0       	rjmp	.+2      	; 0x275c <bmi160_set_int_config+0xbde>
    275a:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	default:
		break;
	}
	return rslt;
}
    275c:	26 96       	adiw	r28, 0x06	; 6
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	df 90       	pop	r13
    2776:	cf 90       	pop	r12
    2778:	08 95       	ret

0000277a <unpack_accel_data>:
 *  @brief This API is used to parse the accelerometer data from the
 *  FIFO data and store it in the instance of the structure bmi160_sensor_data.
 */
static void unpack_accel_data(struct bmi160_sensor_data *accel_data, uint16_t data_start_index,
				const struct bmi160_dev *dev)
{
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	8c 01       	movw	r16, r24
    2780:	cb 01       	movw	r24, r22
    2782:	fa 01       	movw	r30, r20
	uint16_t data_lsb;
	uint16_t data_msb;

	/* Accel raw x data */
	data_lsb = dev->fifo->data[data_start_index++];
    2784:	00 8c       	ldd	r0, Z+24	; 0x18
    2786:	f1 8d       	ldd	r31, Z+25	; 0x19
    2788:	e0 2d       	mov	r30, r0
    278a:	a0 81       	ld	r26, Z
    278c:	b1 81       	ldd	r27, Z+1	; 0x01
    278e:	fb 01       	movw	r30, r22
    2790:	31 96       	adiw	r30, 0x01	; 1
	data_msb = dev->fifo->data[data_start_index++];
    2792:	bf 01       	movw	r22, r30
    2794:	6f 5f       	subi	r22, 0xFF	; 255
    2796:	7f 4f       	sbci	r23, 0xFF	; 255
	accel_data->x = (int16_t)((data_msb << 8) | data_lsb);
    2798:	ea 0f       	add	r30, r26
    279a:	fb 1f       	adc	r31, r27
    279c:	30 81       	ld	r19, Z
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	8a 0f       	add	r24, r26
    27a2:	9b 1f       	adc	r25, r27
    27a4:	fc 01       	movw	r30, r24
    27a6:	80 81       	ld	r24, Z
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	28 2b       	or	r18, r24
    27ac:	39 2b       	or	r19, r25
    27ae:	f8 01       	movw	r30, r16
    27b0:	31 83       	std	Z+1, r19	; 0x01
    27b2:	20 83       	st	Z, r18

	/* Accel raw y data */
	data_lsb = dev->fifo->data[data_start_index++];
    27b4:	ab 01       	movw	r20, r22
    27b6:	4f 5f       	subi	r20, 0xFF	; 255
    27b8:	5f 4f       	sbci	r21, 0xFF	; 255
	data_msb = dev->fifo->data[data_start_index++];
	accel_data->y = (int16_t)((data_msb << 8) | data_lsb);
    27ba:	fd 01       	movw	r30, r26
    27bc:	e4 0f       	add	r30, r20
    27be:	f5 1f       	adc	r31, r21
    27c0:	30 81       	ld	r19, Z
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	6a 0f       	add	r22, r26
    27c6:	7b 1f       	adc	r23, r27
    27c8:	fb 01       	movw	r30, r22
    27ca:	80 81       	ld	r24, Z
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	28 2b       	or	r18, r24
    27d0:	39 2b       	or	r19, r25
    27d2:	f8 01       	movw	r30, r16
    27d4:	33 83       	std	Z+3, r19	; 0x03
    27d6:	22 83       	std	Z+2, r18	; 0x02
	data_msb = dev->fifo->data[data_start_index++];
	accel_data->x = (int16_t)((data_msb << 8) | data_lsb);

	/* Accel raw y data */
	data_lsb = dev->fifo->data[data_start_index++];
	data_msb = dev->fifo->data[data_start_index++];
    27d8:	4f 5f       	subi	r20, 0xFF	; 255
    27da:	5f 4f       	sbci	r21, 0xFF	; 255
	accel_data->y = (int16_t)((data_msb << 8) | data_lsb);

	/* Accel raw z data */
	data_lsb = dev->fifo->data[data_start_index++];
	data_msb = dev->fifo->data[data_start_index++];
	accel_data->z = (int16_t)((data_msb << 8) | data_lsb);
    27dc:	a4 0f       	add	r26, r20
    27de:	b5 1f       	adc	r27, r21
    27e0:	11 96       	adiw	r26, 0x01	; 1
    27e2:	9c 91       	ld	r25, X
    27e4:	11 97       	sbiw	r26, 0x01	; 1
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	2c 91       	ld	r18, X
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	82 2b       	or	r24, r18
    27ee:	93 2b       	or	r25, r19
    27f0:	95 83       	std	Z+5, r25	; 0x05
    27f2:	84 83       	std	Z+4, r24	; 0x04

}
    27f4:	1f 91       	pop	r17
    27f6:	0f 91       	pop	r16
    27f8:	08 95       	ret

000027fa <unpack_accel_frame>:
 *  It updates the idx value which is used to store the index of
 *  the current data byte which is parsed.
 */
static void unpack_accel_frame(struct bmi160_sensor_data *acc, uint16_t *idx, uint8_t *acc_idx, uint8_t frame_info,
				const struct bmi160_dev *dev)
{
    27fa:	cf 92       	push	r12
    27fc:	df 92       	push	r13
    27fe:	ef 92       	push	r14
    2800:	ff 92       	push	r15
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	6c 01       	movw	r12, r24
    280c:	eb 01       	movw	r28, r22
    280e:	7a 01       	movw	r14, r20
    2810:	d8 01       	movw	r26, r16
	switch (frame_info) {
    2812:	2c 38       	cpi	r18, 0x8C	; 140
    2814:	09 f4       	brne	.+2      	; 0x2818 <unpack_accel_frame+0x1e>
    2816:	4c c0       	rjmp	.+152    	; 0x28b0 <unpack_accel_frame+0xb6>
    2818:	2d 38       	cpi	r18, 0x8D	; 141
    281a:	a8 f4       	brcc	.+42     	; 0x2846 <unpack_accel_frame+0x4c>
    281c:	20 36       	cpi	r18, 0x60	; 96
    281e:	09 f4       	brne	.+2      	; 0x2822 <unpack_accel_frame+0x28>
    2820:	65 c0       	rjmp	.+202    	; 0x28ec <unpack_accel_frame+0xf2>
    2822:	21 36       	cpi	r18, 0x61	; 97
    2824:	38 f4       	brcc	.+14     	; 0x2834 <unpack_accel_frame+0x3a>
    2826:	20 32       	cpi	r18, 0x20	; 32
    2828:	09 f4       	brne	.+2      	; 0x282c <unpack_accel_frame+0x32>
    282a:	a5 c0       	rjmp	.+330    	; 0x2976 <unpack_accel_frame+0x17c>
    282c:	20 34       	cpi	r18, 0x40	; 64
    282e:	09 f0       	breq	.+2      	; 0x2832 <unpack_accel_frame+0x38>
    2830:	af c0       	rjmp	.+350    	; 0x2990 <unpack_accel_frame+0x196>
    2832:	21 c0       	rjmp	.+66     	; 0x2876 <unpack_accel_frame+0x7c>
    2834:	24 38       	cpi	r18, 0x84	; 132
    2836:	f9 f0       	breq	.+62     	; 0x2876 <unpack_accel_frame+0x7c>
    2838:	28 38       	cpi	r18, 0x88	; 136
    283a:	09 f4       	brne	.+2      	; 0x283e <unpack_accel_frame+0x44>
    283c:	a0 c0       	rjmp	.+320    	; 0x297e <unpack_accel_frame+0x184>
    283e:	20 38       	cpi	r18, 0x80	; 128
    2840:	09 f0       	breq	.+2      	; 0x2844 <unpack_accel_frame+0x4a>
    2842:	a6 c0       	rjmp	.+332    	; 0x2990 <unpack_accel_frame+0x196>
    2844:	9c c0       	rjmp	.+312    	; 0x297e <unpack_accel_frame+0x184>
    2846:	2c 39       	cpi	r18, 0x9C	; 156
    2848:	09 f4       	brne	.+2      	; 0x284c <unpack_accel_frame+0x52>
    284a:	6e c0       	rjmp	.+220    	; 0x2928 <unpack_accel_frame+0x12e>
    284c:	2d 39       	cpi	r18, 0x9D	; 157
    284e:	50 f4       	brcc	.+20     	; 0x2864 <unpack_accel_frame+0x6a>
    2850:	24 39       	cpi	r18, 0x94	; 148
    2852:	09 f4       	brne	.+2      	; 0x2856 <unpack_accel_frame+0x5c>
    2854:	4b c0       	rjmp	.+150    	; 0x28ec <unpack_accel_frame+0xf2>
    2856:	28 39       	cpi	r18, 0x98	; 152
    2858:	09 f4       	brne	.+2      	; 0x285c <unpack_accel_frame+0x62>
    285a:	95 c0       	rjmp	.+298    	; 0x2986 <unpack_accel_frame+0x18c>
    285c:	20 39       	cpi	r18, 0x90	; 144
    285e:	09 f0       	breq	.+2      	; 0x2862 <unpack_accel_frame+0x68>
    2860:	97 c0       	rjmp	.+302    	; 0x2990 <unpack_accel_frame+0x196>
    2862:	89 c0       	rjmp	.+274    	; 0x2976 <unpack_accel_frame+0x17c>
    2864:	20 3c       	cpi	r18, 0xC0	; 192
    2866:	21 f1       	breq	.+72     	; 0x28b0 <unpack_accel_frame+0xb6>
    2868:	20 3e       	cpi	r18, 0xE0	; 224
    286a:	09 f4       	brne	.+2      	; 0x286e <unpack_accel_frame+0x74>
    286c:	5d c0       	rjmp	.+186    	; 0x2928 <unpack_accel_frame+0x12e>
    286e:	20 3a       	cpi	r18, 0xA0	; 160
    2870:	09 f0       	breq	.+2      	; 0x2874 <unpack_accel_frame+0x7a>
    2872:	8e c0       	rjmp	.+284    	; 0x2990 <unpack_accel_frame+0x196>
    2874:	88 c0       	rjmp	.+272    	; 0x2986 <unpack_accel_frame+0x18c>
	case BMI160_FIFO_HEAD_A:
	case BMI160_FIFO_A_ENABLE:
		/*Partial read, then skip the data*/
		if ((*idx + BMI160_FIFO_A_LENGTH) > dev->fifo->length) {
    2876:	68 81       	ld	r22, Y
    2878:	79 81       	ldd	r23, Y+1	; 0x01
    287a:	58 96       	adiw	r26, 0x18	; 24
    287c:	ed 91       	ld	r30, X+
    287e:	fc 91       	ld	r31, X
    2880:	59 97       	sbiw	r26, 0x19	; 25
    2882:	22 81       	ldd	r18, Z+2	; 0x02
    2884:	33 81       	ldd	r19, Z+3	; 0x03
    2886:	cb 01       	movw	r24, r22
    2888:	06 96       	adiw	r24, 0x06	; 6
    288a:	28 17       	cp	r18, r24
    288c:	39 07       	cpc	r19, r25
    288e:	08 f4       	brcc	.+2      	; 0x2892 <unpack_accel_frame+0x98>
    2890:	58 c0       	rjmp	.+176    	; 0x2942 <unpack_accel_frame+0x148>
			/*Update the data index as complete*/
			*idx = dev->fifo->length;
			break;
		}
		/*Unpack the data array into the structure instance "acc" */
		unpack_accel_data(&acc[*acc_idx], *idx, dev);
    2892:	f7 01       	movw	r30, r14
    2894:	80 81       	ld	r24, Z
    2896:	2a e0       	ldi	r18, 0x0A	; 10
    2898:	82 9f       	mul	r24, r18
    289a:	c0 01       	movw	r24, r0
    289c:	11 24       	eor	r1, r1
    289e:	8c 0d       	add	r24, r12
    28a0:	9d 1d       	adc	r25, r13
    28a2:	ad 01       	movw	r20, r26
    28a4:	0e 94 bd 13 	call	0x277a	; 0x277a <unpack_accel_data>
		/*Move the data index*/
		*idx = *idx + BMI160_FIFO_A_LENGTH;
    28a8:	88 81       	ld	r24, Y
    28aa:	99 81       	ldd	r25, Y+1	; 0x01
    28ac:	06 96       	adiw	r24, 0x06	; 6
    28ae:	5c c0       	rjmp	.+184    	; 0x2968 <unpack_accel_frame+0x16e>
		(*acc_idx)++;
		break;
	case BMI160_FIFO_HEAD_G_A:
	case BMI160_FIFO_G_A_ENABLE:
		/*Partial read, then skip the data*/
		if ((*idx + BMI160_FIFO_GA_LENGTH) > dev->fifo->length) {
    28b0:	68 81       	ld	r22, Y
    28b2:	79 81       	ldd	r23, Y+1	; 0x01
    28b4:	58 96       	adiw	r26, 0x18	; 24
    28b6:	ed 91       	ld	r30, X+
    28b8:	fc 91       	ld	r31, X
    28ba:	59 97       	sbiw	r26, 0x19	; 25
    28bc:	22 81       	ldd	r18, Z+2	; 0x02
    28be:	33 81       	ldd	r19, Z+3	; 0x03
    28c0:	cb 01       	movw	r24, r22
    28c2:	0c 96       	adiw	r24, 0x0c	; 12
    28c4:	28 17       	cp	r18, r24
    28c6:	39 07       	cpc	r19, r25
    28c8:	e0 f1       	brcs	.+120    	; 0x2942 <unpack_accel_frame+0x148>
			/*Update the data index as complete*/
			*idx = dev->fifo->length;
			break;
		}
		/*Unpack the data array into structure instance "acc"*/
		unpack_accel_data(&acc[*acc_idx], *idx + BMI160_FIFO_G_LENGTH, dev);
    28ca:	f7 01       	movw	r30, r14
    28cc:	80 81       	ld	r24, Z
    28ce:	2a e0       	ldi	r18, 0x0A	; 10
    28d0:	82 9f       	mul	r24, r18
    28d2:	c0 01       	movw	r24, r0
    28d4:	11 24       	eor	r1, r1
    28d6:	6a 5f       	subi	r22, 0xFA	; 250
    28d8:	7f 4f       	sbci	r23, 0xFF	; 255
    28da:	8c 0d       	add	r24, r12
    28dc:	9d 1d       	adc	r25, r13
    28de:	ad 01       	movw	r20, r26
    28e0:	0e 94 bd 13 	call	0x277a	; 0x277a <unpack_accel_data>
		/*Move the data index*/
		*idx = *idx + BMI160_FIFO_GA_LENGTH;
    28e4:	88 81       	ld	r24, Y
    28e6:	99 81       	ldd	r25, Y+1	; 0x01
    28e8:	0c 96       	adiw	r24, 0x0c	; 12
    28ea:	3e c0       	rjmp	.+124    	; 0x2968 <unpack_accel_frame+0x16e>
		(*acc_idx)++;
		break;
	case BMI160_FIFO_HEAD_M_A:
	case BMI160_FIFO_M_A_ENABLE:
		/*Partial read, then skip the data*/
		if ((*idx + BMI160_FIFO_MA_LENGTH) > dev->fifo->length) {
    28ec:	68 81       	ld	r22, Y
    28ee:	79 81       	ldd	r23, Y+1	; 0x01
    28f0:	58 96       	adiw	r26, 0x18	; 24
    28f2:	ed 91       	ld	r30, X+
    28f4:	fc 91       	ld	r31, X
    28f6:	59 97       	sbiw	r26, 0x19	; 25
    28f8:	22 81       	ldd	r18, Z+2	; 0x02
    28fa:	33 81       	ldd	r19, Z+3	; 0x03
    28fc:	cb 01       	movw	r24, r22
    28fe:	0e 96       	adiw	r24, 0x0e	; 14
    2900:	28 17       	cp	r18, r24
    2902:	39 07       	cpc	r19, r25
    2904:	f0 f0       	brcs	.+60     	; 0x2942 <unpack_accel_frame+0x148>
			/*Update the data index as complete*/
			*idx = dev->fifo->length;
			break;
		}
		/*Unpack the data array into structure instance "acc"*/
		unpack_accel_data(&acc[*acc_idx], *idx + BMI160_FIFO_M_LENGTH, dev);
    2906:	f7 01       	movw	r30, r14
    2908:	80 81       	ld	r24, Z
    290a:	2a e0       	ldi	r18, 0x0A	; 10
    290c:	82 9f       	mul	r24, r18
    290e:	c0 01       	movw	r24, r0
    2910:	11 24       	eor	r1, r1
    2912:	68 5f       	subi	r22, 0xF8	; 248
    2914:	7f 4f       	sbci	r23, 0xFF	; 255
    2916:	8c 0d       	add	r24, r12
    2918:	9d 1d       	adc	r25, r13
    291a:	ad 01       	movw	r20, r26
    291c:	0e 94 bd 13 	call	0x277a	; 0x277a <unpack_accel_data>
		/*Move the data index*/
		*idx = *idx + BMI160_FIFO_MA_LENGTH;
    2920:	88 81       	ld	r24, Y
    2922:	99 81       	ldd	r25, Y+1	; 0x01
    2924:	0e 96       	adiw	r24, 0x0e	; 14
    2926:	20 c0       	rjmp	.+64     	; 0x2968 <unpack_accel_frame+0x16e>
		(*acc_idx)++;
		break;
	case BMI160_FIFO_HEAD_M_G_A:
	case BMI160_FIFO_M_G_A_ENABLE:
		/*Partial read, then skip the data*/
		if ((*idx + BMI160_FIFO_MGA_LENGTH) > dev->fifo->length) {
    2928:	68 81       	ld	r22, Y
    292a:	79 81       	ldd	r23, Y+1	; 0x01
    292c:	58 96       	adiw	r26, 0x18	; 24
    292e:	ed 91       	ld	r30, X+
    2930:	fc 91       	ld	r31, X
    2932:	59 97       	sbiw	r26, 0x19	; 25
    2934:	22 81       	ldd	r18, Z+2	; 0x02
    2936:	33 81       	ldd	r19, Z+3	; 0x03
    2938:	cb 01       	movw	r24, r22
    293a:	44 96       	adiw	r24, 0x14	; 20
    293c:	28 17       	cp	r18, r24
    293e:	39 07       	cpc	r19, r25
    2940:	18 f4       	brcc	.+6      	; 0x2948 <unpack_accel_frame+0x14e>
			/*Update the data index as complete*/
			*idx = dev->fifo->length;
    2942:	39 83       	std	Y+1, r19	; 0x01
    2944:	28 83       	st	Y, r18
    2946:	24 c0       	rjmp	.+72     	; 0x2990 <unpack_accel_frame+0x196>
			break;
		}
		/*Unpack the data array into structure instance "acc"*/
		unpack_accel_data(&acc[*acc_idx], *idx + BMI160_FIFO_MG_LENGTH, dev);
    2948:	f7 01       	movw	r30, r14
    294a:	80 81       	ld	r24, Z
    294c:	2a e0       	ldi	r18, 0x0A	; 10
    294e:	82 9f       	mul	r24, r18
    2950:	c0 01       	movw	r24, r0
    2952:	11 24       	eor	r1, r1
    2954:	62 5f       	subi	r22, 0xF2	; 242
    2956:	7f 4f       	sbci	r23, 0xFF	; 255
    2958:	8c 0d       	add	r24, r12
    295a:	9d 1d       	adc	r25, r13
    295c:	ad 01       	movw	r20, r26
    295e:	0e 94 bd 13 	call	0x277a	; 0x277a <unpack_accel_data>
		/*Move the data index*/
		*idx = *idx + BMI160_FIFO_MGA_LENGTH;
    2962:	88 81       	ld	r24, Y
    2964:	99 81       	ldd	r25, Y+1	; 0x01
    2966:	44 96       	adiw	r24, 0x14	; 20
    2968:	99 83       	std	Y+1, r25	; 0x01
    296a:	88 83       	st	Y, r24
		(*acc_idx)++;
    296c:	f7 01       	movw	r30, r14
    296e:	80 81       	ld	r24, Z
    2970:	8f 5f       	subi	r24, 0xFF	; 255
    2972:	80 83       	st	Z, r24
    2974:	0d c0       	rjmp	.+26     	; 0x2990 <unpack_accel_frame+0x196>
		break;
	case BMI160_FIFO_HEAD_M:
	case BMI160_FIFO_M_ENABLE:
		(*idx) = (*idx) + BMI160_FIFO_M_LENGTH;
    2976:	88 81       	ld	r24, Y
    2978:	99 81       	ldd	r25, Y+1	; 0x01
    297a:	08 96       	adiw	r24, 0x08	; 8
    297c:	07 c0       	rjmp	.+14     	; 0x298c <unpack_accel_frame+0x192>
		break;
	case BMI160_FIFO_HEAD_G:
	case BMI160_FIFO_G_ENABLE:
		(*idx) = (*idx) + BMI160_FIFO_G_LENGTH;
    297e:	88 81       	ld	r24, Y
    2980:	99 81       	ldd	r25, Y+1	; 0x01
    2982:	06 96       	adiw	r24, 0x06	; 6
    2984:	03 c0       	rjmp	.+6      	; 0x298c <unpack_accel_frame+0x192>
		break;
	case BMI160_FIFO_HEAD_M_G:
	case BMI160_FIFO_M_G_ENABLE:
		(*idx) = (*idx) + BMI160_FIFO_MG_LENGTH;
    2986:	88 81       	ld	r24, Y
    2988:	99 81       	ldd	r25, Y+1	; 0x01
    298a:	0e 96       	adiw	r24, 0x0e	; 14
    298c:	99 83       	std	Y+1, r25	; 0x01
    298e:	88 83       	st	Y, r24
		break;
	default:
		break;
	}

}
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	ff 90       	pop	r15
    299a:	ef 90       	pop	r14
    299c:	df 90       	pop	r13
    299e:	cf 90       	pop	r12
    29a0:	08 95       	ret

000029a2 <unpack_gyro_data>:
 *  @brief This API is used to parse the gyro data from the
 *  FIFO data and store it in the instance of the structure bmi160_sensor_data.
 */
static void unpack_gyro_data(struct bmi160_sensor_data *gyro_data, uint16_t data_start_index,
				const struct bmi160_dev *dev)
{
    29a2:	0f 93       	push	r16
    29a4:	1f 93       	push	r17
    29a6:	8c 01       	movw	r16, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	fa 01       	movw	r30, r20
	uint16_t data_lsb;
	uint16_t data_msb;

	/* Gyro raw x data */
	data_lsb = dev->fifo->data[data_start_index++];
    29ac:	00 8c       	ldd	r0, Z+24	; 0x18
    29ae:	f1 8d       	ldd	r31, Z+25	; 0x19
    29b0:	e0 2d       	mov	r30, r0
    29b2:	a0 81       	ld	r26, Z
    29b4:	b1 81       	ldd	r27, Z+1	; 0x01
    29b6:	fb 01       	movw	r30, r22
    29b8:	31 96       	adiw	r30, 0x01	; 1
	data_msb = dev->fifo->data[data_start_index++];
    29ba:	bf 01       	movw	r22, r30
    29bc:	6f 5f       	subi	r22, 0xFF	; 255
    29be:	7f 4f       	sbci	r23, 0xFF	; 255
	gyro_data->x = (int16_t)((data_msb << 8) | data_lsb);
    29c0:	ea 0f       	add	r30, r26
    29c2:	fb 1f       	adc	r31, r27
    29c4:	30 81       	ld	r19, Z
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	8a 0f       	add	r24, r26
    29ca:	9b 1f       	adc	r25, r27
    29cc:	fc 01       	movw	r30, r24
    29ce:	80 81       	ld	r24, Z
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	28 2b       	or	r18, r24
    29d4:	39 2b       	or	r19, r25
    29d6:	f8 01       	movw	r30, r16
    29d8:	31 83       	std	Z+1, r19	; 0x01
    29da:	20 83       	st	Z, r18

	/* Gyro raw y data */
	data_lsb = dev->fifo->data[data_start_index++];
    29dc:	ab 01       	movw	r20, r22
    29de:	4f 5f       	subi	r20, 0xFF	; 255
    29e0:	5f 4f       	sbci	r21, 0xFF	; 255
	data_msb = dev->fifo->data[data_start_index++];
	gyro_data->y = (int16_t)((data_msb << 8) | data_lsb);
    29e2:	fd 01       	movw	r30, r26
    29e4:	e4 0f       	add	r30, r20
    29e6:	f5 1f       	adc	r31, r21
    29e8:	30 81       	ld	r19, Z
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	6a 0f       	add	r22, r26
    29ee:	7b 1f       	adc	r23, r27
    29f0:	fb 01       	movw	r30, r22
    29f2:	80 81       	ld	r24, Z
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	28 2b       	or	r18, r24
    29f8:	39 2b       	or	r19, r25
    29fa:	f8 01       	movw	r30, r16
    29fc:	33 83       	std	Z+3, r19	; 0x03
    29fe:	22 83       	std	Z+2, r18	; 0x02
	data_msb = dev->fifo->data[data_start_index++];
	gyro_data->x = (int16_t)((data_msb << 8) | data_lsb);

	/* Gyro raw y data */
	data_lsb = dev->fifo->data[data_start_index++];
	data_msb = dev->fifo->data[data_start_index++];
    2a00:	4f 5f       	subi	r20, 0xFF	; 255
    2a02:	5f 4f       	sbci	r21, 0xFF	; 255
	gyro_data->y = (int16_t)((data_msb << 8) | data_lsb);

	/* Gyro raw z data */
	data_lsb = dev->fifo->data[data_start_index++];
	data_msb = dev->fifo->data[data_start_index++];
	gyro_data->z = (int16_t)((data_msb << 8) | data_lsb);
    2a04:	a4 0f       	add	r26, r20
    2a06:	b5 1f       	adc	r27, r21
    2a08:	11 96       	adiw	r26, 0x01	; 1
    2a0a:	9c 91       	ld	r25, X
    2a0c:	11 97       	sbiw	r26, 0x01	; 1
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	2c 91       	ld	r18, X
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	82 2b       	or	r24, r18
    2a16:	93 2b       	or	r25, r19
    2a18:	95 83       	std	Z+5, r25	; 0x05
    2a1a:	84 83       	std	Z+4, r24	; 0x04

}
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	08 95       	ret

00002a22 <unpack_gyro_frame>:
 *  It updates the idx value which is used to store the index of
 *  the current data byte which is parsed.
 */
static void unpack_gyro_frame(struct bmi160_sensor_data *gyro, uint16_t *idx, uint8_t *gyro_idx, uint8_t frame_info,
				const struct bmi160_dev *dev)
{
    2a22:	cf 92       	push	r12
    2a24:	df 92       	push	r13
    2a26:	ef 92       	push	r14
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	cf 93       	push	r28
    2a30:	df 93       	push	r29
    2a32:	6c 01       	movw	r12, r24
    2a34:	eb 01       	movw	r28, r22
    2a36:	7a 01       	movw	r14, r20
    2a38:	d8 01       	movw	r26, r16
	switch (frame_info) {
    2a3a:	2c 38       	cpi	r18, 0x8C	; 140
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <unpack_gyro_frame+0x1e>
    2a3e:	4b c0       	rjmp	.+150    	; 0x2ad6 <unpack_gyro_frame+0xb4>
    2a40:	2d 38       	cpi	r18, 0x8D	; 141
    2a42:	a8 f4       	brcc	.+42     	; 0x2a6e <unpack_gyro_frame+0x4c>
    2a44:	20 36       	cpi	r18, 0x60	; 96
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <unpack_gyro_frame+0x28>
    2a48:	81 c0       	rjmp	.+258    	; 0x2b4c <unpack_gyro_frame+0x12a>
    2a4a:	21 36       	cpi	r18, 0x61	; 97
    2a4c:	38 f4       	brcc	.+14     	; 0x2a5c <unpack_gyro_frame+0x3a>
    2a4e:	20 32       	cpi	r18, 0x20	; 32
    2a50:	09 f4       	brne	.+2      	; 0x2a54 <unpack_gyro_frame+0x32>
    2a52:	80 c0       	rjmp	.+256    	; 0x2b54 <unpack_gyro_frame+0x132>
    2a54:	20 34       	cpi	r18, 0x40	; 64
    2a56:	09 f0       	breq	.+2      	; 0x2a5a <unpack_gyro_frame+0x38>
    2a58:	ad c0       	rjmp	.+346    	; 0x2bb4 <unpack_gyro_frame+0x192>
    2a5a:	a7 c0       	rjmp	.+334    	; 0x2baa <unpack_gyro_frame+0x188>
    2a5c:	24 38       	cpi	r18, 0x84	; 132
    2a5e:	09 f4       	brne	.+2      	; 0x2a62 <unpack_gyro_frame+0x40>
    2a60:	a4 c0       	rjmp	.+328    	; 0x2baa <unpack_gyro_frame+0x188>
    2a62:	28 38       	cpi	r18, 0x88	; 136
    2a64:	d9 f0       	breq	.+54     	; 0x2a9c <unpack_gyro_frame+0x7a>
    2a66:	20 38       	cpi	r18, 0x80	; 128
    2a68:	09 f0       	breq	.+2      	; 0x2a6c <unpack_gyro_frame+0x4a>
    2a6a:	a4 c0       	rjmp	.+328    	; 0x2bb4 <unpack_gyro_frame+0x192>
    2a6c:	17 c0       	rjmp	.+46     	; 0x2a9c <unpack_gyro_frame+0x7a>
    2a6e:	2c 39       	cpi	r18, 0x9C	; 156
    2a70:	09 f4       	brne	.+2      	; 0x2a74 <unpack_gyro_frame+0x52>
    2a72:	4e c0       	rjmp	.+156    	; 0x2b10 <unpack_gyro_frame+0xee>
    2a74:	2d 39       	cpi	r18, 0x9D	; 157
    2a76:	50 f4       	brcc	.+20     	; 0x2a8c <unpack_gyro_frame+0x6a>
    2a78:	24 39       	cpi	r18, 0x94	; 148
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <unpack_gyro_frame+0x5c>
    2a7c:	67 c0       	rjmp	.+206    	; 0x2b4c <unpack_gyro_frame+0x12a>
    2a7e:	28 39       	cpi	r18, 0x98	; 152
    2a80:	09 f4       	brne	.+2      	; 0x2a84 <unpack_gyro_frame+0x62>
    2a82:	6c c0       	rjmp	.+216    	; 0x2b5c <unpack_gyro_frame+0x13a>
    2a84:	20 39       	cpi	r18, 0x90	; 144
    2a86:	09 f0       	breq	.+2      	; 0x2a8a <unpack_gyro_frame+0x68>
    2a88:	95 c0       	rjmp	.+298    	; 0x2bb4 <unpack_gyro_frame+0x192>
    2a8a:	64 c0       	rjmp	.+200    	; 0x2b54 <unpack_gyro_frame+0x132>
    2a8c:	20 3c       	cpi	r18, 0xC0	; 192
    2a8e:	19 f1       	breq	.+70     	; 0x2ad6 <unpack_gyro_frame+0xb4>
    2a90:	20 3e       	cpi	r18, 0xE0	; 224
    2a92:	f1 f1       	breq	.+124    	; 0x2b10 <unpack_gyro_frame+0xee>
    2a94:	20 3a       	cpi	r18, 0xA0	; 160
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <unpack_gyro_frame+0x78>
    2a98:	8d c0       	rjmp	.+282    	; 0x2bb4 <unpack_gyro_frame+0x192>
    2a9a:	60 c0       	rjmp	.+192    	; 0x2b5c <unpack_gyro_frame+0x13a>

	case BMI160_FIFO_HEAD_G:
	case BMI160_FIFO_G_ENABLE:
		/*Partial read, then skip the data*/
		if ((*idx + BMI160_FIFO_G_LENGTH) > dev->fifo->length) {
    2a9c:	68 81       	ld	r22, Y
    2a9e:	79 81       	ldd	r23, Y+1	; 0x01
    2aa0:	58 96       	adiw	r26, 0x18	; 24
    2aa2:	ed 91       	ld	r30, X+
    2aa4:	fc 91       	ld	r31, X
    2aa6:	59 97       	sbiw	r26, 0x19	; 25
    2aa8:	22 81       	ldd	r18, Z+2	; 0x02
    2aaa:	33 81       	ldd	r19, Z+3	; 0x03
    2aac:	cb 01       	movw	r24, r22
    2aae:	06 96       	adiw	r24, 0x06	; 6
    2ab0:	28 17       	cp	r18, r24
    2ab2:	39 07       	cpc	r19, r25
    2ab4:	08 f4       	brcc	.+2      	; 0x2ab8 <unpack_gyro_frame+0x96>
    2ab6:	5f c0       	rjmp	.+190    	; 0x2b76 <unpack_gyro_frame+0x154>
			/*Update the data index as complete*/
			*idx = dev->fifo->length;
			break;
		}
		/*Unpack the data array into structure instance "gyro"*/
		unpack_gyro_data(&gyro[*gyro_idx], *idx, dev);
    2ab8:	f7 01       	movw	r30, r14
    2aba:	80 81       	ld	r24, Z
    2abc:	2a e0       	ldi	r18, 0x0A	; 10
    2abe:	82 9f       	mul	r24, r18
    2ac0:	c0 01       	movw	r24, r0
    2ac2:	11 24       	eor	r1, r1
    2ac4:	8c 0d       	add	r24, r12
    2ac6:	9d 1d       	adc	r25, r13
    2ac8:	ad 01       	movw	r20, r26
    2aca:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <unpack_gyro_data>
		/*Move the data index*/
		(*idx) = (*idx) + BMI160_FIFO_G_LENGTH;
    2ace:	88 81       	ld	r24, Y
    2ad0:	99 81       	ldd	r25, Y+1	; 0x01
    2ad2:	06 96       	adiw	r24, 0x06	; 6
    2ad4:	63 c0       	rjmp	.+198    	; 0x2b9c <unpack_gyro_frame+0x17a>
		break;

	case BMI160_FIFO_HEAD_G_A:
	case BMI160_FIFO_G_A_ENABLE:
		/*Partial read, then skip the data*/
		if ((*idx + BMI160_FIFO_GA_LENGTH) > dev->fifo->length) {
    2ad6:	68 81       	ld	r22, Y
    2ad8:	79 81       	ldd	r23, Y+1	; 0x01
    2ada:	58 96       	adiw	r26, 0x18	; 24
    2adc:	ed 91       	ld	r30, X+
    2ade:	fc 91       	ld	r31, X
    2ae0:	59 97       	sbiw	r26, 0x19	; 25
    2ae2:	22 81       	ldd	r18, Z+2	; 0x02
    2ae4:	33 81       	ldd	r19, Z+3	; 0x03
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	0c 96       	adiw	r24, 0x0c	; 12
    2aea:	28 17       	cp	r18, r24
    2aec:	39 07       	cpc	r19, r25
    2aee:	08 f4       	brcc	.+2      	; 0x2af2 <unpack_gyro_frame+0xd0>
    2af0:	42 c0       	rjmp	.+132    	; 0x2b76 <unpack_gyro_frame+0x154>
			/*Update the data index as complete*/
			*idx = dev->fifo->length;
			break;
		}
		/* Unpack the data array into structure instance "gyro" */
		unpack_gyro_data(&gyro[*gyro_idx], *idx, dev);
    2af2:	f7 01       	movw	r30, r14
    2af4:	80 81       	ld	r24, Z
    2af6:	2a e0       	ldi	r18, 0x0A	; 10
    2af8:	82 9f       	mul	r24, r18
    2afa:	c0 01       	movw	r24, r0
    2afc:	11 24       	eor	r1, r1
    2afe:	8c 0d       	add	r24, r12
    2b00:	9d 1d       	adc	r25, r13
    2b02:	ad 01       	movw	r20, r26
    2b04:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <unpack_gyro_data>
		/* Move the data index */
		*idx = *idx + BMI160_FIFO_GA_LENGTH;
    2b08:	88 81       	ld	r24, Y
    2b0a:	99 81       	ldd	r25, Y+1	; 0x01
    2b0c:	0c 96       	adiw	r24, 0x0c	; 12
    2b0e:	46 c0       	rjmp	.+140    	; 0x2b9c <unpack_gyro_frame+0x17a>
		break;

	case BMI160_FIFO_HEAD_M_G_A:
	case BMI160_FIFO_M_G_A_ENABLE:
		/*Partial read, then skip the data*/
		if ((*idx + BMI160_FIFO_MGA_LENGTH) > dev->fifo->length) {
    2b10:	68 81       	ld	r22, Y
    2b12:	79 81       	ldd	r23, Y+1	; 0x01
    2b14:	58 96       	adiw	r26, 0x18	; 24
    2b16:	ed 91       	ld	r30, X+
    2b18:	fc 91       	ld	r31, X
    2b1a:	59 97       	sbiw	r26, 0x19	; 25
    2b1c:	22 81       	ldd	r18, Z+2	; 0x02
    2b1e:	33 81       	ldd	r19, Z+3	; 0x03
    2b20:	cb 01       	movw	r24, r22
    2b22:	44 96       	adiw	r24, 0x14	; 20
    2b24:	28 17       	cp	r18, r24
    2b26:	39 07       	cpc	r19, r25
    2b28:	30 f1       	brcs	.+76     	; 0x2b76 <unpack_gyro_frame+0x154>
			/*Update the data index as complete*/
			*idx = dev->fifo->length;
			break;
		}
		/*Unpack the data array into structure instance "gyro"*/
		unpack_gyro_data(&gyro[*gyro_idx], *idx + BMI160_FIFO_M_LENGTH, dev);
    2b2a:	f7 01       	movw	r30, r14
    2b2c:	80 81       	ld	r24, Z
    2b2e:	2a e0       	ldi	r18, 0x0A	; 10
    2b30:	82 9f       	mul	r24, r18
    2b32:	c0 01       	movw	r24, r0
    2b34:	11 24       	eor	r1, r1
    2b36:	68 5f       	subi	r22, 0xF8	; 248
    2b38:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3a:	8c 0d       	add	r24, r12
    2b3c:	9d 1d       	adc	r25, r13
    2b3e:	ad 01       	movw	r20, r26
    2b40:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <unpack_gyro_data>
		/*Move the data index*/
		*idx = *idx + BMI160_FIFO_MGA_LENGTH;
    2b44:	88 81       	ld	r24, Y
    2b46:	99 81       	ldd	r25, Y+1	; 0x01
    2b48:	44 96       	adiw	r24, 0x14	; 20
    2b4a:	28 c0       	rjmp	.+80     	; 0x2b9c <unpack_gyro_frame+0x17a>


	case BMI160_FIFO_HEAD_M_A:
	case BMI160_FIFO_M_A_ENABLE:
		/* Move the data index */
		*idx = *idx + BMI160_FIFO_MA_LENGTH;
    2b4c:	88 81       	ld	r24, Y
    2b4e:	99 81       	ldd	r25, Y+1	; 0x01
    2b50:	0e 96       	adiw	r24, 0x0e	; 14
    2b52:	2e c0       	rjmp	.+92     	; 0x2bb0 <unpack_gyro_frame+0x18e>
		break;

	case BMI160_FIFO_HEAD_M:
	case BMI160_FIFO_M_ENABLE:
		(*idx) = (*idx) + BMI160_FIFO_M_LENGTH;
    2b54:	88 81       	ld	r24, Y
    2b56:	99 81       	ldd	r25, Y+1	; 0x01
    2b58:	08 96       	adiw	r24, 0x08	; 8
    2b5a:	2a c0       	rjmp	.+84     	; 0x2bb0 <unpack_gyro_frame+0x18e>
		break;

	case BMI160_FIFO_HEAD_M_G:
	case BMI160_FIFO_M_G_ENABLE:
		/*Partial read, then skip the data*/
		if ((*idx + BMI160_FIFO_MG_LENGTH) > dev->fifo->length) {
    2b5c:	68 81       	ld	r22, Y
    2b5e:	79 81       	ldd	r23, Y+1	; 0x01
    2b60:	58 96       	adiw	r26, 0x18	; 24
    2b62:	ed 91       	ld	r30, X+
    2b64:	fc 91       	ld	r31, X
    2b66:	59 97       	sbiw	r26, 0x19	; 25
    2b68:	22 81       	ldd	r18, Z+2	; 0x02
    2b6a:	33 81       	ldd	r19, Z+3	; 0x03
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	0e 96       	adiw	r24, 0x0e	; 14
    2b70:	28 17       	cp	r18, r24
    2b72:	39 07       	cpc	r19, r25
    2b74:	18 f4       	brcc	.+6      	; 0x2b7c <unpack_gyro_frame+0x15a>
			/*Update the data index as complete*/
			*idx = dev->fifo->length;
    2b76:	39 83       	std	Y+1, r19	; 0x01
    2b78:	28 83       	st	Y, r18
    2b7a:	1c c0       	rjmp	.+56     	; 0x2bb4 <unpack_gyro_frame+0x192>
			break;
		}
		/*Unpack the data array into structure instance "gyro"*/
		unpack_gyro_data(&gyro[*gyro_idx], *idx + BMI160_FIFO_M_LENGTH, dev);
    2b7c:	f7 01       	movw	r30, r14
    2b7e:	80 81       	ld	r24, Z
    2b80:	2a e0       	ldi	r18, 0x0A	; 10
    2b82:	82 9f       	mul	r24, r18
    2b84:	c0 01       	movw	r24, r0
    2b86:	11 24       	eor	r1, r1
    2b88:	68 5f       	subi	r22, 0xF8	; 248
    2b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8c:	8c 0d       	add	r24, r12
    2b8e:	9d 1d       	adc	r25, r13
    2b90:	ad 01       	movw	r20, r26
    2b92:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <unpack_gyro_data>
		/*Move the data index*/
		(*idx) = (*idx) + BMI160_FIFO_MG_LENGTH;
    2b96:	88 81       	ld	r24, Y
    2b98:	99 81       	ldd	r25, Y+1	; 0x01
    2b9a:	0e 96       	adiw	r24, 0x0e	; 14
    2b9c:	99 83       	std	Y+1, r25	; 0x01
    2b9e:	88 83       	st	Y, r24
		(*gyro_idx)++;
    2ba0:	f7 01       	movw	r30, r14
    2ba2:	80 81       	ld	r24, Z
    2ba4:	8f 5f       	subi	r24, 0xFF	; 255
    2ba6:	80 83       	st	Z, r24
    2ba8:	05 c0       	rjmp	.+10     	; 0x2bb4 <unpack_gyro_frame+0x192>
		break;

	case BMI160_FIFO_HEAD_A:
	case BMI160_FIFO_A_ENABLE:
		/*Move the data index*/
		*idx = *idx + BMI160_FIFO_A_LENGTH;
    2baa:	88 81       	ld	r24, Y
    2bac:	99 81       	ldd	r25, Y+1	; 0x01
    2bae:	06 96       	adiw	r24, 0x06	; 6
    2bb0:	99 83       	std	Y+1, r25	; 0x01
    2bb2:	88 83       	st	Y, r24

	default:
		break;
	}

}
    2bb4:	df 91       	pop	r29
    2bb6:	cf 91       	pop	r28
    2bb8:	1f 91       	pop	r17
    2bba:	0f 91       	pop	r16
    2bbc:	ff 90       	pop	r15
    2bbe:	ef 90       	pop	r14
    2bc0:	df 90       	pop	r13
    2bc2:	cf 90       	pop	r12
    2bc4:	08 95       	ret

00002bc6 <unpack_aux_data>:
 *  @brief This API is used to parse the aux data from the
 *  FIFO data and store it in the instance of the structure bmi160_aux_data.
 */
static void unpack_aux_data(struct bmi160_aux_data *aux_data, uint16_t data_start_index,
				const struct bmi160_dev *dev)
{
    2bc6:	9c 01       	movw	r18, r24
    2bc8:	da 01       	movw	r26, r20
	/* Aux data bytes */
	aux_data->data[0] = dev->fifo->data[data_start_index++];
    2bca:	58 96       	adiw	r26, 0x18	; 24
    2bcc:	ed 91       	ld	r30, X+
    2bce:	fc 91       	ld	r31, X
    2bd0:	59 97       	sbiw	r26, 0x19	; 25
    2bd2:	01 90       	ld	r0, Z+
    2bd4:	f0 81       	ld	r31, Z
    2bd6:	e0 2d       	mov	r30, r0
    2bd8:	e6 0f       	add	r30, r22
    2bda:	f7 1f       	adc	r31, r23
    2bdc:	80 81       	ld	r24, Z
    2bde:	f9 01       	movw	r30, r18
    2be0:	80 83       	st	Z, r24
    2be2:	6f 5f       	subi	r22, 0xFF	; 255
    2be4:	7f 4f       	sbci	r23, 0xFF	; 255
	aux_data->data[1] = dev->fifo->data[data_start_index++];
    2be6:	58 96       	adiw	r26, 0x18	; 24
    2be8:	ed 91       	ld	r30, X+
    2bea:	fc 91       	ld	r31, X
    2bec:	59 97       	sbiw	r26, 0x19	; 25
    2bee:	01 90       	ld	r0, Z+
    2bf0:	f0 81       	ld	r31, Z
    2bf2:	e0 2d       	mov	r30, r0
    2bf4:	e6 0f       	add	r30, r22
    2bf6:	f7 1f       	adc	r31, r23
    2bf8:	80 81       	ld	r24, Z
    2bfa:	f9 01       	movw	r30, r18
    2bfc:	81 83       	std	Z+1, r24	; 0x01
    2bfe:	6f 5f       	subi	r22, 0xFF	; 255
    2c00:	7f 4f       	sbci	r23, 0xFF	; 255
	aux_data->data[2] = dev->fifo->data[data_start_index++];
    2c02:	58 96       	adiw	r26, 0x18	; 24
    2c04:	ed 91       	ld	r30, X+
    2c06:	fc 91       	ld	r31, X
    2c08:	59 97       	sbiw	r26, 0x19	; 25
    2c0a:	01 90       	ld	r0, Z+
    2c0c:	f0 81       	ld	r31, Z
    2c0e:	e0 2d       	mov	r30, r0
    2c10:	e6 0f       	add	r30, r22
    2c12:	f7 1f       	adc	r31, r23
    2c14:	80 81       	ld	r24, Z
    2c16:	f9 01       	movw	r30, r18
    2c18:	82 83       	std	Z+2, r24	; 0x02
    2c1a:	6f 5f       	subi	r22, 0xFF	; 255
    2c1c:	7f 4f       	sbci	r23, 0xFF	; 255
	aux_data->data[3] = dev->fifo->data[data_start_index++];
    2c1e:	58 96       	adiw	r26, 0x18	; 24
    2c20:	ed 91       	ld	r30, X+
    2c22:	fc 91       	ld	r31, X
    2c24:	59 97       	sbiw	r26, 0x19	; 25
    2c26:	01 90       	ld	r0, Z+
    2c28:	f0 81       	ld	r31, Z
    2c2a:	e0 2d       	mov	r30, r0
    2c2c:	e6 0f       	add	r30, r22
    2c2e:	f7 1f       	adc	r31, r23
    2c30:	80 81       	ld	r24, Z
    2c32:	f9 01       	movw	r30, r18
    2c34:	83 83       	std	Z+3, r24	; 0x03
    2c36:	6f 5f       	subi	r22, 0xFF	; 255
    2c38:	7f 4f       	sbci	r23, 0xFF	; 255
	aux_data->data[4] = dev->fifo->data[data_start_index++];
    2c3a:	58 96       	adiw	r26, 0x18	; 24
    2c3c:	ed 91       	ld	r30, X+
    2c3e:	fc 91       	ld	r31, X
    2c40:	59 97       	sbiw	r26, 0x19	; 25
    2c42:	01 90       	ld	r0, Z+
    2c44:	f0 81       	ld	r31, Z
    2c46:	e0 2d       	mov	r30, r0
    2c48:	e6 0f       	add	r30, r22
    2c4a:	f7 1f       	adc	r31, r23
    2c4c:	80 81       	ld	r24, Z
    2c4e:	f9 01       	movw	r30, r18
    2c50:	84 83       	std	Z+4, r24	; 0x04
    2c52:	6f 5f       	subi	r22, 0xFF	; 255
    2c54:	7f 4f       	sbci	r23, 0xFF	; 255
	aux_data->data[5] = dev->fifo->data[data_start_index++];
    2c56:	58 96       	adiw	r26, 0x18	; 24
    2c58:	ed 91       	ld	r30, X+
    2c5a:	fc 91       	ld	r31, X
    2c5c:	59 97       	sbiw	r26, 0x19	; 25
    2c5e:	01 90       	ld	r0, Z+
    2c60:	f0 81       	ld	r31, Z
    2c62:	e0 2d       	mov	r30, r0
    2c64:	e6 0f       	add	r30, r22
    2c66:	f7 1f       	adc	r31, r23
    2c68:	80 81       	ld	r24, Z
    2c6a:	f9 01       	movw	r30, r18
    2c6c:	85 83       	std	Z+5, r24	; 0x05
    2c6e:	6f 5f       	subi	r22, 0xFF	; 255
    2c70:	7f 4f       	sbci	r23, 0xFF	; 255
	aux_data->data[6] = dev->fifo->data[data_start_index++];
    2c72:	58 96       	adiw	r26, 0x18	; 24
    2c74:	ed 91       	ld	r30, X+
    2c76:	fc 91       	ld	r31, X
    2c78:	59 97       	sbiw	r26, 0x19	; 25
    2c7a:	01 90       	ld	r0, Z+
    2c7c:	f0 81       	ld	r31, Z
    2c7e:	e0 2d       	mov	r30, r0
    2c80:	e6 0f       	add	r30, r22
    2c82:	f7 1f       	adc	r31, r23
    2c84:	80 81       	ld	r24, Z
    2c86:	f9 01       	movw	r30, r18
    2c88:	86 83       	std	Z+6, r24	; 0x06
	aux_data->data[7] = dev->fifo->data[data_start_index++];
    2c8a:	58 96       	adiw	r26, 0x18	; 24
    2c8c:	ed 91       	ld	r30, X+
    2c8e:	fc 91       	ld	r31, X
    2c90:	59 97       	sbiw	r26, 0x19	; 25
    2c92:	01 90       	ld	r0, Z+
    2c94:	f0 81       	ld	r31, Z
    2c96:	e0 2d       	mov	r30, r0
    2c98:	e6 0f       	add	r30, r22
    2c9a:	f7 1f       	adc	r31, r23
    2c9c:	81 81       	ldd	r24, Z+1	; 0x01
    2c9e:	f9 01       	movw	r30, r18
    2ca0:	87 83       	std	Z+7, r24	; 0x07
}
    2ca2:	08 95       	ret

00002ca4 <unpack_aux_frame>:
 *  It updates the idx value which is used to store the index of
 *  the current data byte which is parsed
 */
static void unpack_aux_frame(struct bmi160_aux_data *aux_data, uint16_t *idx, uint8_t *aux_index, uint8_t frame_info,
				const struct bmi160_dev *dev)
{
    2ca4:	cf 92       	push	r12
    2ca6:	df 92       	push	r13
    2ca8:	ef 92       	push	r14
    2caa:	ff 92       	push	r15
    2cac:	0f 93       	push	r16
    2cae:	1f 93       	push	r17
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	6c 01       	movw	r12, r24
    2cb6:	eb 01       	movw	r28, r22
    2cb8:	7a 01       	movw	r14, r20
    2cba:	d8 01       	movw	r26, r16
	switch (frame_info) {
    2cbc:	2c 38       	cpi	r18, 0x8C	; 140
    2cbe:	09 f4       	brne	.+2      	; 0x2cc2 <unpack_aux_frame+0x1e>
    2cc0:	91 c0       	rjmp	.+290    	; 0x2de4 <unpack_aux_frame+0x140>
    2cc2:	2d 38       	cpi	r18, 0x8D	; 141
    2cc4:	a8 f4       	brcc	.+42     	; 0x2cf0 <unpack_aux_frame+0x4c>
    2cc6:	20 36       	cpi	r18, 0x60	; 96
    2cc8:	09 f4       	brne	.+2      	; 0x2ccc <unpack_aux_frame+0x28>
    2cca:	47 c0       	rjmp	.+142    	; 0x2d5a <unpack_aux_frame+0xb6>
    2ccc:	21 36       	cpi	r18, 0x61	; 97
    2cce:	30 f4       	brcc	.+12     	; 0x2cdc <unpack_aux_frame+0x38>
    2cd0:	20 32       	cpi	r18, 0x20	; 32
    2cd2:	29 f1       	breq	.+74     	; 0x2d1e <unpack_aux_frame+0x7a>
    2cd4:	20 34       	cpi	r18, 0x40	; 64
    2cd6:	09 f0       	breq	.+2      	; 0x2cda <unpack_aux_frame+0x36>
    2cd8:	8e c0       	rjmp	.+284    	; 0x2df6 <unpack_aux_frame+0x152>
    2cda:	88 c0       	rjmp	.+272    	; 0x2dec <unpack_aux_frame+0x148>
    2cdc:	24 38       	cpi	r18, 0x84	; 132
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <unpack_aux_frame+0x3e>
    2ce0:	85 c0       	rjmp	.+266    	; 0x2dec <unpack_aux_frame+0x148>
    2ce2:	28 38       	cpi	r18, 0x88	; 136
    2ce4:	09 f4       	brne	.+2      	; 0x2ce8 <unpack_aux_frame+0x44>
    2ce6:	82 c0       	rjmp	.+260    	; 0x2dec <unpack_aux_frame+0x148>
    2ce8:	20 38       	cpi	r18, 0x80	; 128
    2cea:	09 f0       	breq	.+2      	; 0x2cee <unpack_aux_frame+0x4a>
    2cec:	84 c0       	rjmp	.+264    	; 0x2df6 <unpack_aux_frame+0x152>
    2cee:	7e c0       	rjmp	.+252    	; 0x2dec <unpack_aux_frame+0x148>
    2cf0:	2c 39       	cpi	r18, 0x9C	; 156
    2cf2:	09 f4       	brne	.+2      	; 0x2cf6 <unpack_aux_frame+0x52>
    2cf4:	50 c0       	rjmp	.+160    	; 0x2d96 <unpack_aux_frame+0xf2>
    2cf6:	2d 39       	cpi	r18, 0x9D	; 157
    2cf8:	40 f4       	brcc	.+16     	; 0x2d0a <unpack_aux_frame+0x66>
    2cfa:	24 39       	cpi	r18, 0x94	; 148
    2cfc:	71 f1       	breq	.+92     	; 0x2d5a <unpack_aux_frame+0xb6>
    2cfe:	28 39       	cpi	r18, 0x98	; 152
    2d00:	61 f1       	breq	.+88     	; 0x2d5a <unpack_aux_frame+0xb6>
    2d02:	20 39       	cpi	r18, 0x90	; 144
    2d04:	09 f0       	breq	.+2      	; 0x2d08 <unpack_aux_frame+0x64>
    2d06:	77 c0       	rjmp	.+238    	; 0x2df6 <unpack_aux_frame+0x152>
    2d08:	0a c0       	rjmp	.+20     	; 0x2d1e <unpack_aux_frame+0x7a>
    2d0a:	20 3c       	cpi	r18, 0xC0	; 192
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <unpack_aux_frame+0x6c>
    2d0e:	6a c0       	rjmp	.+212    	; 0x2de4 <unpack_aux_frame+0x140>
    2d10:	20 3e       	cpi	r18, 0xE0	; 224
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <unpack_aux_frame+0x72>
    2d14:	40 c0       	rjmp	.+128    	; 0x2d96 <unpack_aux_frame+0xf2>
    2d16:	20 3a       	cpi	r18, 0xA0	; 160
    2d18:	09 f0       	breq	.+2      	; 0x2d1c <unpack_aux_frame+0x78>
    2d1a:	6d c0       	rjmp	.+218    	; 0x2df6 <unpack_aux_frame+0x152>
    2d1c:	1e c0       	rjmp	.+60     	; 0x2d5a <unpack_aux_frame+0xb6>

	case BMI160_FIFO_HEAD_M:
	case BMI160_FIFO_M_ENABLE:
		/* Partial read, then skip the data */
		if ((*idx + BMI160_FIFO_M_LENGTH) > dev->fifo->length) {
    2d1e:	68 81       	ld	r22, Y
    2d20:	79 81       	ldd	r23, Y+1	; 0x01
    2d22:	58 96       	adiw	r26, 0x18	; 24
    2d24:	ed 91       	ld	r30, X+
    2d26:	fc 91       	ld	r31, X
    2d28:	59 97       	sbiw	r26, 0x19	; 25
    2d2a:	22 81       	ldd	r18, Z+2	; 0x02
    2d2c:	33 81       	ldd	r19, Z+3	; 0x03
    2d2e:	cb 01       	movw	r24, r22
    2d30:	08 96       	adiw	r24, 0x08	; 8
    2d32:	28 17       	cp	r18, r24
    2d34:	39 07       	cpc	r19, r25
    2d36:	e0 f1       	brcs	.+120    	; 0x2db0 <unpack_aux_frame+0x10c>
			/* Update the data index as complete */
			*idx = dev->fifo->length;
			break;
		}
		/* Unpack the data array into structure instance */
		unpack_aux_data(&aux_data[*aux_index], *idx, dev);
    2d38:	f7 01       	movw	r30, r14
    2d3a:	80 81       	ld	r24, Z
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	13 e0       	ldi	r17, 0x03	; 3
    2d40:	88 0f       	add	r24, r24
    2d42:	99 1f       	adc	r25, r25
    2d44:	1a 95       	dec	r17
    2d46:	e1 f7       	brne	.-8      	; 0x2d40 <unpack_aux_frame+0x9c>
    2d48:	8c 0d       	add	r24, r12
    2d4a:	9d 1d       	adc	r25, r13
    2d4c:	ad 01       	movw	r20, r26
    2d4e:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <unpack_aux_data>
		/* Move the data index */
		*idx = *idx + BMI160_FIFO_M_LENGTH;
    2d52:	88 81       	ld	r24, Y
    2d54:	99 81       	ldd	r25, Y+1	; 0x01
    2d56:	08 96       	adiw	r24, 0x08	; 8
    2d58:	3e c0       	rjmp	.+124    	; 0x2dd6 <unpack_aux_frame+0x132>


	case BMI160_FIFO_HEAD_M_G:
	case BMI160_FIFO_M_G_ENABLE:
		/* Partial read, then skip the data */
		if ((*idx + BMI160_FIFO_MG_LENGTH) > dev->fifo->length) {
    2d5a:	68 81       	ld	r22, Y
    2d5c:	79 81       	ldd	r23, Y+1	; 0x01
    2d5e:	58 96       	adiw	r26, 0x18	; 24
    2d60:	ed 91       	ld	r30, X+
    2d62:	fc 91       	ld	r31, X
    2d64:	59 97       	sbiw	r26, 0x19	; 25
    2d66:	22 81       	ldd	r18, Z+2	; 0x02
    2d68:	33 81       	ldd	r19, Z+3	; 0x03
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	0e 96       	adiw	r24, 0x0e	; 14
    2d6e:	28 17       	cp	r18, r24
    2d70:	39 07       	cpc	r19, r25
    2d72:	f0 f0       	brcs	.+60     	; 0x2db0 <unpack_aux_frame+0x10c>
			/* Update the data index as complete */
			*idx = dev->fifo->length;
			break;
		}
		/* Unpack the data array into structure instance */
		unpack_aux_data(&aux_data[*aux_index], *idx, dev);
    2d74:	f7 01       	movw	r30, r14
    2d76:	80 81       	ld	r24, Z
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	f3 e0       	ldi	r31, 0x03	; 3
    2d7c:	88 0f       	add	r24, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	fa 95       	dec	r31
    2d82:	e1 f7       	brne	.-8      	; 0x2d7c <unpack_aux_frame+0xd8>
    2d84:	8c 0d       	add	r24, r12
    2d86:	9d 1d       	adc	r25, r13
    2d88:	ad 01       	movw	r20, r26
    2d8a:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <unpack_aux_data>
		/* Move the data index */
		(*idx) = (*idx) + BMI160_FIFO_MG_LENGTH;
    2d8e:	88 81       	ld	r24, Y
    2d90:	99 81       	ldd	r25, Y+1	; 0x01
    2d92:	0e 96       	adiw	r24, 0x0e	; 14
    2d94:	20 c0       	rjmp	.+64     	; 0x2dd6 <unpack_aux_frame+0x132>
		break;

	case BMI160_FIFO_HEAD_M_G_A:
	case BMI160_FIFO_M_G_A_ENABLE:
		/*Partial read, then skip the data*/
		if ((*idx + BMI160_FIFO_MGA_LENGTH) > dev->fifo->length) {
    2d96:	68 81       	ld	r22, Y
    2d98:	79 81       	ldd	r23, Y+1	; 0x01
    2d9a:	58 96       	adiw	r26, 0x18	; 24
    2d9c:	ed 91       	ld	r30, X+
    2d9e:	fc 91       	ld	r31, X
    2da0:	59 97       	sbiw	r26, 0x19	; 25
    2da2:	22 81       	ldd	r18, Z+2	; 0x02
    2da4:	33 81       	ldd	r19, Z+3	; 0x03
    2da6:	cb 01       	movw	r24, r22
    2da8:	44 96       	adiw	r24, 0x14	; 20
    2daa:	28 17       	cp	r18, r24
    2dac:	39 07       	cpc	r19, r25
    2dae:	18 f4       	brcc	.+6      	; 0x2db6 <unpack_aux_frame+0x112>
			/* Update the data index as complete */
			*idx = dev->fifo->length;
    2db0:	39 83       	std	Y+1, r19	; 0x01
    2db2:	28 83       	st	Y, r18
    2db4:	20 c0       	rjmp	.+64     	; 0x2df6 <unpack_aux_frame+0x152>
			break;
		}
		/* Unpack the data array into structure instance */
		unpack_aux_data(&aux_data[*aux_index], *idx, dev);
    2db6:	f7 01       	movw	r30, r14
    2db8:	80 81       	ld	r24, Z
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	e3 e0       	ldi	r30, 0x03	; 3
    2dbe:	88 0f       	add	r24, r24
    2dc0:	99 1f       	adc	r25, r25
    2dc2:	ea 95       	dec	r30
    2dc4:	e1 f7       	brne	.-8      	; 0x2dbe <unpack_aux_frame+0x11a>
    2dc6:	8c 0d       	add	r24, r12
    2dc8:	9d 1d       	adc	r25, r13
    2dca:	ad 01       	movw	r20, r26
    2dcc:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <unpack_aux_data>
		/*Move the data index*/
		*idx = *idx + BMI160_FIFO_MGA_LENGTH;
    2dd0:	88 81       	ld	r24, Y
    2dd2:	99 81       	ldd	r25, Y+1	; 0x01
    2dd4:	44 96       	adiw	r24, 0x14	; 20
    2dd6:	99 83       	std	Y+1, r25	; 0x01
    2dd8:	88 83       	st	Y, r24
		(*aux_index)++;
    2dda:	f7 01       	movw	r30, r14
    2ddc:	80 81       	ld	r24, Z
    2dde:	8f 5f       	subi	r24, 0xFF	; 255
    2de0:	80 83       	st	Z, r24
    2de2:	09 c0       	rjmp	.+18     	; 0x2df6 <unpack_aux_frame+0x152>
		break;

	case BMI160_FIFO_HEAD_G_A:
	case BMI160_FIFO_G_A_ENABLE:
		/* Move the data index */
		*idx = *idx + BMI160_FIFO_GA_LENGTH;
    2de4:	88 81       	ld	r24, Y
    2de6:	99 81       	ldd	r25, Y+1	; 0x01
    2de8:	0c 96       	adiw	r24, 0x0c	; 12
    2dea:	03 c0       	rjmp	.+6      	; 0x2df2 <unpack_aux_frame+0x14e>
		break;

	case BMI160_FIFO_HEAD_A:
	case BMI160_FIFO_A_ENABLE:
		/* Move the data index */
		*idx = *idx + BMI160_FIFO_A_LENGTH;
    2dec:	88 81       	ld	r24, Y
    2dee:	99 81       	ldd	r25, Y+1	; 0x01
    2df0:	06 96       	adiw	r24, 0x06	; 6
    2df2:	99 83       	std	Y+1, r25	; 0x01
    2df4:	88 83       	st	Y, r24

	default:
		break;
	}

}
    2df6:	df 91       	pop	r29
    2df8:	cf 91       	pop	r28
    2dfa:	1f 91       	pop	r17
    2dfc:	0f 91       	pop	r16
    2dfe:	ff 90       	pop	r15
    2e00:	ef 90       	pop	r14
    2e02:	df 90       	pop	r13
    2e04:	cf 90       	pop	r12
    2e06:	08 95       	ret

00002e08 <check_frame_validity>:

/*!
 *  @brief This API checks the presence of non-valid frames in the read fifo data.
 */
static void check_frame_validity(uint16_t *data_index, const struct bmi160_dev *dev)
{
    2e08:	dc 01       	movw	r26, r24
    2e0a:	fb 01       	movw	r30, r22
	if ((*data_index + 2) < dev->fifo->length) {
    2e0c:	2d 91       	ld	r18, X+
    2e0e:	3c 91       	ld	r19, X
    2e10:	11 97       	sbiw	r26, 0x01	; 1
    2e12:	00 8c       	ldd	r0, Z+24	; 0x18
    2e14:	f1 8d       	ldd	r31, Z+25	; 0x19
    2e16:	e0 2d       	mov	r30, r0
    2e18:	42 81       	ldd	r20, Z+2	; 0x02
    2e1a:	53 81       	ldd	r21, Z+3	; 0x03
    2e1c:	c9 01       	movw	r24, r18
    2e1e:	02 96       	adiw	r24, 0x02	; 2
    2e20:	84 17       	cp	r24, r20
    2e22:	95 07       	cpc	r25, r21
    2e24:	68 f4       	brcc	.+26     	; 0x2e40 <check_frame_validity+0x38>
		/* Check if FIFO is empty */
		if ((dev->fifo->data[*data_index] == FIFO_CONFIG_MSB_CHECK)
    2e26:	01 90       	ld	r0, Z+
    2e28:	f0 81       	ld	r31, Z
    2e2a:	e0 2d       	mov	r30, r0
    2e2c:	e2 0f       	add	r30, r18
    2e2e:	f3 1f       	adc	r31, r19
    2e30:	80 81       	ld	r24, Z
    2e32:	80 38       	cpi	r24, 0x80	; 128
    2e34:	29 f4       	brne	.+10     	; 0x2e40 <check_frame_validity+0x38>
    2e36:	81 81       	ldd	r24, Z+1	; 0x01
    2e38:	88 23       	and	r24, r24
    2e3a:	11 f4       	brne	.+4      	; 0x2e40 <check_frame_validity+0x38>
			&& (dev->fifo->data[*data_index + 1] == FIFO_CONFIG_LSB_CHECK)) {
			/*Update the data index as complete*/
			*data_index = dev->fifo->length;
    2e3c:	4d 93       	st	X+, r20
    2e3e:	5c 93       	st	X, r21
    2e40:	08 95       	ret

00002e42 <unpack_sensortime_frame>:
/*!
 *  @brief This API is used to parse and store the sensor time from the
 *  FIFO data in the structure instance dev.
 */
static void unpack_sensortime_frame(uint16_t *data_index, const struct bmi160_dev *dev)
{
    2e42:	0f 93       	push	r16
    2e44:	1f 93       	push	r17
    2e46:	cf 93       	push	r28
    2e48:	df 93       	push	r29
    2e4a:	8c 01       	movw	r16, r24
    2e4c:	fb 01       	movw	r30, r22
	uint32_t sensor_time_byte3 = 0;
	uint16_t sensor_time_byte2 = 0;
	uint8_t sensor_time_byte1 = 0;

	/*Partial read, then move the data index to last data*/
	if ((*data_index + BMI160_SENSOR_TIME_LENGTH) > dev->fifo->length) {
    2e4e:	dc 01       	movw	r26, r24
    2e50:	2d 91       	ld	r18, X+
    2e52:	3c 91       	ld	r19, X
    2e54:	11 97       	sbiw	r26, 0x01	; 1
    2e56:	c0 8d       	ldd	r28, Z+24	; 0x18
    2e58:	d1 8d       	ldd	r29, Z+25	; 0x19
    2e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5e:	b9 01       	movw	r22, r18
    2e60:	6d 5f       	subi	r22, 0xFD	; 253
    2e62:	7f 4f       	sbci	r23, 0xFF	; 255
    2e64:	86 17       	cp	r24, r22
    2e66:	97 07       	cpc	r25, r23
    2e68:	18 f4       	brcc	.+6      	; 0x2e70 <unpack_sensortime_frame+0x2e>
		/*Update the data index as complete*/
		*data_index = dev->fifo->length;
    2e6a:	8d 93       	st	X+, r24
    2e6c:	9c 93       	st	X, r25
    2e6e:	17 c0       	rjmp	.+46     	; 0x2e9e <unpack_sensortime_frame+0x5c>
	} else {
		sensor_time_byte3 = dev->fifo->data[(*data_index) + BMI160_SENSOR_TIME_MSB_BYTE] << 16;
    2e70:	e8 81       	ld	r30, Y
    2e72:	f9 81       	ldd	r31, Y+1	; 0x01
		sensor_time_byte2 = dev->fifo->data[(*data_index) + BMI160_SENSOR_TIME_XLSB_BYTE] << 8;
		sensor_time_byte1 = dev->fifo->data[(*data_index)];
		/* Sensor time */
		dev->fifo->sensor_time = (uint32_t)(sensor_time_byte3 | sensor_time_byte2 | sensor_time_byte1);
    2e74:	e2 0f       	add	r30, r18
    2e76:	f3 1f       	adc	r31, r19
    2e78:	20 81       	ld	r18, Z
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	40 e0       	ldi	r20, 0x00	; 0
    2e7e:	50 e0       	ldi	r21, 0x00	; 0
    2e80:	91 81       	ldd	r25, Z+1	; 0x01
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	a0 e0       	ldi	r26, 0x00	; 0
    2e86:	b0 e0       	ldi	r27, 0x00	; 0
    2e88:	28 2b       	or	r18, r24
    2e8a:	39 2b       	or	r19, r25
    2e8c:	4a 2b       	or	r20, r26
    2e8e:	5b 2b       	or	r21, r27
    2e90:	2d 87       	std	Y+13, r18	; 0x0d
    2e92:	3e 87       	std	Y+14, r19	; 0x0e
    2e94:	4f 87       	std	Y+15, r20	; 0x0f
    2e96:	58 8b       	std	Y+16, r21	; 0x10
		*data_index = (*data_index) + BMI160_SENSOR_TIME_LENGTH;
    2e98:	f8 01       	movw	r30, r16
    2e9a:	71 83       	std	Z+1, r23	; 0x01
    2e9c:	60 83       	st	Z, r22
	}
}
    2e9e:	df 91       	pop	r29
    2ea0:	cf 91       	pop	r28
    2ea2:	1f 91       	pop	r17
    2ea4:	0f 91       	pop	r16
    2ea6:	08 95       	ret

00002ea8 <bmi160_extract_aux>:
 *  @brief This API parses and extracts the aux frames from
 *  FIFO data read by the "bmi160_get_fifo_data" API and stores it in
 *  the "aux_data" structure instance.
 */
int8_t bmi160_extract_aux(struct bmi160_aux_data *aux_data, uint8_t *aux_len, struct bmi160_dev const *dev)
{
    2ea8:	4f 92       	push	r4
    2eaa:	5f 92       	push	r5
    2eac:	6f 92       	push	r6
    2eae:	7f 92       	push	r7
    2eb0:	8f 92       	push	r8
    2eb2:	9f 92       	push	r9
    2eb4:	af 92       	push	r10
    2eb6:	bf 92       	push	r11
    2eb8:	cf 92       	push	r12
    2eba:	df 92       	push	r13
    2ebc:	ef 92       	push	r14
    2ebe:	ff 92       	push	r15
    2ec0:	0f 93       	push	r16
    2ec2:	1f 93       	push	r17
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <bmi160_extract_aux+0x22>
    2eca:	00 d0       	rcall	.+0      	; 0x2ecc <bmi160_extract_aux+0x24>
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <bmi160_extract_aux+0x26>
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
    2ed2:	2c 01       	movw	r4, r24
    2ed4:	5b 01       	movw	r10, r22
    2ed6:	6a 01       	movw	r12, r20
	uint16_t data_index = 0;
	uint16_t data_read_length = 0;
	uint8_t aux_index = 0;
	uint8_t fifo_data_enable = 0;

	if ((dev == NULL) || (dev->fifo->data == NULL) || (aux_data == NULL)) {
    2ed8:	41 15       	cp	r20, r1
    2eda:	51 05       	cpc	r21, r1
    2edc:	09 f4       	brne	.+2      	; 0x2ee0 <bmi160_extract_aux+0x38>
    2ede:	f4 c0       	rjmp	.+488    	; 0x30c8 <bmi160_extract_aux+0x220>
    2ee0:	da 01       	movw	r26, r20
    2ee2:	58 96       	adiw	r26, 0x18	; 24
    2ee4:	ed 91       	ld	r30, X+
    2ee6:	fc 91       	ld	r31, X
    2ee8:	59 97       	sbiw	r26, 0x19	; 25
    2eea:	80 81       	ld	r24, Z
    2eec:	91 81       	ldd	r25, Z+1	; 0x01
    2eee:	89 2b       	or	r24, r25
    2ef0:	09 f4       	brne	.+2      	; 0x2ef4 <bmi160_extract_aux+0x4c>
    2ef2:	ea c0       	rjmp	.+468    	; 0x30c8 <bmi160_extract_aux+0x220>
    2ef4:	41 14       	cp	r4, r1
    2ef6:	51 04       	cpc	r5, r1
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <bmi160_extract_aux+0x54>
    2efa:	e6 c0       	rjmp	.+460    	; 0x30c8 <bmi160_extract_aux+0x220>
 *  the "aux_data" structure instance.
 */
int8_t bmi160_extract_aux(struct bmi160_aux_data *aux_data, uint8_t *aux_len, struct bmi160_dev const *dev)
{
	int8_t rslt = 0;
	uint16_t data_index = 0;
    2efc:	1c 82       	std	Y+4, r1	; 0x04
    2efe:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t data_read_length = 0;
	uint8_t aux_index = 0;
    2f00:	19 82       	std	Y+1, r1	; 0x01

	if ((dev == NULL) || (dev->fifo->data == NULL) || (aux_data == NULL)) {
		rslt = BMI160_E_NULL_PTR;
	} else {
		/* Parsing the FIFO data in header-less mode */
		if (dev->fifo->fifo_header_enable == 0) {
    2f02:	85 81       	ldd	r24, Z+5	; 0x05
    2f04:	88 23       	and	r24, r24
    2f06:	09 f0       	breq	.+2      	; 0x2f0a <bmi160_extract_aux+0x62>
    2f08:	5a c0       	rjmp	.+180    	; 0x2fbe <bmi160_extract_aux+0x116>
 */
static void get_aux_len_to_parse(uint16_t *data_index, uint16_t *data_read_length, const uint8_t *aux_frame_count,
					const struct bmi160_dev *dev)
{
	/* Data start index */
	*data_index = dev->fifo->gyro_byte_start_idx;
    2f0a:	81 85       	ldd	r24, Z+9	; 0x09
    2f0c:	92 85       	ldd	r25, Z+10	; 0x0a
    2f0e:	9c 83       	std	Y+4, r25	; 0x04
    2f10:	8b 83       	std	Y+3, r24	; 0x03

	if (dev->fifo->fifo_data_enable == BMI160_FIFO_M_ENABLE) {
    2f12:	86 81       	ldd	r24, Z+6	; 0x06
    2f14:	80 32       	cpi	r24, 0x20	; 32
    2f16:	51 f4       	brne	.+20     	; 0x2f2c <bmi160_extract_aux+0x84>
		*data_read_length = (*aux_frame_count) * BMI160_FIFO_M_LENGTH;
    2f18:	db 01       	movw	r26, r22
    2f1a:	8c 91       	ld	r24, X
    2f1c:	28 2f       	mov	r18, r24
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	43 e0       	ldi	r20, 0x03	; 3
    2f22:	22 0f       	add	r18, r18
    2f24:	33 1f       	adc	r19, r19
    2f26:	4a 95       	dec	r20
    2f28:	e1 f7       	brne	.-8      	; 0x2f22 <bmi160_extract_aux+0x7a>
    2f2a:	17 c0       	rjmp	.+46     	; 0x2f5a <bmi160_extract_aux+0xb2>
	} else if (dev->fifo->fifo_data_enable == BMI160_FIFO_M_A_ENABLE) {
    2f2c:	80 36       	cpi	r24, 0x60	; 96
    2f2e:	11 f0       	breq	.+4      	; 0x2f34 <bmi160_extract_aux+0x8c>
		*data_read_length = (*aux_frame_count) * BMI160_FIFO_MA_LENGTH;
	} else if (dev->fifo->fifo_data_enable == BMI160_FIFO_M_G_ENABLE) {
    2f30:	80 3a       	cpi	r24, 0xA0	; 160
    2f32:	21 f4       	brne	.+8      	; 0x2f3c <bmi160_extract_aux+0x94>
		*data_read_length = (*aux_frame_count) * BMI160_FIFO_MG_LENGTH;
    2f34:	d5 01       	movw	r26, r10
    2f36:	9c 91       	ld	r25, X
    2f38:	8e e0       	ldi	r24, 0x0E	; 14
    2f3a:	05 c0       	rjmp	.+10     	; 0x2f46 <bmi160_extract_aux+0x9e>
	} else if (dev->fifo->fifo_data_enable == BMI160_FIFO_M_G_A_ENABLE) {
    2f3c:	80 3e       	cpi	r24, 0xE0	; 224
    2f3e:	39 f4       	brne	.+14     	; 0x2f4e <bmi160_extract_aux+0xa6>
		*data_read_length = (*aux_frame_count) * BMI160_FIFO_MGA_LENGTH;
    2f40:	db 01       	movw	r26, r22
    2f42:	9c 91       	ld	r25, X
    2f44:	84 e1       	ldi	r24, 0x14	; 20
    2f46:	98 9f       	mul	r25, r24
    2f48:	90 01       	movw	r18, r0
    2f4a:	11 24       	eor	r1, r1
    2f4c:	06 c0       	rjmp	.+12     	; 0x2f5a <bmi160_extract_aux+0xb2>
	} else {
		/* When aux is not enabled ,there will be no aux data.
		 * so we update the data index as complete */
		*data_index = dev->fifo->length;
    2f4e:	82 81       	ldd	r24, Z+2	; 0x02
    2f50:	93 81       	ldd	r25, Z+3	; 0x03
    2f52:	9c 83       	std	Y+4, r25	; 0x04
    2f54:	8b 83       	std	Y+3, r24	; 0x03
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	82 81       	ldd	r24, Z+2	; 0x02
    2f5c:	93 81       	ldd	r25, Z+3	; 0x03
    2f5e:	79 01       	movw	r14, r18
    2f60:	82 17       	cp	r24, r18
    2f62:	93 07       	cpc	r25, r19
    2f64:	98 f4       	brcc	.+38     	; 0x2f8c <bmi160_extract_aux+0xe4>
    2f66:	7c 01       	movw	r14, r24
    2f68:	11 c0       	rjmp	.+34     	; 0x2f8c <bmi160_extract_aux+0xe4>
			/* Number of bytes to be parsed from FIFO */
			get_aux_len_to_parse(&data_index, &data_read_length, aux_len, dev);
			for (; data_index < data_read_length ;) {
				/* Check for the availability of next two
				 * bytes of FIFO data */
				check_frame_validity(&data_index, dev);
    2f6a:	c4 01       	movw	r24, r8
    2f6c:	b6 01       	movw	r22, r12
    2f6e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <check_frame_validity>
				fifo_data_enable = dev->fifo->fifo_data_enable;
				unpack_aux_frame(aux_data, &data_index, &aux_index, fifo_data_enable, dev);
    2f72:	d6 01       	movw	r26, r12
    2f74:	58 96       	adiw	r26, 0x18	; 24
    2f76:	ed 91       	ld	r30, X+
    2f78:	fc 91       	ld	r31, X
    2f7a:	59 97       	sbiw	r26, 0x19	; 25
    2f7c:	c2 01       	movw	r24, r4
    2f7e:	b4 01       	movw	r22, r8
    2f80:	a3 01       	movw	r20, r6
    2f82:	26 81       	ldd	r18, Z+6	; 0x06
    2f84:	86 01       	movw	r16, r12
    2f86:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <unpack_aux_frame>
    2f8a:	09 c0       	rjmp	.+18     	; 0x2f9e <bmi160_extract_aux+0xf6>
			/* Number of bytes to be parsed from FIFO */
			get_aux_len_to_parse(&data_index, &data_read_length, aux_len, dev);
			for (; data_index < data_read_length ;) {
				/* Check for the availability of next two
				 * bytes of FIFO data */
				check_frame_validity(&data_index, dev);
    2f8c:	93 e0       	ldi	r25, 0x03	; 3
    2f8e:	89 2e       	mov	r8, r25
    2f90:	91 2c       	mov	r9, r1
    2f92:	8c 0e       	add	r8, r28
    2f94:	9d 1e       	adc	r9, r29
				fifo_data_enable = dev->fifo->fifo_data_enable;
				unpack_aux_frame(aux_data, &data_index, &aux_index, fifo_data_enable, dev);
    2f96:	3e 01       	movw	r6, r28
    2f98:	08 94       	sec
    2f9a:	61 1c       	adc	r6, r1
    2f9c:	71 1c       	adc	r7, r1
	} else {
		/* Parsing the FIFO data in header-less mode */
		if (dev->fifo->fifo_header_enable == 0) {
			/* Number of bytes to be parsed from FIFO */
			get_aux_len_to_parse(&data_index, &data_read_length, aux_len, dev);
			for (; data_index < data_read_length ;) {
    2f9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2fa0:	3c 81       	ldd	r19, Y+4	; 0x04
    2fa2:	2e 15       	cp	r18, r14
    2fa4:	3f 05       	cpc	r19, r15
    2fa6:	08 f3       	brcs	.-62     	; 0x2f6a <bmi160_extract_aux+0xc2>
				check_frame_validity(&data_index, dev);
				fifo_data_enable = dev->fifo->fifo_data_enable;
				unpack_aux_frame(aux_data, &data_index, &aux_index, fifo_data_enable, dev);
			}
			/* update number of aux data read */
			*aux_len = aux_index;
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	f5 01       	movw	r30, r10
    2fac:	80 83       	st	Z, r24
			/* update the aux byte index */
			dev->fifo->aux_byte_start_idx = data_index;
    2fae:	d6 01       	movw	r26, r12
    2fb0:	58 96       	adiw	r26, 0x18	; 24
    2fb2:	ed 91       	ld	r30, X+
    2fb4:	fc 91       	ld	r31, X
    2fb6:	59 97       	sbiw	r26, 0x19	; 25
    2fb8:	34 87       	std	Z+12, r19	; 0x0c
    2fba:	23 87       	std	Z+11, r18	; 0x0b
    2fbc:	83 c0       	rjmp	.+262    	; 0x30c4 <bmi160_extract_aux+0x21c>
static void extract_aux_header_mode(struct bmi160_aux_data *aux_data, uint8_t *aux_length,
					const struct bmi160_dev *dev)
{
	uint8_t frame_header = 0;
	uint16_t data_index;
	uint8_t aux_index = 0;
    2fbe:	1a 82       	std	Y+2, r1	; 0x02

	for (data_index = dev->fifo->aux_byte_start_idx; data_index < dev->fifo->length;) {
    2fc0:	83 85       	ldd	r24, Z+11	; 0x0b
    2fc2:	94 85       	ldd	r25, Z+12	; 0x0c
    2fc4:	9e 83       	std	Y+6, r25	; 0x06
    2fc6:	8d 83       	std	Y+5, r24	; 0x05
			/* Aux frame */
		case BMI160_FIFO_HEAD_M:
		case BMI160_FIFO_HEAD_M_A:
		case BMI160_FIFO_HEAD_M_G:
		case BMI160_FIFO_HEAD_M_G_A:
			unpack_aux_frame(aux_data, &data_index, &aux_index, frame_header, dev);
    2fc8:	85 e0       	ldi	r24, 0x05	; 5
    2fca:	e8 2e       	mov	r14, r24
    2fcc:	f1 2c       	mov	r15, r1
    2fce:	ec 0e       	add	r14, r28
    2fd0:	fd 1e       	adc	r15, r29
    2fd2:	02 e0       	ldi	r16, 0x02	; 2
    2fd4:	80 2e       	mov	r8, r16
    2fd6:	91 2c       	mov	r9, r1
    2fd8:	8c 0e       	add	r8, r28
    2fda:	9d 1e       	adc	r9, r29
    2fdc:	59 c0       	rjmp	.+178    	; 0x3090 <bmi160_extract_aux+0x1e8>
	uint16_t data_index;
	uint8_t aux_index = 0;

	for (data_index = dev->fifo->aux_byte_start_idx; data_index < dev->fifo->length;) {
		/* extracting Frame header */
		frame_header = (dev->fifo->data[data_index] & BMI160_FIFO_TAG_INTR_MASK);
    2fde:	f8 01       	movw	r30, r16
    2fe0:	a0 81       	ld	r26, Z
    2fe2:	b1 81       	ldd	r27, Z+1	; 0x01
    2fe4:	fd 01       	movw	r30, r26
    2fe6:	e8 0f       	add	r30, r24
    2fe8:	f9 1f       	adc	r31, r25
    2fea:	20 81       	ld	r18, Z
    2fec:	2c 7f       	andi	r18, 0xFC	; 252
		/*Index is moved to next byte where the data is starting*/
		data_index++;
    2fee:	ac 01       	movw	r20, r24
    2ff0:	4f 5f       	subi	r20, 0xFF	; 255
    2ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff4:	5e 83       	std	Y+6, r21	; 0x06
    2ff6:	4d 83       	std	Y+5, r20	; 0x05

		switch (frame_header) {
    2ff8:	28 38       	cpi	r18, 0x88	; 136
    2ffa:	31 f1       	breq	.+76     	; 0x3048 <bmi160_extract_aux+0x1a0>
    2ffc:	29 38       	cpi	r18, 0x89	; 137
    2ffe:	70 f4       	brcc	.+28     	; 0x301c <bmi160_extract_aux+0x174>
    3000:	28 34       	cpi	r18, 0x48	; 72
    3002:	b9 f1       	breq	.+110    	; 0x3072 <bmi160_extract_aux+0x1ca>
    3004:	29 34       	cpi	r18, 0x49	; 73
    3006:	28 f4       	brcc	.+10     	; 0x3012 <bmi160_extract_aux+0x16a>
    3008:	20 34       	cpi	r18, 0x40	; 64
    300a:	29 f1       	breq	.+74     	; 0x3056 <bmi160_extract_aux+0x1ae>
    300c:	24 34       	cpi	r18, 0x44	; 68
    300e:	c9 f5       	brne	.+114    	; 0x3082 <bmi160_extract_aux+0x1da>
    3010:	1d c0       	rjmp	.+58     	; 0x304c <bmi160_extract_aux+0x1a4>
    3012:	20 38       	cpi	r18, 0x80	; 128
    3014:	b1 f1       	breq	.+108    	; 0x3082 <bmi160_extract_aux+0x1da>
    3016:	24 38       	cpi	r18, 0x84	; 132
    3018:	a1 f5       	brne	.+104    	; 0x3082 <bmi160_extract_aux+0x1da>
    301a:	16 c0       	rjmp	.+44     	; 0x3048 <bmi160_extract_aux+0x1a0>
    301c:	24 39       	cpi	r18, 0x94	; 148
    301e:	59 f0       	breq	.+22     	; 0x3036 <bmi160_extract_aux+0x18e>
    3020:	25 39       	cpi	r18, 0x95	; 149
    3022:	28 f4       	brcc	.+10     	; 0x302e <bmi160_extract_aux+0x186>
    3024:	2c 38       	cpi	r18, 0x8C	; 140
    3026:	71 f0       	breq	.+28     	; 0x3044 <bmi160_extract_aux+0x19c>
    3028:	20 39       	cpi	r18, 0x90	; 144
    302a:	59 f5       	brne	.+86     	; 0x3082 <bmi160_extract_aux+0x1da>
    302c:	04 c0       	rjmp	.+8      	; 0x3036 <bmi160_extract_aux+0x18e>
    302e:	28 39       	cpi	r18, 0x98	; 152
    3030:	11 f0       	breq	.+4      	; 0x3036 <bmi160_extract_aux+0x18e>
    3032:	2c 39       	cpi	r18, 0x9C	; 156
    3034:	31 f5       	brne	.+76     	; 0x3082 <bmi160_extract_aux+0x1da>
			/* Aux frame */
		case BMI160_FIFO_HEAD_M:
		case BMI160_FIFO_HEAD_M_A:
		case BMI160_FIFO_HEAD_M_G:
		case BMI160_FIFO_HEAD_M_G_A:
			unpack_aux_frame(aux_data, &data_index, &aux_index, frame_header, dev);
    3036:	c2 01       	movw	r24, r4
    3038:	b7 01       	movw	r22, r14
    303a:	a4 01       	movw	r20, r8
    303c:	86 01       	movw	r16, r12
    303e:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <unpack_aux_frame>
    3042:	21 c0       	rjmp	.+66     	; 0x3086 <bmi160_extract_aux+0x1de>
 *  extracting the user specified data.
 */
static void move_next_frame(uint16_t *data_index, uint8_t current_frame_length, const struct bmi160_dev *dev)
{
	/*Partial read, then move the data index to last data*/
	if ((*data_index + current_frame_length) > dev->fifo->length) {
    3044:	0d 96       	adiw	r24, 0x0d	; 13
    3046:	17 c0       	rjmp	.+46     	; 0x3076 <bmi160_extract_aux+0x1ce>
		case BMI160_FIFO_HEAD_A:
			move_next_frame(&data_index, BMI160_FIFO_A_LENGTH, dev);
			break;
			/* Sensor time frame */
		case BMI160_FIFO_HEAD_SENSOR_TIME:
			unpack_sensortime_frame(&data_index, dev);
    3048:	07 96       	adiw	r24, 0x07	; 7
    304a:	15 c0       	rjmp	.+42     	; 0x3076 <bmi160_extract_aux+0x1ce>
    304c:	c7 01       	movw	r24, r14
    304e:	b6 01       	movw	r22, r12
    3050:	0e 94 21 17 	call	0x2e42	; 0x2e42 <unpack_sensortime_frame>
    3054:	18 c0       	rjmp	.+48     	; 0x3086 <bmi160_extract_aux+0x1de>
 *  the FIFO data in the structure instance dev.
 */
static void unpack_skipped_frame(uint16_t *data_index, const struct bmi160_dev *dev)
{
	/*Partial read, then move the data index to last data*/
	if (*data_index >= dev->fifo->length) {
    3056:	46 17       	cp	r20, r22
    3058:	57 07       	cpc	r21, r23
    305a:	98 f4       	brcc	.+38     	; 0x3082 <bmi160_extract_aux+0x1da>
		/*Update the data index as complete*/
		*data_index = dev->fifo->length;
	} else {
		dev->fifo->skipped_frame_count = dev->fifo->data[*data_index];
    305c:	a4 0f       	add	r26, r20
    305e:	b5 1f       	adc	r27, r21
    3060:	8c 91       	ld	r24, X
    3062:	d8 01       	movw	r26, r16
    3064:	51 96       	adiw	r26, 0x11	; 17
    3066:	8c 93       	st	X, r24
		/*Move the data index*/
		*data_index = (*data_index) + 1;
    3068:	4f 5f       	subi	r20, 0xFF	; 255
    306a:	5f 4f       	sbci	r21, 0xFF	; 255
    306c:	5e 83       	std	Y+6, r21	; 0x06
    306e:	4d 83       	std	Y+5, r20	; 0x05
    3070:	0a c0       	rjmp	.+20     	; 0x3086 <bmi160_extract_aux+0x1de>
 *  extracting the user specified data.
 */
static void move_next_frame(uint16_t *data_index, uint8_t current_frame_length, const struct bmi160_dev *dev)
{
	/*Partial read, then move the data index to last data*/
	if ((*data_index + current_frame_length) > dev->fifo->length) {
    3072:	ca 01       	movw	r24, r20
    3074:	01 96       	adiw	r24, 0x01	; 1
    3076:	68 17       	cp	r22, r24
    3078:	79 07       	cpc	r23, r25
    307a:	18 f0       	brcs	.+6      	; 0x3082 <bmi160_extract_aux+0x1da>
		/*Update the data index as complete*/
		*data_index = dev->fifo->length;
	} else {
		/*Move the data index to next frame*/
		*data_index = *data_index + current_frame_length;
    307c:	9e 83       	std	Y+6, r25	; 0x06
    307e:	8d 83       	std	Y+5, r24	; 0x05
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <bmi160_extract_aux+0x1de>
			data_index = dev->fifo->length;
			break;
		default:
			/* Update the data index as complete in case of
			 * getting other headers like 0x00 */
			data_index = dev->fifo->length;
    3082:	7e 83       	std	Y+6, r23	; 0x06
    3084:	6d 83       	std	Y+5, r22	; 0x05
			break;
		}
		if (*aux_length == aux_index) {
    3086:	f5 01       	movw	r30, r10
    3088:	90 81       	ld	r25, Z
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	98 17       	cp	r25, r24
    308e:	71 f0       	breq	.+28     	; 0x30ac <bmi160_extract_aux+0x204>
{
	uint8_t frame_header = 0;
	uint16_t data_index;
	uint8_t aux_index = 0;

	for (data_index = dev->fifo->aux_byte_start_idx; data_index < dev->fifo->length;) {
    3090:	8d 81       	ldd	r24, Y+5	; 0x05
    3092:	9e 81       	ldd	r25, Y+6	; 0x06
    3094:	d6 01       	movw	r26, r12
    3096:	58 96       	adiw	r26, 0x18	; 24
    3098:	0d 91       	ld	r16, X+
    309a:	1c 91       	ld	r17, X
    309c:	59 97       	sbiw	r26, 0x19	; 25
    309e:	f8 01       	movw	r30, r16
    30a0:	62 81       	ldd	r22, Z+2	; 0x02
    30a2:	73 81       	ldd	r23, Z+3	; 0x03
    30a4:	86 17       	cp	r24, r22
    30a6:	97 07       	cpc	r25, r23
    30a8:	08 f4       	brcc	.+2      	; 0x30ac <bmi160_extract_aux+0x204>
    30aa:	99 cf       	rjmp	.-206    	; 0x2fde <bmi160_extract_aux+0x136>
			break;
		}
	}

	/* Update number of aux data read */
	*aux_length = aux_index;
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	d5 01       	movw	r26, r10
    30b0:	8c 93       	st	X, r24
	/* Update the aux frame index */
	dev->fifo->aux_byte_start_idx = data_index;
    30b2:	d6 01       	movw	r26, r12
    30b4:	58 96       	adiw	r26, 0x18	; 24
    30b6:	ed 91       	ld	r30, X+
    30b8:	fc 91       	ld	r31, X
    30ba:	59 97       	sbiw	r26, 0x19	; 25
    30bc:	8d 81       	ldd	r24, Y+5	; 0x05
    30be:	9e 81       	ldd	r25, Y+6	; 0x06
    30c0:	94 87       	std	Z+12, r25	; 0x0c
    30c2:	83 87       	std	Z+11, r24	; 0x0b
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	01 c0       	rjmp	.+2      	; 0x30ca <bmi160_extract_aux+0x222>
    30c8:	8f ef       	ldi	r24, 0xFF	; 255
			extract_aux_header_mode(aux_data, aux_len, dev);
		}
	}

	return rslt;
}
    30ca:	26 96       	adiw	r28, 0x06	; 6
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	f8 94       	cli
    30d0:	de bf       	out	0x3e, r29	; 62
    30d2:	0f be       	out	0x3f, r0	; 63
    30d4:	cd bf       	out	0x3d, r28	; 61
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	1f 91       	pop	r17
    30dc:	0f 91       	pop	r16
    30de:	ff 90       	pop	r15
    30e0:	ef 90       	pop	r14
    30e2:	df 90       	pop	r13
    30e4:	cf 90       	pop	r12
    30e6:	bf 90       	pop	r11
    30e8:	af 90       	pop	r10
    30ea:	9f 90       	pop	r9
    30ec:	8f 90       	pop	r8
    30ee:	7f 90       	pop	r7
    30f0:	6f 90       	pop	r6
    30f2:	5f 90       	pop	r5
    30f4:	4f 90       	pop	r4
    30f6:	08 95       	ret

000030f8 <bmi160_extract_gyro>:
 *  @brief This API parses and extracts the gyro frames from
 *  FIFO data read by the "bmi160_get_fifo_data" API and stores it in
 *  the "gyro_data" structure instance.
 */
int8_t bmi160_extract_gyro(struct bmi160_sensor_data *gyro_data, uint8_t *gyro_length, struct bmi160_dev const *dev)
{
    30f8:	4f 92       	push	r4
    30fa:	5f 92       	push	r5
    30fc:	6f 92       	push	r6
    30fe:	7f 92       	push	r7
    3100:	8f 92       	push	r8
    3102:	9f 92       	push	r9
    3104:	af 92       	push	r10
    3106:	bf 92       	push	r11
    3108:	cf 92       	push	r12
    310a:	df 92       	push	r13
    310c:	ef 92       	push	r14
    310e:	ff 92       	push	r15
    3110:	0f 93       	push	r16
    3112:	1f 93       	push	r17
    3114:	df 93       	push	r29
    3116:	cf 93       	push	r28
    3118:	00 d0       	rcall	.+0      	; 0x311a <bmi160_extract_gyro+0x22>
    311a:	00 d0       	rcall	.+0      	; 0x311c <bmi160_extract_gyro+0x24>
    311c:	00 d0       	rcall	.+0      	; 0x311e <bmi160_extract_gyro+0x26>
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	2c 01       	movw	r4, r24
    3124:	5b 01       	movw	r10, r22
    3126:	6a 01       	movw	r12, r20
	uint16_t data_index = 0;
	uint16_t data_read_length = 0;
	uint8_t gyro_index = 0;
	uint8_t fifo_data_enable = 0;

	if (dev == NULL || dev->fifo->data == NULL) {
    3128:	41 15       	cp	r20, r1
    312a:	51 05       	cpc	r21, r1
    312c:	09 f4       	brne	.+2      	; 0x3130 <bmi160_extract_gyro+0x38>
    312e:	ee c0       	rjmp	.+476    	; 0x330c <bmi160_extract_gyro+0x214>
    3130:	da 01       	movw	r26, r20
    3132:	58 96       	adiw	r26, 0x18	; 24
    3134:	ed 91       	ld	r30, X+
    3136:	fc 91       	ld	r31, X
    3138:	59 97       	sbiw	r26, 0x19	; 25
    313a:	80 81       	ld	r24, Z
    313c:	91 81       	ldd	r25, Z+1	; 0x01
    313e:	89 2b       	or	r24, r25
    3140:	09 f4       	brne	.+2      	; 0x3144 <bmi160_extract_gyro+0x4c>
    3142:	e4 c0       	rjmp	.+456    	; 0x330c <bmi160_extract_gyro+0x214>
 *  the "gyro_data" structure instance.
 */
int8_t bmi160_extract_gyro(struct bmi160_sensor_data *gyro_data, uint8_t *gyro_length, struct bmi160_dev const *dev)
{
	int8_t rslt = 0;
	uint16_t data_index = 0;
    3144:	1c 82       	std	Y+4, r1	; 0x04
    3146:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t data_read_length = 0;
	uint8_t gyro_index = 0;
    3148:	19 82       	std	Y+1, r1	; 0x01

	if (dev == NULL || dev->fifo->data == NULL) {
		rslt = BMI160_E_NULL_PTR;
	} else {
		/* Parsing the FIFO data in header-less mode */
		if (dev->fifo->fifo_header_enable == 0) {
    314a:	85 81       	ldd	r24, Z+5	; 0x05
    314c:	88 23       	and	r24, r24
    314e:	09 f0       	breq	.+2      	; 0x3152 <bmi160_extract_gyro+0x5a>
    3150:	58 c0       	rjmp	.+176    	; 0x3202 <bmi160_extract_gyro+0x10a>
 */
static void get_gyro_len_to_parse(uint16_t *data_index, uint16_t *data_read_length, const uint8_t *gyro_frame_count,
					const struct bmi160_dev *dev)
{
	/* Data start index */
	*data_index = dev->fifo->gyro_byte_start_idx;
    3152:	81 85       	ldd	r24, Z+9	; 0x09
    3154:	92 85       	ldd	r25, Z+10	; 0x0a
    3156:	9c 83       	std	Y+4, r25	; 0x04
    3158:	8b 83       	std	Y+3, r24	; 0x03

	if (dev->fifo->fifo_data_enable == BMI160_FIFO_G_ENABLE) {
    315a:	86 81       	ldd	r24, Z+6	; 0x06
    315c:	80 38       	cpi	r24, 0x80	; 128
    315e:	21 f4       	brne	.+8      	; 0x3168 <bmi160_extract_gyro+0x70>
		*data_read_length = (*gyro_frame_count) * BMI160_FIFO_G_LENGTH;
    3160:	db 01       	movw	r26, r22
    3162:	9c 91       	ld	r25, X
    3164:	86 e0       	ldi	r24, 0x06	; 6
    3166:	05 c0       	rjmp	.+10     	; 0x3172 <bmi160_extract_gyro+0x7a>
	} else if (dev->fifo->fifo_data_enable == BMI160_FIFO_G_A_ENABLE) {
    3168:	80 3c       	cpi	r24, 0xC0	; 192
    316a:	39 f4       	brne	.+14     	; 0x317a <bmi160_extract_gyro+0x82>
		*data_read_length = (*gyro_frame_count) * BMI160_FIFO_GA_LENGTH;
    316c:	db 01       	movw	r26, r22
    316e:	9c 91       	ld	r25, X
    3170:	8c e0       	ldi	r24, 0x0C	; 12
    3172:	98 9f       	mul	r25, r24
    3174:	90 01       	movw	r18, r0
    3176:	11 24       	eor	r1, r1
    3178:	12 c0       	rjmp	.+36     	; 0x319e <bmi160_extract_gyro+0xa6>
	} else if (dev->fifo->fifo_data_enable == BMI160_FIFO_M_G_ENABLE) {
    317a:	80 3a       	cpi	r24, 0xA0	; 160
    317c:	21 f4       	brne	.+8      	; 0x3186 <bmi160_extract_gyro+0x8e>
		*data_read_length = (*gyro_frame_count) * BMI160_FIFO_MG_LENGTH;
    317e:	db 01       	movw	r26, r22
    3180:	9c 91       	ld	r25, X
    3182:	8e e0       	ldi	r24, 0x0E	; 14
    3184:	f6 cf       	rjmp	.-20     	; 0x3172 <bmi160_extract_gyro+0x7a>
	} else if (dev->fifo->fifo_data_enable == BMI160_FIFO_M_G_A_ENABLE) {
    3186:	80 3e       	cpi	r24, 0xE0	; 224
    3188:	21 f4       	brne	.+8      	; 0x3192 <bmi160_extract_gyro+0x9a>
		*data_read_length = (*gyro_frame_count) * BMI160_FIFO_MGA_LENGTH;
    318a:	db 01       	movw	r26, r22
    318c:	9c 91       	ld	r25, X
    318e:	84 e1       	ldi	r24, 0x14	; 20
    3190:	f0 cf       	rjmp	.-32     	; 0x3172 <bmi160_extract_gyro+0x7a>
	} else {
		/* When gyro is not enabled ,there will be no gyro data.
		so we update the data index as complete */
		*data_index = dev->fifo->length;
    3192:	82 81       	ldd	r24, Z+2	; 0x02
    3194:	93 81       	ldd	r25, Z+3	; 0x03
    3196:	9c 83       	std	Y+4, r25	; 0x04
    3198:	8b 83       	std	Y+3, r24	; 0x03
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	82 81       	ldd	r24, Z+2	; 0x02
    31a0:	93 81       	ldd	r25, Z+3	; 0x03
    31a2:	79 01       	movw	r14, r18
    31a4:	82 17       	cp	r24, r18
    31a6:	93 07       	cpc	r25, r19
    31a8:	98 f4       	brcc	.+38     	; 0x31d0 <bmi160_extract_gyro+0xd8>
    31aa:	7c 01       	movw	r14, r24
    31ac:	11 c0       	rjmp	.+34     	; 0x31d0 <bmi160_extract_gyro+0xd8>
		if (dev->fifo->fifo_header_enable == 0) {
			/* Number of bytes to be parsed from FIFO */
			get_gyro_len_to_parse(&data_index, &data_read_length, gyro_length, dev);
			for (; data_index < data_read_length ;) {
				/*Check for the availability of next two bytes of FIFO data */
				check_frame_validity(&data_index, dev);
    31ae:	c4 01       	movw	r24, r8
    31b0:	b6 01       	movw	r22, r12
    31b2:	0e 94 04 17 	call	0x2e08	; 0x2e08 <check_frame_validity>
				fifo_data_enable = dev->fifo->fifo_data_enable;
				unpack_gyro_frame(gyro_data, &data_index, &gyro_index, fifo_data_enable, dev);
    31b6:	d6 01       	movw	r26, r12
    31b8:	58 96       	adiw	r26, 0x18	; 24
    31ba:	ed 91       	ld	r30, X+
    31bc:	fc 91       	ld	r31, X
    31be:	59 97       	sbiw	r26, 0x19	; 25
    31c0:	c2 01       	movw	r24, r4
    31c2:	b4 01       	movw	r22, r8
    31c4:	a3 01       	movw	r20, r6
    31c6:	26 81       	ldd	r18, Z+6	; 0x06
    31c8:	86 01       	movw	r16, r12
    31ca:	0e 94 11 15 	call	0x2a22	; 0x2a22 <unpack_gyro_frame>
    31ce:	09 c0       	rjmp	.+18     	; 0x31e2 <bmi160_extract_gyro+0xea>
		if (dev->fifo->fifo_header_enable == 0) {
			/* Number of bytes to be parsed from FIFO */
			get_gyro_len_to_parse(&data_index, &data_read_length, gyro_length, dev);
			for (; data_index < data_read_length ;) {
				/*Check for the availability of next two bytes of FIFO data */
				check_frame_validity(&data_index, dev);
    31d0:	73 e0       	ldi	r23, 0x03	; 3
    31d2:	87 2e       	mov	r8, r23
    31d4:	91 2c       	mov	r9, r1
    31d6:	8c 0e       	add	r8, r28
    31d8:	9d 1e       	adc	r9, r29
				fifo_data_enable = dev->fifo->fifo_data_enable;
				unpack_gyro_frame(gyro_data, &data_index, &gyro_index, fifo_data_enable, dev);
    31da:	3e 01       	movw	r6, r28
    31dc:	08 94       	sec
    31de:	61 1c       	adc	r6, r1
    31e0:	71 1c       	adc	r7, r1
	} else {
		/* Parsing the FIFO data in header-less mode */
		if (dev->fifo->fifo_header_enable == 0) {
			/* Number of bytes to be parsed from FIFO */
			get_gyro_len_to_parse(&data_index, &data_read_length, gyro_length, dev);
			for (; data_index < data_read_length ;) {
    31e2:	2b 81       	ldd	r18, Y+3	; 0x03
    31e4:	3c 81       	ldd	r19, Y+4	; 0x04
    31e6:	2e 15       	cp	r18, r14
    31e8:	3f 05       	cpc	r19, r15
    31ea:	08 f3       	brcs	.-62     	; 0x31ae <bmi160_extract_gyro+0xb6>
				check_frame_validity(&data_index, dev);
				fifo_data_enable = dev->fifo->fifo_data_enable;
				unpack_gyro_frame(gyro_data, &data_index, &gyro_index, fifo_data_enable, dev);
			}
			/* update number of gyro data read */
			*gyro_length = gyro_index;
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	f5 01       	movw	r30, r10
    31f0:	80 83       	st	Z, r24
			/* update the gyro byte index */
			dev->fifo->gyro_byte_start_idx = data_index;
    31f2:	d6 01       	movw	r26, r12
    31f4:	58 96       	adiw	r26, 0x18	; 24
    31f6:	ed 91       	ld	r30, X+
    31f8:	fc 91       	ld	r31, X
    31fa:	59 97       	sbiw	r26, 0x19	; 25
    31fc:	32 87       	std	Z+10, r19	; 0x0a
    31fe:	21 87       	std	Z+9, r18	; 0x09
    3200:	83 c0       	rjmp	.+262    	; 0x3308 <bmi160_extract_gyro+0x210>
static void extract_gyro_header_mode(struct bmi160_sensor_data *gyro_data, uint8_t *gyro_length,
					const struct bmi160_dev *dev)
{
	uint8_t frame_header = 0;
	uint16_t data_index;
	uint8_t gyro_index = 0;
    3202:	1a 82       	std	Y+2, r1	; 0x02

	for (data_index = dev->fifo->gyro_byte_start_idx; data_index < dev->fifo->length;) {
    3204:	81 85       	ldd	r24, Z+9	; 0x09
    3206:	92 85       	ldd	r25, Z+10	; 0x0a
    3208:	9e 83       	std	Y+6, r25	; 0x06
    320a:	8d 83       	std	Y+5, r24	; 0x05
			/* GYRO frame */
		case BMI160_FIFO_HEAD_G:
		case BMI160_FIFO_HEAD_G_A:
		case BMI160_FIFO_HEAD_M_G:
		case BMI160_FIFO_HEAD_M_G_A:
			unpack_gyro_frame(gyro_data, &data_index, &gyro_index, frame_header, dev);
    320c:	65 e0       	ldi	r22, 0x05	; 5
    320e:	e6 2e       	mov	r14, r22
    3210:	f1 2c       	mov	r15, r1
    3212:	ec 0e       	add	r14, r28
    3214:	fd 1e       	adc	r15, r29
    3216:	52 e0       	ldi	r21, 0x02	; 2
    3218:	85 2e       	mov	r8, r21
    321a:	91 2c       	mov	r9, r1
    321c:	8c 0e       	add	r8, r28
    321e:	9d 1e       	adc	r9, r29
    3220:	59 c0       	rjmp	.+178    	; 0x32d4 <bmi160_extract_gyro+0x1dc>
	uint16_t data_index;
	uint8_t gyro_index = 0;

	for (data_index = dev->fifo->gyro_byte_start_idx; data_index < dev->fifo->length;) {
		/* extracting Frame header */
		frame_header = (dev->fifo->data[data_index] & BMI160_FIFO_TAG_INTR_MASK);
    3222:	f8 01       	movw	r30, r16
    3224:	a0 81       	ld	r26, Z
    3226:	b1 81       	ldd	r27, Z+1	; 0x01
    3228:	fd 01       	movw	r30, r26
    322a:	e8 0f       	add	r30, r24
    322c:	f9 1f       	adc	r31, r25
    322e:	20 81       	ld	r18, Z
    3230:	2c 7f       	andi	r18, 0xFC	; 252
		/*Index is moved to next byte where the data is starting*/
		data_index++;
    3232:	ac 01       	movw	r20, r24
    3234:	4f 5f       	subi	r20, 0xFF	; 255
    3236:	5f 4f       	sbci	r21, 0xFF	; 255
    3238:	5e 83       	std	Y+6, r21	; 0x06
    323a:	4d 83       	std	Y+5, r20	; 0x05

		switch (frame_header) {
    323c:	28 38       	cpi	r18, 0x88	; 136
    323e:	e9 f0       	breq	.+58     	; 0x327a <bmi160_extract_gyro+0x182>
    3240:	29 38       	cpi	r18, 0x89	; 137
    3242:	70 f4       	brcc	.+28     	; 0x3260 <bmi160_extract_gyro+0x168>
    3244:	28 34       	cpi	r18, 0x48	; 72
    3246:	b9 f1       	breq	.+110    	; 0x32b6 <bmi160_extract_gyro+0x1be>
    3248:	29 34       	cpi	r18, 0x49	; 73
    324a:	28 f4       	brcc	.+10     	; 0x3256 <bmi160_extract_gyro+0x15e>
    324c:	20 34       	cpi	r18, 0x40	; 64
    324e:	29 f1       	breq	.+74     	; 0x329a <bmi160_extract_gyro+0x1a2>
    3250:	24 34       	cpi	r18, 0x44	; 68
    3252:	d9 f5       	brne	.+118    	; 0x32ca <bmi160_extract_gyro+0x1d2>
    3254:	1d c0       	rjmp	.+58     	; 0x3290 <bmi160_extract_gyro+0x198>
    3256:	20 38       	cpi	r18, 0x80	; 128
    3258:	b1 f1       	breq	.+108    	; 0x32c6 <bmi160_extract_gyro+0x1ce>
    325a:	24 38       	cpi	r18, 0x84	; 132
    325c:	b1 f5       	brne	.+108    	; 0x32ca <bmi160_extract_gyro+0x1d2>
    325e:	14 c0       	rjmp	.+40     	; 0x3288 <bmi160_extract_gyro+0x190>
    3260:	24 39       	cpi	r18, 0x94	; 148
    3262:	a1 f0       	breq	.+40     	; 0x328c <bmi160_extract_gyro+0x194>
    3264:	25 39       	cpi	r18, 0x95	; 149
    3266:	28 f4       	brcc	.+10     	; 0x3272 <bmi160_extract_gyro+0x17a>
    3268:	2c 38       	cpi	r18, 0x8C	; 140
    326a:	39 f0       	breq	.+14     	; 0x327a <bmi160_extract_gyro+0x182>
    326c:	20 39       	cpi	r18, 0x90	; 144
    326e:	69 f5       	brne	.+90     	; 0x32ca <bmi160_extract_gyro+0x1d2>
    3270:	0d c0       	rjmp	.+26     	; 0x328c <bmi160_extract_gyro+0x194>
    3272:	28 39       	cpi	r18, 0x98	; 152
    3274:	11 f0       	breq	.+4      	; 0x327a <bmi160_extract_gyro+0x182>
    3276:	2c 39       	cpi	r18, 0x9C	; 156
    3278:	41 f5       	brne	.+80     	; 0x32ca <bmi160_extract_gyro+0x1d2>
			/* GYRO frame */
		case BMI160_FIFO_HEAD_G:
		case BMI160_FIFO_HEAD_G_A:
		case BMI160_FIFO_HEAD_M_G:
		case BMI160_FIFO_HEAD_M_G_A:
			unpack_gyro_frame(gyro_data, &data_index, &gyro_index, frame_header, dev);
    327a:	c2 01       	movw	r24, r4
    327c:	b7 01       	movw	r22, r14
    327e:	a4 01       	movw	r20, r8
    3280:	86 01       	movw	r16, r12
    3282:	0e 94 11 15 	call	0x2a22	; 0x2a22 <unpack_gyro_frame>
    3286:	21 c0       	rjmp	.+66     	; 0x32ca <bmi160_extract_gyro+0x1d2>
 *  extracting the user specified data.
 */
static void move_next_frame(uint16_t *data_index, uint8_t current_frame_length, const struct bmi160_dev *dev)
{
	/*Partial read, then move the data index to last data*/
	if ((*data_index + current_frame_length) > dev->fifo->length) {
    3288:	07 96       	adiw	r24, 0x07	; 7
    328a:	17 c0       	rjmp	.+46     	; 0x32ba <bmi160_extract_gyro+0x1c2>
		case BMI160_FIFO_HEAD_M_A:
			move_next_frame(&data_index, BMI160_FIFO_M_LENGTH, dev);
			break;
			/* Sensor time frame */
		case BMI160_FIFO_HEAD_SENSOR_TIME:
			unpack_sensortime_frame(&data_index, dev);
    328c:	09 96       	adiw	r24, 0x09	; 9
    328e:	15 c0       	rjmp	.+42     	; 0x32ba <bmi160_extract_gyro+0x1c2>
    3290:	c7 01       	movw	r24, r14
    3292:	b6 01       	movw	r22, r12
    3294:	0e 94 21 17 	call	0x2e42	; 0x2e42 <unpack_sensortime_frame>
    3298:	18 c0       	rjmp	.+48     	; 0x32ca <bmi160_extract_gyro+0x1d2>
 *  the FIFO data in the structure instance dev.
 */
static void unpack_skipped_frame(uint16_t *data_index, const struct bmi160_dev *dev)
{
	/*Partial read, then move the data index to last data*/
	if (*data_index >= dev->fifo->length) {
    329a:	46 17       	cp	r20, r22
    329c:	57 07       	cpc	r21, r23
    329e:	98 f4       	brcc	.+38     	; 0x32c6 <bmi160_extract_gyro+0x1ce>
		/*Update the data index as complete*/
		*data_index = dev->fifo->length;
	} else {
		dev->fifo->skipped_frame_count = dev->fifo->data[*data_index];
    32a0:	a4 0f       	add	r26, r20
    32a2:	b5 1f       	adc	r27, r21
    32a4:	8c 91       	ld	r24, X
    32a6:	d8 01       	movw	r26, r16
    32a8:	51 96       	adiw	r26, 0x11	; 17
    32aa:	8c 93       	st	X, r24
		/*Move the data index*/
		*data_index = (*data_index) + 1;
    32ac:	4f 5f       	subi	r20, 0xFF	; 255
    32ae:	5f 4f       	sbci	r21, 0xFF	; 255
    32b0:	5e 83       	std	Y+6, r21	; 0x06
    32b2:	4d 83       	std	Y+5, r20	; 0x05
    32b4:	0a c0       	rjmp	.+20     	; 0x32ca <bmi160_extract_gyro+0x1d2>
 *  extracting the user specified data.
 */
static void move_next_frame(uint16_t *data_index, uint8_t current_frame_length, const struct bmi160_dev *dev)
{
	/*Partial read, then move the data index to last data*/
	if ((*data_index + current_frame_length) > dev->fifo->length) {
    32b6:	ca 01       	movw	r24, r20
    32b8:	01 96       	adiw	r24, 0x01	; 1
    32ba:	68 17       	cp	r22, r24
    32bc:	79 07       	cpc	r23, r25
    32be:	18 f0       	brcs	.+6      	; 0x32c6 <bmi160_extract_gyro+0x1ce>
		/*Update the data index as complete*/
		*data_index = dev->fifo->length;
	} else {
		/*Move the data index to next frame*/
		*data_index = *data_index + current_frame_length;
    32c0:	9e 83       	std	Y+6, r25	; 0x06
    32c2:	8d 83       	std	Y+5, r24	; 0x05
    32c4:	02 c0       	rjmp	.+4      	; 0x32ca <bmi160_extract_gyro+0x1d2>
		case BMI160_FIFO_HEAD_INPUT_CONFIG:
			move_next_frame(&data_index, 1, dev);
			break;
		case BMI160_FIFO_HEAD_OVER_READ:
			/* Update the data index as complete in case of over read */
			data_index = dev->fifo->length;
    32c6:	7e 83       	std	Y+6, r23	; 0x06
    32c8:	6d 83       	std	Y+5, r22	; 0x05
			break;
		default:
			break;
		}
		if (*gyro_length == gyro_index) {
    32ca:	f5 01       	movw	r30, r10
    32cc:	90 81       	ld	r25, Z
    32ce:	8a 81       	ldd	r24, Y+2	; 0x02
    32d0:	98 17       	cp	r25, r24
    32d2:	71 f0       	breq	.+28     	; 0x32f0 <bmi160_extract_gyro+0x1f8>
{
	uint8_t frame_header = 0;
	uint16_t data_index;
	uint8_t gyro_index = 0;

	for (data_index = dev->fifo->gyro_byte_start_idx; data_index < dev->fifo->length;) {
    32d4:	8d 81       	ldd	r24, Y+5	; 0x05
    32d6:	9e 81       	ldd	r25, Y+6	; 0x06
    32d8:	d6 01       	movw	r26, r12
    32da:	58 96       	adiw	r26, 0x18	; 24
    32dc:	0d 91       	ld	r16, X+
    32de:	1c 91       	ld	r17, X
    32e0:	59 97       	sbiw	r26, 0x19	; 25
    32e2:	f8 01       	movw	r30, r16
    32e4:	62 81       	ldd	r22, Z+2	; 0x02
    32e6:	73 81       	ldd	r23, Z+3	; 0x03
    32e8:	86 17       	cp	r24, r22
    32ea:	97 07       	cpc	r25, r23
    32ec:	08 f4       	brcc	.+2      	; 0x32f0 <bmi160_extract_gyro+0x1f8>
    32ee:	99 cf       	rjmp	.-206    	; 0x3222 <bmi160_extract_gyro+0x12a>
			break;
		}
	}

	/*Update number of gyro data read*/
	*gyro_length = gyro_index;
    32f0:	8a 81       	ldd	r24, Y+2	; 0x02
    32f2:	d5 01       	movw	r26, r10
    32f4:	8c 93       	st	X, r24
	/*Update the gyro frame index*/
	dev->fifo->gyro_byte_start_idx = data_index;
    32f6:	d6 01       	movw	r26, r12
    32f8:	58 96       	adiw	r26, 0x18	; 24
    32fa:	ed 91       	ld	r30, X+
    32fc:	fc 91       	ld	r31, X
    32fe:	59 97       	sbiw	r26, 0x19	; 25
    3300:	8d 81       	ldd	r24, Y+5	; 0x05
    3302:	9e 81       	ldd	r25, Y+6	; 0x06
    3304:	92 87       	std	Z+10, r25	; 0x0a
    3306:	81 87       	std	Z+9, r24	; 0x09
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	01 c0       	rjmp	.+2      	; 0x330e <bmi160_extract_gyro+0x216>
    330c:	8f ef       	ldi	r24, 0xFF	; 255
			extract_gyro_header_mode(gyro_data, gyro_length, dev);
		}
	}

	return rslt;
}
    330e:	26 96       	adiw	r28, 0x06	; 6
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	cd bf       	out	0x3d, r28	; 61
    331a:	cf 91       	pop	r28
    331c:	df 91       	pop	r29
    331e:	1f 91       	pop	r17
    3320:	0f 91       	pop	r16
    3322:	ff 90       	pop	r15
    3324:	ef 90       	pop	r14
    3326:	df 90       	pop	r13
    3328:	cf 90       	pop	r12
    332a:	bf 90       	pop	r11
    332c:	af 90       	pop	r10
    332e:	9f 90       	pop	r9
    3330:	8f 90       	pop	r8
    3332:	7f 90       	pop	r7
    3334:	6f 90       	pop	r6
    3336:	5f 90       	pop	r5
    3338:	4f 90       	pop	r4
    333a:	08 95       	ret

0000333c <bmi160_extract_accel>:
 *  @brief This API parses and extracts the accelerometer frames from
 *  FIFO data read by the "bmi160_get_fifo_data" API and stores it in
 *  the "accel_data" structure instance.
 */
int8_t bmi160_extract_accel(struct bmi160_sensor_data *accel_data, uint8_t *accel_length, struct bmi160_dev const *dev)
{
    333c:	4f 92       	push	r4
    333e:	5f 92       	push	r5
    3340:	6f 92       	push	r6
    3342:	7f 92       	push	r7
    3344:	8f 92       	push	r8
    3346:	9f 92       	push	r9
    3348:	af 92       	push	r10
    334a:	bf 92       	push	r11
    334c:	cf 92       	push	r12
    334e:	df 92       	push	r13
    3350:	ef 92       	push	r14
    3352:	ff 92       	push	r15
    3354:	0f 93       	push	r16
    3356:	1f 93       	push	r17
    3358:	df 93       	push	r29
    335a:	cf 93       	push	r28
    335c:	00 d0       	rcall	.+0      	; 0x335e <bmi160_extract_accel+0x22>
    335e:	00 d0       	rcall	.+0      	; 0x3360 <bmi160_extract_accel+0x24>
    3360:	00 d0       	rcall	.+0      	; 0x3362 <bmi160_extract_accel+0x26>
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	2c 01       	movw	r4, r24
    3368:	5b 01       	movw	r10, r22
    336a:	6a 01       	movw	r12, r20
	uint16_t data_index = 0;
	uint16_t data_read_length = 0;
	uint8_t accel_index = 0;
	uint8_t fifo_data_enable = 0;

	if (dev == NULL || dev->fifo == NULL || dev->fifo->data == NULL) {
    336c:	41 15       	cp	r20, r1
    336e:	51 05       	cpc	r21, r1
    3370:	09 f4       	brne	.+2      	; 0x3374 <bmi160_extract_accel+0x38>
    3372:	fe c0       	rjmp	.+508    	; 0x3570 <bmi160_extract_accel+0x234>
    3374:	da 01       	movw	r26, r20
    3376:	58 96       	adiw	r26, 0x18	; 24
    3378:	ed 91       	ld	r30, X+
    337a:	fc 91       	ld	r31, X
    337c:	59 97       	sbiw	r26, 0x19	; 25
    337e:	30 97       	sbiw	r30, 0x00	; 0
    3380:	09 f4       	brne	.+2      	; 0x3384 <bmi160_extract_accel+0x48>
    3382:	f6 c0       	rjmp	.+492    	; 0x3570 <bmi160_extract_accel+0x234>
    3384:	80 81       	ld	r24, Z
    3386:	91 81       	ldd	r25, Z+1	; 0x01
    3388:	89 2b       	or	r24, r25
    338a:	09 f4       	brne	.+2      	; 0x338e <bmi160_extract_accel+0x52>
    338c:	f1 c0       	rjmp	.+482    	; 0x3570 <bmi160_extract_accel+0x234>
 *  the "accel_data" structure instance.
 */
int8_t bmi160_extract_accel(struct bmi160_sensor_data *accel_data, uint8_t *accel_length, struct bmi160_dev const *dev)
{
	int8_t rslt = 0;
	uint16_t data_index = 0;
    338e:	1c 82       	std	Y+4, r1	; 0x04
    3390:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t data_read_length = 0;
	uint8_t accel_index = 0;
    3392:	19 82       	std	Y+1, r1	; 0x01

	if (dev == NULL || dev->fifo == NULL || dev->fifo->data == NULL) {
		rslt = BMI160_E_NULL_PTR;
	} else {
		/* Parsing the FIFO data in header-less mode */
		if (dev->fifo->fifo_header_enable == 0) {
    3394:	85 81       	ldd	r24, Z+5	; 0x05
    3396:	88 23       	and	r24, r24
    3398:	09 f0       	breq	.+2      	; 0x339c <bmi160_extract_accel+0x60>
    339a:	58 c0       	rjmp	.+176    	; 0x344c <bmi160_extract_accel+0x110>
 */
static void get_accel_len_to_parse(uint16_t *data_index, uint16_t *data_read_length, const uint8_t *acc_frame_count,
				const struct bmi160_dev *dev)
{
	/* Data start index */
	*data_index = dev->fifo->accel_byte_start_idx;
    339c:	87 81       	ldd	r24, Z+7	; 0x07
    339e:	90 85       	ldd	r25, Z+8	; 0x08
    33a0:	9c 83       	std	Y+4, r25	; 0x04
    33a2:	8b 83       	std	Y+3, r24	; 0x03

	if (dev->fifo->fifo_data_enable == BMI160_FIFO_A_ENABLE) {
    33a4:	86 81       	ldd	r24, Z+6	; 0x06
    33a6:	80 34       	cpi	r24, 0x40	; 64
    33a8:	21 f4       	brne	.+8      	; 0x33b2 <bmi160_extract_accel+0x76>
		*data_read_length = (*acc_frame_count) * BMI160_FIFO_A_LENGTH;
    33aa:	db 01       	movw	r26, r22
    33ac:	9c 91       	ld	r25, X
    33ae:	86 e0       	ldi	r24, 0x06	; 6
    33b0:	05 c0       	rjmp	.+10     	; 0x33bc <bmi160_extract_accel+0x80>
	} else if (dev->fifo->fifo_data_enable == BMI160_FIFO_G_A_ENABLE) {
    33b2:	80 3c       	cpi	r24, 0xC0	; 192
    33b4:	39 f4       	brne	.+14     	; 0x33c4 <bmi160_extract_accel+0x88>
		*data_read_length = (*acc_frame_count) * BMI160_FIFO_GA_LENGTH;
    33b6:	db 01       	movw	r26, r22
    33b8:	9c 91       	ld	r25, X
    33ba:	8c e0       	ldi	r24, 0x0C	; 12
    33bc:	98 9f       	mul	r25, r24
    33be:	90 01       	movw	r18, r0
    33c0:	11 24       	eor	r1, r1
    33c2:	12 c0       	rjmp	.+36     	; 0x33e8 <bmi160_extract_accel+0xac>
	} else if (dev->fifo->fifo_data_enable == BMI160_FIFO_M_A_ENABLE) {
    33c4:	80 36       	cpi	r24, 0x60	; 96
    33c6:	21 f4       	brne	.+8      	; 0x33d0 <bmi160_extract_accel+0x94>
		*data_read_length = (*acc_frame_count) * BMI160_FIFO_MA_LENGTH;
    33c8:	db 01       	movw	r26, r22
    33ca:	9c 91       	ld	r25, X
    33cc:	8e e0       	ldi	r24, 0x0E	; 14
    33ce:	f6 cf       	rjmp	.-20     	; 0x33bc <bmi160_extract_accel+0x80>
	} else if (dev->fifo->fifo_data_enable == BMI160_FIFO_M_G_A_ENABLE) {
    33d0:	80 3e       	cpi	r24, 0xE0	; 224
    33d2:	21 f4       	brne	.+8      	; 0x33dc <bmi160_extract_accel+0xa0>
		*data_read_length = (*acc_frame_count) * BMI160_FIFO_MGA_LENGTH;
    33d4:	db 01       	movw	r26, r22
    33d6:	9c 91       	ld	r25, X
    33d8:	84 e1       	ldi	r24, 0x14	; 20
    33da:	f0 cf       	rjmp	.-32     	; 0x33bc <bmi160_extract_accel+0x80>
	} else {
		/* When accel is not enabled ,there will be no accel data.
		so we update the data index as complete */
		*data_index = dev->fifo->length;
    33dc:	82 81       	ldd	r24, Z+2	; 0x02
    33de:	93 81       	ldd	r25, Z+3	; 0x03
    33e0:	9c 83       	std	Y+4, r25	; 0x04
    33e2:	8b 83       	std	Y+3, r24	; 0x03
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	82 81       	ldd	r24, Z+2	; 0x02
    33ea:	93 81       	ldd	r25, Z+3	; 0x03
    33ec:	79 01       	movw	r14, r18
    33ee:	82 17       	cp	r24, r18
    33f0:	93 07       	cpc	r25, r19
    33f2:	98 f4       	brcc	.+38     	; 0x341a <bmi160_extract_accel+0xde>
    33f4:	7c 01       	movw	r14, r24
    33f6:	11 c0       	rjmp	.+34     	; 0x341a <bmi160_extract_accel+0xde>
		if (dev->fifo->fifo_header_enable == 0) {
			/* Number of bytes to be parsed from FIFO */
			get_accel_len_to_parse(&data_index, &data_read_length, accel_length, dev);
			for (; data_index < data_read_length; ) {
				/*Check for the availability of next two bytes of FIFO data */
				check_frame_validity(&data_index, dev);
    33f8:	c4 01       	movw	r24, r8
    33fa:	b6 01       	movw	r22, r12
    33fc:	0e 94 04 17 	call	0x2e08	; 0x2e08 <check_frame_validity>
				fifo_data_enable = dev->fifo->fifo_data_enable;
				unpack_accel_frame(accel_data, &data_index, &accel_index, fifo_data_enable, dev);
    3400:	d6 01       	movw	r26, r12
    3402:	58 96       	adiw	r26, 0x18	; 24
    3404:	ed 91       	ld	r30, X+
    3406:	fc 91       	ld	r31, X
    3408:	59 97       	sbiw	r26, 0x19	; 25
    340a:	c2 01       	movw	r24, r4
    340c:	b4 01       	movw	r22, r8
    340e:	a3 01       	movw	r20, r6
    3410:	26 81       	ldd	r18, Z+6	; 0x06
    3412:	86 01       	movw	r16, r12
    3414:	0e 94 fd 13 	call	0x27fa	; 0x27fa <unpack_accel_frame>
    3418:	09 c0       	rjmp	.+18     	; 0x342c <bmi160_extract_accel+0xf0>
		if (dev->fifo->fifo_header_enable == 0) {
			/* Number of bytes to be parsed from FIFO */
			get_accel_len_to_parse(&data_index, &data_read_length, accel_length, dev);
			for (; data_index < data_read_length; ) {
				/*Check for the availability of next two bytes of FIFO data */
				check_frame_validity(&data_index, dev);
    341a:	a3 e0       	ldi	r26, 0x03	; 3
    341c:	8a 2e       	mov	r8, r26
    341e:	91 2c       	mov	r9, r1
    3420:	8c 0e       	add	r8, r28
    3422:	9d 1e       	adc	r9, r29
				fifo_data_enable = dev->fifo->fifo_data_enable;
				unpack_accel_frame(accel_data, &data_index, &accel_index, fifo_data_enable, dev);
    3424:	3e 01       	movw	r6, r28
    3426:	08 94       	sec
    3428:	61 1c       	adc	r6, r1
    342a:	71 1c       	adc	r7, r1
	} else {
		/* Parsing the FIFO data in header-less mode */
		if (dev->fifo->fifo_header_enable == 0) {
			/* Number of bytes to be parsed from FIFO */
			get_accel_len_to_parse(&data_index, &data_read_length, accel_length, dev);
			for (; data_index < data_read_length; ) {
    342c:	2b 81       	ldd	r18, Y+3	; 0x03
    342e:	3c 81       	ldd	r19, Y+4	; 0x04
    3430:	2e 15       	cp	r18, r14
    3432:	3f 05       	cpc	r19, r15
    3434:	08 f3       	brcs	.-62     	; 0x33f8 <bmi160_extract_accel+0xbc>
				check_frame_validity(&data_index, dev);
				fifo_data_enable = dev->fifo->fifo_data_enable;
				unpack_accel_frame(accel_data, &data_index, &accel_index, fifo_data_enable, dev);
			}
			/* update number of accel data read*/
			*accel_length = accel_index;
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	f5 01       	movw	r30, r10
    343a:	80 83       	st	Z, r24
			/*update the accel byte index*/
			dev->fifo->accel_byte_start_idx = data_index;
    343c:	d6 01       	movw	r26, r12
    343e:	58 96       	adiw	r26, 0x18	; 24
    3440:	ed 91       	ld	r30, X+
    3442:	fc 91       	ld	r31, X
    3444:	59 97       	sbiw	r26, 0x19	; 25
    3446:	30 87       	std	Z+8, r19	; 0x08
    3448:	27 83       	std	Z+7, r18	; 0x07
    344a:	90 c0       	rjmp	.+288    	; 0x356c <bmi160_extract_accel+0x230>
static void extract_accel_header_mode(struct bmi160_sensor_data *accel_data, uint8_t *accel_length,
					const struct bmi160_dev *dev)
{
	uint8_t frame_header = 0;
	uint16_t data_index;
	uint8_t accel_index = 0;
    344c:	1a 82       	std	Y+2, r1	; 0x02

	for (data_index = dev->fifo->accel_byte_start_idx; data_index < dev->fifo->length;) {
    344e:	87 81       	ldd	r24, Z+7	; 0x07
    3450:	90 85       	ldd	r25, Z+8	; 0x08
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
		/* Accel frame */
		case BMI160_FIFO_HEAD_A:
		case BMI160_FIFO_HEAD_M_A:
		case BMI160_FIFO_HEAD_G_A:
		case BMI160_FIFO_HEAD_M_G_A:
			unpack_accel_frame(accel_data, &data_index, &accel_index, frame_header, dev);
    3456:	f5 e0       	ldi	r31, 0x05	; 5
    3458:	ef 2e       	mov	r14, r31
    345a:	f1 2c       	mov	r15, r1
    345c:	ec 0e       	add	r14, r28
    345e:	fd 1e       	adc	r15, r29
    3460:	e2 e0       	ldi	r30, 0x02	; 2
    3462:	8e 2e       	mov	r8, r30
    3464:	91 2c       	mov	r9, r1
    3466:	8c 0e       	add	r8, r28
    3468:	9d 1e       	adc	r9, r29
    346a:	66 c0       	rjmp	.+204    	; 0x3538 <bmi160_extract_accel+0x1fc>
	uint16_t data_index;
	uint8_t accel_index = 0;

	for (data_index = dev->fifo->accel_byte_start_idx; data_index < dev->fifo->length;) {
		/* extracting Frame header */
		frame_header = (dev->fifo->data[data_index] & BMI160_FIFO_TAG_INTR_MASK);
    346c:	f8 01       	movw	r30, r16
    346e:	a0 81       	ld	r26, Z
    3470:	b1 81       	ldd	r27, Z+1	; 0x01
    3472:	fd 01       	movw	r30, r26
    3474:	e6 0f       	add	r30, r22
    3476:	f7 1f       	adc	r31, r23
    3478:	20 81       	ld	r18, Z
    347a:	2c 7f       	andi	r18, 0xFC	; 252
		/*Index is moved to next byte where the data is starting*/
		data_index++;
    347c:	ab 01       	movw	r20, r22
    347e:	4f 5f       	subi	r20, 0xFF	; 255
    3480:	5f 4f       	sbci	r21, 0xFF	; 255
    3482:	5e 83       	std	Y+6, r21	; 0x06
    3484:	4d 83       	std	Y+5, r20	; 0x05

		switch (frame_header) {
    3486:	28 38       	cpi	r18, 0x88	; 136
    3488:	61 f1       	breq	.+88     	; 0x34e2 <bmi160_extract_accel+0x1a6>
    348a:	29 38       	cpi	r18, 0x89	; 137
    348c:	90 f4       	brcc	.+36     	; 0x34b2 <bmi160_extract_accel+0x176>
    348e:	28 34       	cpi	r18, 0x48	; 72
    3490:	09 f4       	brne	.+2      	; 0x3494 <bmi160_extract_accel+0x158>
    3492:	42 c0       	rjmp	.+132    	; 0x3518 <bmi160_extract_accel+0x1dc>
    3494:	29 34       	cpi	r18, 0x49	; 73
    3496:	30 f4       	brcc	.+12     	; 0x34a4 <bmi160_extract_accel+0x168>
    3498:	20 34       	cpi	r18, 0x40	; 64
    349a:	81 f1       	breq	.+96     	; 0x34fc <bmi160_extract_accel+0x1c0>
    349c:	24 34       	cpi	r18, 0x44	; 68
    349e:	09 f0       	breq	.+2      	; 0x34a2 <bmi160_extract_accel+0x166>
    34a0:	46 c0       	rjmp	.+140    	; 0x352e <bmi160_extract_accel+0x1f2>
    34a2:	27 c0       	rjmp	.+78     	; 0x34f2 <bmi160_extract_accel+0x1b6>
    34a4:	20 38       	cpi	r18, 0x80	; 128
    34a6:	09 f4       	brne	.+2      	; 0x34aa <bmi160_extract_accel+0x16e>
    34a8:	40 c0       	rjmp	.+128    	; 0x352a <bmi160_extract_accel+0x1ee>
    34aa:	24 38       	cpi	r18, 0x84	; 132
    34ac:	09 f0       	breq	.+2      	; 0x34b0 <bmi160_extract_accel+0x174>
    34ae:	3f c0       	rjmp	.+126    	; 0x352e <bmi160_extract_accel+0x1f2>
    34b0:	0d c0       	rjmp	.+26     	; 0x34cc <bmi160_extract_accel+0x190>
    34b2:	24 39       	cpi	r18, 0x94	; 148
    34b4:	59 f0       	breq	.+22     	; 0x34cc <bmi160_extract_accel+0x190>
    34b6:	25 39       	cpi	r18, 0x95	; 149
    34b8:	28 f4       	brcc	.+10     	; 0x34c4 <bmi160_extract_accel+0x188>
    34ba:	2c 38       	cpi	r18, 0x8C	; 140
    34bc:	39 f0       	breq	.+14     	; 0x34cc <bmi160_extract_accel+0x190>
    34be:	20 39       	cpi	r18, 0x90	; 144
    34c0:	b1 f5       	brne	.+108    	; 0x352e <bmi160_extract_accel+0x1f2>
    34c2:	0b c0       	rjmp	.+22     	; 0x34da <bmi160_extract_accel+0x19e>
    34c4:	28 39       	cpi	r18, 0x98	; 152
    34c6:	89 f0       	breq	.+34     	; 0x34ea <bmi160_extract_accel+0x1ae>
    34c8:	2c 39       	cpi	r18, 0x9C	; 156
    34ca:	89 f5       	brne	.+98     	; 0x352e <bmi160_extract_accel+0x1f2>
		/* Accel frame */
		case BMI160_FIFO_HEAD_A:
		case BMI160_FIFO_HEAD_M_A:
		case BMI160_FIFO_HEAD_G_A:
		case BMI160_FIFO_HEAD_M_G_A:
			unpack_accel_frame(accel_data, &data_index, &accel_index, frame_header, dev);
    34cc:	c2 01       	movw	r24, r4
    34ce:	b7 01       	movw	r22, r14
    34d0:	a4 01       	movw	r20, r8
    34d2:	86 01       	movw	r16, r12
    34d4:	0e 94 fd 13 	call	0x27fa	; 0x27fa <unpack_accel_frame>
    34d8:	2a c0       	rjmp	.+84     	; 0x352e <bmi160_extract_accel+0x1f2>
 *  extracting the user specified data.
 */
static void move_next_frame(uint16_t *data_index, uint8_t current_frame_length, const struct bmi160_dev *dev)
{
	/*Partial read, then move the data index to last data*/
	if ((*data_index + current_frame_length) > dev->fifo->length) {
    34da:	9b 01       	movw	r18, r22
    34dc:	27 5f       	subi	r18, 0xF7	; 247
    34de:	3f 4f       	sbci	r19, 0xFF	; 255
    34e0:	1e c0       	rjmp	.+60     	; 0x351e <bmi160_extract_accel+0x1e2>
		case BMI160_FIFO_HEAD_M_G:
			move_next_frame(&data_index, BMI160_FIFO_MG_LENGTH, dev);
			break;
			/* Sensor time frame */
		case BMI160_FIFO_HEAD_SENSOR_TIME:
			unpack_sensortime_frame(&data_index, dev);
    34e2:	9b 01       	movw	r18, r22
    34e4:	29 5f       	subi	r18, 0xF9	; 249
    34e6:	3f 4f       	sbci	r19, 0xFF	; 255
    34e8:	1a c0       	rjmp	.+52     	; 0x351e <bmi160_extract_accel+0x1e2>
    34ea:	9b 01       	movw	r18, r22
    34ec:	21 5f       	subi	r18, 0xF1	; 241
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	16 c0       	rjmp	.+44     	; 0x351e <bmi160_extract_accel+0x1e2>
    34f2:	c7 01       	movw	r24, r14
    34f4:	b6 01       	movw	r22, r12
    34f6:	0e 94 21 17 	call	0x2e42	; 0x2e42 <unpack_sensortime_frame>
    34fa:	19 c0       	rjmp	.+50     	; 0x352e <bmi160_extract_accel+0x1f2>
 *  the FIFO data in the structure instance dev.
 */
static void unpack_skipped_frame(uint16_t *data_index, const struct bmi160_dev *dev)
{
	/*Partial read, then move the data index to last data*/
	if (*data_index >= dev->fifo->length) {
    34fc:	48 17       	cp	r20, r24
    34fe:	59 07       	cpc	r21, r25
    3500:	a0 f4       	brcc	.+40     	; 0x352a <bmi160_extract_accel+0x1ee>
		/*Update the data index as complete*/
		*data_index = dev->fifo->length;
	} else {
		dev->fifo->skipped_frame_count = dev->fifo->data[*data_index];
    3502:	a4 0f       	add	r26, r20
    3504:	b5 1f       	adc	r27, r21
    3506:	8c 91       	ld	r24, X
    3508:	d8 01       	movw	r26, r16
    350a:	51 96       	adiw	r26, 0x11	; 17
    350c:	8c 93       	st	X, r24
		/*Move the data index*/
		*data_index = (*data_index) + 1;
    350e:	4f 5f       	subi	r20, 0xFF	; 255
    3510:	5f 4f       	sbci	r21, 0xFF	; 255
    3512:	5e 83       	std	Y+6, r21	; 0x06
    3514:	4d 83       	std	Y+5, r20	; 0x05
    3516:	0b c0       	rjmp	.+22     	; 0x352e <bmi160_extract_accel+0x1f2>
 *  extracting the user specified data.
 */
static void move_next_frame(uint16_t *data_index, uint8_t current_frame_length, const struct bmi160_dev *dev)
{
	/*Partial read, then move the data index to last data*/
	if ((*data_index + current_frame_length) > dev->fifo->length) {
    3518:	9a 01       	movw	r18, r20
    351a:	2f 5f       	subi	r18, 0xFF	; 255
    351c:	3f 4f       	sbci	r19, 0xFF	; 255
    351e:	82 17       	cp	r24, r18
    3520:	93 07       	cpc	r25, r19
    3522:	18 f0       	brcs	.+6      	; 0x352a <bmi160_extract_accel+0x1ee>
		/*Update the data index as complete*/
		*data_index = dev->fifo->length;
	} else {
		/*Move the data index to next frame*/
		*data_index = *data_index + current_frame_length;
    3524:	3e 83       	std	Y+6, r19	; 0x06
    3526:	2d 83       	std	Y+5, r18	; 0x05
    3528:	02 c0       	rjmp	.+4      	; 0x352e <bmi160_extract_accel+0x1f2>
		case BMI160_FIFO_HEAD_INPUT_CONFIG:
			move_next_frame(&data_index, 1, dev);
			break;
		case BMI160_FIFO_HEAD_OVER_READ:
			/* Update the data index as complete in case of Over read */
			data_index = dev->fifo->length;
    352a:	9e 83       	std	Y+6, r25	; 0x06
    352c:	8d 83       	std	Y+5, r24	; 0x05
			break;
		default:
			break;
		}
		if (*accel_length == accel_index) {
    352e:	f5 01       	movw	r30, r10
    3530:	90 81       	ld	r25, Z
    3532:	8a 81       	ldd	r24, Y+2	; 0x02
    3534:	98 17       	cp	r25, r24
    3536:	71 f0       	breq	.+28     	; 0x3554 <bmi160_extract_accel+0x218>
{
	uint8_t frame_header = 0;
	uint16_t data_index;
	uint8_t accel_index = 0;

	for (data_index = dev->fifo->accel_byte_start_idx; data_index < dev->fifo->length;) {
    3538:	6d 81       	ldd	r22, Y+5	; 0x05
    353a:	7e 81       	ldd	r23, Y+6	; 0x06
    353c:	d6 01       	movw	r26, r12
    353e:	58 96       	adiw	r26, 0x18	; 24
    3540:	0d 91       	ld	r16, X+
    3542:	1c 91       	ld	r17, X
    3544:	59 97       	sbiw	r26, 0x19	; 25
    3546:	f8 01       	movw	r30, r16
    3548:	82 81       	ldd	r24, Z+2	; 0x02
    354a:	93 81       	ldd	r25, Z+3	; 0x03
    354c:	68 17       	cp	r22, r24
    354e:	79 07       	cpc	r23, r25
    3550:	08 f4       	brcc	.+2      	; 0x3554 <bmi160_extract_accel+0x218>
    3552:	8c cf       	rjmp	.-232    	; 0x346c <bmi160_extract_accel+0x130>
			break;
		}
	}

	/*Update number of accel data read*/
	*accel_length = accel_index;
    3554:	8a 81       	ldd	r24, Y+2	; 0x02
    3556:	d5 01       	movw	r26, r10
    3558:	8c 93       	st	X, r24
	/*Update the accel frame index*/
	dev->fifo->accel_byte_start_idx = data_index;
    355a:	d6 01       	movw	r26, r12
    355c:	58 96       	adiw	r26, 0x18	; 24
    355e:	ed 91       	ld	r30, X+
    3560:	fc 91       	ld	r31, X
    3562:	59 97       	sbiw	r26, 0x19	; 25
    3564:	8d 81       	ldd	r24, Y+5	; 0x05
    3566:	9e 81       	ldd	r25, Y+6	; 0x06
    3568:	90 87       	std	Z+8, r25	; 0x08
    356a:	87 83       	std	Z+7, r24	; 0x07
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	01 c0       	rjmp	.+2      	; 0x3572 <bmi160_extract_accel+0x236>
    3570:	8f ef       	ldi	r24, 0xFF	; 255
			extract_accel_header_mode(accel_data, accel_length, dev);
		}
	}

	return rslt;
}
    3572:	26 96       	adiw	r28, 0x06	; 6
    3574:	0f b6       	in	r0, 0x3f	; 63
    3576:	f8 94       	cli
    3578:	de bf       	out	0x3e, r29	; 62
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	cd bf       	out	0x3d, r28	; 61
    357e:	cf 91       	pop	r28
    3580:	df 91       	pop	r29
    3582:	1f 91       	pop	r17
    3584:	0f 91       	pop	r16
    3586:	ff 90       	pop	r15
    3588:	ef 90       	pop	r14
    358a:	df 90       	pop	r13
    358c:	cf 90       	pop	r12
    358e:	bf 90       	pop	r11
    3590:	af 90       	pop	r10
    3592:	9f 90       	pop	r9
    3594:	8f 90       	pop	r8
    3596:	7f 90       	pop	r7
    3598:	6f 90       	pop	r6
    359a:	5f 90       	pop	r5
    359c:	4f 90       	pop	r4
    359e:	08 95       	ret

000035a0 <init_clock>:


void init_clock(){

	/* Initialize clock settings */
	TWSR=0x00; // set presca1er bits to 1 (0x00=1, 0x01=4, 0x02=16, 0x03=64)
    35a0:	11 b8       	out	0x01, r1	; 1
    TWBR=0x0D; // SCL frequency
    35a2:	8d e0       	ldi	r24, 0x0D	; 13
    35a4:	80 b9       	out	0x00, r24	; 0

}
    35a6:	08 95       	ret

000035a8 <send_start_signal>:
	TWCR = TWI Control Register
	TWINT = TWI interrupt flag ( bit 7 on TWCR )
	TWSTA = START condition bit ( bit 5 on TWCR )
	TWEN = TWI enable bit ( bit 2 on TWCR )
	*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    35a8:	84 ea       	ldi	r24, 0xA4	; 164
    35aa:	86 bf       	out	0x36, r24	; 54

	/* Wait until START condition has been transmitted 
	Wait until the TWINT flag is set */
	while (!(TWCR & (1<<TWINT)))
    35ac:	06 b6       	in	r0, 0x36	; 54
    35ae:	07 fe       	sbrs	r0, 7
    35b0:	fd cf       	rjmp	.-6      	; 0x35ac <send_start_signal+0x4>
		;
}
    35b2:	08 95       	ret

000035b4 <send_end_signal>:

void send_end_signal(){

	/* Transmit STOP condition */
	TWCR = (1<<TWINT)|(1<<TWEN)|
    35b4:	84 e9       	ldi	r24, 0x94	; 148
    35b6:	86 bf       	out	0x36, r24	; 54
	(1<<TWSTO);

}
    35b8:	08 95       	ret

000035ba <read_write_data>:
void read_write_data(int DATA, int RW){

	/* Load DATA+RW into TWDR Register 
	This is the DATA + R/W bit 
	RW=0 is write, RW=1 is read */
	DATA = (DATA<<1) | RW;
    35ba:	88 0f       	add	r24, r24
    35bc:	99 1f       	adc	r25, r25
	TWDR = DATA;
    35be:	68 2b       	or	r22, r24
    35c0:	79 2b       	or	r23, r25
    35c2:	63 b9       	out	0x03, r22	; 3

	/* Clear TWINT bit in TWCR to start transmission of address */
	TWCR = (1<<TWINT) | (1<<TWEN);
    35c4:	84 e8       	ldi	r24, 0x84	; 132
    35c6:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT Flag set
	This indicates that the SLA+W has been transmitted
	and ACK/NACK has been received. */
	while (!(TWCR & (1<<TWINT)))
    35c8:	06 b6       	in	r0, 0x36	; 54
    35ca:	07 fe       	sbrs	r0, 7
    35cc:	fd cf       	rjmp	.-6      	; 0x35c8 <read_write_data+0xe>
		;
}
    35ce:	08 95       	ret

000035d0 <print_trace>:

void print_trace(){

	/* Develop method to print stack trace or throw some other error */

}
    35d0:	08 95       	ret

000035d2 <check_status_register>:
	/* Check value of TWI status register, mask prescaler bits
	If status is different from REGISTER, go to print_trace 
	TWSR =  TWI Status Register
	TWI Status is set on bits 7:3 of TWSR, = 0x78
	*/
	if ((TWSR & 0xF8) != REGISTER)
    35d2:	81 b1       	in	r24, 0x01	; 1
		print_trace(); // define how you want to handle this error somewhere

}
    35d4:	08 95       	ret

000035d6 <__vector_9>:
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


// Method triggered by overflow
ISR(TIMER1_OVF_vect){
    35d6:	1f 92       	push	r1
    35d8:	0f 92       	push	r0
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	0f 92       	push	r0
    35de:	11 24       	eor	r1, r1
    35e0:	8f 93       	push	r24

    PORTB ^= 0xFF;			//toggle PORTB values
    35e2:	88 b3       	in	r24, 0x18	; 24
    35e4:	80 95       	com	r24
    35e6:	88 bb       	out	0x18, r24	; 24
}
    35e8:	8f 91       	pop	r24
    35ea:	0f 90       	pop	r0
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	0f 90       	pop	r0
    35f0:	1f 90       	pop	r1
    35f2:	18 95       	reti

000035f4 <USART_Receive>:

// Data from Bluetooth TX given to USART RX
unsigned char USART_Receive( void ){

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) ) {  }
    35f4:	5f 9b       	sbis	0x0b, 7	; 11
    35f6:	fe cf       	rjmp	.-4      	; 0x35f4 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
    35f8:	8c b1       	in	r24, 0x0c	; 12
}
    35fa:	08 95       	ret

000035fc <USART_Transmit>:

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
    35fc:	5d 9b       	sbis	0x0b, 5	; 11
    35fe:	fe cf       	rjmp	.-4      	; 0x35fc <USART_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
    3600:	8c b9       	out	0x0c, r24	; 12
}
    3602:	08 95       	ret

00003604 <USART_SendString>:

/* Send string of USART data function */ 
void USART_SendString(char *str){
    3604:	fc 01       	movw	r30, r24
    3606:	04 c0       	rjmp	.+8      	; 0x3610 <USART_SendString+0xc>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
    3608:	5d 9b       	sbis	0x0b, 5	; 11
    360a:	fe cf       	rjmp	.-4      	; 0x3608 <USART_SendString+0x4>

	/* Put data into buffer, sends the data */
	UDR = data;
    360c:	8c b9       	out	0x0c, r24	; 12
    360e:	31 96       	adiw	r30, 0x01	; 1
/* Send string of USART data function */ 
void USART_SendString(char *str){

	int i=0;			
	/* Send each char of string till the NULL */														
	while (str[i]!=0){
    3610:	80 81       	ld	r24, Z
    3612:	88 23       	and	r24, r24
    3614:	c9 f7       	brne	.-14     	; 0x3608 <USART_SendString+0x4>
		USART_Transmit( str[i] );
		i++;
	}
}
    3616:	08 95       	ret

00003618 <USART_Flush>:

// Flush USART
void USART_Flush( void ){
    3618:	01 c0       	rjmp	.+2      	; 0x361c <USART_Flush+0x4>

	unsigned char dummy;
	while ( UCSRA & (1<<RXC) ) dummy = UDR;
    361a:	8c b1       	in	r24, 0x0c	; 12
    361c:	5f 99       	sbic	0x0b, 7	; 11
    361e:	fd cf       	rjmp	.-6      	; 0x361a <USART_Flush+0x2>
}
    3620:	08 95       	ret

00003622 <USART_Init>:

// Initialize USART
void USART_Init( unsigned int baud ){
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
    3622:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
    3624:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X);
    3626:	59 9a       	sbi	0x0b, 1	; 11

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
    3628:	88 e1       	ldi	r24, 0x18	; 24
    362a:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
    362c:	8e e8       	ldi	r24, 0x8E	; 142
    362e:	80 bd       	out	0x20, r24	; 32
}
    3630:	08 95       	ret

00003632 <Bluetooth_Init>:


void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
    3632:	8c e0       	ldi	r24, 0x0C	; 12
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	0e 94 11 1b 	call	0x3622	; 0x3622 <USART_Init>
    363a:	e0 e6       	ldi	r30, 0x60	; 96
    363c:	f0 e0       	ldi	r31, 0x00	; 0
    363e:	04 c0       	rjmp	.+8      	; 0x3648 <Bluetooth_Init+0x16>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
    3640:	5d 9b       	sbis	0x0b, 5	; 11
    3642:	fe cf       	rjmp	.-4      	; 0x3640 <Bluetooth_Init+0xe>

	/* Put data into buffer, sends the data */
	UDR = data;
    3644:	8c b9       	out	0x0c, r24	; 12

	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
		USART_Transmit( *cmd );
		++cmd;
    3646:	31 96       	adiw	r30, 0x01	; 1

void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
    3648:	80 81       	ld	r24, Z
    364a:	88 23       	and	r24, r24
    364c:	c9 f7       	brne	.-14     	; 0x3640 <Bluetooth_Init+0xe>
		USART_Transmit( *cmd );
		++cmd;
	}
}
    364e:	08 95       	ret

00003650 <USART_Start_Timer>:

void USART_Start_Timer(){

	TCCR1B |= (1 << CS11);	// Timer1 prescaler = 8
    3650:	8e b5       	in	r24, 0x2e	; 46
    3652:	82 60       	ori	r24, 0x02	; 2
    3654:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;				// Clear the timer counter
    3656:	1d bc       	out	0x2d, r1	; 45
    3658:	1c bc       	out	0x2c, r1	; 44
	TIMSK = (1 << TOIE1);	// Enable timer1 overflow interrupt(TOIE1)
    365a:	84 e0       	ldi	r24, 0x04	; 4
    365c:	89 bf       	out	0x39, r24	; 57
	sei();					// Enable global interrupts
    365e:	78 94       	sei
}
    3660:	08 95       	ret

00003662 <main>:
// 																		  //
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


int main(void) {
    3662:	ff 92       	push	r15
    3664:	0f 93       	push	r16
    3666:	1f 93       	push	r17
    3668:	df 93       	push	r29
    366a:	cf 93       	push	r28
    366c:	cd b7       	in	r28, 0x3d	; 61
    366e:	de b7       	in	r29, 0x3e	; 62
    3670:	aa 97       	sbiw	r28, 0x2a	; 42
    3672:	0f b6       	in	r0, 0x3f	; 63
    3674:	f8 94       	cli
    3676:	de bf       	out	0x3e, r29	; 62
    3678:	0f be       	out	0x3f, r0	; 63
    367a:	cd bf       	out	0x3d, r28	; 61
	uint8_t *read_data;
	read_data = 0;
	uint16_t read_len = 0;
	bmi160_com_fptr_t *user_i2c_read;
	// may need to swap || with &&
	user_i2c_read = (read_dev_addr || read_reg_addr || *read_data || read_len);
    367c:	20 91 00 00 	lds	r18, 0x0000

	/*
	Sample Init Code for I2C
	*/
	struct bmi160_dev sensor;
	sensor.id = BMI160_I2C_ADDR;
    3680:	88 e6       	ldi	r24, 0x68	; 104
    3682:	8c 87       	std	Y+12, r24	; 0x0c
	sensor.interface = BMI160_I2C_INTF;
    3684:	1d 86       	std	Y+13, r1	; 0x0d
	sensor.read = *user_i2c_read;
    3686:	e0 e0       	ldi	r30, 0x00	; 0
    3688:	f0 e0       	ldi	r31, 0x00	; 0
    368a:	22 23       	and	r18, r18
    368c:	11 f0       	breq	.+4      	; 0x3692 <main+0x30>
    368e:	e1 e0       	ldi	r30, 0x01	; 1
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	80 81       	ld	r24, Z
    3694:	91 81       	ldd	r25, Z+1	; 0x01
    3696:	9e a3       	std	Y+38, r25	; 0x26
    3698:	8d a3       	std	Y+37, r24	; 0x25
	sensor.write = *user_i2c_write;
    369a:	e0 e0       	ldi	r30, 0x00	; 0
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	22 23       	and	r18, r18
    36a0:	11 f0       	breq	.+4      	; 0x36a6 <main+0x44>
    36a2:	e1 e0       	ldi	r30, 0x01	; 1
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	80 81       	ld	r24, Z
    36a8:	91 81       	ldd	r25, Z+1	; 0x01
    36aa:	98 a7       	std	Y+40, r25	; 0x28
    36ac:	8f a3       	std	Y+39, r24	; 0x27
	sensor.delay_ms = *user_delay_ms;
    36ae:	80 91 00 00 	lds	r24, 0x0000
    36b2:	90 91 01 00 	lds	r25, 0x0001
    36b6:	9a a7       	std	Y+42, r25	; 0x2a
    36b8:	89 a7       	std	Y+41, r24	; 0x29

	int8_t rslt = BMI160_OK;
	rslt = bmi160_init(&sensor);
    36ba:	8e 01       	movw	r16, r28
    36bc:	05 5f       	subi	r16, 0xF5	; 245
    36be:	1f 4f       	sbci	r17, 0xFF	; 255
    36c0:	c8 01       	movw	r24, r16
    36c2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <bmi160_init>
	are set with default values, found in the datasheet of the sensor */



	/* Select the Output data rate, range of Gyroscope sensor */
	sensor.gyro_cfg.odr = BMI160_GYRO_ODR_3200HZ;
    36c6:	8d e0       	ldi	r24, 0x0D	; 13
    36c8:	f8 2e       	mov	r15, r24
    36ca:	f8 8e       	std	Y+24, r15	; 0x18
	sensor.gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
    36cc:	19 8e       	std	Y+25, r1	; 0x19
	sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
    36ce:	82 e0       	ldi	r24, 0x02	; 2
    36d0:	8a 8f       	std	Y+26, r24	; 0x1a

	/* Select the power mode of Gyroscope sensor */
	sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE; 
    36d2:	85 e1       	ldi	r24, 0x15	; 21
    36d4:	8f 8b       	std	Y+23, r24	; 0x17

	/* Set the sensor configuration */
	rslt = bmi160_set_sens_conf(&sensor);
    36d6:	c8 01       	movw	r24, r16
    36d8:	0e 94 0b 02 	call	0x416	; 0x416 <bmi160_set_sens_conf>

	struct bmi160_sensor_data gyro;

	/* To read only Gyro data */
	rslt = bmi160_get_sensor_data(BMI160_GYRO_SEL, NULL, &gyro, &sensor);
    36dc:	82 e0       	ldi	r24, 0x02	; 2
    36de:	60 e0       	ldi	r22, 0x00	; 0
    36e0:	70 e0       	ldi	r23, 0x00	; 0
    36e2:	ae 01       	movw	r20, r28
    36e4:	4f 5f       	subi	r20, 0xFF	; 255
    36e6:	5f 4f       	sbci	r21, 0xFF	; 255
    36e8:	98 01       	movw	r18, r16
    36ea:	0e 94 2d 03 	call	0x65a	; 0x65a <bmi160_get_sensor_data>


void init_clock(){

	/* Initialize clock settings */
	TWSR=0x00; // set presca1er bits to 1 (0x00=1, 0x01=4, 0x02=16, 0x03=64)
    36ee:	11 b8       	out	0x01, r1	; 1
    TWBR=0x0D; // SCL frequency
    36f0:	f0 b8       	out	0x00, r15	; 0
	TWCR = TWI Control Register
	TWINT = TWI interrupt flag ( bit 7 on TWCR )
	TWSTA = START condition bit ( bit 5 on TWCR )
	TWEN = TWI enable bit ( bit 2 on TWCR )
	*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    36f2:	84 ea       	ldi	r24, 0xA4	; 164
    36f4:	86 bf       	out	0x36, r24	; 54

	/* Wait until START condition has been transmitted 
	Wait until the TWINT flag is set */
	while (!(TWCR & (1<<TWINT)))
    36f6:	06 b6       	in	r0, 0x36	; 54
    36f8:	07 fe       	sbrs	r0, 7
    36fa:	fd cf       	rjmp	.-6      	; 0x36f6 <main+0x94>

	/* Load DATA+RW into TWDR Register 
	This is the DATA + R/W bit 
	RW=0 is write, RW=1 is read */
	DATA = (DATA<<1) | RW;
	TWDR = DATA;
    36fc:	80 ed       	ldi	r24, 0xD0	; 208
    36fe:	83 b9       	out	0x03, r24	; 3

	/* Clear TWINT bit in TWCR to start transmission of address */
	TWCR = (1<<TWINT) | (1<<TWEN);
    3700:	84 e8       	ldi	r24, 0x84	; 132
    3702:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT Flag set
	This indicates that the SLA+W has been transmitted
	and ACK/NACK has been received. */
	while (!(TWCR & (1<<TWINT)))
    3704:	06 b6       	in	r0, 0x36	; 54
    3706:	07 fe       	sbrs	r0, 7
    3708:	fd cf       	rjmp	.-6      	; 0x3704 <main+0xa2>

	/* Load DATA+RW into TWDR Register 
	This is the DATA + R/W bit 
	RW=0 is write, RW=1 is read */
	DATA = (DATA<<1) | RW;
	TWDR = DATA;
    370a:	88 e1       	ldi	r24, 0x18	; 24
    370c:	83 b9       	out	0x03, r24	; 3

	/* Clear TWINT bit in TWCR to start transmission of address */
	TWCR = (1<<TWINT) | (1<<TWEN);
    370e:	84 e8       	ldi	r24, 0x84	; 132
    3710:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT Flag set
	This indicates that the SLA+W has been transmitted
	and ACK/NACK has been received. */
	while (!(TWCR & (1<<TWINT)))
    3712:	06 b6       	in	r0, 0x36	; 54
    3714:	07 fe       	sbrs	r0, 7
    3716:	fd cf       	rjmp	.-6      	; 0x3712 <main+0xb0>
	TWCR = TWI Control Register
	TWINT = TWI interrupt flag ( bit 7 on TWCR )
	TWSTA = START condition bit ( bit 5 on TWCR )
	TWEN = TWI enable bit ( bit 2 on TWCR )
	*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    3718:	84 ea       	ldi	r24, 0xA4	; 164
    371a:	86 bf       	out	0x36, r24	; 54

	/* Wait until START condition has been transmitted 
	Wait until the TWINT flag is set */
	while (!(TWCR & (1<<TWINT)))
    371c:	06 b6       	in	r0, 0x36	; 54
    371e:	07 fe       	sbrs	r0, 7
    3720:	fd cf       	rjmp	.-6      	; 0x371c <main+0xba>

	/* Load DATA+RW into TWDR Register 
	This is the DATA + R/W bit 
	RW=0 is write, RW=1 is read */
	DATA = (DATA<<1) | RW;
	TWDR = DATA;
    3722:	81 ed       	ldi	r24, 0xD1	; 209
    3724:	83 b9       	out	0x03, r24	; 3

	/* Clear TWINT bit in TWCR to start transmission of address */
	TWCR = (1<<TWINT) | (1<<TWEN);
    3726:	84 e8       	ldi	r24, 0x84	; 132
    3728:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT Flag set
	This indicates that the SLA+W has been transmitted
	and ACK/NACK has been received. */
	while (!(TWCR & (1<<TWINT)))
    372a:	06 b6       	in	r0, 0x36	; 54
    372c:	07 fe       	sbrs	r0, 7
    372e:	fd cf       	rjmp	.-6      	; 0x372a <main+0xc8>
}

void send_end_signal(){

	/* Transmit STOP condition */
	TWCR = (1<<TWINT)|(1<<TWEN)|
    3730:	84 e9       	ldi	r24, 0x94	; 148
    3732:	86 bf       	out	0x36, r24	; 54
		else USART_SendString( "Please select a proper option.\n" );

		// USART_Transmit( DATA_IN );
	*/

}
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	aa 96       	adiw	r28, 0x2a	; 42
    373a:	0f b6       	in	r0, 0x3f	; 63
    373c:	f8 94       	cli
    373e:	de bf       	out	0x3e, r29	; 62
    3740:	0f be       	out	0x3f, r0	; 63
    3742:	cd bf       	out	0x3d, r28	; 61
    3744:	cf 91       	pop	r28
    3746:	df 91       	pop	r29
    3748:	1f 91       	pop	r17
    374a:	0f 91       	pop	r16
    374c:	ff 90       	pop	r15
    374e:	08 95       	ret

00003750 <__divmodhi4>:
    3750:	97 fb       	bst	r25, 7
    3752:	09 2e       	mov	r0, r25
    3754:	07 26       	eor	r0, r23
    3756:	0a d0       	rcall	.+20     	; 0x376c <__divmodhi4_neg1>
    3758:	77 fd       	sbrc	r23, 7
    375a:	04 d0       	rcall	.+8      	; 0x3764 <__divmodhi4_neg2>
    375c:	0c d0       	rcall	.+24     	; 0x3776 <__udivmodhi4>
    375e:	06 d0       	rcall	.+12     	; 0x376c <__divmodhi4_neg1>
    3760:	00 20       	and	r0, r0
    3762:	1a f4       	brpl	.+6      	; 0x376a <__divmodhi4_exit>

00003764 <__divmodhi4_neg2>:
    3764:	70 95       	com	r23
    3766:	61 95       	neg	r22
    3768:	7f 4f       	sbci	r23, 0xFF	; 255

0000376a <__divmodhi4_exit>:
    376a:	08 95       	ret

0000376c <__divmodhi4_neg1>:
    376c:	f6 f7       	brtc	.-4      	; 0x376a <__divmodhi4_exit>
    376e:	90 95       	com	r25
    3770:	81 95       	neg	r24
    3772:	9f 4f       	sbci	r25, 0xFF	; 255
    3774:	08 95       	ret

00003776 <__udivmodhi4>:
    3776:	aa 1b       	sub	r26, r26
    3778:	bb 1b       	sub	r27, r27
    377a:	51 e1       	ldi	r21, 0x11	; 17
    377c:	07 c0       	rjmp	.+14     	; 0x378c <__udivmodhi4_ep>

0000377e <__udivmodhi4_loop>:
    377e:	aa 1f       	adc	r26, r26
    3780:	bb 1f       	adc	r27, r27
    3782:	a6 17       	cp	r26, r22
    3784:	b7 07       	cpc	r27, r23
    3786:	10 f0       	brcs	.+4      	; 0x378c <__udivmodhi4_ep>
    3788:	a6 1b       	sub	r26, r22
    378a:	b7 0b       	sbc	r27, r23

0000378c <__udivmodhi4_ep>:
    378c:	88 1f       	adc	r24, r24
    378e:	99 1f       	adc	r25, r25
    3790:	5a 95       	dec	r21
    3792:	a9 f7       	brne	.-22     	; 0x377e <__udivmodhi4_loop>
    3794:	80 95       	com	r24
    3796:	90 95       	com	r25
    3798:	bc 01       	movw	r22, r24
    379a:	cd 01       	movw	r24, r26
    379c:	08 95       	ret

0000379e <_exit>:
    379e:	f8 94       	cli

000037a0 <__stop_program>:
    37a0:	ff cf       	rjmp	.-2      	; 0x37a0 <__stop_program>
