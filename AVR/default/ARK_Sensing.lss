
ARK_Sensing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000001b6  0000022a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000130  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000355  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001dc  00000000  00000000  000006e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000319  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000110  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019c  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000a8  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_9>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  7a:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <read_adc>:
////////////////////////////////////////////////////////////////////////////


unsigned int read_adc(int axis){

	if(axis==1){		// z axis is PA0
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	91 05       	cpc	r25, r1
  86:	11 f4       	brne	.+4      	; 0x8c <read_adc+0xa>
		ADMUX = 0b10100000;
  88:	80 ea       	ldi	r24, 0xA0	; 160
  8a:	0b c0       	rjmp	.+22     	; 0xa2 <read_adc+0x20>
	}
	else if(axis==2){	// y axis is PA1
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	91 05       	cpc	r25, r1
  90:	11 f4       	brne	.+4      	; 0x96 <read_adc+0x14>
		ADMUX = 0b10100001;
  92:	81 ea       	ldi	r24, 0xA1	; 161
  94:	06 c0       	rjmp	.+12     	; 0xa2 <read_adc+0x20>
	}
	else if(axis==3){	// x axis is PA2
  96:	03 97       	sbiw	r24, 0x03	; 3
  98:	19 f0       	breq	.+6      	; 0xa0 <read_adc+0x1e>
  9a:	20 e0       	ldi	r18, 0x00	; 0
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	0b c0       	rjmp	.+22     	; 0xb6 <read_adc+0x34>
		ADMUX = 0b10100010;
  a0:	82 ea       	ldi	r24, 0xA2	; 162
  a2:	87 b9       	out	0x07, r24	; 7
	}
	else{
		return 0;
	}
	ADMUX = (1<<REFS0);	// set mux
  a4:	80 e4       	ldi	r24, 0x40	; 64
  a6:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS0);	// divided by prescale of 32
  a8:	85 e8       	ldi	r24, 0x85	; 133
  aa:	86 b9       	out	0x06, r24	; 6
	ADCSRA|= (1<<ADSC);	// clear ADSC by writing one to it
  ac:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADSC)))	// wait for conversion to complete
  ae:	36 9b       	sbis	0x06, 6	; 6
  b0:	fe cf       	rjmp	.-4      	; 0xae <read_adc+0x2c>
		;
	return(ADC);		// retuens 10 bit unsigned number
  b2:	24 b1       	in	r18, 0x04	; 4
  b4:	35 b1       	in	r19, 0x05	; 5
}
  b6:	c9 01       	movw	r24, r18
  b8:	08 95       	ret

000000ba <init_clock>:


void init_clock(){

	/* Initialize clock settings */
	TWSR=0x00; // set presca1er bits to 1 (0x00=1, 0x01=4, 0x02=16, 0x03=64)
  ba:	11 b8       	out	0x01, r1	; 1
    TWBR=0x0F; // SCL frequency
  bc:	8f e0       	ldi	r24, 0x0F	; 15
  be:	80 b9       	out	0x00, r24	; 0

}
  c0:	08 95       	ret

000000c2 <send_start_signal>:
	TWCR = TWI Control Register
	TWINT = TWI interrupt flag ( bit 7 on TWCR )
	TWSTA = START condition bit ( bit 5 on TWCR )
	TWEN = TWI enable bit ( bit 2 on TWCR )
	*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  c2:	84 ea       	ldi	r24, 0xA4	; 164
  c4:	86 bf       	out	0x36, r24	; 54

	/* Wait until START condition has been transmitted 
	Wait until the TWINT flag is set */
	while (!(TWCR & (1<<TWINT)))
  c6:	06 b6       	in	r0, 0x36	; 54
  c8:	07 fe       	sbrs	r0, 7
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <send_start_signal+0x4>
		;
}
  cc:	08 95       	ret

000000ce <send_end_signal>:

void send_end_signal(){

	/* Transmit STOP condition */
	TWCR = (1<<TWINT)|(1<<TWEN)|
  ce:	84 e9       	ldi	r24, 0x94	; 148
  d0:	86 bf       	out	0x36, r24	; 54
	(1<<TWSTO);

}
  d2:	08 95       	ret

000000d4 <read_write_data>:
void read_write_data(int DATA, int RW){

	/* Load DATA+RW into TWDR Register 
	This is the DATA + R/W bit 
	RW=0 is write, RW=1 is read */
	DATA = (DATA<<1) | RW;
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
	TWDR = DATA;
  d8:	68 2b       	or	r22, r24
  da:	79 2b       	or	r23, r25
  dc:	63 b9       	out	0x03, r22	; 3

	/* Clear TWINT bit in TWCR to start transmission of address */
	TWCR = (1<<TWINT) | (1<<TWEN);
  de:	84 e8       	ldi	r24, 0x84	; 132
  e0:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT Flag set
	This indicates that the SLA+W has been transmitted
	and ACK/NACK has been received. */
	while (!(TWCR & (1<<TWINT)))
  e2:	06 b6       	in	r0, 0x36	; 54
  e4:	07 fe       	sbrs	r0, 7
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <read_write_data+0xe>
		;
}
  e8:	08 95       	ret

000000ea <print_trace>:

void print_trace(){

	/* Develop method to print stack trace or throw some other error */

}
  ea:	08 95       	ret

000000ec <check_status_register>:
	/* Check value of TWI status register, mask prescaler bits
	If status is different from REGISTER, go to print_trace 
	TWSR =  TWI Status Register
	TWI Status is set on bits 7:3 of TWSR, = 0x78
	*/
	if ((TWSR & 0xF8) != REGISTER)
  ec:	81 b1       	in	r24, 0x01	; 1
		print_trace(); // define how you want to handle this error somewhere

}
  ee:	08 95       	ret

000000f0 <__vector_9>:
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


// Method triggered by overflow
ISR(TIMER1_OVF_vect){
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24

    PORTB ^= 0xFF;			//toggle PORTB values
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	80 95       	com	r24
 100:	88 bb       	out	0x18, r24	; 24
}
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <USART_Receive>:

// Data from Bluetooth TX given to USART RX
unsigned char USART_Receive( void ){

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) ) {  }
 10e:	5f 9b       	sbis	0x0b, 7	; 11
 110:	fe cf       	rjmp	.-4      	; 0x10e <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
 112:	8c b1       	in	r24, 0x0c	; 12
}
 114:	08 95       	ret

00000116 <USART_Transmit>:

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
 116:	5d 9b       	sbis	0x0b, 5	; 11
 118:	fe cf       	rjmp	.-4      	; 0x116 <USART_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
 11a:	8c b9       	out	0x0c, r24	; 12
}
 11c:	08 95       	ret

0000011e <USART_SendString>:

/* Send string of USART data function */ 
void USART_SendString(char *str){
 11e:	fc 01       	movw	r30, r24
 120:	04 c0       	rjmp	.+8      	; 0x12a <USART_SendString+0xc>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
 122:	5d 9b       	sbis	0x0b, 5	; 11
 124:	fe cf       	rjmp	.-4      	; 0x122 <USART_SendString+0x4>

	/* Put data into buffer, sends the data */
	UDR = data;
 126:	8c b9       	out	0x0c, r24	; 12
 128:	31 96       	adiw	r30, 0x01	; 1
/* Send string of USART data function */ 
void USART_SendString(char *str){

	int i=0;			
	/* Send each char of string till the NULL */														
	while (str[i]!=0){
 12a:	80 81       	ld	r24, Z
 12c:	88 23       	and	r24, r24
 12e:	c9 f7       	brne	.-14     	; 0x122 <USART_SendString+0x4>
		USART_Transmit( str[i] );
		i++;
	}
}
 130:	08 95       	ret

00000132 <USART_Flush>:

// Flush USART
void USART_Flush( void ){
 132:	01 c0       	rjmp	.+2      	; 0x136 <USART_Flush+0x4>

	unsigned char dummy;
	while ( UCSRA & (1<<RXC) ) dummy = UDR;
 134:	8c b1       	in	r24, 0x0c	; 12
 136:	5f 99       	sbic	0x0b, 7	; 11
 138:	fd cf       	rjmp	.-6      	; 0x134 <USART_Flush+0x2>
}
 13a:	08 95       	ret

0000013c <USART_Init>:

// Initialize USART
void USART_Init( unsigned int baud ){
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
 13c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
 13e:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X);
 140:	59 9a       	sbi	0x0b, 1	; 11

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
 142:	88 e1       	ldi	r24, 0x18	; 24
 144:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
 146:	8e e8       	ldi	r24, 0x8E	; 142
 148:	80 bd       	out	0x20, r24	; 32
}
 14a:	08 95       	ret

0000014c <Bluetooth_Init>:


void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
 14c:	8c e0       	ldi	r24, 0x0C	; 12
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_Init>
 154:	e0 e6       	ldi	r30, 0x60	; 96
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	04 c0       	rjmp	.+8      	; 0x162 <Bluetooth_Init+0x16>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
 15a:	5d 9b       	sbis	0x0b, 5	; 11
 15c:	fe cf       	rjmp	.-4      	; 0x15a <Bluetooth_Init+0xe>

	/* Put data into buffer, sends the data */
	UDR = data;
 15e:	8c b9       	out	0x0c, r24	; 12

	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
		USART_Transmit( *cmd );
		++cmd;
 160:	31 96       	adiw	r30, 0x01	; 1

void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
 162:	80 81       	ld	r24, Z
 164:	88 23       	and	r24, r24
 166:	c9 f7       	brne	.-14     	; 0x15a <Bluetooth_Init+0xe>
		USART_Transmit( *cmd );
		++cmd;
	}
}
 168:	08 95       	ret

0000016a <USART_Start_Timer>:

void USART_Start_Timer(){

	TCCR1B |= (1 << CS11);	// Timer1 prescaler = 8
 16a:	8e b5       	in	r24, 0x2e	; 46
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;				// Clear the timer counter
 170:	1d bc       	out	0x2d, r1	; 45
 172:	1c bc       	out	0x2c, r1	; 44
	TIMSK = (1 << TOIE1);	// Enable timer1 overflow interrupt(TOIE1)
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	89 bf       	out	0x39, r24	; 57
	sei();					// Enable global interrupts
 178:	78 94       	sei
}
 17a:	08 95       	ret

0000017c <main>:


void init_clock(){

	/* Initialize clock settings */
	TWSR=0x00; // set presca1er bits to 1 (0x00=1, 0x01=4, 0x02=16, 0x03=64)
 17c:	11 b8       	out	0x01, r1	; 1
    TWBR=0x0F; // SCL frequency
 17e:	8f e0       	ldi	r24, 0x0F	; 15
 180:	80 b9       	out	0x00, r24	; 0
	TWCR = TWI Control Register
	TWINT = TWI interrupt flag ( bit 7 on TWCR )
	TWSTA = START condition bit ( bit 5 on TWCR )
	TWEN = TWI enable bit ( bit 2 on TWCR )
	*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
 182:	84 ea       	ldi	r24, 0xA4	; 164
 184:	86 bf       	out	0x36, r24	; 54

	/* Wait until START condition has been transmitted 
	Wait until the TWINT flag is set */
	while (!(TWCR & (1<<TWINT)))
 186:	06 b6       	in	r0, 0x36	; 54
 188:	07 fe       	sbrs	r0, 7
 18a:	fd cf       	rjmp	.-6      	; 0x186 <main+0xa>

	/* Load DATA+RW into TWDR Register 
	This is the DATA + R/W bit 
	RW=0 is write, RW=1 is read */
	DATA = (DATA<<1) | RW;
	TWDR = DATA;
 18c:	80 ed       	ldi	r24, 0xD0	; 208
 18e:	83 b9       	out	0x03, r24	; 3

	/* Clear TWINT bit in TWCR to start transmission of address */
	TWCR = (1<<TWINT) | (1<<TWEN);
 190:	84 e8       	ldi	r24, 0x84	; 132
 192:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT Flag set
	This indicates that the SLA+W has been transmitted
	and ACK/NACK has been received. */
	while (!(TWCR & (1<<TWINT)))
 194:	06 b6       	in	r0, 0x36	; 54
 196:	07 fe       	sbrs	r0, 7
 198:	fd cf       	rjmp	.-6      	; 0x194 <main+0x18>

	/* Load DATA+RW into TWDR Register 
	This is the DATA + R/W bit 
	RW=0 is write, RW=1 is read */
	DATA = (DATA<<1) | RW;
	TWDR = DATA;
 19a:	88 e1       	ldi	r24, 0x18	; 24
 19c:	83 b9       	out	0x03, r24	; 3

	/* Clear TWINT bit in TWCR to start transmission of address */
	TWCR = (1<<TWINT) | (1<<TWEN);
 19e:	84 e8       	ldi	r24, 0x84	; 132
 1a0:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT Flag set
	This indicates that the SLA+W has been transmitted
	and ACK/NACK has been received. */
	while (!(TWCR & (1<<TWINT)))
 1a2:	06 b6       	in	r0, 0x36	; 54
 1a4:	07 fe       	sbrs	r0, 7
 1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <main+0x26>
}

void send_end_signal(){

	/* Transmit STOP condition */
	TWCR = (1<<TWINT)|(1<<TWEN)|
 1a8:	84 e9       	ldi	r24, 0x94	; 148
 1aa:	86 bf       	out	0x36, r24	; 54
		else USART_SendString( "Please select a proper option.\n" );

		// USART_Transmit( DATA_IN );
	*/

}
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	08 95       	ret

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>
