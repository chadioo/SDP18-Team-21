
ARK_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00001b0e  00001ba2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008000c2  008000c2  00001c04  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000246  00000000  00000000  00001c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000779  00000000  00000000  00001e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d5  00000000  00000000  000025e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000094b  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  00003204  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d7  00000000  00000000  000033d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e4  00000000  00000000  000036ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000388f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__ctors_end>
       4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      10:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      14:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      18:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      1c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      24:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__vector_9>
      28:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      34:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      3c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      40:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      44:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      4c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      50:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	7a 10       	cpse	r7, r10
      da:	f3 5a       	subi	r31, 0xA3	; 163
      dc:	00 a0       	ldd	r0, Z+32	; 0x20
      de:	72 4e       	sbci	r23, 0xE2	; 226
      e0:	18 09       	sbc	r17, r8
      e2:	00 10       	cpse	r0, r0
      e4:	a5 d4       	rcall	.+2378   	; 0xa30 <dtostrf+0x30>
      e6:	e8 00       	.word	0x00e8	; ????
      e8:	00 e8       	ldi	r16, 0x80	; 128
      ea:	76 48       	sbci	r23, 0x86	; 134
      ec:	17 00       	.word	0x0017	; ????
      ee:	00 e4       	ldi	r16, 0x40	; 64
      f0:	0b 54       	subi	r16, 0x4B	; 75
      f2:	02 00       	.word	0x0002	; ????
      f4:	00 ca       	rjmp	.-3072   	; 0xfffff4f6 <__eeprom_end+0xff7ef4f6>
      f6:	9a 3b       	cpi	r25, 0xBA	; 186
      f8:	00 00       	nop
      fa:	00 e1       	ldi	r16, 0x10	; 16
      fc:	f5 05       	cpc	r31, r5
      fe:	00 00       	nop
     100:	80 96       	adiw	r24, 0x20	; 32
     102:	98 00       	.word	0x0098	; ????
     104:	00 00       	nop
     106:	40 42       	sbci	r20, 0x20	; 32
     108:	0f 00       	.word	0x000f	; ????
     10a:	00 00       	nop
     10c:	a0 86       	std	Z+8, r10	; 0x08
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	10 27       	eor	r17, r16
     114:	00 00       	nop
     116:	00 00       	nop
     118:	e8 03       	fmulsu	r22, r16
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	64 00       	.word	0x0064	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	0a 00       	.word	0x000a	; ????
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	01 00       	.word	0x0001	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	2c 76       	andi	r18, 0x6C	; 108
     132:	d8 88       	ldd	r13, Y+16	; 0x10
     134:	dc 67       	ori	r29, 0x7C	; 124
     136:	4f 08       	sbc	r4, r15
     138:	23 df       	rcall	.-442    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     13a:	c1 df       	rcall	.-126    	; 0xbe <__SREG__+0x7f>
     13c:	ae 59       	subi	r26, 0x9E	; 158
     13e:	e1 b1       	in	r30, 0x01	; 1
     140:	b7 96       	adiw	r30, 0x27	; 39
     142:	e5 e3       	ldi	r30, 0x35	; 53
     144:	e4 53       	subi	r30, 0x34	; 52
     146:	c6 3a       	cpi	r28, 0xA6	; 166
     148:	e6 51       	subi	r30, 0x16	; 22
     14a:	99 76       	andi	r25, 0x69	; 105
     14c:	96 e8       	ldi	r25, 0x86	; 134
     14e:	e6 c2       	rjmp	.+1484   	; 0x71c <main+0x4e>
     150:	84 26       	eor	r8, r20
     152:	eb 89       	ldd	r30, Y+19	; 0x13
     154:	8c 9b       	sbis	0x11, 4	; 17
     156:	62 ed       	ldi	r22, 0xD2	; 210
     158:	40 7c       	andi	r20, 0xC0	; 192
     15a:	6f fc       	.word	0xfc6f	; ????
     15c:	ef bc       	out	0x2f, r14	; 47
     15e:	9c 9f       	mul	r25, r28
     160:	40 f2       	brcs	.-112    	; 0xf2 <__SREG__+0xb3>
     162:	ba a5       	ldd	r27, Y+42	; 0x2a
     164:	6f a5       	ldd	r22, Y+47	; 0x2f
     166:	f4 90       	lpm	r15, Z+
     168:	05 5a       	subi	r16, 0xA5	; 165
     16a:	2a f7       	brpl	.-54     	; 0x136 <__SREG__+0xf7>
     16c:	5c 93       	st	X, r21
     16e:	6b 6c       	ori	r22, 0xCB	; 203
     170:	f9 67       	ori	r31, 0x79	; 121
     172:	6d c1       	rjmp	.+730    	; 0x44e <Read_RawValue+0x18>
     174:	1b fc       	.word	0xfc1b	; ????
     176:	e0 e4       	ldi	r30, 0x40	; 64
     178:	0d 47       	sbci	r16, 0x7D	; 125
     17a:	fe f5       	brtc	.+126    	; 0x1fa <.do_clear_bss_loop>
     17c:	20 e6       	ldi	r18, 0x60	; 96
     17e:	b5 00       	.word	0x00b5	; ????
     180:	d0 ed       	ldi	r29, 0xD0	; 208
     182:	90 2e       	mov	r9, r16
     184:	03 00       	.word	0x0003	; ????
     186:	94 35       	cpi	r25, 0x54	; 84
     188:	77 05       	cpc	r23, r7
     18a:	00 80       	ld	r0, Z
     18c:	84 1e       	adc	r8, r20
     18e:	08 00       	.word	0x0008	; ????
     190:	00 20       	and	r0, r0
     192:	4e 0a       	sbc	r4, r30
     194:	00 00       	nop
     196:	00 c8       	rjmp	.-4096   	; 0xfffff198 <__eeprom_end+0xff7ef198>
     198:	0c 33       	cpi	r16, 0x3C	; 60
     19a:	33 33       	cpi	r19, 0x33	; 51
     19c:	33 0f       	add	r19, r19
     19e:	98 6e       	ori	r25, 0xE8	; 232
     1a0:	12 83       	std	Z+2, r17	; 0x02
     1a2:	11 41       	sbci	r17, 0x11	; 17
     1a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1a6:	21 14       	cp	r2, r1
     1a8:	89 3b       	cpi	r24, 0xB9	; 185
     1aa:	e6 55       	subi	r30, 0x56	; 86
     1ac:	16 cf       	rjmp	.-468    	; 0xffffffda <__eeprom_end+0xff7effda>
     1ae:	fe e6       	ldi	r31, 0x6E	; 110
     1b0:	db 18       	sub	r13, r11
     1b2:	d1 84       	ldd	r13, Z+9	; 0x09
     1b4:	4b 38       	cpi	r20, 0x8B	; 139
     1b6:	1b f7       	brvc	.-58     	; 0x17e <__SREG__+0x13f>
     1b8:	7c 1d       	adc	r23, r12
     1ba:	90 1d       	adc	r25, r0
     1bc:	a4 bb       	out	0x14, r26	; 20
     1be:	e4 24       	eor	r14, r4
     1c0:	20 32       	cpi	r18, 0x20	; 32
     1c2:	84 72       	andi	r24, 0x24	; 36
     1c4:	5e 22       	and	r5, r30
     1c6:	81 00       	.word	0x0081	; ????
     1c8:	c9 f1       	breq	.+114    	; 0x23c <read_adc+0x2e>
     1ca:	24 ec       	ldi	r18, 0xC4	; 196
     1cc:	a1 e5       	ldi	r26, 0x51	; 81
     1ce:	3d 27       	eor	r19, r29

000001d0 <__ctors_end>:
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf e5       	ldi	r28, 0x5F	; 95
     1d6:	d8 e0       	ldi	r29, 0x08	; 8
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
     1dc:	10 e0       	ldi	r17, 0x00	; 0
     1de:	a0 e6       	ldi	r26, 0x60	; 96
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	ee e0       	ldi	r30, 0x0E	; 14
     1e4:	fb e1       	ldi	r31, 0x1B	; 27
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <.do_copy_data_start>

000001e8 <.do_copy_data_loop>:
     1e8:	05 90       	lpm	r0, Z+
     1ea:	0d 92       	st	X+, r0

000001ec <.do_copy_data_start>:
     1ec:	a2 3c       	cpi	r26, 0xC2	; 194
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <.do_copy_data_loop>

000001f2 <__do_clear_bss>:
     1f2:	10 e0       	ldi	r17, 0x00	; 0
     1f4:	a2 ec       	ldi	r26, 0xC2	; 194
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	ae 3d       	cpi	r26, 0xDE	; 222
     1fe:	b1 07       	cpc	r27, r17
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	0e 94 67 03 	call	0x6ce	; 0x6ce <main>
     206:	0c 94 21 05 	jmp	0xa42	; 0xa42 <exit>

0000020a <__bad_interrupt>:
     20a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020e <read_adc>:
////////////////////////////////////////////////////////////////////////////


unsigned int read_adc(int axis){

	if(axis==1){		// z axis is PA0
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	91 05       	cpc	r25, r1
     212:	11 f4       	brne	.+4      	; 0x218 <read_adc+0xa>
		ADMUX = 0b10100000;
     214:	80 ea       	ldi	r24, 0xA0	; 160
     216:	0b c0       	rjmp	.+22     	; 0x22e <read_adc+0x20>
	}
	else if(axis==2){	// y axis is PA1
     218:	82 30       	cpi	r24, 0x02	; 2
     21a:	91 05       	cpc	r25, r1
     21c:	11 f4       	brne	.+4      	; 0x222 <read_adc+0x14>
		ADMUX = 0b10100001;
     21e:	81 ea       	ldi	r24, 0xA1	; 161
     220:	06 c0       	rjmp	.+12     	; 0x22e <read_adc+0x20>
	}
	else if(axis==3){	// x axis is PA2
     222:	03 97       	sbiw	r24, 0x03	; 3
     224:	19 f0       	breq	.+6      	; 0x22c <read_adc+0x1e>
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	0b c0       	rjmp	.+22     	; 0x242 <read_adc+0x34>
		ADMUX = 0b10100010;
     22c:	82 ea       	ldi	r24, 0xA2	; 162
     22e:	87 b9       	out	0x07, r24	; 7
	}
	else{
		return 0;
	}
	ADMUX = (1<<REFS0);	// set mux
     230:	80 e4       	ldi	r24, 0x40	; 64
     232:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS0);	// divided by prescale of 32
     234:	85 e8       	ldi	r24, 0x85	; 133
     236:	86 b9       	out	0x06, r24	; 6
	ADCSRA|= (1<<ADSC);	// clear ADSC by writing one to it
     238:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADSC)))	// wait for conversion to complete
     23a:	36 9b       	sbis	0x06, 6	; 6
     23c:	fe cf       	rjmp	.-4      	; 0x23a <read_adc+0x2c>
		;
	return(ADC);		// retuens 10 bit unsigned number
     23e:	24 b1       	in	r18, 0x04	; 4
     240:	35 b1       	in	r19, 0x05	; 5
}
     242:	c9 01       	movw	r24, r18
     244:	08 95       	ret

00000246 <send_start_signal>:
	TWCR = TWI Control Register
	TWINT = TWI interrupt flag ( bit 7 on TWCR )
	TWSTA = START condition bit ( bit 5 on TWCR )
	TWEN = TWI enable bit ( bit 2 on TWCR )
	*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     246:	84 ea       	ldi	r24, 0xA4	; 164
     248:	86 bf       	out	0x36, r24	; 54

	/* Wait until START condition has been transmitted 
	Wait until the TWINT flag is set */
	while (!(TWCR & (1<<TWINT)))
     24a:	06 b6       	in	r0, 0x36	; 54
     24c:	07 fe       	sbrs	r0, 7
     24e:	fd cf       	rjmp	.-6      	; 0x24a <send_start_signal+0x4>
		;
}
     250:	08 95       	ret

00000252 <send_stop_signal>:

void send_stop_signal(){

	/* Transmit STOP condition */
	TWCR = (1<<TWINT)|(1<<TWEN)|
     252:	84 e9       	ldi	r24, 0x94	; 148
     254:	86 bf       	out	0x36, r24	; 54
	(1<<TWSTO);

}
     256:	08 95       	ret

00000258 <read_write_data>:
	DATA = DATA >> 1;

	/* Load DATA+RW into TWDR Register 
	This is the DATA + R/W bit 
	RW=0 is write, RW=1 is read */
	DATA = (DATA<<1) | RW;
     258:	8e 7f       	andi	r24, 0xFE	; 254
	TWDR = DATA;
     25a:	86 2b       	or	r24, r22
     25c:	97 2b       	or	r25, r23
     25e:	83 b9       	out	0x03, r24	; 3

	/* Clear TWINT bit in TWCR to start transmission of address */
	TWCR = (1<<TWINT) | (1<<TWEN);
     260:	84 e8       	ldi	r24, 0x84	; 132
     262:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT Flag set
	This indicates that the SLA+W has been transmitted
	and ACK/NACK has been received. */
	while (!(TWCR & (1<<TWINT)))
     264:	06 b6       	in	r0, 0x36	; 54
     266:	07 fe       	sbrs	r0, 7
     268:	fd cf       	rjmp	.-6      	; 0x264 <read_write_data+0xc>
		;
	return (char) TWDR;
     26a:	83 b1       	in	r24, 0x03	; 3
}
     26c:	08 95       	ret

0000026e <print_trace>:

void print_trace(){

	/* Develop method to print stack trace or throw some other error */

}
     26e:	08 95       	ret

00000270 <check_status_register>:
	/* Check value of TWI status register, mask prescaler bits
	If status is different from REGISTER, go to print_trace 
	TWSR =  TWI Status Register
	TWI Status is set on bits 7:3 of TWSR, = 0x78
	*/
	if ((TWSR & 0xF8) != REGISTER)
     270:	81 b1       	in	r24, 0x01	; 1
		print_trace(); // define how you want to handle this error somewhere

}
     272:	08 95       	ret

00000274 <read_ack>:

char read_ack(){											/* I2C read ack function */

	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     274:	84 ec       	ldi	r24, 0xC4	; 196
     276:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     278:	06 b6       	in	r0, 0x36	; 54
     27a:	07 fe       	sbrs	r0, 7
     27c:	fd cf       	rjmp	.-6      	; 0x278 <read_ack+0x4>
	return TWDR;											/* Return received data */
     27e:	83 b1       	in	r24, 0x03	; 3
}	
     280:	08 95       	ret

00000282 <read_nack>:

char read_nack(){											/* I2C read nack function */

	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     282:	84 e8       	ldi	r24, 0x84	; 132
     284:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     286:	06 b6       	in	r0, 0x36	; 54
     288:	07 fe       	sbrs	r0, 7
     28a:	fd cf       	rjmp	.-6      	; 0x286 <read_nack+0x4>
	return TWDR;											/* Return received data */
     28c:	83 b1       	in	r24, 0x03	; 3
}	
     28e:	08 95       	ret

00000290 <I2C_Start>:

////////////////////////////////////////////////////////////

uint8_t I2C_Start(char slave_write_address)						/* I2C start function */
{
     290:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     292:	84 ea       	ldi	r24, 0xA4	; 164
     294:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     296:	06 b6       	in	r0, 0x36	; 54
     298:	07 fe       	sbrs	r0, 7
     29a:	fd cf       	rjmp	.-6      	; 0x296 <I2C_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     29c:	81 b1       	in	r24, 0x01	; 1
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
     29e:	88 7f       	andi	r24, 0xF8	; 248
     2a0:	88 30       	cpi	r24, 0x08	; 8
     2a2:	11 f0       	breq	.+4      	; 0x2a8 <I2C_Start+0x18>
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
	return 0;												/* If not then return 0 to indicate start condition fail */
	TWDR = slave_write_address<<1;								/* If yes then write SLA+W in TWI data register */
     2a8:	99 0f       	add	r25, r25
     2aa:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     2ac:	84 e8       	ldi	r24, 0x84	; 132
     2ae:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     2b0:	06 b6       	in	r0, 0x36	; 54
     2b2:	07 fe       	sbrs	r0, 7
     2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <I2C_Start+0x20>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
     2b6:	81 b1       	in	r24, 0x01	; 1
     2b8:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
     2ba:	88 31       	cpi	r24, 0x18	; 24
     2bc:	11 f4       	brne	.+4      	; 0x2c2 <I2C_Start+0x32>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
     2c2:	80 32       	cpi	r24, 0x20	; 32
     2c4:	11 f0       	breq	.+4      	; 0x2ca <I2C_Start+0x3a>
     2c6:	83 e0       	ldi	r24, 0x03	; 3
     2c8:	08 95       	ret
     2ca:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     2cc:	08 95       	ret

000002ce <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
     2ce:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     2d0:	84 ea       	ldi	r24, 0xA4	; 164
     2d2:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     2d4:	06 b6       	in	r0, 0x36	; 54
     2d6:	07 fe       	sbrs	r0, 7
     2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <I2C_Repeated_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     2da:	81 b1       	in	r24, 0x01	; 1
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     2dc:	88 7f       	andi	r24, 0xF8	; 248
     2de:	80 31       	cpi	r24, 0x10	; 16
     2e0:	11 f0       	breq	.+4      	; 0x2e6 <I2C_Repeated_Start+0x18>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	08 95       	ret
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     2e6:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     2e8:	84 e8       	ldi	r24, 0x84	; 132
     2ea:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     2ec:	06 b6       	in	r0, 0x36	; 54
     2ee:	07 fe       	sbrs	r0, 7
     2f0:	fd cf       	rjmp	.-6      	; 0x2ec <I2C_Repeated_Start+0x1e>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     2f2:	81 b1       	in	r24, 0x01	; 1
     2f4:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     2f6:	80 34       	cpi	r24, 0x40	; 64
     2f8:	11 f4       	brne	.+4      	; 0x2fe <I2C_Repeated_Start+0x30>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     2fe:	80 32       	cpi	r24, 0x20	; 32
     300:	11 f0       	breq	.+4      	; 0x306 <I2C_Repeated_Start+0x38>
     302:	83 e0       	ldi	r24, 0x03	; 3
     304:	08 95       	ret
     306:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     308:	08 95       	ret

0000030a <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     30a:	84 e9       	ldi	r24, 0x94	; 148
     30c:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     30e:	06 b6       	in	r0, 0x36	; 54
     310:	04 fc       	sbrc	r0, 4
     312:	fd cf       	rjmp	.-6      	; 0x30e <I2C_Stop+0x4>
}
     314:	08 95       	ret

00000316 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)			/* I2C start wait function */
{
     316:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     318:	44 ea       	ldi	r20, 0xA4	; 164
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     31a:	34 e8       	ldi	r19, 0x84	; 132
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     31c:	24 e9       	ldi	r18, 0x94	; 148
void I2C_Start_Wait(char slave_write_address)			/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     31e:	46 bf       	out	0x36, r20	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     320:	06 b6       	in	r0, 0x36	; 54
     322:	07 fe       	sbrs	r0, 7
     324:	fd cf       	rjmp	.-6      	; 0x320 <I2C_Start_Wait+0xa>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     326:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     328:	88 7f       	andi	r24, 0xF8	; 248
     32a:	88 30       	cpi	r24, 0x08	; 8
     32c:	c1 f7       	brne	.-16     	; 0x31e <I2C_Start_Wait+0x8>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     32e:	93 b9       	out	0x03, r25	; 3
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     330:	36 bf       	out	0x36, r19	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     332:	06 b6       	in	r0, 0x36	; 54
     334:	07 fe       	sbrs	r0, 7
     336:	fd cf       	rjmp	.-6      	; 0x332 <I2C_Start_Wait+0x1c>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     338:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     33a:	88 7f       	andi	r24, 0xF8	; 248
     33c:	88 31       	cpi	r24, 0x18	; 24
     33e:	29 f0       	breq	.+10     	; 0x34a <I2C_Start_Wait+0x34>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     340:	26 bf       	out	0x36, r18	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     342:	06 b6       	in	r0, 0x36	; 54
     344:	04 fc       	sbrc	r0, 4
     346:	fd cf       	rjmp	.-6      	; 0x342 <I2C_Start_Wait+0x2c>
     348:	ea cf       	rjmp	.-44     	; 0x31e <I2C_Start_Wait+0x8>
     34a:	08 95       	ret

0000034c <I2C_Write>:
}

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     34c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     34e:	84 e8       	ldi	r24, 0x84	; 132
     350:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     352:	06 b6       	in	r0, 0x36	; 54
     354:	07 fe       	sbrs	r0, 7
     356:	fd cf       	rjmp	.-6      	; 0x352 <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     358:	81 b1       	in	r24, 0x01	; 1
     35a:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     35c:	88 32       	cpi	r24, 0x28	; 40
     35e:	11 f4       	brne	.+4      	; 0x364 <I2C_Write+0x18>
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	08 95       	ret
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     364:	80 33       	cpi	r24, 0x30	; 48
     366:	11 f0       	breq	.+4      	; 0x36c <I2C_Write+0x20>
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	08 95       	ret
     36c:	81 e0       	ldi	r24, 0x01	; 1
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     36e:	08 95       	ret

00000370 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     370:	84 ec       	ldi	r24, 0xC4	; 196
     372:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     374:	06 b6       	in	r0, 0x36	; 54
     376:	07 fe       	sbrs	r0, 7
     378:	fd cf       	rjmp	.-6      	; 0x374 <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
     37a:	83 b1       	in	r24, 0x03	; 3
}	
     37c:	08 95       	ret

0000037e <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     37e:	84 e8       	ldi	r24, 0x84	; 132
     380:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     382:	06 b6       	in	r0, 0x36	; 54
     384:	07 fe       	sbrs	r0, 7
     386:	fd cf       	rjmp	.-6      	; 0x382 <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
     388:	83 b1       	in	r24, 0x03	; 3
}	
     38a:	08 95       	ret

0000038c <MPU6050_Init>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     38c:	8c e7       	ldi	r24, 0x7C	; 124
     38e:	92 e9       	ldi	r25, 0x92	; 146
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <MPU6050_Init+0x4>
////////////////////////////////////////////////////////////

void MPU6050_Init()										/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
     394:	80 ed       	ldi	r24, 0xD0	; 208
     396:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
     39a:	89 e1       	ldi	r24, 0x19	; 25
     39c:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
     3a0:	87 e0       	ldi	r24, 0x07	; 7
     3a2:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3a6:	84 e9       	ldi	r24, 0x94	; 148
     3a8:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3aa:	06 b6       	in	r0, 0x36	; 54
     3ac:	04 fc       	sbrc	r0, 4
     3ae:	fd cf       	rjmp	.-6      	; 0x3aa <MPU6050_Init+0x1e>
	I2C_Start_Wait(0xD0);								/* Start with device write address */
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
	I2C_Write(0x07);									/* 1KHz sample rate */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     3b0:	80 ed       	ldi	r24, 0xD0	; 208
     3b2:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
     3b6:	8b e6       	ldi	r24, 0x6B	; 107
     3b8:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3c2:	84 e9       	ldi	r24, 0x94	; 148
     3c4:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3c6:	06 b6       	in	r0, 0x36	; 54
     3c8:	04 fc       	sbrc	r0, 4
     3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <MPU6050_Init+0x3a>
	I2C_Start_Wait(0xD0);
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     3cc:	80 ed       	ldi	r24, 0xD0	; 208
     3ce:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
     3d2:	8a e1       	ldi	r24, 0x1A	; 26
     3d4:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3de:	84 e9       	ldi	r24, 0x94	; 148
     3e0:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3e2:	06 b6       	in	r0, 0x36	; 54
     3e4:	04 fc       	sbrc	r0, 4
     3e6:	fd cf       	rjmp	.-6      	; 0x3e2 <MPU6050_Init+0x56>
	I2C_Start_Wait(0xD0);
	I2C_Write(CONFIG);									/* Write to Configuration register */
	I2C_Write(0x00);									/* Fs = 8KHz */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     3e8:	80 ed       	ldi	r24, 0xD0	; 208
     3ea:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
     3ee:	8b e1       	ldi	r24, 0x1B	; 27
     3f0:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
     3f4:	88 e1       	ldi	r24, 0x18	; 24
     3f6:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3fa:	84 e9       	ldi	r24, 0x94	; 148
     3fc:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3fe:	06 b6       	in	r0, 0x36	; 54
     400:	04 fc       	sbrc	r0, 4
     402:	fd cf       	rjmp	.-6      	; 0x3fe <MPU6050_Init+0x72>
	I2C_Start_Wait(0xD0);
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     404:	80 ed       	ldi	r24, 0xD0	; 208
     406:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
     40a:	88 e3       	ldi	r24, 0x38	; 56
     40c:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	I2C_Write(0x01);
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     416:	84 e9       	ldi	r24, 0x94	; 148
     418:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     41a:	06 b6       	in	r0, 0x36	; 54
     41c:	04 fc       	sbrc	r0, 4
     41e:	fd cf       	rjmp	.-6      	; 0x41a <MPU6050_Init+0x8e>

	I2C_Start_Wait(0xD0);
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
	I2C_Write(0x01);
	I2C_Stop();
}
     420:	08 95       	ret

00000422 <MPU_Start_Loc>:

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
     422:	80 ed       	ldi	r24, 0xD0	; 208
     424:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */ 
     428:	8b e3       	ldi	r24, 0x3B	; 59
     42a:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
     42e:	81 ed       	ldi	r24, 0xD1	; 209
     430:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Repeated_Start>
}
     434:	08 95       	ret

00000436 <Read_RawValue>:

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
     436:	0e 94 11 02 	call	0x422	; 0x422 <MPU_Start_Loc>
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     43a:	84 ec       	ldi	r24, 0xC4	; 196
     43c:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     43e:	06 b6       	in	r0, 0x36	; 54
     440:	07 fe       	sbrs	r0, 7
     442:	fd cf       	rjmp	.-6      	; 0x43e <Read_RawValue+0x8>
	return TWDR;											/* Return received data */
     444:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     446:	84 ec       	ldi	r24, 0xC4	; 196
     448:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     44a:	06 b6       	in	r0, 0x36	; 54
     44c:	07 fe       	sbrs	r0, 7
     44e:	fd cf       	rjmp	.-6      	; 0x44a <Read_RawValue+0x14>
	return TWDR;											/* Return received data */
     450:	23 b1       	in	r18, 0x03	; 3
}

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     452:	79 2f       	mov	r23, r25
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	62 2b       	or	r22, r18
     45a:	73 2b       	or	r23, r19
     45c:	88 27       	eor	r24, r24
     45e:	77 fd       	sbrc	r23, 7
     460:	80 95       	com	r24
     462:	98 2f       	mov	r25, r24
     464:	0e 94 43 06 	call	0xc86	; 0xc86 <__floatsisf>
     468:	60 93 d6 00 	sts	0x00D6, r22
     46c:	70 93 d7 00 	sts	0x00D7, r23
     470:	80 93 d8 00 	sts	0x00D8, r24
     474:	90 93 d9 00 	sts	0x00D9, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     478:	84 ec       	ldi	r24, 0xC4	; 196
     47a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     47c:	06 b6       	in	r0, 0x36	; 54
     47e:	07 fe       	sbrs	r0, 7
     480:	fd cf       	rjmp	.-6      	; 0x47c <Read_RawValue+0x46>
	return TWDR;											/* Return received data */
     482:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     484:	84 ec       	ldi	r24, 0xC4	; 196
     486:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     488:	06 b6       	in	r0, 0x36	; 54
     48a:	07 fe       	sbrs	r0, 7
     48c:	fd cf       	rjmp	.-6      	; 0x488 <Read_RawValue+0x52>
	return TWDR;											/* Return received data */
     48e:	23 b1       	in	r18, 0x03	; 3

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     490:	79 2f       	mov	r23, r25
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	62 2b       	or	r22, r18
     498:	73 2b       	or	r23, r19
     49a:	88 27       	eor	r24, r24
     49c:	77 fd       	sbrc	r23, 7
     49e:	80 95       	com	r24
     4a0:	98 2f       	mov	r25, r24
     4a2:	0e 94 43 06 	call	0xc86	; 0xc86 <__floatsisf>
     4a6:	60 93 ce 00 	sts	0x00CE, r22
     4aa:	70 93 cf 00 	sts	0x00CF, r23
     4ae:	80 93 d0 00 	sts	0x00D0, r24
     4b2:	90 93 d1 00 	sts	0x00D1, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4b6:	84 ec       	ldi	r24, 0xC4	; 196
     4b8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4ba:	06 b6       	in	r0, 0x36	; 54
     4bc:	07 fe       	sbrs	r0, 7
     4be:	fd cf       	rjmp	.-6      	; 0x4ba <Read_RawValue+0x84>
	return TWDR;											/* Return received data */
     4c0:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4c2:	84 ec       	ldi	r24, 0xC4	; 196
     4c4:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4c6:	06 b6       	in	r0, 0x36	; 54
     4c8:	07 fe       	sbrs	r0, 7
     4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <Read_RawValue+0x90>
	return TWDR;											/* Return received data */
     4cc:	23 b1       	in	r18, 0x03	; 3
void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     4ce:	79 2f       	mov	r23, r25
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	62 2b       	or	r22, r18
     4d6:	73 2b       	or	r23, r19
     4d8:	88 27       	eor	r24, r24
     4da:	77 fd       	sbrc	r23, 7
     4dc:	80 95       	com	r24
     4de:	98 2f       	mov	r25, r24
     4e0:	0e 94 43 06 	call	0xc86	; 0xc86 <__floatsisf>
     4e4:	60 93 c2 00 	sts	0x00C2, r22
     4e8:	70 93 c3 00 	sts	0x00C3, r23
     4ec:	80 93 c4 00 	sts	0x00C4, r24
     4f0:	90 93 c5 00 	sts	0x00C5, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4f4:	84 ec       	ldi	r24, 0xC4	; 196
     4f6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4f8:	06 b6       	in	r0, 0x36	; 54
     4fa:	07 fe       	sbrs	r0, 7
     4fc:	fd cf       	rjmp	.-6      	; 0x4f8 <Read_RawValue+0xc2>
	return TWDR;											/* Return received data */
     4fe:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     500:	84 ec       	ldi	r24, 0xC4	; 196
     502:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     504:	06 b6       	in	r0, 0x36	; 54
     506:	07 fe       	sbrs	r0, 7
     508:	fd cf       	rjmp	.-6      	; 0x504 <Read_RawValue+0xce>
	return TWDR;											/* Return received data */
     50a:	23 b1       	in	r18, 0x03	; 3
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     50c:	79 2f       	mov	r23, r25
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	62 2b       	or	r22, r18
     514:	73 2b       	or	r23, r19
     516:	88 27       	eor	r24, r24
     518:	77 fd       	sbrc	r23, 7
     51a:	80 95       	com	r24
     51c:	98 2f       	mov	r25, r24
     51e:	0e 94 43 06 	call	0xc86	; 0xc86 <__floatsisf>
     522:	60 93 ca 00 	sts	0x00CA, r22
     526:	70 93 cb 00 	sts	0x00CB, r23
     52a:	80 93 cc 00 	sts	0x00CC, r24
     52e:	90 93 cd 00 	sts	0x00CD, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     532:	84 ec       	ldi	r24, 0xC4	; 196
     534:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     536:	06 b6       	in	r0, 0x36	; 54
     538:	07 fe       	sbrs	r0, 7
     53a:	fd cf       	rjmp	.-6      	; 0x536 <Read_RawValue+0x100>
	return TWDR;											/* Return received data */
     53c:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     53e:	84 ec       	ldi	r24, 0xC4	; 196
     540:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     542:	06 b6       	in	r0, 0x36	; 54
     544:	07 fe       	sbrs	r0, 7
     546:	fd cf       	rjmp	.-6      	; 0x542 <Read_RawValue+0x10c>
	return TWDR;											/* Return received data */
     548:	23 b1       	in	r18, 0x03	; 3
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     54a:	79 2f       	mov	r23, r25
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	62 2b       	or	r22, r18
     552:	73 2b       	or	r23, r19
     554:	88 27       	eor	r24, r24
     556:	77 fd       	sbrc	r23, 7
     558:	80 95       	com	r24
     55a:	98 2f       	mov	r25, r24
     55c:	0e 94 43 06 	call	0xc86	; 0xc86 <__floatsisf>
     560:	60 93 c6 00 	sts	0x00C6, r22
     564:	70 93 c7 00 	sts	0x00C7, r23
     568:	80 93 c8 00 	sts	0x00C8, r24
     56c:	90 93 c9 00 	sts	0x00C9, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     570:	84 ec       	ldi	r24, 0xC4	; 196
     572:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     574:	06 b6       	in	r0, 0x36	; 54
     576:	07 fe       	sbrs	r0, 7
     578:	fd cf       	rjmp	.-6      	; 0x574 <Read_RawValue+0x13e>
	return TWDR;											/* Return received data */
     57a:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     57c:	84 ec       	ldi	r24, 0xC4	; 196
     57e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     580:	06 b6       	in	r0, 0x36	; 54
     582:	07 fe       	sbrs	r0, 7
     584:	fd cf       	rjmp	.-6      	; 0x580 <Read_RawValue+0x14a>
	return TWDR;											/* Return received data */
     586:	23 b1       	in	r18, 0x03	; 3
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     588:	79 2f       	mov	r23, r25
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	62 2b       	or	r22, r18
     590:	73 2b       	or	r23, r19
     592:	88 27       	eor	r24, r24
     594:	77 fd       	sbrc	r23, 7
     596:	80 95       	com	r24
     598:	98 2f       	mov	r25, r24
     59a:	0e 94 43 06 	call	0xc86	; 0xc86 <__floatsisf>
     59e:	60 93 da 00 	sts	0x00DA, r22
     5a2:	70 93 db 00 	sts	0x00DB, r23
     5a6:	80 93 dc 00 	sts	0x00DC, r24
     5aa:	90 93 dd 00 	sts	0x00DD, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     5ae:	84 ec       	ldi	r24, 0xC4	; 196
     5b0:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     5b2:	06 b6       	in	r0, 0x36	; 54
     5b4:	07 fe       	sbrs	r0, 7
     5b6:	fd cf       	rjmp	.-6      	; 0x5b2 <Read_RawValue+0x17c>
	return TWDR;											/* Return received data */
     5b8:	93 b1       	in	r25, 0x03	; 3
}	

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     5ba:	84 e8       	ldi	r24, 0x84	; 132
     5bc:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     5be:	06 b6       	in	r0, 0x36	; 54
     5c0:	07 fe       	sbrs	r0, 7
     5c2:	fd cf       	rjmp	.-6      	; 0x5be <Read_RawValue+0x188>
	return TWDR;											/* Return received data */
     5c4:	23 b1       	in	r18, 0x03	; 3
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     5c6:	79 2f       	mov	r23, r25
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	62 2b       	or	r22, r18
     5ce:	73 2b       	or	r23, r19
     5d0:	88 27       	eor	r24, r24
     5d2:	77 fd       	sbrc	r23, 7
     5d4:	80 95       	com	r24
     5d6:	98 2f       	mov	r25, r24
     5d8:	0e 94 43 06 	call	0xc86	; 0xc86 <__floatsisf>
     5dc:	60 93 d2 00 	sts	0x00D2, r22
     5e0:	70 93 d3 00 	sts	0x00D3, r23
     5e4:	80 93 d4 00 	sts	0x00D4, r24
     5e8:	90 93 d5 00 	sts	0x00D5, r25
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     5ec:	84 e9       	ldi	r24, 0x94	; 148
     5ee:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     5f0:	06 b6       	in	r0, 0x36	; 54
     5f2:	04 fc       	sbrc	r0, 4
     5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <Read_RawValue+0x1ba>
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
	I2C_Stop();
}
     5f6:	08 95       	ret

000005f8 <__vector_9>:
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


// Method triggered by overflow
ISR(TIMER1_OVF_vect){
     5f8:	1f 92       	push	r1
     5fa:	0f 92       	push	r0
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	0f 92       	push	r0
     600:	11 24       	eor	r1, r1
     602:	8f 93       	push	r24

    PORTB ^= 0xFF;			//toggle PORTB values
     604:	88 b3       	in	r24, 0x18	; 24
     606:	80 95       	com	r24
     608:	88 bb       	out	0x18, r24	; 24
}
     60a:	8f 91       	pop	r24
     60c:	0f 90       	pop	r0
     60e:	0f be       	out	0x3f, r0	; 63
     610:	0f 90       	pop	r0
     612:	1f 90       	pop	r1
     614:	18 95       	reti

00000616 <USART_Receive>:

// Data from Bluetooth TX given to USART RX
unsigned char USART_Receive( void ){

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) ) {  }
     616:	5f 9b       	sbis	0x0b, 7	; 11
     618:	fe cf       	rjmp	.-4      	; 0x616 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
     61a:	8c b1       	in	r24, 0x0c	; 12
}
     61c:	08 95       	ret

0000061e <USART_Transmit>:

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
     61e:	5d 9b       	sbis	0x0b, 5	; 11
     620:	fe cf       	rjmp	.-4      	; 0x61e <USART_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
     622:	8c b9       	out	0x0c, r24	; 12
}
     624:	08 95       	ret

00000626 <USART_SendString>:

/* Send string of USART data function */ 
void USART_SendString(char *str){
     626:	fc 01       	movw	r30, r24
     628:	04 c0       	rjmp	.+8      	; 0x632 <USART_SendString+0xc>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
     62a:	5d 9b       	sbis	0x0b, 5	; 11
     62c:	fe cf       	rjmp	.-4      	; 0x62a <USART_SendString+0x4>

	/* Put data into buffer, sends the data */
	UDR = data;
     62e:	8c b9       	out	0x0c, r24	; 12
     630:	31 96       	adiw	r30, 0x01	; 1
/* Send string of USART data function */ 
void USART_SendString(char *str){

	int i=0;			
	/* Send each char of string till the NULL */														
	while (str[i]!=0){
     632:	80 81       	ld	r24, Z
     634:	88 23       	and	r24, r24
     636:	c9 f7       	brne	.-14     	; 0x62a <USART_SendString+0x4>
		USART_Transmit( str[i] );
		i++;
	}
}
     638:	08 95       	ret

0000063a <USART_Flush>:

// Flush USART
void USART_Flush( void ){
     63a:	01 c0       	rjmp	.+2      	; 0x63e <USART_Flush+0x4>

	unsigned char dummy;
	while ( UCSRA & (1<<RXC) ) dummy = UDR;
     63c:	8c b1       	in	r24, 0x0c	; 12
     63e:	5f 99       	sbic	0x0b, 7	; 11
     640:	fd cf       	rjmp	.-6      	; 0x63c <USART_Flush+0x2>
}
     642:	08 95       	ret

00000644 <USART_Init>:

// Initialize USART
void USART_Init( unsigned int baud ){
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
     644:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
     646:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X);
     648:	59 9a       	sbi	0x0b, 1	; 11

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
     64a:	88 e1       	ldi	r24, 0x18	; 24
     64c:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     64e:	8e e8       	ldi	r24, 0x8E	; 142
     650:	80 bd       	out	0x20, r24	; 32
}
     652:	08 95       	ret

00000654 <Bluetooth_Init>:


void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
     654:	8c e0       	ldi	r24, 0x0C	; 12
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 22 03 	call	0x644	; 0x644 <USART_Init>
     65c:	e0 e6       	ldi	r30, 0x60	; 96
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	04 c0       	rjmp	.+8      	; 0x66a <Bluetooth_Init+0x16>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
     662:	5d 9b       	sbis	0x0b, 5	; 11
     664:	fe cf       	rjmp	.-4      	; 0x662 <Bluetooth_Init+0xe>

	/* Put data into buffer, sends the data */
	UDR = data;
     666:	8c b9       	out	0x0c, r24	; 12

	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
		USART_Transmit( *cmd );
		++cmd;
     668:	31 96       	adiw	r30, 0x01	; 1

void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
     66a:	80 81       	ld	r24, Z
     66c:	88 23       	and	r24, r24
     66e:	c9 f7       	brne	.-14     	; 0x662 <Bluetooth_Init+0xe>
		USART_Transmit( *cmd );
		++cmd;
	}
}
     670:	08 95       	ret

00000672 <USART_Start_Timer>:

void USART_Start_Timer(){

	TCCR1B |= (1 << CS11);	// Timer1 prescaler = 8
     672:	8e b5       	in	r24, 0x2e	; 46
     674:	82 60       	ori	r24, 0x02	; 2
     676:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;				// Clear the timer counter
     678:	1d bc       	out	0x2d, r1	; 45
     67a:	1c bc       	out	0x2c, r1	; 44
	TIMSK = (1 << TOIE1);	// Enable timer1 overflow interrupt(TOIE1)
     67c:	84 e0       	ldi	r24, 0x04	; 4
     67e:	89 bf       	out	0x39, r24	; 57
	sei();					// Enable global interrupts
     680:	78 94       	sei
}
     682:	08 95       	ret

00000684 <init_clock>:


void init_clock(){

	/* Initialize clock settings */
	TWSR = 0x00; // set presca1er bits to 1 (0x00=1, 0x01=4, 0x02=16, 0x03=64)
     684:	11 b8       	out	0x01, r1	; 1
    TWBR = ((F_CPU/SCL_CLK)-16)/(2*pow(4,(TWSR&((1<<TWPS0)|(1<<TWPS1))))); // SCL frequency
     686:	61 b1       	in	r22, 0x01	; 1
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	63 70       	andi	r22, 0x03	; 3
     68c:	70 70       	andi	r23, 0x00	; 0
     68e:	88 27       	eor	r24, r24
     690:	77 fd       	sbrc	r23, 7
     692:	80 95       	com	r24
     694:	98 2f       	mov	r25, r24
     696:	0e 94 43 06 	call	0xc86	; 0xc86 <__floatsisf>
     69a:	9b 01       	movw	r18, r22
     69c:	ac 01       	movw	r20, r24
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	80 e8       	ldi	r24, 0x80	; 128
     6a4:	90 e4       	ldi	r25, 0x40	; 64
     6a6:	0e 94 32 07 	call	0xe64	; 0xe64 <pow>
     6aa:	9b 01       	movw	r18, r22
     6ac:	ac 01       	movw	r20, r24
     6ae:	ca 01       	movw	r24, r20
     6b0:	b9 01       	movw	r22, r18
     6b2:	0e 94 49 05 	call	0xa92	; 0xa92 <__addsf3>
     6b6:	9b 01       	movw	r18, r22
     6b8:	ac 01       	movw	r20, r24
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	80 e8       	ldi	r24, 0x80	; 128
     6c0:	92 e4       	ldi	r25, 0x42	; 66
     6c2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__divsf3>
     6c6:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fixunssfsi>
     6ca:	60 b9       	out	0x00, r22	; 0

}
     6cc:	08 95       	ret

000006ce <main>:
// 																		  //
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


int main(void) {
     6ce:	2f 92       	push	r2
     6d0:	3f 92       	push	r3
     6d2:	4f 92       	push	r4
     6d4:	5f 92       	push	r5
     6d6:	6f 92       	push	r6
     6d8:	7f 92       	push	r7
     6da:	8f 92       	push	r8
     6dc:	9f 92       	push	r9
     6de:	af 92       	push	r10
     6e0:	bf 92       	push	r11
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	a6 97       	sbiw	r28, 0x26	; 38
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61


	// STEP 1: Establish Bluetooth / USART Connection

	Bluetooth_Init();
     702:	0e 94 2a 03 	call	0x654	; 0x654 <Bluetooth_Init>
	float Xg=0,Yg=0,Zg=0;
	//USART_SendString( "step 2" );

	// STEP 3: Establish I2C Connection

	init_clock();
     706:	0e 94 42 03 	call	0x684	; 0x684 <init_clock>
	/*
	CHAD: note to self, this function call is the issue.
	Things break here. Look into the parts of this function.
	*/

	MPU6050_Init();
     70a:	0e 94 c6 01 	call	0x38c	; 0x38c <MPU6050_Init>
			Xg = Gyro_x/16.4;
			Yg = Gyro_y/16.4;
			Zg = Gyro_z/16.4;

			dtostrf( Xa, 3, 2, float_ );				
			sprintf(buffer," Ax = %s g\t",float_);
     70e:	8b e0       	ldi	r24, 0x0B	; 11
     710:	28 2e       	mov	r2, r24
     712:	31 2c       	mov	r3, r1
     714:	2c 0e       	add	r2, r28
     716:	3d 1e       	adc	r3, r29
	
		//char DATA_IN = USART_Receive();
		
		//if(DATA_IN == '1') {

			Read_RawValue();
     718:	0e 94 1b 02 	call	0x436	; 0x436 <Read_RawValue>

			Xa = Acc_x/16384.0;								
			Ya = Acc_y/16384.0;
     71c:	60 91 ce 00 	lds	r22, 0x00CE
     720:	70 91 cf 00 	lds	r23, 0x00CF
     724:	80 91 d0 00 	lds	r24, 0x00D0
     728:	90 91 d1 00 	lds	r25, 0x00D1
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e8       	ldi	r20, 0x80	; 128
     732:	58 e3       	ldi	r21, 0x38	; 56
     734:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__mulsf3>
     738:	6b 01       	movw	r12, r22
     73a:	7c 01       	movw	r14, r24
			Za = Acc_z/16384.0;
     73c:	60 91 c2 00 	lds	r22, 0x00C2
     740:	70 91 c3 00 	lds	r23, 0x00C3
     744:	80 91 c4 00 	lds	r24, 0x00C4
     748:	90 91 c5 00 	lds	r25, 0x00C5
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e8       	ldi	r20, 0x80	; 128
     752:	58 e3       	ldi	r21, 0x38	; 56
     754:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__mulsf3>
     758:	4b 01       	movw	r8, r22
     75a:	5c 01       	movw	r10, r24
		
			Xg = Gyro_x/16.4;
     75c:	60 91 c6 00 	lds	r22, 0x00C6
     760:	70 91 c7 00 	lds	r23, 0x00C7
     764:	80 91 c8 00 	lds	r24, 0x00C8
     768:	90 91 c9 00 	lds	r25, 0x00C9
     76c:	23 e3       	ldi	r18, 0x33	; 51
     76e:	33 e3       	ldi	r19, 0x33	; 51
     770:	43 e8       	ldi	r20, 0x83	; 131
     772:	51 e4       	ldi	r21, 0x41	; 65
     774:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__divsf3>
     778:	2b 01       	movw	r4, r22
     77a:	3c 01       	movw	r6, r24
			Yg = Gyro_y/16.4;
     77c:	60 91 da 00 	lds	r22, 0x00DA
     780:	70 91 db 00 	lds	r23, 0x00DB
     784:	80 91 dc 00 	lds	r24, 0x00DC
     788:	90 91 dd 00 	lds	r25, 0x00DD
     78c:	23 e3       	ldi	r18, 0x33	; 51
     78e:	33 e3       	ldi	r19, 0x33	; 51
     790:	43 e8       	ldi	r20, 0x83	; 131
     792:	51 e4       	ldi	r21, 0x41	; 65
     794:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__divsf3>
     798:	6f 8f       	std	Y+31, r22	; 0x1f
     79a:	78 a3       	std	Y+32, r23	; 0x20
     79c:	89 a3       	std	Y+33, r24	; 0x21
     79e:	9a a3       	std	Y+34, r25	; 0x22
			Zg = Gyro_z/16.4;
     7a0:	60 91 d2 00 	lds	r22, 0x00D2
     7a4:	70 91 d3 00 	lds	r23, 0x00D3
     7a8:	80 91 d4 00 	lds	r24, 0x00D4
     7ac:	90 91 d5 00 	lds	r25, 0x00D5
     7b0:	23 e3       	ldi	r18, 0x33	; 51
     7b2:	33 e3       	ldi	r19, 0x33	; 51
     7b4:	43 e8       	ldi	r20, 0x83	; 131
     7b6:	51 e4       	ldi	r21, 0x41	; 65
     7b8:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__divsf3>
     7bc:	6b a3       	std	Y+35, r22	; 0x23
     7be:	7c a3       	std	Y+36, r23	; 0x24
     7c0:	8d a3       	std	Y+37, r24	; 0x25
     7c2:	9e a3       	std	Y+38, r25	; 0x26

			dtostrf( Xa, 3, 2, float_ );				
     7c4:	60 91 d6 00 	lds	r22, 0x00D6
     7c8:	70 91 d7 00 	lds	r23, 0x00D7
     7cc:	80 91 d8 00 	lds	r24, 0x00D8
     7d0:	90 91 d9 00 	lds	r25, 0x00D9
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	40 e8       	ldi	r20, 0x80	; 128
     7da:	58 e3       	ldi	r21, 0x38	; 56
     7dc:	0e 94 cf 06 	call	0xd9e	; 0xd9e <__mulsf3>
     7e0:	43 e0       	ldi	r20, 0x03	; 3
     7e2:	22 e0       	ldi	r18, 0x02	; 2
     7e4:	8e 01       	movw	r16, r28
     7e6:	0f 5f       	subi	r16, 0xFF	; 255
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	0e 94 00 05 	call	0xa00	; 0xa00 <dtostrf>
			sprintf(buffer," Ax = %s g\t",float_);
     7ee:	00 d0       	rcall	.+0      	; 0x7f0 <main+0x122>
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <main+0x124>
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <main+0x126>
     7f4:	ed b7       	in	r30, 0x3d	; 61
     7f6:	fe b7       	in	r31, 0x3e	; 62
     7f8:	31 96       	adiw	r30, 0x01	; 1
     7fa:	ad b7       	in	r26, 0x3d	; 61
     7fc:	be b7       	in	r27, 0x3e	; 62
     7fe:	12 96       	adiw	r26, 0x02	; 2
     800:	3c 92       	st	X, r3
     802:	2e 92       	st	-X, r2
     804:	11 97       	sbiw	r26, 0x01	; 1
     806:	83 e7       	ldi	r24, 0x73	; 115
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	93 83       	std	Z+3, r25	; 0x03
     80c:	82 83       	std	Z+2, r24	; 0x02
     80e:	15 83       	std	Z+5, r17	; 0x05
     810:	04 83       	std	Z+4, r16	; 0x04
     812:	0e 94 24 05 	call	0xa48	; 0xa48 <sprintf>
			USART_SendString(buffer);
     816:	8d b7       	in	r24, 0x3d	; 61
     818:	9e b7       	in	r25, 0x3e	; 62
     81a:	06 96       	adiw	r24, 0x06	; 6
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	9e bf       	out	0x3e, r25	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	8d bf       	out	0x3d, r24	; 61
     826:	c1 01       	movw	r24, r2
     828:	0e 94 13 03 	call	0x626	; 0x626 <USART_SendString>

			dtostrf( Ya, 3, 2, float_ );
     82c:	b6 01       	movw	r22, r12
     82e:	c7 01       	movw	r24, r14
     830:	43 e0       	ldi	r20, 0x03	; 3
     832:	22 e0       	ldi	r18, 0x02	; 2
     834:	8e 01       	movw	r16, r28
     836:	0f 5f       	subi	r16, 0xFF	; 255
     838:	1f 4f       	sbci	r17, 0xFF	; 255
     83a:	0e 94 00 05 	call	0xa00	; 0xa00 <dtostrf>
			sprintf(buffer," Ay = %s g\t",float_);
     83e:	00 d0       	rcall	.+0      	; 0x840 <main+0x172>
     840:	00 d0       	rcall	.+0      	; 0x842 <main+0x174>
     842:	00 d0       	rcall	.+0      	; 0x844 <main+0x176>
     844:	ed b7       	in	r30, 0x3d	; 61
     846:	fe b7       	in	r31, 0x3e	; 62
     848:	31 96       	adiw	r30, 0x01	; 1
     84a:	ad b7       	in	r26, 0x3d	; 61
     84c:	be b7       	in	r27, 0x3e	; 62
     84e:	12 96       	adiw	r26, 0x02	; 2
     850:	3c 92       	st	X, r3
     852:	2e 92       	st	-X, r2
     854:	11 97       	sbiw	r26, 0x01	; 1
     856:	8f e7       	ldi	r24, 0x7F	; 127
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	93 83       	std	Z+3, r25	; 0x03
     85c:	82 83       	std	Z+2, r24	; 0x02
     85e:	15 83       	std	Z+5, r17	; 0x05
     860:	04 83       	std	Z+4, r16	; 0x04
     862:	0e 94 24 05 	call	0xa48	; 0xa48 <sprintf>
			USART_SendString(buffer);
     866:	8d b7       	in	r24, 0x3d	; 61
     868:	9e b7       	in	r25, 0x3e	; 62
     86a:	06 96       	adiw	r24, 0x06	; 6
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	9e bf       	out	0x3e, r25	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	8d bf       	out	0x3d, r24	; 61
     876:	c1 01       	movw	r24, r2
     878:	0e 94 13 03 	call	0x626	; 0x626 <USART_SendString>
		
			dtostrf( Za, 3, 2, float_ );
     87c:	b4 01       	movw	r22, r8
     87e:	c5 01       	movw	r24, r10
     880:	43 e0       	ldi	r20, 0x03	; 3
     882:	22 e0       	ldi	r18, 0x02	; 2
     884:	8e 01       	movw	r16, r28
     886:	0f 5f       	subi	r16, 0xFF	; 255
     888:	1f 4f       	sbci	r17, 0xFF	; 255
     88a:	0e 94 00 05 	call	0xa00	; 0xa00 <dtostrf>
			sprintf(buffer," Az = %s g\t",float_);
     88e:	00 d0       	rcall	.+0      	; 0x890 <__stack+0x31>
     890:	00 d0       	rcall	.+0      	; 0x892 <__stack+0x33>
     892:	00 d0       	rcall	.+0      	; 0x894 <__stack+0x35>
     894:	ed b7       	in	r30, 0x3d	; 61
     896:	fe b7       	in	r31, 0x3e	; 62
     898:	31 96       	adiw	r30, 0x01	; 1
     89a:	ad b7       	in	r26, 0x3d	; 61
     89c:	be b7       	in	r27, 0x3e	; 62
     89e:	12 96       	adiw	r26, 0x02	; 2
     8a0:	3c 92       	st	X, r3
     8a2:	2e 92       	st	-X, r2
     8a4:	11 97       	sbiw	r26, 0x01	; 1
     8a6:	8b e8       	ldi	r24, 0x8B	; 139
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	93 83       	std	Z+3, r25	; 0x03
     8ac:	82 83       	std	Z+2, r24	; 0x02
     8ae:	15 83       	std	Z+5, r17	; 0x05
     8b0:	04 83       	std	Z+4, r16	; 0x04
     8b2:	0e 94 24 05 	call	0xa48	; 0xa48 <sprintf>
			USART_SendString(buffer);
     8b6:	8d b7       	in	r24, 0x3d	; 61
     8b8:	9e b7       	in	r25, 0x3e	; 62
     8ba:	06 96       	adiw	r24, 0x06	; 6
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	9e bf       	out	0x3e, r25	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	8d bf       	out	0x3d, r24	; 61
     8c6:	c1 01       	movw	r24, r2
     8c8:	0e 94 13 03 	call	0x626	; 0x626 <USART_SendString>

			dtostrf( Xg, 3, 2, float_ );
     8cc:	b2 01       	movw	r22, r4
     8ce:	c3 01       	movw	r24, r6
     8d0:	43 e0       	ldi	r20, 0x03	; 3
     8d2:	22 e0       	ldi	r18, 0x02	; 2
     8d4:	8e 01       	movw	r16, r28
     8d6:	0f 5f       	subi	r16, 0xFF	; 255
     8d8:	1f 4f       	sbci	r17, 0xFF	; 255
     8da:	0e 94 00 05 	call	0xa00	; 0xa00 <dtostrf>
			sprintf(buffer," Gx = %s%c/s\t",float_,0xF8);
     8de:	ad b7       	in	r26, 0x3d	; 61
     8e0:	be b7       	in	r27, 0x3e	; 62
     8e2:	18 97       	sbiw	r26, 0x08	; 8
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	be bf       	out	0x3e, r27	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	ad bf       	out	0x3d, r26	; 61
     8ee:	ed b7       	in	r30, 0x3d	; 61
     8f0:	fe b7       	in	r31, 0x3e	; 62
     8f2:	31 96       	adiw	r30, 0x01	; 1
     8f4:	12 96       	adiw	r26, 0x02	; 2
     8f6:	3c 92       	st	X, r3
     8f8:	2e 92       	st	-X, r2
     8fa:	11 97       	sbiw	r26, 0x01	; 1
     8fc:	87 e9       	ldi	r24, 0x97	; 151
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	93 83       	std	Z+3, r25	; 0x03
     902:	82 83       	std	Z+2, r24	; 0x02
     904:	15 83       	std	Z+5, r17	; 0x05
     906:	04 83       	std	Z+4, r16	; 0x04
     908:	88 ef       	ldi	r24, 0xF8	; 248
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	97 83       	std	Z+7, r25	; 0x07
     90e:	86 83       	std	Z+6, r24	; 0x06
     910:	0e 94 24 05 	call	0xa48	; 0xa48 <sprintf>
			USART_SendString(buffer);
     914:	ad b7       	in	r26, 0x3d	; 61
     916:	be b7       	in	r27, 0x3e	; 62
     918:	18 96       	adiw	r26, 0x08	; 8
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	be bf       	out	0x3e, r27	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	ad bf       	out	0x3d, r26	; 61
     924:	c1 01       	movw	r24, r2
     926:	0e 94 13 03 	call	0x626	; 0x626 <USART_SendString>

			dtostrf( Yg, 3, 2, float_ );
     92a:	2f 8d       	ldd	r18, Y+31	; 0x1f
     92c:	38 a1       	ldd	r19, Y+32	; 0x20
     92e:	49 a1       	ldd	r20, Y+33	; 0x21
     930:	5a a1       	ldd	r21, Y+34	; 0x22
     932:	b9 01       	movw	r22, r18
     934:	ca 01       	movw	r24, r20
     936:	43 e0       	ldi	r20, 0x03	; 3
     938:	22 e0       	ldi	r18, 0x02	; 2
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5f       	subi	r16, 0xFF	; 255
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	0e 94 00 05 	call	0xa00	; 0xa00 <dtostrf>
			sprintf(buffer," Gy = %s%c/s\t",float_,0xF8);
     944:	8d b7       	in	r24, 0x3d	; 61
     946:	9e b7       	in	r25, 0x3e	; 62
     948:	08 97       	sbiw	r24, 0x08	; 8
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	9e bf       	out	0x3e, r25	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	8d bf       	out	0x3d, r24	; 61
     954:	ed b7       	in	r30, 0x3d	; 61
     956:	fe b7       	in	r31, 0x3e	; 62
     958:	31 96       	adiw	r30, 0x01	; 1
     95a:	ad b7       	in	r26, 0x3d	; 61
     95c:	be b7       	in	r27, 0x3e	; 62
     95e:	12 96       	adiw	r26, 0x02	; 2
     960:	3c 92       	st	X, r3
     962:	2e 92       	st	-X, r2
     964:	11 97       	sbiw	r26, 0x01	; 1
     966:	85 ea       	ldi	r24, 0xA5	; 165
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	93 83       	std	Z+3, r25	; 0x03
     96c:	82 83       	std	Z+2, r24	; 0x02
     96e:	15 83       	std	Z+5, r17	; 0x05
     970:	04 83       	std	Z+4, r16	; 0x04
     972:	88 ef       	ldi	r24, 0xF8	; 248
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	97 83       	std	Z+7, r25	; 0x07
     978:	86 83       	std	Z+6, r24	; 0x06
     97a:	0e 94 24 05 	call	0xa48	; 0xa48 <sprintf>
			USART_SendString(buffer);
     97e:	ad b7       	in	r26, 0x3d	; 61
     980:	be b7       	in	r27, 0x3e	; 62
     982:	18 96       	adiw	r26, 0x08	; 8
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	be bf       	out	0x3e, r27	; 62
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	ad bf       	out	0x3d, r26	; 61
     98e:	c1 01       	movw	r24, r2
     990:	0e 94 13 03 	call	0x626	; 0x626 <USART_SendString>
		
			dtostrf( Zg, 3, 2, float_ );
     994:	2b a1       	ldd	r18, Y+35	; 0x23
     996:	3c a1       	ldd	r19, Y+36	; 0x24
     998:	4d a1       	ldd	r20, Y+37	; 0x25
     99a:	5e a1       	ldd	r21, Y+38	; 0x26
     99c:	b9 01       	movw	r22, r18
     99e:	ca 01       	movw	r24, r20
     9a0:	43 e0       	ldi	r20, 0x03	; 3
     9a2:	22 e0       	ldi	r18, 0x02	; 2
     9a4:	8e 01       	movw	r16, r28
     9a6:	0f 5f       	subi	r16, 0xFF	; 255
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
     9aa:	0e 94 00 05 	call	0xa00	; 0xa00 <dtostrf>
			sprintf(buffer," Gz = %s%c/s\r\n",float_,0xF8);
     9ae:	8d b7       	in	r24, 0x3d	; 61
     9b0:	9e b7       	in	r25, 0x3e	; 62
     9b2:	08 97       	sbiw	r24, 0x08	; 8
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	9e bf       	out	0x3e, r25	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	8d bf       	out	0x3d, r24	; 61
     9be:	ed b7       	in	r30, 0x3d	; 61
     9c0:	fe b7       	in	r31, 0x3e	; 62
     9c2:	31 96       	adiw	r30, 0x01	; 1
     9c4:	ad b7       	in	r26, 0x3d	; 61
     9c6:	be b7       	in	r27, 0x3e	; 62
     9c8:	12 96       	adiw	r26, 0x02	; 2
     9ca:	3c 92       	st	X, r3
     9cc:	2e 92       	st	-X, r2
     9ce:	11 97       	sbiw	r26, 0x01	; 1
     9d0:	83 eb       	ldi	r24, 0xB3	; 179
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	93 83       	std	Z+3, r25	; 0x03
     9d6:	82 83       	std	Z+2, r24	; 0x02
     9d8:	15 83       	std	Z+5, r17	; 0x05
     9da:	04 83       	std	Z+4, r16	; 0x04
     9dc:	88 ef       	ldi	r24, 0xF8	; 248
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	97 83       	std	Z+7, r25	; 0x07
     9e2:	86 83       	std	Z+6, r24	; 0x06
     9e4:	0e 94 24 05 	call	0xa48	; 0xa48 <sprintf>
			USART_SendString(buffer);
     9e8:	ad b7       	in	r26, 0x3d	; 61
     9ea:	be b7       	in	r27, 0x3e	; 62
     9ec:	18 96       	adiw	r26, 0x08	; 8
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	be bf       	out	0x3e, r27	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	ad bf       	out	0x3d, r26	; 61
     9f8:	c1 01       	movw	r24, r2
     9fa:	0e 94 13 03 	call	0x626	; 0x626 <USART_SendString>
     9fe:	8c ce       	rjmp	.-744    	; 0x718 <main+0x4a>

00000a00 <dtostrf>:
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	f2 2f       	mov	r31, r18
     a0a:	f0 2e       	mov	r15, r16
     a0c:	47 fd       	sbrc	r20, 7
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <dtostrf+0x14>
     a10:	e4 e0       	ldi	r30, 0x04	; 4
     a12:	01 c0       	rjmp	.+2      	; 0xa16 <dtostrf+0x16>
     a14:	e4 e1       	ldi	r30, 0x14	; 20
     a16:	24 2f       	mov	r18, r20
     a18:	33 27       	eor	r19, r19
     a1a:	27 fd       	sbrc	r18, 7
     a1c:	30 95       	com	r19
     a1e:	37 ff       	sbrs	r19, 7
     a20:	03 c0       	rjmp	.+6      	; 0xa28 <dtostrf+0x28>
     a22:	30 95       	com	r19
     a24:	21 95       	neg	r18
     a26:	3f 4f       	sbci	r19, 0xFF	; 255
     a28:	4f 2d       	mov	r20, r15
     a2a:	51 2f       	mov	r21, r17
     a2c:	0f 2f       	mov	r16, r31
     a2e:	ee 2e       	mov	r14, r30
     a30:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <dtoa_prf>
     a34:	8f 2d       	mov	r24, r15
     a36:	91 2f       	mov	r25, r17
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	08 95       	ret

00000a42 <exit>:
     a42:	f8 94       	cli
     a44:	0c 94 85 0d 	jmp	0x1b0a	; 0x1b0a <_exit>

00000a48 <sprintf>:
     a48:	ae e0       	ldi	r26, 0x0E	; 14
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	ea e2       	ldi	r30, 0x2A	; 42
     a4e:	f5 e0       	ldi	r31, 0x05	; 5
     a50:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__prologue_saves__+0x1c>
     a54:	0d 89       	ldd	r16, Y+21	; 0x15
     a56:	1e 89       	ldd	r17, Y+22	; 0x16
     a58:	86 e0       	ldi	r24, 0x06	; 6
     a5a:	8c 83       	std	Y+4, r24	; 0x04
     a5c:	1a 83       	std	Y+2, r17	; 0x02
     a5e:	09 83       	std	Y+1, r16	; 0x01
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	9f e7       	ldi	r25, 0x7F	; 127
     a64:	9e 83       	std	Y+6, r25	; 0x06
     a66:	8d 83       	std	Y+5, r24	; 0x05
     a68:	9e 01       	movw	r18, r28
     a6a:	27 5e       	subi	r18, 0xE7	; 231
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	ce 01       	movw	r24, r28
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	6f 89       	ldd	r22, Y+23	; 0x17
     a74:	78 8d       	ldd	r23, Y+24	; 0x18
     a76:	a9 01       	movw	r20, r18
     a78:	0e 94 7e 07 	call	0xefc	; 0xefc <vfprintf>
     a7c:	2f 81       	ldd	r18, Y+7	; 0x07
     a7e:	38 85       	ldd	r19, Y+8	; 0x08
     a80:	02 0f       	add	r16, r18
     a82:	13 1f       	adc	r17, r19
     a84:	f8 01       	movw	r30, r16
     a86:	10 82       	st	Z, r1
     a88:	2e 96       	adiw	r28, 0x0e	; 14
     a8a:	e4 e0       	ldi	r30, 0x04	; 4
     a8c:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__epilogue_restores__+0x1c>

00000a90 <__subsf3>:
     a90:	50 58       	subi	r21, 0x80	; 128

00000a92 <__addsf3>:
     a92:	bb 27       	eor	r27, r27
     a94:	aa 27       	eor	r26, r26
     a96:	0e d0       	rcall	.+28     	; 0xab4 <__addsf3x>
     a98:	48 c1       	rjmp	.+656    	; 0xd2a <__fp_round>
     a9a:	39 d1       	rcall	.+626    	; 0xd0e <__fp_pscA>
     a9c:	30 f0       	brcs	.+12     	; 0xaaa <__addsf3+0x18>
     a9e:	3e d1       	rcall	.+636    	; 0xd1c <__fp_pscB>
     aa0:	20 f0       	brcs	.+8      	; 0xaaa <__addsf3+0x18>
     aa2:	31 f4       	brne	.+12     	; 0xab0 <__addsf3+0x1e>
     aa4:	9f 3f       	cpi	r25, 0xFF	; 255
     aa6:	11 f4       	brne	.+4      	; 0xaac <__addsf3+0x1a>
     aa8:	1e f4       	brtc	.+6      	; 0xab0 <__addsf3+0x1e>
     aaa:	2e c1       	rjmp	.+604    	; 0xd08 <__fp_nan>
     aac:	0e f4       	brtc	.+2      	; 0xab0 <__addsf3+0x1e>
     aae:	e0 95       	com	r30
     ab0:	e7 fb       	bst	r30, 7
     ab2:	24 c1       	rjmp	.+584    	; 0xcfc <__fp_inf>

00000ab4 <__addsf3x>:
     ab4:	e9 2f       	mov	r30, r25
     ab6:	4a d1       	rcall	.+660    	; 0xd4c <__fp_split3>
     ab8:	80 f3       	brcs	.-32     	; 0xa9a <__addsf3+0x8>
     aba:	ba 17       	cp	r27, r26
     abc:	62 07       	cpc	r22, r18
     abe:	73 07       	cpc	r23, r19
     ac0:	84 07       	cpc	r24, r20
     ac2:	95 07       	cpc	r25, r21
     ac4:	18 f0       	brcs	.+6      	; 0xacc <__addsf3x+0x18>
     ac6:	71 f4       	brne	.+28     	; 0xae4 <__addsf3x+0x30>
     ac8:	9e f5       	brtc	.+102    	; 0xb30 <__addsf3x+0x7c>
     aca:	62 c1       	rjmp	.+708    	; 0xd90 <__fp_zero>
     acc:	0e f4       	brtc	.+2      	; 0xad0 <__addsf3x+0x1c>
     ace:	e0 95       	com	r30
     ad0:	0b 2e       	mov	r0, r27
     ad2:	ba 2f       	mov	r27, r26
     ad4:	a0 2d       	mov	r26, r0
     ad6:	0b 01       	movw	r0, r22
     ad8:	b9 01       	movw	r22, r18
     ada:	90 01       	movw	r18, r0
     adc:	0c 01       	movw	r0, r24
     ade:	ca 01       	movw	r24, r20
     ae0:	a0 01       	movw	r20, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	ff 27       	eor	r31, r31
     ae6:	59 1b       	sub	r21, r25
     ae8:	99 f0       	breq	.+38     	; 0xb10 <__addsf3x+0x5c>
     aea:	59 3f       	cpi	r21, 0xF9	; 249
     aec:	50 f4       	brcc	.+20     	; 0xb02 <__addsf3x+0x4e>
     aee:	50 3e       	cpi	r21, 0xE0	; 224
     af0:	68 f1       	brcs	.+90     	; 0xb4c <__addsf3x+0x98>
     af2:	1a 16       	cp	r1, r26
     af4:	f0 40       	sbci	r31, 0x00	; 0
     af6:	a2 2f       	mov	r26, r18
     af8:	23 2f       	mov	r18, r19
     afa:	34 2f       	mov	r19, r20
     afc:	44 27       	eor	r20, r20
     afe:	58 5f       	subi	r21, 0xF8	; 248
     b00:	f3 cf       	rjmp	.-26     	; 0xae8 <__addsf3x+0x34>
     b02:	46 95       	lsr	r20
     b04:	37 95       	ror	r19
     b06:	27 95       	ror	r18
     b08:	a7 95       	ror	r26
     b0a:	f0 40       	sbci	r31, 0x00	; 0
     b0c:	53 95       	inc	r21
     b0e:	c9 f7       	brne	.-14     	; 0xb02 <__addsf3x+0x4e>
     b10:	7e f4       	brtc	.+30     	; 0xb30 <__addsf3x+0x7c>
     b12:	1f 16       	cp	r1, r31
     b14:	ba 0b       	sbc	r27, r26
     b16:	62 0b       	sbc	r22, r18
     b18:	73 0b       	sbc	r23, r19
     b1a:	84 0b       	sbc	r24, r20
     b1c:	ba f0       	brmi	.+46     	; 0xb4c <__addsf3x+0x98>
     b1e:	91 50       	subi	r25, 0x01	; 1
     b20:	a1 f0       	breq	.+40     	; 0xb4a <__addsf3x+0x96>
     b22:	ff 0f       	add	r31, r31
     b24:	bb 1f       	adc	r27, r27
     b26:	66 1f       	adc	r22, r22
     b28:	77 1f       	adc	r23, r23
     b2a:	88 1f       	adc	r24, r24
     b2c:	c2 f7       	brpl	.-16     	; 0xb1e <__addsf3x+0x6a>
     b2e:	0e c0       	rjmp	.+28     	; 0xb4c <__addsf3x+0x98>
     b30:	ba 0f       	add	r27, r26
     b32:	62 1f       	adc	r22, r18
     b34:	73 1f       	adc	r23, r19
     b36:	84 1f       	adc	r24, r20
     b38:	48 f4       	brcc	.+18     	; 0xb4c <__addsf3x+0x98>
     b3a:	87 95       	ror	r24
     b3c:	77 95       	ror	r23
     b3e:	67 95       	ror	r22
     b40:	b7 95       	ror	r27
     b42:	f7 95       	ror	r31
     b44:	9e 3f       	cpi	r25, 0xFE	; 254
     b46:	08 f0       	brcs	.+2      	; 0xb4a <__addsf3x+0x96>
     b48:	b3 cf       	rjmp	.-154    	; 0xab0 <__addsf3+0x1e>
     b4a:	93 95       	inc	r25
     b4c:	88 0f       	add	r24, r24
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <__addsf3x+0x9e>
     b50:	99 27       	eor	r25, r25
     b52:	ee 0f       	add	r30, r30
     b54:	97 95       	ror	r25
     b56:	87 95       	ror	r24
     b58:	08 95       	ret

00000b5a <__divsf3>:
     b5a:	0c d0       	rcall	.+24     	; 0xb74 <__divsf3x>
     b5c:	e6 c0       	rjmp	.+460    	; 0xd2a <__fp_round>
     b5e:	de d0       	rcall	.+444    	; 0xd1c <__fp_pscB>
     b60:	40 f0       	brcs	.+16     	; 0xb72 <__divsf3+0x18>
     b62:	d5 d0       	rcall	.+426    	; 0xd0e <__fp_pscA>
     b64:	30 f0       	brcs	.+12     	; 0xb72 <__divsf3+0x18>
     b66:	21 f4       	brne	.+8      	; 0xb70 <__divsf3+0x16>
     b68:	5f 3f       	cpi	r21, 0xFF	; 255
     b6a:	19 f0       	breq	.+6      	; 0xb72 <__divsf3+0x18>
     b6c:	c7 c0       	rjmp	.+398    	; 0xcfc <__fp_inf>
     b6e:	51 11       	cpse	r21, r1
     b70:	10 c1       	rjmp	.+544    	; 0xd92 <__fp_szero>
     b72:	ca c0       	rjmp	.+404    	; 0xd08 <__fp_nan>

00000b74 <__divsf3x>:
     b74:	eb d0       	rcall	.+470    	; 0xd4c <__fp_split3>
     b76:	98 f3       	brcs	.-26     	; 0xb5e <__divsf3+0x4>

00000b78 <__divsf3_pse>:
     b78:	99 23       	and	r25, r25
     b7a:	c9 f3       	breq	.-14     	; 0xb6e <__divsf3+0x14>
     b7c:	55 23       	and	r21, r21
     b7e:	b1 f3       	breq	.-20     	; 0xb6c <__divsf3+0x12>
     b80:	95 1b       	sub	r25, r21
     b82:	55 0b       	sbc	r21, r21
     b84:	bb 27       	eor	r27, r27
     b86:	aa 27       	eor	r26, r26
     b88:	62 17       	cp	r22, r18
     b8a:	73 07       	cpc	r23, r19
     b8c:	84 07       	cpc	r24, r20
     b8e:	38 f0       	brcs	.+14     	; 0xb9e <__divsf3_pse+0x26>
     b90:	9f 5f       	subi	r25, 0xFF	; 255
     b92:	5f 4f       	sbci	r21, 0xFF	; 255
     b94:	22 0f       	add	r18, r18
     b96:	33 1f       	adc	r19, r19
     b98:	44 1f       	adc	r20, r20
     b9a:	aa 1f       	adc	r26, r26
     b9c:	a9 f3       	breq	.-22     	; 0xb88 <__divsf3_pse+0x10>
     b9e:	33 d0       	rcall	.+102    	; 0xc06 <__divsf3_pse+0x8e>
     ba0:	0e 2e       	mov	r0, r30
     ba2:	3a f0       	brmi	.+14     	; 0xbb2 <__divsf3_pse+0x3a>
     ba4:	e0 e8       	ldi	r30, 0x80	; 128
     ba6:	30 d0       	rcall	.+96     	; 0xc08 <__divsf3_pse+0x90>
     ba8:	91 50       	subi	r25, 0x01	; 1
     baa:	50 40       	sbci	r21, 0x00	; 0
     bac:	e6 95       	lsr	r30
     bae:	00 1c       	adc	r0, r0
     bb0:	ca f7       	brpl	.-14     	; 0xba4 <__divsf3_pse+0x2c>
     bb2:	29 d0       	rcall	.+82     	; 0xc06 <__divsf3_pse+0x8e>
     bb4:	fe 2f       	mov	r31, r30
     bb6:	27 d0       	rcall	.+78     	; 0xc06 <__divsf3_pse+0x8e>
     bb8:	66 0f       	add	r22, r22
     bba:	77 1f       	adc	r23, r23
     bbc:	88 1f       	adc	r24, r24
     bbe:	bb 1f       	adc	r27, r27
     bc0:	26 17       	cp	r18, r22
     bc2:	37 07       	cpc	r19, r23
     bc4:	48 07       	cpc	r20, r24
     bc6:	ab 07       	cpc	r26, r27
     bc8:	b0 e8       	ldi	r27, 0x80	; 128
     bca:	09 f0       	breq	.+2      	; 0xbce <__divsf3_pse+0x56>
     bcc:	bb 0b       	sbc	r27, r27
     bce:	80 2d       	mov	r24, r0
     bd0:	bf 01       	movw	r22, r30
     bd2:	ff 27       	eor	r31, r31
     bd4:	93 58       	subi	r25, 0x83	; 131
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	2a f0       	brmi	.+10     	; 0xbe4 <__divsf3_pse+0x6c>
     bda:	9e 3f       	cpi	r25, 0xFE	; 254
     bdc:	51 05       	cpc	r21, r1
     bde:	68 f0       	brcs	.+26     	; 0xbfa <__divsf3_pse+0x82>
     be0:	8d c0       	rjmp	.+282    	; 0xcfc <__fp_inf>
     be2:	d7 c0       	rjmp	.+430    	; 0xd92 <__fp_szero>
     be4:	5f 3f       	cpi	r21, 0xFF	; 255
     be6:	ec f3       	brlt	.-6      	; 0xbe2 <__divsf3_pse+0x6a>
     be8:	98 3e       	cpi	r25, 0xE8	; 232
     bea:	dc f3       	brlt	.-10     	; 0xbe2 <__divsf3_pse+0x6a>
     bec:	86 95       	lsr	r24
     bee:	77 95       	ror	r23
     bf0:	67 95       	ror	r22
     bf2:	b7 95       	ror	r27
     bf4:	f7 95       	ror	r31
     bf6:	9f 5f       	subi	r25, 0xFF	; 255
     bf8:	c9 f7       	brne	.-14     	; 0xbec <__divsf3_pse+0x74>
     bfa:	88 0f       	add	r24, r24
     bfc:	91 1d       	adc	r25, r1
     bfe:	96 95       	lsr	r25
     c00:	87 95       	ror	r24
     c02:	97 f9       	bld	r25, 7
     c04:	08 95       	ret
     c06:	e1 e0       	ldi	r30, 0x01	; 1
     c08:	66 0f       	add	r22, r22
     c0a:	77 1f       	adc	r23, r23
     c0c:	88 1f       	adc	r24, r24
     c0e:	bb 1f       	adc	r27, r27
     c10:	62 17       	cp	r22, r18
     c12:	73 07       	cpc	r23, r19
     c14:	84 07       	cpc	r24, r20
     c16:	ba 07       	cpc	r27, r26
     c18:	20 f0       	brcs	.+8      	; 0xc22 <__divsf3_pse+0xaa>
     c1a:	62 1b       	sub	r22, r18
     c1c:	73 0b       	sbc	r23, r19
     c1e:	84 0b       	sbc	r24, r20
     c20:	ba 0b       	sbc	r27, r26
     c22:	ee 1f       	adc	r30, r30
     c24:	88 f7       	brcc	.-30     	; 0xc08 <__divsf3_pse+0x90>
     c26:	e0 95       	com	r30
     c28:	08 95       	ret

00000c2a <__fixunssfsi>:
     c2a:	98 d0       	rcall	.+304    	; 0xd5c <__fp_splitA>
     c2c:	88 f0       	brcs	.+34     	; 0xc50 <__fixunssfsi+0x26>
     c2e:	9f 57       	subi	r25, 0x7F	; 127
     c30:	90 f0       	brcs	.+36     	; 0xc56 <__fixunssfsi+0x2c>
     c32:	b9 2f       	mov	r27, r25
     c34:	99 27       	eor	r25, r25
     c36:	b7 51       	subi	r27, 0x17	; 23
     c38:	a0 f0       	brcs	.+40     	; 0xc62 <__fixunssfsi+0x38>
     c3a:	d1 f0       	breq	.+52     	; 0xc70 <__fixunssfsi+0x46>
     c3c:	66 0f       	add	r22, r22
     c3e:	77 1f       	adc	r23, r23
     c40:	88 1f       	adc	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	1a f0       	brmi	.+6      	; 0xc4c <__fixunssfsi+0x22>
     c46:	ba 95       	dec	r27
     c48:	c9 f7       	brne	.-14     	; 0xc3c <__fixunssfsi+0x12>
     c4a:	12 c0       	rjmp	.+36     	; 0xc70 <__fixunssfsi+0x46>
     c4c:	b1 30       	cpi	r27, 0x01	; 1
     c4e:	81 f0       	breq	.+32     	; 0xc70 <__fixunssfsi+0x46>
     c50:	9f d0       	rcall	.+318    	; 0xd90 <__fp_zero>
     c52:	b1 e0       	ldi	r27, 0x01	; 1
     c54:	08 95       	ret
     c56:	9c c0       	rjmp	.+312    	; 0xd90 <__fp_zero>
     c58:	67 2f       	mov	r22, r23
     c5a:	78 2f       	mov	r23, r24
     c5c:	88 27       	eor	r24, r24
     c5e:	b8 5f       	subi	r27, 0xF8	; 248
     c60:	39 f0       	breq	.+14     	; 0xc70 <__fixunssfsi+0x46>
     c62:	b9 3f       	cpi	r27, 0xF9	; 249
     c64:	cc f3       	brlt	.-14     	; 0xc58 <__fixunssfsi+0x2e>
     c66:	86 95       	lsr	r24
     c68:	77 95       	ror	r23
     c6a:	67 95       	ror	r22
     c6c:	b3 95       	inc	r27
     c6e:	d9 f7       	brne	.-10     	; 0xc66 <__fixunssfsi+0x3c>
     c70:	3e f4       	brtc	.+14     	; 0xc80 <__fixunssfsi+0x56>
     c72:	90 95       	com	r25
     c74:	80 95       	com	r24
     c76:	70 95       	com	r23
     c78:	61 95       	neg	r22
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
     c7c:	8f 4f       	sbci	r24, 0xFF	; 255
     c7e:	9f 4f       	sbci	r25, 0xFF	; 255
     c80:	08 95       	ret

00000c82 <__floatunsisf>:
     c82:	e8 94       	clt
     c84:	09 c0       	rjmp	.+18     	; 0xc98 <__floatsisf+0x12>

00000c86 <__floatsisf>:
     c86:	97 fb       	bst	r25, 7
     c88:	3e f4       	brtc	.+14     	; 0xc98 <__floatsisf+0x12>
     c8a:	90 95       	com	r25
     c8c:	80 95       	com	r24
     c8e:	70 95       	com	r23
     c90:	61 95       	neg	r22
     c92:	7f 4f       	sbci	r23, 0xFF	; 255
     c94:	8f 4f       	sbci	r24, 0xFF	; 255
     c96:	9f 4f       	sbci	r25, 0xFF	; 255
     c98:	99 23       	and	r25, r25
     c9a:	a9 f0       	breq	.+42     	; 0xcc6 <__floatsisf+0x40>
     c9c:	f9 2f       	mov	r31, r25
     c9e:	96 e9       	ldi	r25, 0x96	; 150
     ca0:	bb 27       	eor	r27, r27
     ca2:	93 95       	inc	r25
     ca4:	f6 95       	lsr	r31
     ca6:	87 95       	ror	r24
     ca8:	77 95       	ror	r23
     caa:	67 95       	ror	r22
     cac:	b7 95       	ror	r27
     cae:	f1 11       	cpse	r31, r1
     cb0:	f8 cf       	rjmp	.-16     	; 0xca2 <__floatsisf+0x1c>
     cb2:	fa f4       	brpl	.+62     	; 0xcf2 <__floatsisf+0x6c>
     cb4:	bb 0f       	add	r27, r27
     cb6:	11 f4       	brne	.+4      	; 0xcbc <__floatsisf+0x36>
     cb8:	60 ff       	sbrs	r22, 0
     cba:	1b c0       	rjmp	.+54     	; 0xcf2 <__floatsisf+0x6c>
     cbc:	6f 5f       	subi	r22, 0xFF	; 255
     cbe:	7f 4f       	sbci	r23, 0xFF	; 255
     cc0:	8f 4f       	sbci	r24, 0xFF	; 255
     cc2:	9f 4f       	sbci	r25, 0xFF	; 255
     cc4:	16 c0       	rjmp	.+44     	; 0xcf2 <__floatsisf+0x6c>
     cc6:	88 23       	and	r24, r24
     cc8:	11 f0       	breq	.+4      	; 0xcce <__floatsisf+0x48>
     cca:	96 e9       	ldi	r25, 0x96	; 150
     ccc:	11 c0       	rjmp	.+34     	; 0xcf0 <__floatsisf+0x6a>
     cce:	77 23       	and	r23, r23
     cd0:	21 f0       	breq	.+8      	; 0xcda <__floatsisf+0x54>
     cd2:	9e e8       	ldi	r25, 0x8E	; 142
     cd4:	87 2f       	mov	r24, r23
     cd6:	76 2f       	mov	r23, r22
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <__floatsisf+0x5e>
     cda:	66 23       	and	r22, r22
     cdc:	71 f0       	breq	.+28     	; 0xcfa <__floatsisf+0x74>
     cde:	96 e8       	ldi	r25, 0x86	; 134
     ce0:	86 2f       	mov	r24, r22
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	2a f0       	brmi	.+10     	; 0xcf2 <__floatsisf+0x6c>
     ce8:	9a 95       	dec	r25
     cea:	66 0f       	add	r22, r22
     cec:	77 1f       	adc	r23, r23
     cee:	88 1f       	adc	r24, r24
     cf0:	da f7       	brpl	.-10     	; 0xce8 <__floatsisf+0x62>
     cf2:	88 0f       	add	r24, r24
     cf4:	96 95       	lsr	r25
     cf6:	87 95       	ror	r24
     cf8:	97 f9       	bld	r25, 7
     cfa:	08 95       	ret

00000cfc <__fp_inf>:
     cfc:	97 f9       	bld	r25, 7
     cfe:	9f 67       	ori	r25, 0x7F	; 127
     d00:	80 e8       	ldi	r24, 0x80	; 128
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	08 95       	ret

00000d08 <__fp_nan>:
     d08:	9f ef       	ldi	r25, 0xFF	; 255
     d0a:	80 ec       	ldi	r24, 0xC0	; 192
     d0c:	08 95       	ret

00000d0e <__fp_pscA>:
     d0e:	00 24       	eor	r0, r0
     d10:	0a 94       	dec	r0
     d12:	16 16       	cp	r1, r22
     d14:	17 06       	cpc	r1, r23
     d16:	18 06       	cpc	r1, r24
     d18:	09 06       	cpc	r0, r25
     d1a:	08 95       	ret

00000d1c <__fp_pscB>:
     d1c:	00 24       	eor	r0, r0
     d1e:	0a 94       	dec	r0
     d20:	12 16       	cp	r1, r18
     d22:	13 06       	cpc	r1, r19
     d24:	14 06       	cpc	r1, r20
     d26:	05 06       	cpc	r0, r21
     d28:	08 95       	ret

00000d2a <__fp_round>:
     d2a:	09 2e       	mov	r0, r25
     d2c:	03 94       	inc	r0
     d2e:	00 0c       	add	r0, r0
     d30:	11 f4       	brne	.+4      	; 0xd36 <__fp_round+0xc>
     d32:	88 23       	and	r24, r24
     d34:	52 f0       	brmi	.+20     	; 0xd4a <__fp_round+0x20>
     d36:	bb 0f       	add	r27, r27
     d38:	40 f4       	brcc	.+16     	; 0xd4a <__fp_round+0x20>
     d3a:	bf 2b       	or	r27, r31
     d3c:	11 f4       	brne	.+4      	; 0xd42 <__fp_round+0x18>
     d3e:	60 ff       	sbrs	r22, 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__fp_round+0x20>
     d42:	6f 5f       	subi	r22, 0xFF	; 255
     d44:	7f 4f       	sbci	r23, 0xFF	; 255
     d46:	8f 4f       	sbci	r24, 0xFF	; 255
     d48:	9f 4f       	sbci	r25, 0xFF	; 255
     d4a:	08 95       	ret

00000d4c <__fp_split3>:
     d4c:	57 fd       	sbrc	r21, 7
     d4e:	90 58       	subi	r25, 0x80	; 128
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	59 f0       	breq	.+22     	; 0xd6c <__fp_splitA+0x10>
     d56:	5f 3f       	cpi	r21, 0xFF	; 255
     d58:	71 f0       	breq	.+28     	; 0xd76 <__fp_splitA+0x1a>
     d5a:	47 95       	ror	r20

00000d5c <__fp_splitA>:
     d5c:	88 0f       	add	r24, r24
     d5e:	97 fb       	bst	r25, 7
     d60:	99 1f       	adc	r25, r25
     d62:	61 f0       	breq	.+24     	; 0xd7c <__fp_splitA+0x20>
     d64:	9f 3f       	cpi	r25, 0xFF	; 255
     d66:	79 f0       	breq	.+30     	; 0xd86 <__fp_splitA+0x2a>
     d68:	87 95       	ror	r24
     d6a:	08 95       	ret
     d6c:	12 16       	cp	r1, r18
     d6e:	13 06       	cpc	r1, r19
     d70:	14 06       	cpc	r1, r20
     d72:	55 1f       	adc	r21, r21
     d74:	f2 cf       	rjmp	.-28     	; 0xd5a <__fp_split3+0xe>
     d76:	46 95       	lsr	r20
     d78:	f1 df       	rcall	.-30     	; 0xd5c <__fp_splitA>
     d7a:	08 c0       	rjmp	.+16     	; 0xd8c <__fp_splitA+0x30>
     d7c:	16 16       	cp	r1, r22
     d7e:	17 06       	cpc	r1, r23
     d80:	18 06       	cpc	r1, r24
     d82:	99 1f       	adc	r25, r25
     d84:	f1 cf       	rjmp	.-30     	; 0xd68 <__fp_splitA+0xc>
     d86:	86 95       	lsr	r24
     d88:	71 05       	cpc	r23, r1
     d8a:	61 05       	cpc	r22, r1
     d8c:	08 94       	sec
     d8e:	08 95       	ret

00000d90 <__fp_zero>:
     d90:	e8 94       	clt

00000d92 <__fp_szero>:
     d92:	bb 27       	eor	r27, r27
     d94:	66 27       	eor	r22, r22
     d96:	77 27       	eor	r23, r23
     d98:	cb 01       	movw	r24, r22
     d9a:	97 f9       	bld	r25, 7
     d9c:	08 95       	ret

00000d9e <__mulsf3>:
     d9e:	0b d0       	rcall	.+22     	; 0xdb6 <__mulsf3x>
     da0:	c4 cf       	rjmp	.-120    	; 0xd2a <__fp_round>
     da2:	b5 df       	rcall	.-150    	; 0xd0e <__fp_pscA>
     da4:	28 f0       	brcs	.+10     	; 0xdb0 <__mulsf3+0x12>
     da6:	ba df       	rcall	.-140    	; 0xd1c <__fp_pscB>
     da8:	18 f0       	brcs	.+6      	; 0xdb0 <__mulsf3+0x12>
     daa:	95 23       	and	r25, r21
     dac:	09 f0       	breq	.+2      	; 0xdb0 <__mulsf3+0x12>
     dae:	a6 cf       	rjmp	.-180    	; 0xcfc <__fp_inf>
     db0:	ab cf       	rjmp	.-170    	; 0xd08 <__fp_nan>
     db2:	11 24       	eor	r1, r1
     db4:	ee cf       	rjmp	.-36     	; 0xd92 <__fp_szero>

00000db6 <__mulsf3x>:
     db6:	ca df       	rcall	.-108    	; 0xd4c <__fp_split3>
     db8:	a0 f3       	brcs	.-24     	; 0xda2 <__mulsf3+0x4>

00000dba <__mulsf3_pse>:
     dba:	95 9f       	mul	r25, r21
     dbc:	d1 f3       	breq	.-12     	; 0xdb2 <__mulsf3+0x14>
     dbe:	95 0f       	add	r25, r21
     dc0:	50 e0       	ldi	r21, 0x00	; 0
     dc2:	55 1f       	adc	r21, r21
     dc4:	62 9f       	mul	r22, r18
     dc6:	f0 01       	movw	r30, r0
     dc8:	72 9f       	mul	r23, r18
     dca:	bb 27       	eor	r27, r27
     dcc:	f0 0d       	add	r31, r0
     dce:	b1 1d       	adc	r27, r1
     dd0:	63 9f       	mul	r22, r19
     dd2:	aa 27       	eor	r26, r26
     dd4:	f0 0d       	add	r31, r0
     dd6:	b1 1d       	adc	r27, r1
     dd8:	aa 1f       	adc	r26, r26
     dda:	64 9f       	mul	r22, r20
     ddc:	66 27       	eor	r22, r22
     dde:	b0 0d       	add	r27, r0
     de0:	a1 1d       	adc	r26, r1
     de2:	66 1f       	adc	r22, r22
     de4:	82 9f       	mul	r24, r18
     de6:	22 27       	eor	r18, r18
     de8:	b0 0d       	add	r27, r0
     dea:	a1 1d       	adc	r26, r1
     dec:	62 1f       	adc	r22, r18
     dee:	73 9f       	mul	r23, r19
     df0:	b0 0d       	add	r27, r0
     df2:	a1 1d       	adc	r26, r1
     df4:	62 1f       	adc	r22, r18
     df6:	83 9f       	mul	r24, r19
     df8:	a0 0d       	add	r26, r0
     dfa:	61 1d       	adc	r22, r1
     dfc:	22 1f       	adc	r18, r18
     dfe:	74 9f       	mul	r23, r20
     e00:	33 27       	eor	r19, r19
     e02:	a0 0d       	add	r26, r0
     e04:	61 1d       	adc	r22, r1
     e06:	23 1f       	adc	r18, r19
     e08:	84 9f       	mul	r24, r20
     e0a:	60 0d       	add	r22, r0
     e0c:	21 1d       	adc	r18, r1
     e0e:	82 2f       	mov	r24, r18
     e10:	76 2f       	mov	r23, r22
     e12:	6a 2f       	mov	r22, r26
     e14:	11 24       	eor	r1, r1
     e16:	9f 57       	subi	r25, 0x7F	; 127
     e18:	50 40       	sbci	r21, 0x00	; 0
     e1a:	8a f0       	brmi	.+34     	; 0xe3e <__mulsf3_pse+0x84>
     e1c:	e1 f0       	breq	.+56     	; 0xe56 <__mulsf3_pse+0x9c>
     e1e:	88 23       	and	r24, r24
     e20:	4a f0       	brmi	.+18     	; 0xe34 <__mulsf3_pse+0x7a>
     e22:	ee 0f       	add	r30, r30
     e24:	ff 1f       	adc	r31, r31
     e26:	bb 1f       	adc	r27, r27
     e28:	66 1f       	adc	r22, r22
     e2a:	77 1f       	adc	r23, r23
     e2c:	88 1f       	adc	r24, r24
     e2e:	91 50       	subi	r25, 0x01	; 1
     e30:	50 40       	sbci	r21, 0x00	; 0
     e32:	a9 f7       	brne	.-22     	; 0xe1e <__mulsf3_pse+0x64>
     e34:	9e 3f       	cpi	r25, 0xFE	; 254
     e36:	51 05       	cpc	r21, r1
     e38:	70 f0       	brcs	.+28     	; 0xe56 <__mulsf3_pse+0x9c>
     e3a:	60 cf       	rjmp	.-320    	; 0xcfc <__fp_inf>
     e3c:	aa cf       	rjmp	.-172    	; 0xd92 <__fp_szero>
     e3e:	5f 3f       	cpi	r21, 0xFF	; 255
     e40:	ec f3       	brlt	.-6      	; 0xe3c <__mulsf3_pse+0x82>
     e42:	98 3e       	cpi	r25, 0xE8	; 232
     e44:	dc f3       	brlt	.-10     	; 0xe3c <__mulsf3_pse+0x82>
     e46:	86 95       	lsr	r24
     e48:	77 95       	ror	r23
     e4a:	67 95       	ror	r22
     e4c:	b7 95       	ror	r27
     e4e:	f7 95       	ror	r31
     e50:	e7 95       	ror	r30
     e52:	9f 5f       	subi	r25, 0xFF	; 255
     e54:	c1 f7       	brne	.-16     	; 0xe46 <__mulsf3_pse+0x8c>
     e56:	fe 2b       	or	r31, r30
     e58:	88 0f       	add	r24, r24
     e5a:	91 1d       	adc	r25, r1
     e5c:	96 95       	lsr	r25
     e5e:	87 95       	ror	r24
     e60:	97 f9       	bld	r25, 7
     e62:	08 95       	ret

00000e64 <pow>:
     e64:	fa 01       	movw	r30, r20
     e66:	ee 0f       	add	r30, r30
     e68:	ff 1f       	adc	r31, r31
     e6a:	30 96       	adiw	r30, 0x00	; 0
     e6c:	21 05       	cpc	r18, r1
     e6e:	31 05       	cpc	r19, r1
     e70:	99 f1       	breq	.+102    	; 0xed8 <pow+0x74>
     e72:	61 15       	cp	r22, r1
     e74:	71 05       	cpc	r23, r1
     e76:	61 f4       	brne	.+24     	; 0xe90 <pow+0x2c>
     e78:	80 38       	cpi	r24, 0x80	; 128
     e7a:	bf e3       	ldi	r27, 0x3F	; 63
     e7c:	9b 07       	cpc	r25, r27
     e7e:	49 f1       	breq	.+82     	; 0xed2 <pow+0x6e>
     e80:	68 94       	set
     e82:	90 38       	cpi	r25, 0x80	; 128
     e84:	81 05       	cpc	r24, r1
     e86:	61 f0       	breq	.+24     	; 0xea0 <pow+0x3c>
     e88:	80 38       	cpi	r24, 0x80	; 128
     e8a:	bf ef       	ldi	r27, 0xFF	; 255
     e8c:	9b 07       	cpc	r25, r27
     e8e:	41 f0       	breq	.+16     	; 0xea0 <pow+0x3c>
     e90:	99 23       	and	r25, r25
     e92:	42 f5       	brpl	.+80     	; 0xee4 <pow+0x80>
     e94:	ff 3f       	cpi	r31, 0xFF	; 255
     e96:	e1 05       	cpc	r30, r1
     e98:	31 05       	cpc	r19, r1
     e9a:	21 05       	cpc	r18, r1
     e9c:	11 f1       	breq	.+68     	; 0xee2 <pow+0x7e>
     e9e:	e8 94       	clt
     ea0:	08 94       	sec
     ea2:	e7 95       	ror	r30
     ea4:	d9 01       	movw	r26, r18
     ea6:	aa 23       	and	r26, r26
     ea8:	29 f4       	brne	.+10     	; 0xeb4 <pow+0x50>
     eaa:	ab 2f       	mov	r26, r27
     eac:	be 2f       	mov	r27, r30
     eae:	f8 5f       	subi	r31, 0xF8	; 248
     eb0:	d0 f3       	brcs	.-12     	; 0xea6 <pow+0x42>
     eb2:	10 c0       	rjmp	.+32     	; 0xed4 <pow+0x70>
     eb4:	ff 5f       	subi	r31, 0xFF	; 255
     eb6:	70 f4       	brcc	.+28     	; 0xed4 <pow+0x70>
     eb8:	a6 95       	lsr	r26
     eba:	e0 f7       	brcc	.-8      	; 0xeb4 <pow+0x50>
     ebc:	f7 39       	cpi	r31, 0x97	; 151
     ebe:	50 f0       	brcs	.+20     	; 0xed4 <pow+0x70>
     ec0:	19 f0       	breq	.+6      	; 0xec8 <pow+0x64>
     ec2:	ff 3a       	cpi	r31, 0xAF	; 175
     ec4:	38 f4       	brcc	.+14     	; 0xed4 <pow+0x70>
     ec6:	9f 77       	andi	r25, 0x7F	; 127
     ec8:	9f 93       	push	r25
     eca:	0c d0       	rcall	.+24     	; 0xee4 <pow+0x80>
     ecc:	0f 90       	pop	r0
     ece:	07 fc       	sbrc	r0, 7
     ed0:	90 58       	subi	r25, 0x80	; 128
     ed2:	08 95       	ret
     ed4:	3e f0       	brts	.+14     	; 0xee4 <pow+0x80>
     ed6:	18 cf       	rjmp	.-464    	; 0xd08 <__fp_nan>
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	80 e8       	ldi	r24, 0x80	; 128
     ede:	9f e3       	ldi	r25, 0x3F	; 63
     ee0:	08 95       	ret
     ee2:	4f e7       	ldi	r20, 0x7F	; 127
     ee4:	9f 77       	andi	r25, 0x7F	; 127
     ee6:	5f 93       	push	r21
     ee8:	4f 93       	push	r20
     eea:	3f 93       	push	r19
     eec:	2f 93       	push	r18
     eee:	55 d5       	rcall	.+2730   	; 0x199a <log>
     ef0:	2f 91       	pop	r18
     ef2:	3f 91       	pop	r19
     ef4:	4f 91       	pop	r20
     ef6:	5f 91       	pop	r21
     ef8:	52 df       	rcall	.-348    	; 0xd9e <__mulsf3>
     efa:	bc c4       	rjmp	.+2424   	; 0x1874 <exp>

00000efc <vfprintf>:
     efc:	ab e0       	ldi	r26, 0x0B	; 11
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e4 e8       	ldi	r30, 0x84	; 132
     f02:	f7 e0       	ldi	r31, 0x07	; 7
     f04:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <__prologue_saves__>
     f08:	3c 01       	movw	r6, r24
     f0a:	2b 01       	movw	r4, r22
     f0c:	5a 01       	movw	r10, r20
     f0e:	fc 01       	movw	r30, r24
     f10:	17 82       	std	Z+7, r1	; 0x07
     f12:	16 82       	std	Z+6, r1	; 0x06
     f14:	83 81       	ldd	r24, Z+3	; 0x03
     f16:	81 fd       	sbrc	r24, 1
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <vfprintf+0x24>
     f1a:	6f ef       	ldi	r22, 0xFF	; 255
     f1c:	7f ef       	ldi	r23, 0xFF	; 255
     f1e:	c6 c1       	rjmp	.+908    	; 0x12ac <vfprintf+0x3b0>
     f20:	9a e0       	ldi	r25, 0x0A	; 10
     f22:	89 2e       	mov	r8, r25
     f24:	1e 01       	movw	r2, r28
     f26:	08 94       	sec
     f28:	21 1c       	adc	r2, r1
     f2a:	31 1c       	adc	r3, r1
     f2c:	f3 01       	movw	r30, r6
     f2e:	23 81       	ldd	r18, Z+3	; 0x03
     f30:	f2 01       	movw	r30, r4
     f32:	23 fd       	sbrc	r18, 3
     f34:	85 91       	lpm	r24, Z+
     f36:	23 ff       	sbrs	r18, 3
     f38:	81 91       	ld	r24, Z+
     f3a:	2f 01       	movw	r4, r30
     f3c:	88 23       	and	r24, r24
     f3e:	09 f4       	brne	.+2      	; 0xf42 <vfprintf+0x46>
     f40:	b2 c1       	rjmp	.+868    	; 0x12a6 <vfprintf+0x3aa>
     f42:	85 32       	cpi	r24, 0x25	; 37
     f44:	39 f4       	brne	.+14     	; 0xf54 <vfprintf+0x58>
     f46:	23 fd       	sbrc	r18, 3
     f48:	85 91       	lpm	r24, Z+
     f4a:	23 ff       	sbrs	r18, 3
     f4c:	81 91       	ld	r24, Z+
     f4e:	2f 01       	movw	r4, r30
     f50:	85 32       	cpi	r24, 0x25	; 37
     f52:	29 f4       	brne	.+10     	; 0xf5e <vfprintf+0x62>
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	b3 01       	movw	r22, r6
     f58:	0e 94 ab 0b 	call	0x1756	; 0x1756 <fputc>
     f5c:	e7 cf       	rjmp	.-50     	; 0xf2c <vfprintf+0x30>
     f5e:	98 2f       	mov	r25, r24
     f60:	ff 24       	eor	r15, r15
     f62:	ee 24       	eor	r14, r14
     f64:	99 24       	eor	r9, r9
     f66:	ff e1       	ldi	r31, 0x1F	; 31
     f68:	ff 15       	cp	r31, r15
     f6a:	d0 f0       	brcs	.+52     	; 0xfa0 <vfprintf+0xa4>
     f6c:	9b 32       	cpi	r25, 0x2B	; 43
     f6e:	69 f0       	breq	.+26     	; 0xf8a <vfprintf+0x8e>
     f70:	9c 32       	cpi	r25, 0x2C	; 44
     f72:	28 f4       	brcc	.+10     	; 0xf7e <vfprintf+0x82>
     f74:	90 32       	cpi	r25, 0x20	; 32
     f76:	59 f0       	breq	.+22     	; 0xf8e <vfprintf+0x92>
     f78:	93 32       	cpi	r25, 0x23	; 35
     f7a:	91 f4       	brne	.+36     	; 0xfa0 <vfprintf+0xa4>
     f7c:	0e c0       	rjmp	.+28     	; 0xf9a <vfprintf+0x9e>
     f7e:	9d 32       	cpi	r25, 0x2D	; 45
     f80:	49 f0       	breq	.+18     	; 0xf94 <vfprintf+0x98>
     f82:	90 33       	cpi	r25, 0x30	; 48
     f84:	69 f4       	brne	.+26     	; 0xfa0 <vfprintf+0xa4>
     f86:	41 e0       	ldi	r20, 0x01	; 1
     f88:	24 c0       	rjmp	.+72     	; 0xfd2 <vfprintf+0xd6>
     f8a:	52 e0       	ldi	r21, 0x02	; 2
     f8c:	f5 2a       	or	r15, r21
     f8e:	84 e0       	ldi	r24, 0x04	; 4
     f90:	f8 2a       	or	r15, r24
     f92:	28 c0       	rjmp	.+80     	; 0xfe4 <vfprintf+0xe8>
     f94:	98 e0       	ldi	r25, 0x08	; 8
     f96:	f9 2a       	or	r15, r25
     f98:	25 c0       	rjmp	.+74     	; 0xfe4 <vfprintf+0xe8>
     f9a:	e0 e1       	ldi	r30, 0x10	; 16
     f9c:	fe 2a       	or	r15, r30
     f9e:	22 c0       	rjmp	.+68     	; 0xfe4 <vfprintf+0xe8>
     fa0:	f7 fc       	sbrc	r15, 7
     fa2:	29 c0       	rjmp	.+82     	; 0xff6 <vfprintf+0xfa>
     fa4:	89 2f       	mov	r24, r25
     fa6:	80 53       	subi	r24, 0x30	; 48
     fa8:	8a 30       	cpi	r24, 0x0A	; 10
     faa:	70 f4       	brcc	.+28     	; 0xfc8 <vfprintf+0xcc>
     fac:	f6 fe       	sbrs	r15, 6
     fae:	05 c0       	rjmp	.+10     	; 0xfba <vfprintf+0xbe>
     fb0:	98 9c       	mul	r9, r8
     fb2:	90 2c       	mov	r9, r0
     fb4:	11 24       	eor	r1, r1
     fb6:	98 0e       	add	r9, r24
     fb8:	15 c0       	rjmp	.+42     	; 0xfe4 <vfprintf+0xe8>
     fba:	e8 9c       	mul	r14, r8
     fbc:	e0 2c       	mov	r14, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	e8 0e       	add	r14, r24
     fc2:	f0 e2       	ldi	r31, 0x20	; 32
     fc4:	ff 2a       	or	r15, r31
     fc6:	0e c0       	rjmp	.+28     	; 0xfe4 <vfprintf+0xe8>
     fc8:	9e 32       	cpi	r25, 0x2E	; 46
     fca:	29 f4       	brne	.+10     	; 0xfd6 <vfprintf+0xda>
     fcc:	f6 fc       	sbrc	r15, 6
     fce:	6b c1       	rjmp	.+726    	; 0x12a6 <vfprintf+0x3aa>
     fd0:	40 e4       	ldi	r20, 0x40	; 64
     fd2:	f4 2a       	or	r15, r20
     fd4:	07 c0       	rjmp	.+14     	; 0xfe4 <vfprintf+0xe8>
     fd6:	9c 36       	cpi	r25, 0x6C	; 108
     fd8:	19 f4       	brne	.+6      	; 0xfe0 <vfprintf+0xe4>
     fda:	50 e8       	ldi	r21, 0x80	; 128
     fdc:	f5 2a       	or	r15, r21
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <vfprintf+0xe8>
     fe0:	98 36       	cpi	r25, 0x68	; 104
     fe2:	49 f4       	brne	.+18     	; 0xff6 <vfprintf+0xfa>
     fe4:	f2 01       	movw	r30, r4
     fe6:	23 fd       	sbrc	r18, 3
     fe8:	95 91       	lpm	r25, Z+
     fea:	23 ff       	sbrs	r18, 3
     fec:	91 91       	ld	r25, Z+
     fee:	2f 01       	movw	r4, r30
     ff0:	99 23       	and	r25, r25
     ff2:	09 f0       	breq	.+2      	; 0xff6 <vfprintf+0xfa>
     ff4:	b8 cf       	rjmp	.-144    	; 0xf66 <vfprintf+0x6a>
     ff6:	89 2f       	mov	r24, r25
     ff8:	85 54       	subi	r24, 0x45	; 69
     ffa:	83 30       	cpi	r24, 0x03	; 3
     ffc:	18 f0       	brcs	.+6      	; 0x1004 <vfprintf+0x108>
     ffe:	80 52       	subi	r24, 0x20	; 32
    1000:	83 30       	cpi	r24, 0x03	; 3
    1002:	38 f4       	brcc	.+14     	; 0x1012 <vfprintf+0x116>
    1004:	44 e0       	ldi	r20, 0x04	; 4
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	a4 0e       	add	r10, r20
    100a:	b5 1e       	adc	r11, r21
    100c:	5f e3       	ldi	r21, 0x3F	; 63
    100e:	59 83       	std	Y+1, r21	; 0x01
    1010:	0f c0       	rjmp	.+30     	; 0x1030 <vfprintf+0x134>
    1012:	93 36       	cpi	r25, 0x63	; 99
    1014:	31 f0       	breq	.+12     	; 0x1022 <vfprintf+0x126>
    1016:	93 37       	cpi	r25, 0x73	; 115
    1018:	79 f0       	breq	.+30     	; 0x1038 <vfprintf+0x13c>
    101a:	93 35       	cpi	r25, 0x53	; 83
    101c:	09 f0       	breq	.+2      	; 0x1020 <vfprintf+0x124>
    101e:	56 c0       	rjmp	.+172    	; 0x10cc <vfprintf+0x1d0>
    1020:	20 c0       	rjmp	.+64     	; 0x1062 <vfprintf+0x166>
    1022:	f5 01       	movw	r30, r10
    1024:	80 81       	ld	r24, Z
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	42 e0       	ldi	r20, 0x02	; 2
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	a4 0e       	add	r10, r20
    102e:	b5 1e       	adc	r11, r21
    1030:	61 01       	movw	r12, r2
    1032:	01 e0       	ldi	r16, 0x01	; 1
    1034:	10 e0       	ldi	r17, 0x00	; 0
    1036:	12 c0       	rjmp	.+36     	; 0x105c <vfprintf+0x160>
    1038:	f5 01       	movw	r30, r10
    103a:	c0 80       	ld	r12, Z
    103c:	d1 80       	ldd	r13, Z+1	; 0x01
    103e:	f6 fc       	sbrc	r15, 6
    1040:	03 c0       	rjmp	.+6      	; 0x1048 <vfprintf+0x14c>
    1042:	6f ef       	ldi	r22, 0xFF	; 255
    1044:	7f ef       	ldi	r23, 0xFF	; 255
    1046:	02 c0       	rjmp	.+4      	; 0x104c <vfprintf+0x150>
    1048:	69 2d       	mov	r22, r9
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	42 e0       	ldi	r20, 0x02	; 2
    104e:	50 e0       	ldi	r21, 0x00	; 0
    1050:	a4 0e       	add	r10, r20
    1052:	b5 1e       	adc	r11, r21
    1054:	c6 01       	movw	r24, r12
    1056:	0e 94 a0 0b 	call	0x1740	; 0x1740 <strnlen>
    105a:	8c 01       	movw	r16, r24
    105c:	5f e7       	ldi	r21, 0x7F	; 127
    105e:	f5 22       	and	r15, r21
    1060:	14 c0       	rjmp	.+40     	; 0x108a <vfprintf+0x18e>
    1062:	f5 01       	movw	r30, r10
    1064:	c0 80       	ld	r12, Z
    1066:	d1 80       	ldd	r13, Z+1	; 0x01
    1068:	f6 fc       	sbrc	r15, 6
    106a:	03 c0       	rjmp	.+6      	; 0x1072 <vfprintf+0x176>
    106c:	6f ef       	ldi	r22, 0xFF	; 255
    106e:	7f ef       	ldi	r23, 0xFF	; 255
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <vfprintf+0x17a>
    1072:	69 2d       	mov	r22, r9
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	42 e0       	ldi	r20, 0x02	; 2
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	a4 0e       	add	r10, r20
    107c:	b5 1e       	adc	r11, r21
    107e:	c6 01       	movw	r24, r12
    1080:	0e 94 95 0b 	call	0x172a	; 0x172a <strnlen_P>
    1084:	8c 01       	movw	r16, r24
    1086:	50 e8       	ldi	r21, 0x80	; 128
    1088:	f5 2a       	or	r15, r21
    108a:	f3 fe       	sbrs	r15, 3
    108c:	07 c0       	rjmp	.+14     	; 0x109c <vfprintf+0x1a0>
    108e:	1a c0       	rjmp	.+52     	; 0x10c4 <vfprintf+0x1c8>
    1090:	80 e2       	ldi	r24, 0x20	; 32
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	b3 01       	movw	r22, r6
    1096:	0e 94 ab 0b 	call	0x1756	; 0x1756 <fputc>
    109a:	ea 94       	dec	r14
    109c:	8e 2d       	mov	r24, r14
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	08 17       	cp	r16, r24
    10a2:	19 07       	cpc	r17, r25
    10a4:	a8 f3       	brcs	.-22     	; 0x1090 <vfprintf+0x194>
    10a6:	0e c0       	rjmp	.+28     	; 0x10c4 <vfprintf+0x1c8>
    10a8:	f6 01       	movw	r30, r12
    10aa:	f7 fc       	sbrc	r15, 7
    10ac:	85 91       	lpm	r24, Z+
    10ae:	f7 fe       	sbrs	r15, 7
    10b0:	81 91       	ld	r24, Z+
    10b2:	6f 01       	movw	r12, r30
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	b3 01       	movw	r22, r6
    10b8:	0e 94 ab 0b 	call	0x1756	; 0x1756 <fputc>
    10bc:	e1 10       	cpse	r14, r1
    10be:	ea 94       	dec	r14
    10c0:	01 50       	subi	r16, 0x01	; 1
    10c2:	10 40       	sbci	r17, 0x00	; 0
    10c4:	01 15       	cp	r16, r1
    10c6:	11 05       	cpc	r17, r1
    10c8:	79 f7       	brne	.-34     	; 0x10a8 <vfprintf+0x1ac>
    10ca:	ea c0       	rjmp	.+468    	; 0x12a0 <vfprintf+0x3a4>
    10cc:	94 36       	cpi	r25, 0x64	; 100
    10ce:	11 f0       	breq	.+4      	; 0x10d4 <vfprintf+0x1d8>
    10d0:	99 36       	cpi	r25, 0x69	; 105
    10d2:	69 f5       	brne	.+90     	; 0x112e <vfprintf+0x232>
    10d4:	f7 fe       	sbrs	r15, 7
    10d6:	08 c0       	rjmp	.+16     	; 0x10e8 <vfprintf+0x1ec>
    10d8:	f5 01       	movw	r30, r10
    10da:	20 81       	ld	r18, Z
    10dc:	31 81       	ldd	r19, Z+1	; 0x01
    10de:	42 81       	ldd	r20, Z+2	; 0x02
    10e0:	53 81       	ldd	r21, Z+3	; 0x03
    10e2:	84 e0       	ldi	r24, 0x04	; 4
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0a c0       	rjmp	.+20     	; 0x10fc <vfprintf+0x200>
    10e8:	f5 01       	movw	r30, r10
    10ea:	80 81       	ld	r24, Z
    10ec:	91 81       	ldd	r25, Z+1	; 0x01
    10ee:	9c 01       	movw	r18, r24
    10f0:	44 27       	eor	r20, r20
    10f2:	37 fd       	sbrc	r19, 7
    10f4:	40 95       	com	r20
    10f6:	54 2f       	mov	r21, r20
    10f8:	82 e0       	ldi	r24, 0x02	; 2
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a8 0e       	add	r10, r24
    10fe:	b9 1e       	adc	r11, r25
    1100:	9f e6       	ldi	r25, 0x6F	; 111
    1102:	f9 22       	and	r15, r25
    1104:	57 ff       	sbrs	r21, 7
    1106:	09 c0       	rjmp	.+18     	; 0x111a <vfprintf+0x21e>
    1108:	50 95       	com	r21
    110a:	40 95       	com	r20
    110c:	30 95       	com	r19
    110e:	21 95       	neg	r18
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
    1112:	4f 4f       	sbci	r20, 0xFF	; 255
    1114:	5f 4f       	sbci	r21, 0xFF	; 255
    1116:	e0 e8       	ldi	r30, 0x80	; 128
    1118:	fe 2a       	or	r15, r30
    111a:	ca 01       	movw	r24, r20
    111c:	b9 01       	movw	r22, r18
    111e:	a1 01       	movw	r20, r2
    1120:	2a e0       	ldi	r18, 0x0A	; 10
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__ultoa_invert>
    1128:	d8 2e       	mov	r13, r24
    112a:	d2 18       	sub	r13, r2
    112c:	40 c0       	rjmp	.+128    	; 0x11ae <vfprintf+0x2b2>
    112e:	95 37       	cpi	r25, 0x75	; 117
    1130:	29 f4       	brne	.+10     	; 0x113c <vfprintf+0x240>
    1132:	1f 2d       	mov	r17, r15
    1134:	1f 7e       	andi	r17, 0xEF	; 239
    1136:	2a e0       	ldi	r18, 0x0A	; 10
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	1d c0       	rjmp	.+58     	; 0x1176 <vfprintf+0x27a>
    113c:	1f 2d       	mov	r17, r15
    113e:	19 7f       	andi	r17, 0xF9	; 249
    1140:	9f 36       	cpi	r25, 0x6F	; 111
    1142:	61 f0       	breq	.+24     	; 0x115c <vfprintf+0x260>
    1144:	90 37       	cpi	r25, 0x70	; 112
    1146:	20 f4       	brcc	.+8      	; 0x1150 <vfprintf+0x254>
    1148:	98 35       	cpi	r25, 0x58	; 88
    114a:	09 f0       	breq	.+2      	; 0x114e <vfprintf+0x252>
    114c:	ac c0       	rjmp	.+344    	; 0x12a6 <vfprintf+0x3aa>
    114e:	0f c0       	rjmp	.+30     	; 0x116e <vfprintf+0x272>
    1150:	90 37       	cpi	r25, 0x70	; 112
    1152:	39 f0       	breq	.+14     	; 0x1162 <vfprintf+0x266>
    1154:	98 37       	cpi	r25, 0x78	; 120
    1156:	09 f0       	breq	.+2      	; 0x115a <vfprintf+0x25e>
    1158:	a6 c0       	rjmp	.+332    	; 0x12a6 <vfprintf+0x3aa>
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <vfprintf+0x268>
    115c:	28 e0       	ldi	r18, 0x08	; 8
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	0a c0       	rjmp	.+20     	; 0x1176 <vfprintf+0x27a>
    1162:	10 61       	ori	r17, 0x10	; 16
    1164:	14 fd       	sbrc	r17, 4
    1166:	14 60       	ori	r17, 0x04	; 4
    1168:	20 e1       	ldi	r18, 0x10	; 16
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <vfprintf+0x27a>
    116e:	14 fd       	sbrc	r17, 4
    1170:	16 60       	ori	r17, 0x06	; 6
    1172:	20 e1       	ldi	r18, 0x10	; 16
    1174:	32 e0       	ldi	r19, 0x02	; 2
    1176:	17 ff       	sbrs	r17, 7
    1178:	08 c0       	rjmp	.+16     	; 0x118a <vfprintf+0x28e>
    117a:	f5 01       	movw	r30, r10
    117c:	60 81       	ld	r22, Z
    117e:	71 81       	ldd	r23, Z+1	; 0x01
    1180:	82 81       	ldd	r24, Z+2	; 0x02
    1182:	93 81       	ldd	r25, Z+3	; 0x03
    1184:	44 e0       	ldi	r20, 0x04	; 4
    1186:	50 e0       	ldi	r21, 0x00	; 0
    1188:	08 c0       	rjmp	.+16     	; 0x119a <vfprintf+0x29e>
    118a:	f5 01       	movw	r30, r10
    118c:	80 81       	ld	r24, Z
    118e:	91 81       	ldd	r25, Z+1	; 0x01
    1190:	bc 01       	movw	r22, r24
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	42 e0       	ldi	r20, 0x02	; 2
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	a4 0e       	add	r10, r20
    119c:	b5 1e       	adc	r11, r21
    119e:	a1 01       	movw	r20, r2
    11a0:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__ultoa_invert>
    11a4:	d8 2e       	mov	r13, r24
    11a6:	d2 18       	sub	r13, r2
    11a8:	8f e7       	ldi	r24, 0x7F	; 127
    11aa:	f8 2e       	mov	r15, r24
    11ac:	f1 22       	and	r15, r17
    11ae:	f6 fe       	sbrs	r15, 6
    11b0:	0b c0       	rjmp	.+22     	; 0x11c8 <vfprintf+0x2cc>
    11b2:	5e ef       	ldi	r21, 0xFE	; 254
    11b4:	f5 22       	and	r15, r21
    11b6:	d9 14       	cp	r13, r9
    11b8:	38 f4       	brcc	.+14     	; 0x11c8 <vfprintf+0x2cc>
    11ba:	f4 fe       	sbrs	r15, 4
    11bc:	07 c0       	rjmp	.+14     	; 0x11cc <vfprintf+0x2d0>
    11be:	f2 fc       	sbrc	r15, 2
    11c0:	05 c0       	rjmp	.+10     	; 0x11cc <vfprintf+0x2d0>
    11c2:	8f ee       	ldi	r24, 0xEF	; 239
    11c4:	f8 22       	and	r15, r24
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <vfprintf+0x2d0>
    11c8:	1d 2d       	mov	r17, r13
    11ca:	01 c0       	rjmp	.+2      	; 0x11ce <vfprintf+0x2d2>
    11cc:	19 2d       	mov	r17, r9
    11ce:	f4 fe       	sbrs	r15, 4
    11d0:	0d c0       	rjmp	.+26     	; 0x11ec <vfprintf+0x2f0>
    11d2:	fe 01       	movw	r30, r28
    11d4:	ed 0d       	add	r30, r13
    11d6:	f1 1d       	adc	r31, r1
    11d8:	80 81       	ld	r24, Z
    11da:	80 33       	cpi	r24, 0x30	; 48
    11dc:	19 f4       	brne	.+6      	; 0x11e4 <vfprintf+0x2e8>
    11de:	99 ee       	ldi	r25, 0xE9	; 233
    11e0:	f9 22       	and	r15, r25
    11e2:	08 c0       	rjmp	.+16     	; 0x11f4 <vfprintf+0x2f8>
    11e4:	1f 5f       	subi	r17, 0xFF	; 255
    11e6:	f2 fe       	sbrs	r15, 2
    11e8:	05 c0       	rjmp	.+10     	; 0x11f4 <vfprintf+0x2f8>
    11ea:	03 c0       	rjmp	.+6      	; 0x11f2 <vfprintf+0x2f6>
    11ec:	8f 2d       	mov	r24, r15
    11ee:	86 78       	andi	r24, 0x86	; 134
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <vfprintf+0x2f8>
    11f2:	1f 5f       	subi	r17, 0xFF	; 255
    11f4:	0f 2d       	mov	r16, r15
    11f6:	f3 fc       	sbrc	r15, 3
    11f8:	14 c0       	rjmp	.+40     	; 0x1222 <vfprintf+0x326>
    11fa:	f0 fe       	sbrs	r15, 0
    11fc:	0f c0       	rjmp	.+30     	; 0x121c <vfprintf+0x320>
    11fe:	1e 15       	cp	r17, r14
    1200:	10 f0       	brcs	.+4      	; 0x1206 <vfprintf+0x30a>
    1202:	9d 2c       	mov	r9, r13
    1204:	0b c0       	rjmp	.+22     	; 0x121c <vfprintf+0x320>
    1206:	9d 2c       	mov	r9, r13
    1208:	9e 0c       	add	r9, r14
    120a:	91 1a       	sub	r9, r17
    120c:	1e 2d       	mov	r17, r14
    120e:	06 c0       	rjmp	.+12     	; 0x121c <vfprintf+0x320>
    1210:	80 e2       	ldi	r24, 0x20	; 32
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	b3 01       	movw	r22, r6
    1216:	0e 94 ab 0b 	call	0x1756	; 0x1756 <fputc>
    121a:	1f 5f       	subi	r17, 0xFF	; 255
    121c:	1e 15       	cp	r17, r14
    121e:	c0 f3       	brcs	.-16     	; 0x1210 <vfprintf+0x314>
    1220:	04 c0       	rjmp	.+8      	; 0x122a <vfprintf+0x32e>
    1222:	1e 15       	cp	r17, r14
    1224:	10 f4       	brcc	.+4      	; 0x122a <vfprintf+0x32e>
    1226:	e1 1a       	sub	r14, r17
    1228:	01 c0       	rjmp	.+2      	; 0x122c <vfprintf+0x330>
    122a:	ee 24       	eor	r14, r14
    122c:	04 ff       	sbrs	r16, 4
    122e:	0f c0       	rjmp	.+30     	; 0x124e <vfprintf+0x352>
    1230:	80 e3       	ldi	r24, 0x30	; 48
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	b3 01       	movw	r22, r6
    1236:	0e 94 ab 0b 	call	0x1756	; 0x1756 <fputc>
    123a:	02 ff       	sbrs	r16, 2
    123c:	1d c0       	rjmp	.+58     	; 0x1278 <vfprintf+0x37c>
    123e:	01 fd       	sbrc	r16, 1
    1240:	03 c0       	rjmp	.+6      	; 0x1248 <vfprintf+0x34c>
    1242:	88 e7       	ldi	r24, 0x78	; 120
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	0e c0       	rjmp	.+28     	; 0x1264 <vfprintf+0x368>
    1248:	88 e5       	ldi	r24, 0x58	; 88
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0b c0       	rjmp	.+22     	; 0x1264 <vfprintf+0x368>
    124e:	80 2f       	mov	r24, r16
    1250:	86 78       	andi	r24, 0x86	; 134
    1252:	91 f0       	breq	.+36     	; 0x1278 <vfprintf+0x37c>
    1254:	01 ff       	sbrs	r16, 1
    1256:	02 c0       	rjmp	.+4      	; 0x125c <vfprintf+0x360>
    1258:	8b e2       	ldi	r24, 0x2B	; 43
    125a:	01 c0       	rjmp	.+2      	; 0x125e <vfprintf+0x362>
    125c:	80 e2       	ldi	r24, 0x20	; 32
    125e:	f7 fc       	sbrc	r15, 7
    1260:	8d e2       	ldi	r24, 0x2D	; 45
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	b3 01       	movw	r22, r6
    1266:	0e 94 ab 0b 	call	0x1756	; 0x1756 <fputc>
    126a:	06 c0       	rjmp	.+12     	; 0x1278 <vfprintf+0x37c>
    126c:	80 e3       	ldi	r24, 0x30	; 48
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	b3 01       	movw	r22, r6
    1272:	0e 94 ab 0b 	call	0x1756	; 0x1756 <fputc>
    1276:	9a 94       	dec	r9
    1278:	d9 14       	cp	r13, r9
    127a:	c0 f3       	brcs	.-16     	; 0x126c <vfprintf+0x370>
    127c:	da 94       	dec	r13
    127e:	f1 01       	movw	r30, r2
    1280:	ed 0d       	add	r30, r13
    1282:	f1 1d       	adc	r31, r1
    1284:	80 81       	ld	r24, Z
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	b3 01       	movw	r22, r6
    128a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <fputc>
    128e:	dd 20       	and	r13, r13
    1290:	a9 f7       	brne	.-22     	; 0x127c <vfprintf+0x380>
    1292:	06 c0       	rjmp	.+12     	; 0x12a0 <vfprintf+0x3a4>
    1294:	80 e2       	ldi	r24, 0x20	; 32
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	b3 01       	movw	r22, r6
    129a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <fputc>
    129e:	ea 94       	dec	r14
    12a0:	ee 20       	and	r14, r14
    12a2:	c1 f7       	brne	.-16     	; 0x1294 <vfprintf+0x398>
    12a4:	43 ce       	rjmp	.-890    	; 0xf2c <vfprintf+0x30>
    12a6:	f3 01       	movw	r30, r6
    12a8:	66 81       	ldd	r22, Z+6	; 0x06
    12aa:	77 81       	ldd	r23, Z+7	; 0x07
    12ac:	cb 01       	movw	r24, r22
    12ae:	2b 96       	adiw	r28, 0x0b	; 11
    12b0:	e2 e1       	ldi	r30, 0x12	; 18
    12b2:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__epilogue_restores__>

000012b6 <dtoa_prf>:
    12b6:	a9 e0       	ldi	r26, 0x09	; 9
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e1 e6       	ldi	r30, 0x61	; 97
    12bc:	f9 e0       	ldi	r31, 0x09	; 9
    12be:	0c 94 52 0d 	jmp	0x1aa4	; 0x1aa4 <__prologue_saves__+0x8>
    12c2:	6a 01       	movw	r12, r20
    12c4:	12 2f       	mov	r17, r18
    12c6:	a0 2e       	mov	r10, r16
    12c8:	be 2c       	mov	r11, r14
    12ca:	2b e3       	ldi	r18, 0x3B	; 59
    12cc:	20 17       	cp	r18, r16
    12ce:	18 f4       	brcc	.+6      	; 0x12d6 <dtoa_prf+0x20>
    12d0:	2c e3       	ldi	r18, 0x3C	; 60
    12d2:	92 2e       	mov	r9, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <dtoa_prf+0x24>
    12d6:	90 2e       	mov	r9, r16
    12d8:	93 94       	inc	r9
    12da:	ae 01       	movw	r20, r28
    12dc:	4f 5f       	subi	r20, 0xFF	; 255
    12de:	5f 4f       	sbci	r21, 0xFF	; 255
    12e0:	27 e0       	ldi	r18, 0x07	; 7
    12e2:	09 2d       	mov	r16, r9
    12e4:	0e 94 bd 0a 	call	0x157a	; 0x157a <__ftoa_engine>
    12e8:	bc 01       	movw	r22, r24
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	e8 2e       	mov	r14, r24
    12ee:	ff 24       	eor	r15, r15
    12f0:	c7 01       	movw	r24, r14
    12f2:	89 70       	andi	r24, 0x09	; 9
    12f4:	90 70       	andi	r25, 0x00	; 0
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	11 f4       	brne	.+4      	; 0x12fe <dtoa_prf+0x48>
    12fa:	ad e2       	ldi	r26, 0x2D	; 45
    12fc:	09 c0       	rjmp	.+18     	; 0x1310 <dtoa_prf+0x5a>
    12fe:	b1 fe       	sbrs	r11, 1
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <dtoa_prf+0x50>
    1302:	ab e2       	ldi	r26, 0x2B	; 43
    1304:	05 c0       	rjmp	.+10     	; 0x1310 <dtoa_prf+0x5a>
    1306:	b0 fc       	sbrc	r11, 0
    1308:	02 c0       	rjmp	.+4      	; 0x130e <dtoa_prf+0x58>
    130a:	a0 e0       	ldi	r26, 0x00	; 0
    130c:	01 c0       	rjmp	.+2      	; 0x1310 <dtoa_prf+0x5a>
    130e:	a0 e2       	ldi	r26, 0x20	; 32
    1310:	e3 fe       	sbrs	r14, 3
    1312:	3b c0       	rjmp	.+118    	; 0x138a <dtoa_prf+0xd4>
    1314:	aa 23       	and	r26, r26
    1316:	11 f4       	brne	.+4      	; 0x131c <dtoa_prf+0x66>
    1318:	23 e0       	ldi	r18, 0x03	; 3
    131a:	01 c0       	rjmp	.+2      	; 0x131e <dtoa_prf+0x68>
    131c:	24 e0       	ldi	r18, 0x04	; 4
    131e:	21 17       	cp	r18, r17
    1320:	10 f0       	brcs	.+4      	; 0x1326 <dtoa_prf+0x70>
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	02 c0       	rjmp	.+4      	; 0x132a <dtoa_prf+0x74>
    1326:	12 1b       	sub	r17, r18
    1328:	21 2f       	mov	r18, r17
    132a:	eb 2c       	mov	r14, r11
    132c:	b4 fe       	sbrs	r11, 4
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <dtoa_prf+0x7e>
    1330:	32 2f       	mov	r19, r18
    1332:	0a c0       	rjmp	.+20     	; 0x1348 <dtoa_prf+0x92>
    1334:	f6 01       	movw	r30, r12
    1336:	32 2f       	mov	r19, r18
    1338:	80 e2       	ldi	r24, 0x20	; 32
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <dtoa_prf+0x8a>
    133c:	81 93       	st	Z+, r24
    133e:	31 50       	subi	r19, 0x01	; 1
    1340:	33 23       	and	r19, r19
    1342:	e1 f7       	brne	.-8      	; 0x133c <dtoa_prf+0x86>
    1344:	c2 0e       	add	r12, r18
    1346:	d1 1c       	adc	r13, r1
    1348:	aa 23       	and	r26, r26
    134a:	19 f0       	breq	.+6      	; 0x1352 <dtoa_prf+0x9c>
    134c:	f6 01       	movw	r30, r12
    134e:	a1 93       	st	Z+, r26
    1350:	6f 01       	movw	r12, r30
    1352:	f6 01       	movw	r30, r12
    1354:	31 96       	adiw	r30, 0x01	; 1
    1356:	e2 fe       	sbrs	r14, 2
    1358:	05 c0       	rjmp	.+10     	; 0x1364 <dtoa_prf+0xae>
    135a:	9e e4       	ldi	r25, 0x4E	; 78
    135c:	d6 01       	movw	r26, r12
    135e:	9c 93       	st	X, r25
    1360:	81 e4       	ldi	r24, 0x41	; 65
    1362:	04 c0       	rjmp	.+8      	; 0x136c <dtoa_prf+0xb6>
    1364:	9e e6       	ldi	r25, 0x6E	; 110
    1366:	d6 01       	movw	r26, r12
    1368:	9c 93       	st	X, r25
    136a:	81 e6       	ldi	r24, 0x61	; 97
    136c:	11 96       	adiw	r26, 0x01	; 1
    136e:	8c 93       	st	X, r24
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	32 96       	adiw	r30, 0x02	; 2
    1374:	df 01       	movw	r26, r30
    1376:	83 2f       	mov	r24, r19
    1378:	90 e2       	ldi	r25, 0x20	; 32
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <dtoa_prf+0xca>
    137c:	9d 93       	st	X+, r25
    137e:	81 50       	subi	r24, 0x01	; 1
    1380:	88 23       	and	r24, r24
    1382:	e1 f7       	brne	.-8      	; 0x137c <dtoa_prf+0xc6>
    1384:	e3 0f       	add	r30, r19
    1386:	f1 1d       	adc	r31, r1
    1388:	40 c0       	rjmp	.+128    	; 0x140a <dtoa_prf+0x154>
    138a:	e2 fe       	sbrs	r14, 2
    138c:	42 c0       	rjmp	.+132    	; 0x1412 <dtoa_prf+0x15c>
    138e:	aa 23       	and	r26, r26
    1390:	11 f4       	brne	.+4      	; 0x1396 <dtoa_prf+0xe0>
    1392:	23 e0       	ldi	r18, 0x03	; 3
    1394:	01 c0       	rjmp	.+2      	; 0x1398 <dtoa_prf+0xe2>
    1396:	24 e0       	ldi	r18, 0x04	; 4
    1398:	21 17       	cp	r18, r17
    139a:	10 f0       	brcs	.+4      	; 0x13a0 <dtoa_prf+0xea>
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <dtoa_prf+0xee>
    13a0:	12 1b       	sub	r17, r18
    13a2:	21 2f       	mov	r18, r17
    13a4:	eb 2c       	mov	r14, r11
    13a6:	b4 fe       	sbrs	r11, 4
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <dtoa_prf+0xf8>
    13aa:	92 2f       	mov	r25, r18
    13ac:	0a c0       	rjmp	.+20     	; 0x13c2 <dtoa_prf+0x10c>
    13ae:	f6 01       	movw	r30, r12
    13b0:	92 2f       	mov	r25, r18
    13b2:	80 e2       	ldi	r24, 0x20	; 32
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <dtoa_prf+0x104>
    13b6:	81 93       	st	Z+, r24
    13b8:	91 50       	subi	r25, 0x01	; 1
    13ba:	99 23       	and	r25, r25
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <dtoa_prf+0x100>
    13be:	c2 0e       	add	r12, r18
    13c0:	d1 1c       	adc	r13, r1
    13c2:	aa 23       	and	r26, r26
    13c4:	19 f0       	breq	.+6      	; 0x13cc <dtoa_prf+0x116>
    13c6:	f6 01       	movw	r30, r12
    13c8:	a1 93       	st	Z+, r26
    13ca:	6f 01       	movw	r12, r30
    13cc:	f6 01       	movw	r30, r12
    13ce:	31 96       	adiw	r30, 0x01	; 1
    13d0:	e2 fe       	sbrs	r14, 2
    13d2:	08 c0       	rjmp	.+16     	; 0x13e4 <dtoa_prf+0x12e>
    13d4:	89 e4       	ldi	r24, 0x49	; 73
    13d6:	d6 01       	movw	r26, r12
    13d8:	8c 93       	st	X, r24
    13da:	8e e4       	ldi	r24, 0x4E	; 78
    13dc:	11 96       	adiw	r26, 0x01	; 1
    13de:	8c 93       	st	X, r24
    13e0:	86 e4       	ldi	r24, 0x46	; 70
    13e2:	07 c0       	rjmp	.+14     	; 0x13f2 <dtoa_prf+0x13c>
    13e4:	89 e6       	ldi	r24, 0x69	; 105
    13e6:	d6 01       	movw	r26, r12
    13e8:	8c 93       	st	X, r24
    13ea:	8e e6       	ldi	r24, 0x6E	; 110
    13ec:	11 96       	adiw	r26, 0x01	; 1
    13ee:	8c 93       	st	X, r24
    13f0:	86 e6       	ldi	r24, 0x66	; 102
    13f2:	81 83       	std	Z+1, r24	; 0x01
    13f4:	32 96       	adiw	r30, 0x02	; 2
    13f6:	df 01       	movw	r26, r30
    13f8:	89 2f       	mov	r24, r25
    13fa:	20 e2       	ldi	r18, 0x20	; 32
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <dtoa_prf+0x14c>
    13fe:	2d 93       	st	X+, r18
    1400:	81 50       	subi	r24, 0x01	; 1
    1402:	88 23       	and	r24, r24
    1404:	e1 f7       	brne	.-8      	; 0x13fe <dtoa_prf+0x148>
    1406:	e9 0f       	add	r30, r25
    1408:	f1 1d       	adc	r31, r1
    140a:	10 82       	st	Z, r1
    140c:	2e ef       	ldi	r18, 0xFE	; 254
    140e:	3f ef       	ldi	r19, 0xFF	; 255
    1410:	af c0       	rjmp	.+350    	; 0x1570 <dtoa_prf+0x2ba>
    1412:	16 16       	cp	r1, r22
    1414:	17 06       	cpc	r1, r23
    1416:	1c f0       	brlt	.+6      	; 0x141e <dtoa_prf+0x168>
    1418:	41 e0       	ldi	r20, 0x01	; 1
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <dtoa_prf+0x16e>
    141e:	ab 01       	movw	r20, r22
    1420:	4f 5f       	subi	r20, 0xFF	; 255
    1422:	5f 4f       	sbci	r21, 0xFF	; 255
    1424:	aa 20       	and	r10, r10
    1426:	19 f4       	brne	.+6      	; 0x142e <dtoa_prf+0x178>
    1428:	80 e0       	ldi	r24, 0x00	; 0
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	03 c0       	rjmp	.+6      	; 0x1434 <dtoa_prf+0x17e>
    142e:	8a 2d       	mov	r24, r10
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	aa 23       	and	r26, r26
    143a:	11 f0       	breq	.+4      	; 0x1440 <dtoa_prf+0x18a>
    143c:	21 e0       	ldi	r18, 0x01	; 1
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	24 0f       	add	r18, r20
    1442:	35 1f       	adc	r19, r21
    1444:	28 0f       	add	r18, r24
    1446:	39 1f       	adc	r19, r25
    1448:	81 2f       	mov	r24, r17
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	28 17       	cp	r18, r24
    144e:	39 07       	cpc	r19, r25
    1450:	14 f0       	brlt	.+4      	; 0x1456 <dtoa_prf+0x1a0>
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	02 c0       	rjmp	.+4      	; 0x145a <dtoa_prf+0x1a4>
    1456:	12 1b       	sub	r17, r18
    1458:	21 2f       	mov	r18, r17
    145a:	4b 2d       	mov	r20, r11
    145c:	50 e0       	ldi	r21, 0x00	; 0
    145e:	ca 01       	movw	r24, r20
    1460:	80 71       	andi	r24, 0x10	; 16
    1462:	90 70       	andi	r25, 0x00	; 0
    1464:	b4 fc       	sbrc	r11, 4
    1466:	0d c0       	rjmp	.+26     	; 0x1482 <dtoa_prf+0x1cc>
    1468:	b3 fc       	sbrc	r11, 3
    146a:	0b c0       	rjmp	.+22     	; 0x1482 <dtoa_prf+0x1cc>
    146c:	f6 01       	movw	r30, r12
    146e:	32 2f       	mov	r19, r18
    1470:	40 e2       	ldi	r20, 0x20	; 32
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <dtoa_prf+0x1c2>
    1474:	41 93       	st	Z+, r20
    1476:	31 50       	subi	r19, 0x01	; 1
    1478:	33 23       	and	r19, r19
    147a:	e1 f7       	brne	.-8      	; 0x1474 <dtoa_prf+0x1be>
    147c:	c2 0e       	add	r12, r18
    147e:	d1 1c       	adc	r13, r1
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <dtoa_prf+0x1ce>
    1482:	32 2f       	mov	r19, r18
    1484:	aa 23       	and	r26, r26
    1486:	19 f0       	breq	.+6      	; 0x148e <dtoa_prf+0x1d8>
    1488:	f6 01       	movw	r30, r12
    148a:	a1 93       	st	Z+, r26
    148c:	6f 01       	movw	r12, r30
    148e:	89 2b       	or	r24, r25
    1490:	11 f0       	breq	.+4      	; 0x1496 <dtoa_prf+0x1e0>
    1492:	13 2f       	mov	r17, r19
    1494:	0a c0       	rjmp	.+20     	; 0x14aa <dtoa_prf+0x1f4>
    1496:	f6 01       	movw	r30, r12
    1498:	13 2f       	mov	r17, r19
    149a:	80 e3       	ldi	r24, 0x30	; 48
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <dtoa_prf+0x1ec>
    149e:	81 93       	st	Z+, r24
    14a0:	11 50       	subi	r17, 0x01	; 1
    14a2:	11 23       	and	r17, r17
    14a4:	e1 f7       	brne	.-8      	; 0x149e <dtoa_prf+0x1e8>
    14a6:	c3 0e       	add	r12, r19
    14a8:	d1 1c       	adc	r13, r1
    14aa:	09 2d       	mov	r16, r9
    14ac:	06 0f       	add	r16, r22
    14ae:	ba 80       	ldd	r11, Y+2	; 0x02
    14b0:	90 e1       	ldi	r25, 0x10	; 16
    14b2:	89 2e       	mov	r8, r25
    14b4:	91 2c       	mov	r9, r1
    14b6:	8e 20       	and	r8, r14
    14b8:	9f 20       	and	r9, r15
    14ba:	e4 fe       	sbrs	r14, 4
    14bc:	04 c0       	rjmp	.+8      	; 0x14c6 <dtoa_prf+0x210>
    14be:	f1 e3       	ldi	r31, 0x31	; 49
    14c0:	bf 16       	cp	r11, r31
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <dtoa_prf+0x210>
    14c4:	01 50       	subi	r16, 0x01	; 1
    14c6:	10 16       	cp	r1, r16
    14c8:	14 f0       	brlt	.+4      	; 0x14ce <dtoa_prf+0x218>
    14ca:	01 e0       	ldi	r16, 0x01	; 1
    14cc:	03 c0       	rjmp	.+6      	; 0x14d4 <dtoa_prf+0x21e>
    14ce:	09 30       	cpi	r16, 0x09	; 9
    14d0:	08 f0       	brcs	.+2      	; 0x14d4 <dtoa_prf+0x21e>
    14d2:	08 e0       	ldi	r16, 0x08	; 8
    14d4:	9b 01       	movw	r18, r22
    14d6:	77 ff       	sbrs	r23, 7
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <dtoa_prf+0x228>
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	cb 01       	movw	r24, r22
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	82 1b       	sub	r24, r18
    14e4:	93 0b       	sbc	r25, r19
    14e6:	fe 01       	movw	r30, r28
    14e8:	31 96       	adiw	r30, 0x01	; 1
    14ea:	e8 0f       	add	r30, r24
    14ec:	f9 1f       	adc	r31, r25
    14ee:	8e e2       	ldi	r24, 0x2E	; 46
    14f0:	f8 2e       	mov	r15, r24
    14f2:	3b 01       	movw	r6, r22
    14f4:	60 1a       	sub	r6, r16
    14f6:	71 08       	sbc	r7, r1
    14f8:	8a 2d       	mov	r24, r10
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	44 27       	eor	r20, r20
    14fe:	55 27       	eor	r21, r21
    1500:	48 1b       	sub	r20, r24
    1502:	59 0b       	sbc	r21, r25
    1504:	8f ef       	ldi	r24, 0xFF	; 255
    1506:	2f 3f       	cpi	r18, 0xFF	; 255
    1508:	38 07       	cpc	r19, r24
    150a:	19 f4       	brne	.+6      	; 0x1512 <dtoa_prf+0x25c>
    150c:	d6 01       	movw	r26, r12
    150e:	fd 92       	st	X+, r15
    1510:	6d 01       	movw	r12, r26
    1512:	62 17       	cp	r22, r18
    1514:	73 07       	cpc	r23, r19
    1516:	2c f0       	brlt	.+10     	; 0x1522 <dtoa_prf+0x26c>
    1518:	62 16       	cp	r6, r18
    151a:	73 06       	cpc	r7, r19
    151c:	14 f4       	brge	.+4      	; 0x1522 <dtoa_prf+0x26c>
    151e:	80 81       	ld	r24, Z
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <dtoa_prf+0x26e>
    1522:	80 e3       	ldi	r24, 0x30	; 48
    1524:	21 50       	subi	r18, 0x01	; 1
    1526:	30 40       	sbci	r19, 0x00	; 0
    1528:	31 96       	adiw	r30, 0x01	; 1
    152a:	24 17       	cp	r18, r20
    152c:	35 07       	cpc	r19, r21
    152e:	24 f0       	brlt	.+8      	; 0x1538 <dtoa_prf+0x282>
    1530:	d6 01       	movw	r26, r12
    1532:	8d 93       	st	X+, r24
    1534:	6d 01       	movw	r12, r26
    1536:	e6 cf       	rjmp	.-52     	; 0x1504 <dtoa_prf+0x24e>
    1538:	26 17       	cp	r18, r22
    153a:	37 07       	cpc	r19, r23
    153c:	49 f4       	brne	.+18     	; 0x1550 <dtoa_prf+0x29a>
    153e:	b5 e3       	ldi	r27, 0x35	; 53
    1540:	bb 15       	cp	r27, r11
    1542:	28 f0       	brcs	.+10     	; 0x154e <dtoa_prf+0x298>
    1544:	bb 16       	cp	r11, r27
    1546:	21 f4       	brne	.+8      	; 0x1550 <dtoa_prf+0x29a>
    1548:	81 14       	cp	r8, r1
    154a:	91 04       	cpc	r9, r1
    154c:	09 f4       	brne	.+2      	; 0x1550 <dtoa_prf+0x29a>
    154e:	81 e3       	ldi	r24, 0x31	; 49
    1550:	f6 01       	movw	r30, r12
    1552:	81 93       	st	Z+, r24
    1554:	d6 01       	movw	r26, r12
    1556:	81 2f       	mov	r24, r17
    1558:	90 e2       	ldi	r25, 0x20	; 32
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <dtoa_prf+0x2aa>
    155c:	9c 93       	st	X, r25
    155e:	81 50       	subi	r24, 0x01	; 1
    1560:	11 96       	adiw	r26, 0x01	; 1
    1562:	88 23       	and	r24, r24
    1564:	d9 f7       	brne	.-10     	; 0x155c <dtoa_prf+0x2a6>
    1566:	e1 0f       	add	r30, r17
    1568:	f1 1d       	adc	r31, r1
    156a:	10 82       	st	Z, r1
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	c9 01       	movw	r24, r18
    1572:	29 96       	adiw	r28, 0x09	; 9
    1574:	ee e0       	ldi	r30, 0x0E	; 14
    1576:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <__epilogue_restores__+0x8>

0000157a <__ftoa_engine>:
    157a:	28 30       	cpi	r18, 0x08	; 8
    157c:	08 f0       	brcs	.+2      	; 0x1580 <__ftoa_engine+0x6>
    157e:	27 e0       	ldi	r18, 0x07	; 7
    1580:	33 27       	eor	r19, r19
    1582:	da 01       	movw	r26, r20
    1584:	99 0f       	add	r25, r25
    1586:	31 1d       	adc	r19, r1
    1588:	87 fd       	sbrc	r24, 7
    158a:	91 60       	ori	r25, 0x01	; 1
    158c:	00 96       	adiw	r24, 0x00	; 0
    158e:	61 05       	cpc	r22, r1
    1590:	71 05       	cpc	r23, r1
    1592:	39 f4       	brne	.+14     	; 0x15a2 <__ftoa_engine+0x28>
    1594:	32 60       	ori	r19, 0x02	; 2
    1596:	2e 5f       	subi	r18, 0xFE	; 254
    1598:	3d 93       	st	X+, r19
    159a:	30 e3       	ldi	r19, 0x30	; 48
    159c:	2a 95       	dec	r18
    159e:	e1 f7       	brne	.-8      	; 0x1598 <__ftoa_engine+0x1e>
    15a0:	08 95       	ret
    15a2:	9f 3f       	cpi	r25, 0xFF	; 255
    15a4:	30 f0       	brcs	.+12     	; 0x15b2 <__ftoa_engine+0x38>
    15a6:	80 38       	cpi	r24, 0x80	; 128
    15a8:	71 05       	cpc	r23, r1
    15aa:	61 05       	cpc	r22, r1
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <__ftoa_engine+0x36>
    15ae:	3c 5f       	subi	r19, 0xFC	; 252
    15b0:	3c 5f       	subi	r19, 0xFC	; 252
    15b2:	3d 93       	st	X+, r19
    15b4:	91 30       	cpi	r25, 0x01	; 1
    15b6:	08 f0       	brcs	.+2      	; 0x15ba <__ftoa_engine+0x40>
    15b8:	80 68       	ori	r24, 0x80	; 128
    15ba:	91 1d       	adc	r25, r1
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	1f 93       	push	r17
    15c2:	0f 93       	push	r16
    15c4:	ff 92       	push	r15
    15c6:	ef 92       	push	r14
    15c8:	19 2f       	mov	r17, r25
    15ca:	98 7f       	andi	r25, 0xF8	; 248
    15cc:	96 95       	lsr	r25
    15ce:	e9 2f       	mov	r30, r25
    15d0:	96 95       	lsr	r25
    15d2:	96 95       	lsr	r25
    15d4:	e9 0f       	add	r30, r25
    15d6:	ff 27       	eor	r31, r31
    15d8:	e0 5d       	subi	r30, 0xD0	; 208
    15da:	fe 4f       	sbci	r31, 0xFE	; 254
    15dc:	99 27       	eor	r25, r25
    15de:	33 27       	eor	r19, r19
    15e0:	ee 24       	eor	r14, r14
    15e2:	ff 24       	eor	r15, r15
    15e4:	a7 01       	movw	r20, r14
    15e6:	e7 01       	movw	r28, r14
    15e8:	05 90       	lpm	r0, Z+
    15ea:	08 94       	sec
    15ec:	07 94       	ror	r0
    15ee:	28 f4       	brcc	.+10     	; 0x15fa <__ftoa_engine+0x80>
    15f0:	36 0f       	add	r19, r22
    15f2:	e7 1e       	adc	r14, r23
    15f4:	f8 1e       	adc	r15, r24
    15f6:	49 1f       	adc	r20, r25
    15f8:	51 1d       	adc	r21, r1
    15fa:	66 0f       	add	r22, r22
    15fc:	77 1f       	adc	r23, r23
    15fe:	88 1f       	adc	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	06 94       	lsr	r0
    1604:	a1 f7       	brne	.-24     	; 0x15ee <__ftoa_engine+0x74>
    1606:	05 90       	lpm	r0, Z+
    1608:	07 94       	ror	r0
    160a:	28 f4       	brcc	.+10     	; 0x1616 <__ftoa_engine+0x9c>
    160c:	e7 0e       	add	r14, r23
    160e:	f8 1e       	adc	r15, r24
    1610:	49 1f       	adc	r20, r25
    1612:	56 1f       	adc	r21, r22
    1614:	c1 1d       	adc	r28, r1
    1616:	77 0f       	add	r23, r23
    1618:	88 1f       	adc	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	66 1f       	adc	r22, r22
    161e:	06 94       	lsr	r0
    1620:	a1 f7       	brne	.-24     	; 0x160a <__ftoa_engine+0x90>
    1622:	05 90       	lpm	r0, Z+
    1624:	07 94       	ror	r0
    1626:	28 f4       	brcc	.+10     	; 0x1632 <__ftoa_engine+0xb8>
    1628:	f8 0e       	add	r15, r24
    162a:	49 1f       	adc	r20, r25
    162c:	56 1f       	adc	r21, r22
    162e:	c7 1f       	adc	r28, r23
    1630:	d1 1d       	adc	r29, r1
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	66 1f       	adc	r22, r22
    1638:	77 1f       	adc	r23, r23
    163a:	06 94       	lsr	r0
    163c:	a1 f7       	brne	.-24     	; 0x1626 <__ftoa_engine+0xac>
    163e:	05 90       	lpm	r0, Z+
    1640:	07 94       	ror	r0
    1642:	20 f4       	brcc	.+8      	; 0x164c <__ftoa_engine+0xd2>
    1644:	49 0f       	add	r20, r25
    1646:	56 1f       	adc	r21, r22
    1648:	c7 1f       	adc	r28, r23
    164a:	d8 1f       	adc	r29, r24
    164c:	99 0f       	add	r25, r25
    164e:	66 1f       	adc	r22, r22
    1650:	77 1f       	adc	r23, r23
    1652:	88 1f       	adc	r24, r24
    1654:	06 94       	lsr	r0
    1656:	a9 f7       	brne	.-22     	; 0x1642 <__ftoa_engine+0xc8>
    1658:	84 91       	lpm	r24, Z+
    165a:	10 95       	com	r17
    165c:	17 70       	andi	r17, 0x07	; 7
    165e:	41 f0       	breq	.+16     	; 0x1670 <__ftoa_engine+0xf6>
    1660:	d6 95       	lsr	r29
    1662:	c7 95       	ror	r28
    1664:	57 95       	ror	r21
    1666:	47 95       	ror	r20
    1668:	f7 94       	ror	r15
    166a:	e7 94       	ror	r14
    166c:	1a 95       	dec	r17
    166e:	c1 f7       	brne	.-16     	; 0x1660 <__ftoa_engine+0xe6>
    1670:	e6 ed       	ldi	r30, 0xD6	; 214
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	68 94       	set
    1676:	15 90       	lpm	r1, Z+
    1678:	15 91       	lpm	r17, Z+
    167a:	35 91       	lpm	r19, Z+
    167c:	65 91       	lpm	r22, Z+
    167e:	95 91       	lpm	r25, Z+
    1680:	05 90       	lpm	r0, Z+
    1682:	7f e2       	ldi	r23, 0x2F	; 47
    1684:	73 95       	inc	r23
    1686:	e1 18       	sub	r14, r1
    1688:	f1 0a       	sbc	r15, r17
    168a:	43 0b       	sbc	r20, r19
    168c:	56 0b       	sbc	r21, r22
    168e:	c9 0b       	sbc	r28, r25
    1690:	d0 09       	sbc	r29, r0
    1692:	c0 f7       	brcc	.-16     	; 0x1684 <__ftoa_engine+0x10a>
    1694:	e1 0c       	add	r14, r1
    1696:	f1 1e       	adc	r15, r17
    1698:	43 1f       	adc	r20, r19
    169a:	56 1f       	adc	r21, r22
    169c:	c9 1f       	adc	r28, r25
    169e:	d0 1d       	adc	r29, r0
    16a0:	7e f4       	brtc	.+30     	; 0x16c0 <__ftoa_engine+0x146>
    16a2:	70 33       	cpi	r23, 0x30	; 48
    16a4:	11 f4       	brne	.+4      	; 0x16aa <__ftoa_engine+0x130>
    16a6:	8a 95       	dec	r24
    16a8:	e6 cf       	rjmp	.-52     	; 0x1676 <__ftoa_engine+0xfc>
    16aa:	e8 94       	clt
    16ac:	01 50       	subi	r16, 0x01	; 1
    16ae:	30 f0       	brcs	.+12     	; 0x16bc <__ftoa_engine+0x142>
    16b0:	08 0f       	add	r16, r24
    16b2:	0a f4       	brpl	.+2      	; 0x16b6 <__ftoa_engine+0x13c>
    16b4:	00 27       	eor	r16, r16
    16b6:	02 17       	cp	r16, r18
    16b8:	08 f4       	brcc	.+2      	; 0x16bc <__ftoa_engine+0x142>
    16ba:	20 2f       	mov	r18, r16
    16bc:	23 95       	inc	r18
    16be:	02 2f       	mov	r16, r18
    16c0:	7a 33       	cpi	r23, 0x3A	; 58
    16c2:	28 f0       	brcs	.+10     	; 0x16ce <__ftoa_engine+0x154>
    16c4:	79 e3       	ldi	r23, 0x39	; 57
    16c6:	7d 93       	st	X+, r23
    16c8:	2a 95       	dec	r18
    16ca:	e9 f7       	brne	.-6      	; 0x16c6 <__ftoa_engine+0x14c>
    16cc:	10 c0       	rjmp	.+32     	; 0x16ee <__ftoa_engine+0x174>
    16ce:	7d 93       	st	X+, r23
    16d0:	2a 95       	dec	r18
    16d2:	89 f6       	brne	.-94     	; 0x1676 <__ftoa_engine+0xfc>
    16d4:	06 94       	lsr	r0
    16d6:	97 95       	ror	r25
    16d8:	67 95       	ror	r22
    16da:	37 95       	ror	r19
    16dc:	17 95       	ror	r17
    16de:	17 94       	ror	r1
    16e0:	e1 18       	sub	r14, r1
    16e2:	f1 0a       	sbc	r15, r17
    16e4:	43 0b       	sbc	r20, r19
    16e6:	56 0b       	sbc	r21, r22
    16e8:	c9 0b       	sbc	r28, r25
    16ea:	d0 09       	sbc	r29, r0
    16ec:	98 f0       	brcs	.+38     	; 0x1714 <__ftoa_engine+0x19a>
    16ee:	23 95       	inc	r18
    16f0:	7e 91       	ld	r23, -X
    16f2:	73 95       	inc	r23
    16f4:	7a 33       	cpi	r23, 0x3A	; 58
    16f6:	08 f0       	brcs	.+2      	; 0x16fa <__ftoa_engine+0x180>
    16f8:	70 e3       	ldi	r23, 0x30	; 48
    16fa:	7c 93       	st	X, r23
    16fc:	20 13       	cpse	r18, r16
    16fe:	b8 f7       	brcc	.-18     	; 0x16ee <__ftoa_engine+0x174>
    1700:	7e 91       	ld	r23, -X
    1702:	70 61       	ori	r23, 0x10	; 16
    1704:	7d 93       	st	X+, r23
    1706:	30 f0       	brcs	.+12     	; 0x1714 <__ftoa_engine+0x19a>
    1708:	83 95       	inc	r24
    170a:	71 e3       	ldi	r23, 0x31	; 49
    170c:	7d 93       	st	X+, r23
    170e:	70 e3       	ldi	r23, 0x30	; 48
    1710:	2a 95       	dec	r18
    1712:	e1 f7       	brne	.-8      	; 0x170c <__ftoa_engine+0x192>
    1714:	11 24       	eor	r1, r1
    1716:	ef 90       	pop	r14
    1718:	ff 90       	pop	r15
    171a:	0f 91       	pop	r16
    171c:	1f 91       	pop	r17
    171e:	cf 91       	pop	r28
    1720:	df 91       	pop	r29
    1722:	99 27       	eor	r25, r25
    1724:	87 fd       	sbrc	r24, 7
    1726:	90 95       	com	r25
    1728:	08 95       	ret

0000172a <strnlen_P>:
    172a:	fc 01       	movw	r30, r24
    172c:	05 90       	lpm	r0, Z+
    172e:	61 50       	subi	r22, 0x01	; 1
    1730:	70 40       	sbci	r23, 0x00	; 0
    1732:	01 10       	cpse	r0, r1
    1734:	d8 f7       	brcc	.-10     	; 0x172c <strnlen_P+0x2>
    1736:	80 95       	com	r24
    1738:	90 95       	com	r25
    173a:	8e 0f       	add	r24, r30
    173c:	9f 1f       	adc	r25, r31
    173e:	08 95       	ret

00001740 <strnlen>:
    1740:	fc 01       	movw	r30, r24
    1742:	61 50       	subi	r22, 0x01	; 1
    1744:	70 40       	sbci	r23, 0x00	; 0
    1746:	01 90       	ld	r0, Z+
    1748:	01 10       	cpse	r0, r1
    174a:	d8 f7       	brcc	.-10     	; 0x1742 <strnlen+0x2>
    174c:	80 95       	com	r24
    174e:	90 95       	com	r25
    1750:	8e 0f       	add	r24, r30
    1752:	9f 1f       	adc	r25, r31
    1754:	08 95       	ret

00001756 <fputc>:
    1756:	0f 93       	push	r16
    1758:	1f 93       	push	r17
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	8c 01       	movw	r16, r24
    1760:	eb 01       	movw	r28, r22
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	81 ff       	sbrs	r24, 1
    1766:	1b c0       	rjmp	.+54     	; 0x179e <fputc+0x48>
    1768:	82 ff       	sbrs	r24, 2
    176a:	0d c0       	rjmp	.+26     	; 0x1786 <fputc+0x30>
    176c:	2e 81       	ldd	r18, Y+6	; 0x06
    176e:	3f 81       	ldd	r19, Y+7	; 0x07
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	28 17       	cp	r18, r24
    1776:	39 07       	cpc	r19, r25
    1778:	64 f4       	brge	.+24     	; 0x1792 <fputc+0x3c>
    177a:	e8 81       	ld	r30, Y
    177c:	f9 81       	ldd	r31, Y+1	; 0x01
    177e:	01 93       	st	Z+, r16
    1780:	f9 83       	std	Y+1, r31	; 0x01
    1782:	e8 83       	st	Y, r30
    1784:	06 c0       	rjmp	.+12     	; 0x1792 <fputc+0x3c>
    1786:	e8 85       	ldd	r30, Y+8	; 0x08
    1788:	f9 85       	ldd	r31, Y+9	; 0x09
    178a:	80 2f       	mov	r24, r16
    178c:	09 95       	icall
    178e:	89 2b       	or	r24, r25
    1790:	31 f4       	brne	.+12     	; 0x179e <fputc+0x48>
    1792:	8e 81       	ldd	r24, Y+6	; 0x06
    1794:	9f 81       	ldd	r25, Y+7	; 0x07
    1796:	01 96       	adiw	r24, 0x01	; 1
    1798:	9f 83       	std	Y+7, r25	; 0x07
    179a:	8e 83       	std	Y+6, r24	; 0x06
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <fputc+0x4c>
    179e:	0f ef       	ldi	r16, 0xFF	; 255
    17a0:	1f ef       	ldi	r17, 0xFF	; 255
    17a2:	c8 01       	movw	r24, r16
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	08 95       	ret

000017ae <__ultoa_invert>:
    17ae:	fa 01       	movw	r30, r20
    17b0:	aa 27       	eor	r26, r26
    17b2:	28 30       	cpi	r18, 0x08	; 8
    17b4:	51 f1       	breq	.+84     	; 0x180a <__ultoa_invert+0x5c>
    17b6:	20 31       	cpi	r18, 0x10	; 16
    17b8:	81 f1       	breq	.+96     	; 0x181a <__ultoa_invert+0x6c>
    17ba:	e8 94       	clt
    17bc:	6f 93       	push	r22
    17be:	6e 7f       	andi	r22, 0xFE	; 254
    17c0:	6e 5f       	subi	r22, 0xFE	; 254
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	8f 4f       	sbci	r24, 0xFF	; 255
    17c6:	9f 4f       	sbci	r25, 0xFF	; 255
    17c8:	af 4f       	sbci	r26, 0xFF	; 255
    17ca:	b1 e0       	ldi	r27, 0x01	; 1
    17cc:	3e d0       	rcall	.+124    	; 0x184a <__ultoa_invert+0x9c>
    17ce:	b4 e0       	ldi	r27, 0x04	; 4
    17d0:	3c d0       	rcall	.+120    	; 0x184a <__ultoa_invert+0x9c>
    17d2:	67 0f       	add	r22, r23
    17d4:	78 1f       	adc	r23, r24
    17d6:	89 1f       	adc	r24, r25
    17d8:	9a 1f       	adc	r25, r26
    17da:	a1 1d       	adc	r26, r1
    17dc:	68 0f       	add	r22, r24
    17de:	79 1f       	adc	r23, r25
    17e0:	8a 1f       	adc	r24, r26
    17e2:	91 1d       	adc	r25, r1
    17e4:	a1 1d       	adc	r26, r1
    17e6:	6a 0f       	add	r22, r26
    17e8:	71 1d       	adc	r23, r1
    17ea:	81 1d       	adc	r24, r1
    17ec:	91 1d       	adc	r25, r1
    17ee:	a1 1d       	adc	r26, r1
    17f0:	20 d0       	rcall	.+64     	; 0x1832 <__ultoa_invert+0x84>
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <__ultoa_invert+0x48>
    17f4:	68 94       	set
    17f6:	3f 91       	pop	r19
    17f8:	2a e0       	ldi	r18, 0x0A	; 10
    17fa:	26 9f       	mul	r18, r22
    17fc:	11 24       	eor	r1, r1
    17fe:	30 19       	sub	r19, r0
    1800:	30 5d       	subi	r19, 0xD0	; 208
    1802:	31 93       	st	Z+, r19
    1804:	de f6       	brtc	.-74     	; 0x17bc <__ultoa_invert+0xe>
    1806:	cf 01       	movw	r24, r30
    1808:	08 95       	ret
    180a:	46 2f       	mov	r20, r22
    180c:	47 70       	andi	r20, 0x07	; 7
    180e:	40 5d       	subi	r20, 0xD0	; 208
    1810:	41 93       	st	Z+, r20
    1812:	b3 e0       	ldi	r27, 0x03	; 3
    1814:	0f d0       	rcall	.+30     	; 0x1834 <__ultoa_invert+0x86>
    1816:	c9 f7       	brne	.-14     	; 0x180a <__ultoa_invert+0x5c>
    1818:	f6 cf       	rjmp	.-20     	; 0x1806 <__ultoa_invert+0x58>
    181a:	46 2f       	mov	r20, r22
    181c:	4f 70       	andi	r20, 0x0F	; 15
    181e:	40 5d       	subi	r20, 0xD0	; 208
    1820:	4a 33       	cpi	r20, 0x3A	; 58
    1822:	18 f0       	brcs	.+6      	; 0x182a <__ultoa_invert+0x7c>
    1824:	49 5d       	subi	r20, 0xD9	; 217
    1826:	31 fd       	sbrc	r19, 1
    1828:	40 52       	subi	r20, 0x20	; 32
    182a:	41 93       	st	Z+, r20
    182c:	02 d0       	rcall	.+4      	; 0x1832 <__ultoa_invert+0x84>
    182e:	a9 f7       	brne	.-22     	; 0x181a <__ultoa_invert+0x6c>
    1830:	ea cf       	rjmp	.-44     	; 0x1806 <__ultoa_invert+0x58>
    1832:	b4 e0       	ldi	r27, 0x04	; 4
    1834:	a6 95       	lsr	r26
    1836:	97 95       	ror	r25
    1838:	87 95       	ror	r24
    183a:	77 95       	ror	r23
    183c:	67 95       	ror	r22
    183e:	ba 95       	dec	r27
    1840:	c9 f7       	brne	.-14     	; 0x1834 <__ultoa_invert+0x86>
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	61 05       	cpc	r22, r1
    1846:	71 05       	cpc	r23, r1
    1848:	08 95       	ret
    184a:	9b 01       	movw	r18, r22
    184c:	ac 01       	movw	r20, r24
    184e:	0a 2e       	mov	r0, r26
    1850:	06 94       	lsr	r0
    1852:	57 95       	ror	r21
    1854:	47 95       	ror	r20
    1856:	37 95       	ror	r19
    1858:	27 95       	ror	r18
    185a:	ba 95       	dec	r27
    185c:	c9 f7       	brne	.-14     	; 0x1850 <__ultoa_invert+0xa2>
    185e:	62 0f       	add	r22, r18
    1860:	73 1f       	adc	r23, r19
    1862:	84 1f       	adc	r24, r20
    1864:	95 1f       	adc	r25, r21
    1866:	a0 1d       	adc	r26, r0
    1868:	08 95       	ret
    186a:	19 f4       	brne	.+6      	; 0x1872 <__ultoa_invert+0xc4>
    186c:	0e f0       	brts	.+2      	; 0x1870 <__ultoa_invert+0xc2>
    186e:	46 ca       	rjmp	.-2932   	; 0xcfc <__fp_inf>
    1870:	8f ca       	rjmp	.-2786   	; 0xd90 <__fp_zero>
    1872:	4a ca       	rjmp	.-2924   	; 0xd08 <__fp_nan>

00001874 <exp>:
    1874:	73 da       	rcall	.-2842   	; 0xd5c <__fp_splitA>
    1876:	c8 f3       	brcs	.-14     	; 0x186a <__ultoa_invert+0xbc>
    1878:	96 38       	cpi	r25, 0x86	; 134
    187a:	c0 f7       	brcc	.-16     	; 0x186c <__ultoa_invert+0xbe>
    187c:	07 f8       	bld	r0, 7
    187e:	0f 92       	push	r0
    1880:	e8 94       	clt
    1882:	2b e3       	ldi	r18, 0x3B	; 59
    1884:	3a ea       	ldi	r19, 0xAA	; 170
    1886:	48 eb       	ldi	r20, 0xB8	; 184
    1888:	5f e7       	ldi	r21, 0x7F	; 127
    188a:	97 da       	rcall	.-2770   	; 0xdba <__mulsf3_pse>
    188c:	0f 92       	push	r0
    188e:	0f 92       	push	r0
    1890:	0f 92       	push	r0
    1892:	4d b7       	in	r20, 0x3d	; 61
    1894:	5e b7       	in	r21, 0x3e	; 62
    1896:	0f 92       	push	r0
    1898:	c0 d0       	rcall	.+384    	; 0x1a1a <modf>
    189a:	e4 e5       	ldi	r30, 0x54	; 84
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	16 d0       	rcall	.+44     	; 0x18cc <__fp_powser>
    18a0:	4f 91       	pop	r20
    18a2:	5f 91       	pop	r21
    18a4:	ef 91       	pop	r30
    18a6:	ff 91       	pop	r31
    18a8:	e5 95       	asr	r30
    18aa:	ee 1f       	adc	r30, r30
    18ac:	ff 1f       	adc	r31, r31
    18ae:	49 f0       	breq	.+18     	; 0x18c2 <exp+0x4e>
    18b0:	fe 57       	subi	r31, 0x7E	; 126
    18b2:	e0 68       	ori	r30, 0x80	; 128
    18b4:	44 27       	eor	r20, r20
    18b6:	ee 0f       	add	r30, r30
    18b8:	44 1f       	adc	r20, r20
    18ba:	fa 95       	dec	r31
    18bc:	e1 f7       	brne	.-8      	; 0x18b6 <exp+0x42>
    18be:	41 95       	neg	r20
    18c0:	55 0b       	sbc	r21, r21
    18c2:	32 d0       	rcall	.+100    	; 0x1928 <ldexp>
    18c4:	0f 90       	pop	r0
    18c6:	07 fe       	sbrs	r0, 7
    18c8:	26 c0       	rjmp	.+76     	; 0x1916 <inverse>
    18ca:	08 95       	ret

000018cc <__fp_powser>:
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	1f 93       	push	r17
    18d2:	0f 93       	push	r16
    18d4:	ff 92       	push	r15
    18d6:	ef 92       	push	r14
    18d8:	df 92       	push	r13
    18da:	7b 01       	movw	r14, r22
    18dc:	8c 01       	movw	r16, r24
    18de:	68 94       	set
    18e0:	05 c0       	rjmp	.+10     	; 0x18ec <__fp_powser+0x20>
    18e2:	da 2e       	mov	r13, r26
    18e4:	ef 01       	movw	r28, r30
    18e6:	67 da       	rcall	.-2866   	; 0xdb6 <__mulsf3x>
    18e8:	fe 01       	movw	r30, r28
    18ea:	e8 94       	clt
    18ec:	a5 91       	lpm	r26, Z+
    18ee:	25 91       	lpm	r18, Z+
    18f0:	35 91       	lpm	r19, Z+
    18f2:	45 91       	lpm	r20, Z+
    18f4:	55 91       	lpm	r21, Z+
    18f6:	ae f3       	brts	.-22     	; 0x18e2 <__fp_powser+0x16>
    18f8:	ef 01       	movw	r28, r30
    18fa:	dc d8       	rcall	.-3656   	; 0xab4 <__addsf3x>
    18fc:	fe 01       	movw	r30, r28
    18fe:	97 01       	movw	r18, r14
    1900:	a8 01       	movw	r20, r16
    1902:	da 94       	dec	r13
    1904:	79 f7       	brne	.-34     	; 0x18e4 <__fp_powser+0x18>
    1906:	df 90       	pop	r13
    1908:	ef 90       	pop	r14
    190a:	ff 90       	pop	r15
    190c:	0f 91       	pop	r16
    190e:	1f 91       	pop	r17
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <inverse>:
    1916:	9b 01       	movw	r18, r22
    1918:	ac 01       	movw	r20, r24
    191a:	60 e0       	ldi	r22, 0x00	; 0
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	80 e8       	ldi	r24, 0x80	; 128
    1920:	9f e3       	ldi	r25, 0x3F	; 63
    1922:	1b c9       	rjmp	.-3530   	; 0xb5a <__divsf3>
    1924:	eb c9       	rjmp	.-3114   	; 0xcfc <__fp_inf>
    1926:	ac c0       	rjmp	.+344    	; 0x1a80 <__fp_mpack>

00001928 <ldexp>:
    1928:	19 da       	rcall	.-3022   	; 0xd5c <__fp_splitA>
    192a:	e8 f3       	brcs	.-6      	; 0x1926 <inverse+0x10>
    192c:	99 23       	and	r25, r25
    192e:	d9 f3       	breq	.-10     	; 0x1926 <inverse+0x10>
    1930:	94 0f       	add	r25, r20
    1932:	51 1d       	adc	r21, r1
    1934:	bb f3       	brvs	.-18     	; 0x1924 <inverse+0xe>
    1936:	91 50       	subi	r25, 0x01	; 1
    1938:	50 40       	sbci	r21, 0x00	; 0
    193a:	94 f0       	brlt	.+36     	; 0x1960 <ldexp+0x38>
    193c:	59 f0       	breq	.+22     	; 0x1954 <ldexp+0x2c>
    193e:	88 23       	and	r24, r24
    1940:	32 f0       	brmi	.+12     	; 0x194e <ldexp+0x26>
    1942:	66 0f       	add	r22, r22
    1944:	77 1f       	adc	r23, r23
    1946:	88 1f       	adc	r24, r24
    1948:	91 50       	subi	r25, 0x01	; 1
    194a:	50 40       	sbci	r21, 0x00	; 0
    194c:	c1 f7       	brne	.-16     	; 0x193e <ldexp+0x16>
    194e:	9e 3f       	cpi	r25, 0xFE	; 254
    1950:	51 05       	cpc	r21, r1
    1952:	44 f7       	brge	.-48     	; 0x1924 <inverse+0xe>
    1954:	88 0f       	add	r24, r24
    1956:	91 1d       	adc	r25, r1
    1958:	96 95       	lsr	r25
    195a:	87 95       	ror	r24
    195c:	97 f9       	bld	r25, 7
    195e:	08 95       	ret
    1960:	5f 3f       	cpi	r21, 0xFF	; 255
    1962:	ac f0       	brlt	.+42     	; 0x198e <ldexp+0x66>
    1964:	98 3e       	cpi	r25, 0xE8	; 232
    1966:	9c f0       	brlt	.+38     	; 0x198e <ldexp+0x66>
    1968:	bb 27       	eor	r27, r27
    196a:	86 95       	lsr	r24
    196c:	77 95       	ror	r23
    196e:	67 95       	ror	r22
    1970:	b7 95       	ror	r27
    1972:	08 f4       	brcc	.+2      	; 0x1976 <ldexp+0x4e>
    1974:	b1 60       	ori	r27, 0x01	; 1
    1976:	93 95       	inc	r25
    1978:	c1 f7       	brne	.-16     	; 0x196a <ldexp+0x42>
    197a:	bb 0f       	add	r27, r27
    197c:	58 f7       	brcc	.-42     	; 0x1954 <ldexp+0x2c>
    197e:	11 f4       	brne	.+4      	; 0x1984 <ldexp+0x5c>
    1980:	60 ff       	sbrs	r22, 0
    1982:	e8 cf       	rjmp	.-48     	; 0x1954 <ldexp+0x2c>
    1984:	6f 5f       	subi	r22, 0xFF	; 255
    1986:	7f 4f       	sbci	r23, 0xFF	; 255
    1988:	8f 4f       	sbci	r24, 0xFF	; 255
    198a:	9f 4f       	sbci	r25, 0xFF	; 255
    198c:	e3 cf       	rjmp	.-58     	; 0x1954 <ldexp+0x2c>
    198e:	01 ca       	rjmp	.-3070   	; 0xd92 <__fp_szero>
    1990:	0e f0       	brts	.+2      	; 0x1994 <ldexp+0x6c>
    1992:	76 c0       	rjmp	.+236    	; 0x1a80 <__fp_mpack>
    1994:	b9 c9       	rjmp	.-3214   	; 0xd08 <__fp_nan>
    1996:	68 94       	set
    1998:	b1 c9       	rjmp	.-3230   	; 0xcfc <__fp_inf>

0000199a <log>:
    199a:	e0 d9       	rcall	.-3136   	; 0xd5c <__fp_splitA>
    199c:	c8 f3       	brcs	.-14     	; 0x1990 <ldexp+0x68>
    199e:	99 23       	and	r25, r25
    19a0:	d1 f3       	breq	.-12     	; 0x1996 <ldexp+0x6e>
    19a2:	c6 f3       	brts	.-16     	; 0x1994 <ldexp+0x6c>
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	1f 93       	push	r17
    19aa:	0f 93       	push	r16
    19ac:	ff 92       	push	r15
    19ae:	c9 2f       	mov	r28, r25
    19b0:	dd 27       	eor	r29, r29
    19b2:	88 23       	and	r24, r24
    19b4:	2a f0       	brmi	.+10     	; 0x19c0 <log+0x26>
    19b6:	21 97       	sbiw	r28, 0x01	; 1
    19b8:	66 0f       	add	r22, r22
    19ba:	77 1f       	adc	r23, r23
    19bc:	88 1f       	adc	r24, r24
    19be:	da f7       	brpl	.-10     	; 0x19b6 <log+0x1c>
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	40 e8       	ldi	r20, 0x80	; 128
    19c6:	5f eb       	ldi	r21, 0xBF	; 191
    19c8:	9f e3       	ldi	r25, 0x3F	; 63
    19ca:	88 39       	cpi	r24, 0x98	; 152
    19cc:	20 f0       	brcs	.+8      	; 0x19d6 <log+0x3c>
    19ce:	80 3e       	cpi	r24, 0xE0	; 224
    19d0:	30 f0       	brcs	.+12     	; 0x19de <log+0x44>
    19d2:	21 96       	adiw	r28, 0x01	; 1
    19d4:	8f 77       	andi	r24, 0x7F	; 127
    19d6:	5d d8       	rcall	.-3910   	; 0xa92 <__addsf3>
    19d8:	ec e7       	ldi	r30, 0x7C	; 124
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	03 c0       	rjmp	.+6      	; 0x19e4 <log+0x4a>
    19de:	59 d8       	rcall	.-3918   	; 0xa92 <__addsf3>
    19e0:	e9 ea       	ldi	r30, 0xA9	; 169
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	73 df       	rcall	.-282    	; 0x18cc <__fp_powser>
    19e6:	8b 01       	movw	r16, r22
    19e8:	be 01       	movw	r22, r28
    19ea:	ec 01       	movw	r28, r24
    19ec:	fb 2e       	mov	r15, r27
    19ee:	6f 57       	subi	r22, 0x7F	; 127
    19f0:	71 09       	sbc	r23, r1
    19f2:	75 95       	asr	r23
    19f4:	77 1f       	adc	r23, r23
    19f6:	88 0b       	sbc	r24, r24
    19f8:	99 0b       	sbc	r25, r25
    19fa:	45 d9       	rcall	.-3446   	; 0xc86 <__floatsisf>
    19fc:	28 e1       	ldi	r18, 0x18	; 24
    19fe:	32 e7       	ldi	r19, 0x72	; 114
    1a00:	41 e3       	ldi	r20, 0x31	; 49
    1a02:	5f e3       	ldi	r21, 0x3F	; 63
    1a04:	d8 d9       	rcall	.-3152   	; 0xdb6 <__mulsf3x>
    1a06:	af 2d       	mov	r26, r15
    1a08:	98 01       	movw	r18, r16
    1a0a:	ae 01       	movw	r20, r28
    1a0c:	ff 90       	pop	r15
    1a0e:	0f 91       	pop	r16
    1a10:	1f 91       	pop	r17
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	4e d8       	rcall	.-3940   	; 0xab4 <__addsf3x>
    1a18:	88 c9       	rjmp	.-3312   	; 0xd2a <__fp_round>

00001a1a <modf>:
    1a1a:	fa 01       	movw	r30, r20
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	aa 0f       	add	r26, r26
    1a20:	bb 1f       	adc	r27, r27
    1a22:	9b 01       	movw	r18, r22
    1a24:	ac 01       	movw	r20, r24
    1a26:	bf 57       	subi	r27, 0x7F	; 127
    1a28:	28 f4       	brcc	.+10     	; 0x1a34 <modf+0x1a>
    1a2a:	22 27       	eor	r18, r18
    1a2c:	33 27       	eor	r19, r19
    1a2e:	44 27       	eor	r20, r20
    1a30:	50 78       	andi	r21, 0x80	; 128
    1a32:	1f c0       	rjmp	.+62     	; 0x1a72 <modf+0x58>
    1a34:	b7 51       	subi	r27, 0x17	; 23
    1a36:	88 f4       	brcc	.+34     	; 0x1a5a <modf+0x40>
    1a38:	ab 2f       	mov	r26, r27
    1a3a:	00 24       	eor	r0, r0
    1a3c:	46 95       	lsr	r20
    1a3e:	37 95       	ror	r19
    1a40:	27 95       	ror	r18
    1a42:	01 1c       	adc	r0, r1
    1a44:	a3 95       	inc	r26
    1a46:	d2 f3       	brmi	.-12     	; 0x1a3c <modf+0x22>
    1a48:	00 20       	and	r0, r0
    1a4a:	69 f0       	breq	.+26     	; 0x1a66 <modf+0x4c>
    1a4c:	22 0f       	add	r18, r18
    1a4e:	33 1f       	adc	r19, r19
    1a50:	44 1f       	adc	r20, r20
    1a52:	b3 95       	inc	r27
    1a54:	da f3       	brmi	.-10     	; 0x1a4c <modf+0x32>
    1a56:	0d d0       	rcall	.+26     	; 0x1a72 <modf+0x58>
    1a58:	1b c8       	rjmp	.-4042   	; 0xa90 <__subsf3>
    1a5a:	61 30       	cpi	r22, 0x01	; 1
    1a5c:	71 05       	cpc	r23, r1
    1a5e:	a0 e8       	ldi	r26, 0x80	; 128
    1a60:	8a 07       	cpc	r24, r26
    1a62:	b9 46       	sbci	r27, 0x69	; 105
    1a64:	30 f4       	brcc	.+12     	; 0x1a72 <modf+0x58>
    1a66:	9b 01       	movw	r18, r22
    1a68:	ac 01       	movw	r20, r24
    1a6a:	66 27       	eor	r22, r22
    1a6c:	77 27       	eor	r23, r23
    1a6e:	88 27       	eor	r24, r24
    1a70:	90 78       	andi	r25, 0x80	; 128
    1a72:	30 96       	adiw	r30, 0x00	; 0
    1a74:	21 f0       	breq	.+8      	; 0x1a7e <modf+0x64>
    1a76:	20 83       	st	Z, r18
    1a78:	31 83       	std	Z+1, r19	; 0x01
    1a7a:	42 83       	std	Z+2, r20	; 0x02
    1a7c:	53 83       	std	Z+3, r21	; 0x03
    1a7e:	08 95       	ret

00001a80 <__fp_mpack>:
    1a80:	9f 3f       	cpi	r25, 0xFF	; 255
    1a82:	31 f0       	breq	.+12     	; 0x1a90 <__fp_mpack_finite+0xc>

00001a84 <__fp_mpack_finite>:
    1a84:	91 50       	subi	r25, 0x01	; 1
    1a86:	20 f4       	brcc	.+8      	; 0x1a90 <__fp_mpack_finite+0xc>
    1a88:	87 95       	ror	r24
    1a8a:	77 95       	ror	r23
    1a8c:	67 95       	ror	r22
    1a8e:	b7 95       	ror	r27
    1a90:	88 0f       	add	r24, r24
    1a92:	91 1d       	adc	r25, r1
    1a94:	96 95       	lsr	r25
    1a96:	87 95       	ror	r24
    1a98:	97 f9       	bld	r25, 7
    1a9a:	08 95       	ret

00001a9c <__prologue_saves__>:
    1a9c:	2f 92       	push	r2
    1a9e:	3f 92       	push	r3
    1aa0:	4f 92       	push	r4
    1aa2:	5f 92       	push	r5
    1aa4:	6f 92       	push	r6
    1aa6:	7f 92       	push	r7
    1aa8:	8f 92       	push	r8
    1aaa:	9f 92       	push	r9
    1aac:	af 92       	push	r10
    1aae:	bf 92       	push	r11
    1ab0:	cf 92       	push	r12
    1ab2:	df 92       	push	r13
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	ca 1b       	sub	r28, r26
    1ac6:	db 0b       	sbc	r29, r27
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	09 94       	ijmp

00001ad4 <__epilogue_restores__>:
    1ad4:	2a 88       	ldd	r2, Y+18	; 0x12
    1ad6:	39 88       	ldd	r3, Y+17	; 0x11
    1ad8:	48 88       	ldd	r4, Y+16	; 0x10
    1ada:	5f 84       	ldd	r5, Y+15	; 0x0f
    1adc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ade:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ae0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ae2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ae4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ae6:	b9 84       	ldd	r11, Y+9	; 0x09
    1ae8:	c8 84       	ldd	r12, Y+8	; 0x08
    1aea:	df 80       	ldd	r13, Y+7	; 0x07
    1aec:	ee 80       	ldd	r14, Y+6	; 0x06
    1aee:	fd 80       	ldd	r15, Y+5	; 0x05
    1af0:	0c 81       	ldd	r16, Y+4	; 0x04
    1af2:	1b 81       	ldd	r17, Y+3	; 0x03
    1af4:	aa 81       	ldd	r26, Y+2	; 0x02
    1af6:	b9 81       	ldd	r27, Y+1	; 0x01
    1af8:	ce 0f       	add	r28, r30
    1afa:	d1 1d       	adc	r29, r1
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
    1b06:	ed 01       	movw	r28, r26
    1b08:	08 95       	ret

00001b0a <_exit>:
    1b0a:	f8 94       	cli

00001b0c <__stop_program>:
    1b0c:	ff cf       	rjmp	.-2      	; 0x1b0c <__stop_program>
