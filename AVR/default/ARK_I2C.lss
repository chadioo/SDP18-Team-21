
ARK_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ba8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006e  00800060  00001ba8  00001c3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008000ce  008000ce  00001caa  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000246  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077d  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d5  00000000  00000000  0000268d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000096b  00000000  00000000  00002962  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  000032d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e6  00000000  00000000  000034a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000202  00000000  00000000  00003786  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00003988  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__ctors_end>
       4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      10:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      14:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      18:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      1c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      24:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__vector_9>
      28:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      34:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      3c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      40:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      44:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      4c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      50:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	7a 10       	cpse	r7, r10
      da:	f3 5a       	subi	r31, 0xA3	; 163
      dc:	00 a0       	ldd	r0, Z+32	; 0x20
      de:	72 4e       	sbci	r23, 0xE2	; 226
      e0:	18 09       	sbc	r17, r8
      e2:	00 10       	cpse	r0, r0
      e4:	a5 d4       	rcall	.+2378   	; 0xa30 <__stack+0x1d1>
      e6:	e8 00       	.word	0x00e8	; ????
      e8:	00 e8       	ldi	r16, 0x80	; 128
      ea:	76 48       	sbci	r23, 0x86	; 134
      ec:	17 00       	.word	0x0017	; ????
      ee:	00 e4       	ldi	r16, 0x40	; 64
      f0:	0b 54       	subi	r16, 0x4B	; 75
      f2:	02 00       	.word	0x0002	; ????
      f4:	00 ca       	rjmp	.-3072   	; 0xfffff4f6 <__eeprom_end+0xff7ef4f6>
      f6:	9a 3b       	cpi	r25, 0xBA	; 186
      f8:	00 00       	nop
      fa:	00 e1       	ldi	r16, 0x10	; 16
      fc:	f5 05       	cpc	r31, r5
      fe:	00 00       	nop
     100:	80 96       	adiw	r24, 0x20	; 32
     102:	98 00       	.word	0x0098	; ????
     104:	00 00       	nop
     106:	40 42       	sbci	r20, 0x20	; 32
     108:	0f 00       	.word	0x000f	; ????
     10a:	00 00       	nop
     10c:	a0 86       	std	Z+8, r10	; 0x08
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	10 27       	eor	r17, r16
     114:	00 00       	nop
     116:	00 00       	nop
     118:	e8 03       	fmulsu	r22, r16
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	64 00       	.word	0x0064	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	0a 00       	.word	0x000a	; ????
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	01 00       	.word	0x0001	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	2c 76       	andi	r18, 0x6C	; 108
     132:	d8 88       	ldd	r13, Y+16	; 0x10
     134:	dc 67       	ori	r29, 0x7C	; 124
     136:	4f 08       	sbc	r4, r15
     138:	23 df       	rcall	.-442    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     13a:	c1 df       	rcall	.-126    	; 0xbe <__SREG__+0x7f>
     13c:	ae 59       	subi	r26, 0x9E	; 158
     13e:	e1 b1       	in	r30, 0x01	; 1
     140:	b7 96       	adiw	r30, 0x27	; 39
     142:	e5 e3       	ldi	r30, 0x35	; 53
     144:	e4 53       	subi	r30, 0x34	; 52
     146:	c6 3a       	cpi	r28, 0xA6	; 166
     148:	e6 51       	subi	r30, 0x16	; 22
     14a:	99 76       	andi	r25, 0x69	; 105
     14c:	96 e8       	ldi	r25, 0x86	; 134
     14e:	e6 c2       	rjmp	.+1484   	; 0x71c <main+0x4e>
     150:	84 26       	eor	r8, r20
     152:	eb 89       	ldd	r30, Y+19	; 0x13
     154:	8c 9b       	sbis	0x11, 4	; 17
     156:	62 ed       	ldi	r22, 0xD2	; 210
     158:	40 7c       	andi	r20, 0xC0	; 192
     15a:	6f fc       	.word	0xfc6f	; ????
     15c:	ef bc       	out	0x2f, r14	; 47
     15e:	9c 9f       	mul	r25, r28
     160:	40 f2       	brcs	.-112    	; 0xf2 <__SREG__+0xb3>
     162:	ba a5       	ldd	r27, Y+42	; 0x2a
     164:	6f a5       	ldd	r22, Y+47	; 0x2f
     166:	f4 90       	lpm	r15, Z+
     168:	05 5a       	subi	r16, 0xA5	; 165
     16a:	2a f7       	brpl	.-54     	; 0x136 <__SREG__+0xf7>
     16c:	5c 93       	st	X, r21
     16e:	6b 6c       	ori	r22, 0xCB	; 203
     170:	f9 67       	ori	r31, 0x79	; 121
     172:	6d c1       	rjmp	.+730    	; 0x44e <Read_RawValue+0x18>
     174:	1b fc       	.word	0xfc1b	; ????
     176:	e0 e4       	ldi	r30, 0x40	; 64
     178:	0d 47       	sbci	r16, 0x7D	; 125
     17a:	fe f5       	brtc	.+126    	; 0x1fa <.do_clear_bss_loop>
     17c:	20 e6       	ldi	r18, 0x60	; 96
     17e:	b5 00       	.word	0x00b5	; ????
     180:	d0 ed       	ldi	r29, 0xD0	; 208
     182:	90 2e       	mov	r9, r16
     184:	03 00       	.word	0x0003	; ????
     186:	94 35       	cpi	r25, 0x54	; 84
     188:	77 05       	cpc	r23, r7
     18a:	00 80       	ld	r0, Z
     18c:	84 1e       	adc	r8, r20
     18e:	08 00       	.word	0x0008	; ????
     190:	00 20       	and	r0, r0
     192:	4e 0a       	sbc	r4, r30
     194:	00 00       	nop
     196:	00 c8       	rjmp	.-4096   	; 0xfffff198 <__eeprom_end+0xff7ef198>
     198:	0c 33       	cpi	r16, 0x3C	; 60
     19a:	33 33       	cpi	r19, 0x33	; 51
     19c:	33 0f       	add	r19, r19
     19e:	98 6e       	ori	r25, 0xE8	; 232
     1a0:	12 83       	std	Z+2, r17	; 0x02
     1a2:	11 41       	sbci	r17, 0x11	; 17
     1a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1a6:	21 14       	cp	r2, r1
     1a8:	89 3b       	cpi	r24, 0xB9	; 185
     1aa:	e6 55       	subi	r30, 0x56	; 86
     1ac:	16 cf       	rjmp	.-468    	; 0xffffffda <__eeprom_end+0xff7effda>
     1ae:	fe e6       	ldi	r31, 0x6E	; 110
     1b0:	db 18       	sub	r13, r11
     1b2:	d1 84       	ldd	r13, Z+9	; 0x09
     1b4:	4b 38       	cpi	r20, 0x8B	; 139
     1b6:	1b f7       	brvc	.-58     	; 0x17e <__SREG__+0x13f>
     1b8:	7c 1d       	adc	r23, r12
     1ba:	90 1d       	adc	r25, r0
     1bc:	a4 bb       	out	0x14, r26	; 20
     1be:	e4 24       	eor	r14, r4
     1c0:	20 32       	cpi	r18, 0x20	; 32
     1c2:	84 72       	andi	r24, 0x24	; 36
     1c4:	5e 22       	and	r5, r30
     1c6:	81 00       	.word	0x0081	; ????
     1c8:	c9 f1       	breq	.+114    	; 0x23c <read_adc+0x2e>
     1ca:	24 ec       	ldi	r18, 0xC4	; 196
     1cc:	a1 e5       	ldi	r26, 0x51	; 81
     1ce:	3d 27       	eor	r19, r29

000001d0 <__ctors_end>:
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf e5       	ldi	r28, 0x5F	; 95
     1d6:	d8 e0       	ldi	r29, 0x08	; 8
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
     1dc:	10 e0       	ldi	r17, 0x00	; 0
     1de:	a0 e6       	ldi	r26, 0x60	; 96
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	e8 ea       	ldi	r30, 0xA8	; 168
     1e4:	fb e1       	ldi	r31, 0x1B	; 27
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <.do_copy_data_start>

000001e8 <.do_copy_data_loop>:
     1e8:	05 90       	lpm	r0, Z+
     1ea:	0d 92       	st	X+, r0

000001ec <.do_copy_data_start>:
     1ec:	ae 3c       	cpi	r26, 0xCE	; 206
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <.do_copy_data_loop>

000001f2 <__do_clear_bss>:
     1f2:	10 e0       	ldi	r17, 0x00	; 0
     1f4:	ae ec       	ldi	r26, 0xCE	; 206
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	aa 3e       	cpi	r26, 0xEA	; 234
     1fe:	b1 07       	cpc	r27, r17
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	0e 94 67 03 	call	0x6ce	; 0x6ce <main>
     206:	0c 94 6e 05 	jmp	0xadc	; 0xadc <exit>

0000020a <__bad_interrupt>:
     20a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020e <read_adc>:
////////////////////////////////////////////////////////////////////////////


unsigned int read_adc(int axis){

	if(axis==1){		// z axis is PA0
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	91 05       	cpc	r25, r1
     212:	11 f4       	brne	.+4      	; 0x218 <read_adc+0xa>
		ADMUX = 0b10100000;
     214:	80 ea       	ldi	r24, 0xA0	; 160
     216:	0b c0       	rjmp	.+22     	; 0x22e <read_adc+0x20>
	}
	else if(axis==2){	// y axis is PA1
     218:	82 30       	cpi	r24, 0x02	; 2
     21a:	91 05       	cpc	r25, r1
     21c:	11 f4       	brne	.+4      	; 0x222 <read_adc+0x14>
		ADMUX = 0b10100001;
     21e:	81 ea       	ldi	r24, 0xA1	; 161
     220:	06 c0       	rjmp	.+12     	; 0x22e <read_adc+0x20>
	}
	else if(axis==3){	// x axis is PA2
     222:	03 97       	sbiw	r24, 0x03	; 3
     224:	19 f0       	breq	.+6      	; 0x22c <read_adc+0x1e>
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	0b c0       	rjmp	.+22     	; 0x242 <read_adc+0x34>
		ADMUX = 0b10100010;
     22c:	82 ea       	ldi	r24, 0xA2	; 162
     22e:	87 b9       	out	0x07, r24	; 7
	}
	else{
		return 0;
	}
	ADMUX = (1<<REFS0);	// set mux
     230:	80 e4       	ldi	r24, 0x40	; 64
     232:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS0);	// divided by prescale of 32
     234:	85 e8       	ldi	r24, 0x85	; 133
     236:	86 b9       	out	0x06, r24	; 6
	ADCSRA|= (1<<ADSC);	// clear ADSC by writing one to it
     238:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADSC)))	// wait for conversion to complete
     23a:	36 9b       	sbis	0x06, 6	; 6
     23c:	fe cf       	rjmp	.-4      	; 0x23a <read_adc+0x2c>
		;
	return(ADC);		// retuens 10 bit unsigned number
     23e:	24 b1       	in	r18, 0x04	; 4
     240:	35 b1       	in	r19, 0x05	; 5
}
     242:	c9 01       	movw	r24, r18
     244:	08 95       	ret

00000246 <send_start_signal>:
	TWCR = TWI Control Register
	TWINT = TWI interrupt flag ( bit 7 on TWCR )
	TWSTA = START condition bit ( bit 5 on TWCR )
	TWEN = TWI enable bit ( bit 2 on TWCR )
	*/
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     246:	84 ea       	ldi	r24, 0xA4	; 164
     248:	86 bf       	out	0x36, r24	; 54

	/* Wait until START condition has been transmitted 
	Wait until the TWINT flag is set */
	while (!(TWCR & (1<<TWINT)))
     24a:	06 b6       	in	r0, 0x36	; 54
     24c:	07 fe       	sbrs	r0, 7
     24e:	fd cf       	rjmp	.-6      	; 0x24a <send_start_signal+0x4>
		;
}
     250:	08 95       	ret

00000252 <send_stop_signal>:

void send_stop_signal(){

	/* Transmit STOP condition */
	TWCR = (1<<TWINT)|(1<<TWEN)|
     252:	84 e9       	ldi	r24, 0x94	; 148
     254:	86 bf       	out	0x36, r24	; 54
	(1<<TWSTO);

}
     256:	08 95       	ret

00000258 <read_write_data>:
	DATA = DATA >> 1;

	/* Load DATA+RW into TWDR Register 
	This is the DATA + R/W bit 
	RW=0 is write, RW=1 is read */
	DATA = (DATA<<1) | RW;
     258:	8e 7f       	andi	r24, 0xFE	; 254
	TWDR = DATA;
     25a:	86 2b       	or	r24, r22
     25c:	97 2b       	or	r25, r23
     25e:	83 b9       	out	0x03, r24	; 3

	/* Clear TWINT bit in TWCR to start transmission of address */
	TWCR = (1<<TWINT) | (1<<TWEN);
     260:	84 e8       	ldi	r24, 0x84	; 132
     262:	86 bf       	out	0x36, r24	; 54

	/* Wait for TWINT Flag set
	This indicates that the SLA+W has been transmitted
	and ACK/NACK has been received. */
	while (!(TWCR & (1<<TWINT)))
     264:	06 b6       	in	r0, 0x36	; 54
     266:	07 fe       	sbrs	r0, 7
     268:	fd cf       	rjmp	.-6      	; 0x264 <read_write_data+0xc>
		;
	return (char) TWDR;
     26a:	83 b1       	in	r24, 0x03	; 3
}
     26c:	08 95       	ret

0000026e <print_trace>:

void print_trace(){

	/* Develop method to print stack trace or throw some other error */

}
     26e:	08 95       	ret

00000270 <check_status_register>:
	/* Check value of TWI status register, mask prescaler bits
	If status is different from REGISTER, go to print_trace 
	TWSR =  TWI Status Register
	TWI Status is set on bits 7:3 of TWSR, = 0x78
	*/
	if ((TWSR & 0xF8) != REGISTER)
     270:	81 b1       	in	r24, 0x01	; 1
		print_trace(); // define how you want to handle this error somewhere

}
     272:	08 95       	ret

00000274 <read_ack>:

char read_ack(){											/* I2C read ack function */

	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     274:	84 ec       	ldi	r24, 0xC4	; 196
     276:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     278:	06 b6       	in	r0, 0x36	; 54
     27a:	07 fe       	sbrs	r0, 7
     27c:	fd cf       	rjmp	.-6      	; 0x278 <read_ack+0x4>
	return TWDR;											/* Return received data */
     27e:	83 b1       	in	r24, 0x03	; 3
}	
     280:	08 95       	ret

00000282 <read_nack>:

char read_nack(){											/* I2C read nack function */

	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     282:	84 e8       	ldi	r24, 0x84	; 132
     284:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     286:	06 b6       	in	r0, 0x36	; 54
     288:	07 fe       	sbrs	r0, 7
     28a:	fd cf       	rjmp	.-6      	; 0x286 <read_nack+0x4>
	return TWDR;											/* Return received data */
     28c:	83 b1       	in	r24, 0x03	; 3
}	
     28e:	08 95       	ret

00000290 <I2C_Start>:

////////////////////////////////////////////////////////////

uint8_t I2C_Start(char slave_write_address)						/* I2C start function */
{
     290:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     292:	84 ea       	ldi	r24, 0xA4	; 164
     294:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     296:	06 b6       	in	r0, 0x36	; 54
     298:	07 fe       	sbrs	r0, 7
     29a:	fd cf       	rjmp	.-6      	; 0x296 <I2C_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     29c:	81 b1       	in	r24, 0x01	; 1
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
     29e:	88 7f       	andi	r24, 0xF8	; 248
     2a0:	88 30       	cpi	r24, 0x08	; 8
     2a2:	11 f0       	breq	.+4      	; 0x2a8 <I2C_Start+0x18>
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	08 95       	ret
	return 0;												/* If not then return 0 to indicate start condition fail */
	TWDR = slave_write_address<<1;								/* If yes then write SLA+W in TWI data register */
     2a8:	99 0f       	add	r25, r25
     2aa:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     2ac:	84 e8       	ldi	r24, 0x84	; 132
     2ae:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     2b0:	06 b6       	in	r0, 0x36	; 54
     2b2:	07 fe       	sbrs	r0, 7
     2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <I2C_Start+0x20>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
     2b6:	81 b1       	in	r24, 0x01	; 1
     2b8:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
     2ba:	88 31       	cpi	r24, 0x18	; 24
     2bc:	11 f4       	brne	.+4      	; 0x2c2 <I2C_Start+0x32>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
     2c2:	80 32       	cpi	r24, 0x20	; 32
     2c4:	11 f0       	breq	.+4      	; 0x2ca <I2C_Start+0x3a>
     2c6:	83 e0       	ldi	r24, 0x03	; 3
     2c8:	08 95       	ret
     2ca:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     2cc:	08 95       	ret

000002ce <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
     2ce:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     2d0:	84 ea       	ldi	r24, 0xA4	; 164
     2d2:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     2d4:	06 b6       	in	r0, 0x36	; 54
     2d6:	07 fe       	sbrs	r0, 7
     2d8:	fd cf       	rjmp	.-6      	; 0x2d4 <I2C_Repeated_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     2da:	81 b1       	in	r24, 0x01	; 1
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     2dc:	88 7f       	andi	r24, 0xF8	; 248
     2de:	80 31       	cpi	r24, 0x10	; 16
     2e0:	11 f0       	breq	.+4      	; 0x2e6 <I2C_Repeated_Start+0x18>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	08 95       	ret
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     2e6:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     2e8:	84 e8       	ldi	r24, 0x84	; 132
     2ea:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     2ec:	06 b6       	in	r0, 0x36	; 54
     2ee:	07 fe       	sbrs	r0, 7
     2f0:	fd cf       	rjmp	.-6      	; 0x2ec <I2C_Repeated_Start+0x1e>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     2f2:	81 b1       	in	r24, 0x01	; 1
     2f4:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     2f6:	80 34       	cpi	r24, 0x40	; 64
     2f8:	11 f4       	brne	.+4      	; 0x2fe <I2C_Repeated_Start+0x30>
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     2fe:	80 32       	cpi	r24, 0x20	; 32
     300:	11 f0       	breq	.+4      	; 0x306 <I2C_Repeated_Start+0x38>
     302:	83 e0       	ldi	r24, 0x03	; 3
     304:	08 95       	ret
     306:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     308:	08 95       	ret

0000030a <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     30a:	84 e9       	ldi	r24, 0x94	; 148
     30c:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     30e:	06 b6       	in	r0, 0x36	; 54
     310:	04 fc       	sbrc	r0, 4
     312:	fd cf       	rjmp	.-6      	; 0x30e <I2C_Stop+0x4>
}
     314:	08 95       	ret

00000316 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)			/* I2C start wait function */
{
     316:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     318:	44 ea       	ldi	r20, 0xA4	; 164
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     31a:	34 e8       	ldi	r19, 0x84	; 132
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     31c:	24 e9       	ldi	r18, 0x94	; 148
void I2C_Start_Wait(char slave_write_address)			/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     31e:	46 bf       	out	0x36, r20	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     320:	06 b6       	in	r0, 0x36	; 54
     322:	07 fe       	sbrs	r0, 7
     324:	fd cf       	rjmp	.-6      	; 0x320 <I2C_Start_Wait+0xa>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     326:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     328:	88 7f       	andi	r24, 0xF8	; 248
     32a:	88 30       	cpi	r24, 0x08	; 8
     32c:	c1 f7       	brne	.-16     	; 0x31e <I2C_Start_Wait+0x8>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     32e:	93 b9       	out	0x03, r25	; 3
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     330:	36 bf       	out	0x36, r19	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     332:	06 b6       	in	r0, 0x36	; 54
     334:	07 fe       	sbrs	r0, 7
     336:	fd cf       	rjmp	.-6      	; 0x332 <I2C_Start_Wait+0x1c>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     338:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     33a:	88 7f       	andi	r24, 0xF8	; 248
     33c:	88 31       	cpi	r24, 0x18	; 24
     33e:	29 f0       	breq	.+10     	; 0x34a <I2C_Start_Wait+0x34>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     340:	26 bf       	out	0x36, r18	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     342:	06 b6       	in	r0, 0x36	; 54
     344:	04 fc       	sbrc	r0, 4
     346:	fd cf       	rjmp	.-6      	; 0x342 <I2C_Start_Wait+0x2c>
     348:	ea cf       	rjmp	.-44     	; 0x31e <I2C_Start_Wait+0x8>
     34a:	08 95       	ret

0000034c <I2C_Write>:
}

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     34c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     34e:	84 e8       	ldi	r24, 0x84	; 132
     350:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     352:	06 b6       	in	r0, 0x36	; 54
     354:	07 fe       	sbrs	r0, 7
     356:	fd cf       	rjmp	.-6      	; 0x352 <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     358:	81 b1       	in	r24, 0x01	; 1
     35a:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     35c:	88 32       	cpi	r24, 0x28	; 40
     35e:	11 f4       	brne	.+4      	; 0x364 <I2C_Write+0x18>
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	08 95       	ret
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     364:	80 33       	cpi	r24, 0x30	; 48
     366:	11 f0       	breq	.+4      	; 0x36c <I2C_Write+0x20>
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	08 95       	ret
     36c:	81 e0       	ldi	r24, 0x01	; 1
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     36e:	08 95       	ret

00000370 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     370:	84 ec       	ldi	r24, 0xC4	; 196
     372:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     374:	06 b6       	in	r0, 0x36	; 54
     376:	07 fe       	sbrs	r0, 7
     378:	fd cf       	rjmp	.-6      	; 0x374 <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
     37a:	83 b1       	in	r24, 0x03	; 3
}	
     37c:	08 95       	ret

0000037e <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     37e:	84 e8       	ldi	r24, 0x84	; 132
     380:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     382:	06 b6       	in	r0, 0x36	; 54
     384:	07 fe       	sbrs	r0, 7
     386:	fd cf       	rjmp	.-6      	; 0x382 <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
     388:	83 b1       	in	r24, 0x03	; 3
}	
     38a:	08 95       	ret

0000038c <MPU6050_Init>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     38c:	8c e7       	ldi	r24, 0x7C	; 124
     38e:	92 e9       	ldi	r25, 0x92	; 146
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	f1 f7       	brne	.-4      	; 0x390 <MPU6050_Init+0x4>
////////////////////////////////////////////////////////////

void MPU6050_Init()										/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
     394:	80 ed       	ldi	r24, 0xD0	; 208
     396:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
     39a:	89 e1       	ldi	r24, 0x19	; 25
     39c:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
     3a0:	87 e0       	ldi	r24, 0x07	; 7
     3a2:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3a6:	84 e9       	ldi	r24, 0x94	; 148
     3a8:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3aa:	06 b6       	in	r0, 0x36	; 54
     3ac:	04 fc       	sbrc	r0, 4
     3ae:	fd cf       	rjmp	.-6      	; 0x3aa <MPU6050_Init+0x1e>
	I2C_Start_Wait(0xD0);								/* Start with device write address */
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
	I2C_Write(0x07);									/* 1KHz sample rate */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     3b0:	80 ed       	ldi	r24, 0xD0	; 208
     3b2:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
     3b6:	8b e6       	ldi	r24, 0x6B	; 107
     3b8:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3c2:	84 e9       	ldi	r24, 0x94	; 148
     3c4:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3c6:	06 b6       	in	r0, 0x36	; 54
     3c8:	04 fc       	sbrc	r0, 4
     3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <MPU6050_Init+0x3a>
	I2C_Start_Wait(0xD0);
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     3cc:	80 ed       	ldi	r24, 0xD0	; 208
     3ce:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
     3d2:	8a e1       	ldi	r24, 0x1A	; 26
     3d4:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3de:	84 e9       	ldi	r24, 0x94	; 148
     3e0:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3e2:	06 b6       	in	r0, 0x36	; 54
     3e4:	04 fc       	sbrc	r0, 4
     3e6:	fd cf       	rjmp	.-6      	; 0x3e2 <MPU6050_Init+0x56>
	I2C_Start_Wait(0xD0);
	I2C_Write(CONFIG);									/* Write to Configuration register */
	I2C_Write(0x00);									/* Fs = 8KHz */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     3e8:	80 ed       	ldi	r24, 0xD0	; 208
     3ea:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
     3ee:	8b e1       	ldi	r24, 0x1B	; 27
     3f0:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
     3f4:	88 e1       	ldi	r24, 0x18	; 24
     3f6:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3fa:	84 e9       	ldi	r24, 0x94	; 148
     3fc:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3fe:	06 b6       	in	r0, 0x36	; 54
     400:	04 fc       	sbrc	r0, 4
     402:	fd cf       	rjmp	.-6      	; 0x3fe <MPU6050_Init+0x72>
	I2C_Start_Wait(0xD0);
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     404:	80 ed       	ldi	r24, 0xD0	; 208
     406:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
     40a:	88 e3       	ldi	r24, 0x38	; 56
     40c:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	I2C_Write(0x01);
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     416:	84 e9       	ldi	r24, 0x94	; 148
     418:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     41a:	06 b6       	in	r0, 0x36	; 54
     41c:	04 fc       	sbrc	r0, 4
     41e:	fd cf       	rjmp	.-6      	; 0x41a <MPU6050_Init+0x8e>

	I2C_Start_Wait(0xD0);
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
	I2C_Write(0x01);
	I2C_Stop();
}
     420:	08 95       	ret

00000422 <MPU_Start_Loc>:

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
     422:	80 ed       	ldi	r24, 0xD0	; 208
     424:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */ 
     428:	8b e3       	ldi	r24, 0x3B	; 59
     42a:	0e 94 a6 01 	call	0x34c	; 0x34c <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
     42e:	81 ed       	ldi	r24, 0xD1	; 209
     430:	0e 94 67 01 	call	0x2ce	; 0x2ce <I2C_Repeated_Start>
}
     434:	08 95       	ret

00000436 <Read_RawValue>:

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
     436:	0e 94 11 02 	call	0x422	; 0x422 <MPU_Start_Loc>
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     43a:	84 ec       	ldi	r24, 0xC4	; 196
     43c:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     43e:	06 b6       	in	r0, 0x36	; 54
     440:	07 fe       	sbrs	r0, 7
     442:	fd cf       	rjmp	.-6      	; 0x43e <Read_RawValue+0x8>
	return TWDR;											/* Return received data */
     444:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     446:	84 ec       	ldi	r24, 0xC4	; 196
     448:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     44a:	06 b6       	in	r0, 0x36	; 54
     44c:	07 fe       	sbrs	r0, 7
     44e:	fd cf       	rjmp	.-6      	; 0x44a <Read_RawValue+0x14>
	return TWDR;											/* Return received data */
     450:	23 b1       	in	r18, 0x03	; 3
}

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     452:	79 2f       	mov	r23, r25
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	62 2b       	or	r22, r18
     45a:	73 2b       	or	r23, r19
     45c:	88 27       	eor	r24, r24
     45e:	77 fd       	sbrc	r23, 7
     460:	80 95       	com	r24
     462:	98 2f       	mov	r25, r24
     464:	0e 94 90 06 	call	0xd20	; 0xd20 <__floatsisf>
     468:	60 93 e2 00 	sts	0x00E2, r22
     46c:	70 93 e3 00 	sts	0x00E3, r23
     470:	80 93 e4 00 	sts	0x00E4, r24
     474:	90 93 e5 00 	sts	0x00E5, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     478:	84 ec       	ldi	r24, 0xC4	; 196
     47a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     47c:	06 b6       	in	r0, 0x36	; 54
     47e:	07 fe       	sbrs	r0, 7
     480:	fd cf       	rjmp	.-6      	; 0x47c <Read_RawValue+0x46>
	return TWDR;											/* Return received data */
     482:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     484:	84 ec       	ldi	r24, 0xC4	; 196
     486:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     488:	06 b6       	in	r0, 0x36	; 54
     48a:	07 fe       	sbrs	r0, 7
     48c:	fd cf       	rjmp	.-6      	; 0x488 <Read_RawValue+0x52>
	return TWDR;											/* Return received data */
     48e:	23 b1       	in	r18, 0x03	; 3

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     490:	79 2f       	mov	r23, r25
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	62 2b       	or	r22, r18
     498:	73 2b       	or	r23, r19
     49a:	88 27       	eor	r24, r24
     49c:	77 fd       	sbrc	r23, 7
     49e:	80 95       	com	r24
     4a0:	98 2f       	mov	r25, r24
     4a2:	0e 94 90 06 	call	0xd20	; 0xd20 <__floatsisf>
     4a6:	60 93 da 00 	sts	0x00DA, r22
     4aa:	70 93 db 00 	sts	0x00DB, r23
     4ae:	80 93 dc 00 	sts	0x00DC, r24
     4b2:	90 93 dd 00 	sts	0x00DD, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4b6:	84 ec       	ldi	r24, 0xC4	; 196
     4b8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4ba:	06 b6       	in	r0, 0x36	; 54
     4bc:	07 fe       	sbrs	r0, 7
     4be:	fd cf       	rjmp	.-6      	; 0x4ba <Read_RawValue+0x84>
	return TWDR;											/* Return received data */
     4c0:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4c2:	84 ec       	ldi	r24, 0xC4	; 196
     4c4:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4c6:	06 b6       	in	r0, 0x36	; 54
     4c8:	07 fe       	sbrs	r0, 7
     4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <Read_RawValue+0x90>
	return TWDR;											/* Return received data */
     4cc:	23 b1       	in	r18, 0x03	; 3
void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     4ce:	79 2f       	mov	r23, r25
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	62 2b       	or	r22, r18
     4d6:	73 2b       	or	r23, r19
     4d8:	88 27       	eor	r24, r24
     4da:	77 fd       	sbrc	r23, 7
     4dc:	80 95       	com	r24
     4de:	98 2f       	mov	r25, r24
     4e0:	0e 94 90 06 	call	0xd20	; 0xd20 <__floatsisf>
     4e4:	60 93 ce 00 	sts	0x00CE, r22
     4e8:	70 93 cf 00 	sts	0x00CF, r23
     4ec:	80 93 d0 00 	sts	0x00D0, r24
     4f0:	90 93 d1 00 	sts	0x00D1, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4f4:	84 ec       	ldi	r24, 0xC4	; 196
     4f6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4f8:	06 b6       	in	r0, 0x36	; 54
     4fa:	07 fe       	sbrs	r0, 7
     4fc:	fd cf       	rjmp	.-6      	; 0x4f8 <Read_RawValue+0xc2>
	return TWDR;											/* Return received data */
     4fe:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     500:	84 ec       	ldi	r24, 0xC4	; 196
     502:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     504:	06 b6       	in	r0, 0x36	; 54
     506:	07 fe       	sbrs	r0, 7
     508:	fd cf       	rjmp	.-6      	; 0x504 <Read_RawValue+0xce>
	return TWDR;											/* Return received data */
     50a:	23 b1       	in	r18, 0x03	; 3
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     50c:	79 2f       	mov	r23, r25
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	62 2b       	or	r22, r18
     514:	73 2b       	or	r23, r19
     516:	88 27       	eor	r24, r24
     518:	77 fd       	sbrc	r23, 7
     51a:	80 95       	com	r24
     51c:	98 2f       	mov	r25, r24
     51e:	0e 94 90 06 	call	0xd20	; 0xd20 <__floatsisf>
     522:	60 93 d6 00 	sts	0x00D6, r22
     526:	70 93 d7 00 	sts	0x00D7, r23
     52a:	80 93 d8 00 	sts	0x00D8, r24
     52e:	90 93 d9 00 	sts	0x00D9, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     532:	84 ec       	ldi	r24, 0xC4	; 196
     534:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     536:	06 b6       	in	r0, 0x36	; 54
     538:	07 fe       	sbrs	r0, 7
     53a:	fd cf       	rjmp	.-6      	; 0x536 <Read_RawValue+0x100>
	return TWDR;											/* Return received data */
     53c:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     53e:	84 ec       	ldi	r24, 0xC4	; 196
     540:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     542:	06 b6       	in	r0, 0x36	; 54
     544:	07 fe       	sbrs	r0, 7
     546:	fd cf       	rjmp	.-6      	; 0x542 <Read_RawValue+0x10c>
	return TWDR;											/* Return received data */
     548:	23 b1       	in	r18, 0x03	; 3
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     54a:	79 2f       	mov	r23, r25
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	62 2b       	or	r22, r18
     552:	73 2b       	or	r23, r19
     554:	88 27       	eor	r24, r24
     556:	77 fd       	sbrc	r23, 7
     558:	80 95       	com	r24
     55a:	98 2f       	mov	r25, r24
     55c:	0e 94 90 06 	call	0xd20	; 0xd20 <__floatsisf>
     560:	60 93 d2 00 	sts	0x00D2, r22
     564:	70 93 d3 00 	sts	0x00D3, r23
     568:	80 93 d4 00 	sts	0x00D4, r24
     56c:	90 93 d5 00 	sts	0x00D5, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     570:	84 ec       	ldi	r24, 0xC4	; 196
     572:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     574:	06 b6       	in	r0, 0x36	; 54
     576:	07 fe       	sbrs	r0, 7
     578:	fd cf       	rjmp	.-6      	; 0x574 <Read_RawValue+0x13e>
	return TWDR;											/* Return received data */
     57a:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     57c:	84 ec       	ldi	r24, 0xC4	; 196
     57e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     580:	06 b6       	in	r0, 0x36	; 54
     582:	07 fe       	sbrs	r0, 7
     584:	fd cf       	rjmp	.-6      	; 0x580 <Read_RawValue+0x14a>
	return TWDR;											/* Return received data */
     586:	23 b1       	in	r18, 0x03	; 3
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     588:	79 2f       	mov	r23, r25
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	62 2b       	or	r22, r18
     590:	73 2b       	or	r23, r19
     592:	88 27       	eor	r24, r24
     594:	77 fd       	sbrc	r23, 7
     596:	80 95       	com	r24
     598:	98 2f       	mov	r25, r24
     59a:	0e 94 90 06 	call	0xd20	; 0xd20 <__floatsisf>
     59e:	60 93 e6 00 	sts	0x00E6, r22
     5a2:	70 93 e7 00 	sts	0x00E7, r23
     5a6:	80 93 e8 00 	sts	0x00E8, r24
     5aa:	90 93 e9 00 	sts	0x00E9, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     5ae:	84 ec       	ldi	r24, 0xC4	; 196
     5b0:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     5b2:	06 b6       	in	r0, 0x36	; 54
     5b4:	07 fe       	sbrs	r0, 7
     5b6:	fd cf       	rjmp	.-6      	; 0x5b2 <Read_RawValue+0x17c>
	return TWDR;											/* Return received data */
     5b8:	93 b1       	in	r25, 0x03	; 3
}	

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     5ba:	84 e8       	ldi	r24, 0x84	; 132
     5bc:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     5be:	06 b6       	in	r0, 0x36	; 54
     5c0:	07 fe       	sbrs	r0, 7
     5c2:	fd cf       	rjmp	.-6      	; 0x5be <Read_RawValue+0x188>
	return TWDR;											/* Return received data */
     5c4:	23 b1       	in	r18, 0x03	; 3
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     5c6:	79 2f       	mov	r23, r25
     5c8:	60 e0       	ldi	r22, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	62 2b       	or	r22, r18
     5ce:	73 2b       	or	r23, r19
     5d0:	88 27       	eor	r24, r24
     5d2:	77 fd       	sbrc	r23, 7
     5d4:	80 95       	com	r24
     5d6:	98 2f       	mov	r25, r24
     5d8:	0e 94 90 06 	call	0xd20	; 0xd20 <__floatsisf>
     5dc:	60 93 de 00 	sts	0x00DE, r22
     5e0:	70 93 df 00 	sts	0x00DF, r23
     5e4:	80 93 e0 00 	sts	0x00E0, r24
     5e8:	90 93 e1 00 	sts	0x00E1, r25
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     5ec:	84 e9       	ldi	r24, 0x94	; 148
     5ee:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     5f0:	06 b6       	in	r0, 0x36	; 54
     5f2:	04 fc       	sbrc	r0, 4
     5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <Read_RawValue+0x1ba>
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
	I2C_Stop();
}
     5f6:	08 95       	ret

000005f8 <__vector_9>:
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


// Method triggered by overflow
ISR(TIMER1_OVF_vect){
     5f8:	1f 92       	push	r1
     5fa:	0f 92       	push	r0
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	0f 92       	push	r0
     600:	11 24       	eor	r1, r1
     602:	8f 93       	push	r24

    PORTB ^= 0xFF;			//toggle PORTB values
     604:	88 b3       	in	r24, 0x18	; 24
     606:	80 95       	com	r24
     608:	88 bb       	out	0x18, r24	; 24
}
     60a:	8f 91       	pop	r24
     60c:	0f 90       	pop	r0
     60e:	0f be       	out	0x3f, r0	; 63
     610:	0f 90       	pop	r0
     612:	1f 90       	pop	r1
     614:	18 95       	reti

00000616 <USART_Receive>:

// Data from Bluetooth TX given to USART RX
unsigned char USART_Receive( void ){

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) ) {  }
     616:	5f 9b       	sbis	0x0b, 7	; 11
     618:	fe cf       	rjmp	.-4      	; 0x616 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
     61a:	8c b1       	in	r24, 0x0c	; 12
}
     61c:	08 95       	ret

0000061e <USART_Transmit>:

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
     61e:	5d 9b       	sbis	0x0b, 5	; 11
     620:	fe cf       	rjmp	.-4      	; 0x61e <USART_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
     622:	8c b9       	out	0x0c, r24	; 12
}
     624:	08 95       	ret

00000626 <USART_SendString>:

/* Send string of USART data function */ 
void USART_SendString(char *str){
     626:	fc 01       	movw	r30, r24
     628:	04 c0       	rjmp	.+8      	; 0x632 <USART_SendString+0xc>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
     62a:	5d 9b       	sbis	0x0b, 5	; 11
     62c:	fe cf       	rjmp	.-4      	; 0x62a <USART_SendString+0x4>

	/* Put data into buffer, sends the data */
	UDR = data;
     62e:	8c b9       	out	0x0c, r24	; 12
     630:	31 96       	adiw	r30, 0x01	; 1
/* Send string of USART data function */ 
void USART_SendString(char *str){

	int i=0;			
	/* Send each char of string till the NULL */														
	while (str[i]!=0){
     632:	80 81       	ld	r24, Z
     634:	88 23       	and	r24, r24
     636:	c9 f7       	brne	.-14     	; 0x62a <USART_SendString+0x4>
		USART_Transmit( str[i] );
		i++;
	}
}
     638:	08 95       	ret

0000063a <USART_Flush>:

// Flush USART
void USART_Flush( void ){
     63a:	01 c0       	rjmp	.+2      	; 0x63e <USART_Flush+0x4>

	unsigned char dummy;
	while ( UCSRA & (1<<RXC) ) dummy = UDR;
     63c:	8c b1       	in	r24, 0x0c	; 12
     63e:	5f 99       	sbic	0x0b, 7	; 11
     640:	fd cf       	rjmp	.-6      	; 0x63c <USART_Flush+0x2>
}
     642:	08 95       	ret

00000644 <USART_Init>:

// Initialize USART
void USART_Init( unsigned int baud ){
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
     644:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
     646:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X);
     648:	59 9a       	sbi	0x0b, 1	; 11

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
     64a:	88 e1       	ldi	r24, 0x18	; 24
     64c:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     64e:	8e e8       	ldi	r24, 0x8E	; 142
     650:	80 bd       	out	0x20, r24	; 32
}
     652:	08 95       	ret

00000654 <Bluetooth_Init>:


void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
     654:	8c e0       	ldi	r24, 0x0C	; 12
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	0e 94 22 03 	call	0x644	; 0x644 <USART_Init>
     65c:	e0 e6       	ldi	r30, 0x60	; 96
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	04 c0       	rjmp	.+8      	; 0x66a <Bluetooth_Init+0x16>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
     662:	5d 9b       	sbis	0x0b, 5	; 11
     664:	fe cf       	rjmp	.-4      	; 0x662 <Bluetooth_Init+0xe>

	/* Put data into buffer, sends the data */
	UDR = data;
     666:	8c b9       	out	0x0c, r24	; 12

	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
		USART_Transmit( *cmd );
		++cmd;
     668:	31 96       	adiw	r30, 0x01	; 1

void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
     66a:	80 81       	ld	r24, Z
     66c:	88 23       	and	r24, r24
     66e:	c9 f7       	brne	.-14     	; 0x662 <Bluetooth_Init+0xe>
		USART_Transmit( *cmd );
		++cmd;
	}
}
     670:	08 95       	ret

00000672 <USART_Start_Timer>:

void USART_Start_Timer(){

	TCCR1B |= (1 << CS11);	// Timer1 prescaler = 8
     672:	8e b5       	in	r24, 0x2e	; 46
     674:	82 60       	ori	r24, 0x02	; 2
     676:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;				// Clear the timer counter
     678:	1d bc       	out	0x2d, r1	; 45
     67a:	1c bc       	out	0x2c, r1	; 44
	TIMSK = (1 << TOIE1);	// Enable timer1 overflow interrupt(TOIE1)
     67c:	84 e0       	ldi	r24, 0x04	; 4
     67e:	89 bf       	out	0x39, r24	; 57
	sei();					// Enable global interrupts
     680:	78 94       	sei
}
     682:	08 95       	ret

00000684 <init_clock>:


void init_clock(){

	/* Initialize clock settings */
	TWSR = 0x00; // set presca1er bits to 1 (0x00=1, 0x01=4, 0x02=16, 0x03=64)
     684:	11 b8       	out	0x01, r1	; 1
    TWBR = ((F_CPU/SCL_CLK)-16)/(2*pow(4,(TWSR&((1<<TWPS0)|(1<<TWPS1))))); // SCL frequency
     686:	61 b1       	in	r22, 0x01	; 1
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	63 70       	andi	r22, 0x03	; 3
     68c:	70 70       	andi	r23, 0x00	; 0
     68e:	88 27       	eor	r24, r24
     690:	77 fd       	sbrc	r23, 7
     692:	80 95       	com	r24
     694:	98 2f       	mov	r25, r24
     696:	0e 94 90 06 	call	0xd20	; 0xd20 <__floatsisf>
     69a:	9b 01       	movw	r18, r22
     69c:	ac 01       	movw	r20, r24
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	80 e8       	ldi	r24, 0x80	; 128
     6a4:	90 e4       	ldi	r25, 0x40	; 64
     6a6:	0e 94 7f 07 	call	0xefe	; 0xefe <pow>
     6aa:	9b 01       	movw	r18, r22
     6ac:	ac 01       	movw	r20, r24
     6ae:	ca 01       	movw	r24, r20
     6b0:	b9 01       	movw	r22, r18
     6b2:	0e 94 96 05 	call	0xb2c	; 0xb2c <__addsf3>
     6b6:	9b 01       	movw	r18, r22
     6b8:	ac 01       	movw	r20, r24
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	80 e8       	ldi	r24, 0x80	; 128
     6c0:	92 e4       	ldi	r25, 0x42	; 66
     6c2:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__divsf3>
     6c6:	0e 94 62 06 	call	0xcc4	; 0xcc4 <__fixunssfsi>
     6ca:	60 b9       	out	0x00, r22	; 0

}
     6cc:	08 95       	ret

000006ce <main>:
// 																		  //
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


int main(void) {
     6ce:	2f 92       	push	r2
     6d0:	3f 92       	push	r3
     6d2:	4f 92       	push	r4
     6d4:	5f 92       	push	r5
     6d6:	6f 92       	push	r6
     6d8:	7f 92       	push	r7
     6da:	8f 92       	push	r8
     6dc:	9f 92       	push	r9
     6de:	af 92       	push	r10
     6e0:	bf 92       	push	r11
     6e2:	cf 92       	push	r12
     6e4:	df 92       	push	r13
     6e6:	ef 92       	push	r14
     6e8:	ff 92       	push	r15
     6ea:	0f 93       	push	r16
     6ec:	1f 93       	push	r17
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	aa 97       	sbiw	r28, 0x2a	; 42
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61


	// STEP 1: Establish Bluetooth / USART Connection

	Bluetooth_Init();
     702:	0e 94 2a 03 	call	0x654	; 0x654 <Bluetooth_Init>
	float Xg=0,Yg=0,Zg=0;
	//USART_SendString( "step 2" );

	// STEP 3: Establish I2C Connection

	init_clock();
     706:	0e 94 42 03 	call	0x684	; 0x684 <init_clock>
	/*
	CHAD: note to self, this function call is the issue.
	Things break here. Look into the parts of this function.
	*/

	MPU6050_Init();
     70a:	0e 94 c6 01 	call	0x38c	; 0x38c <MPU6050_Init>
			Zg = Gyro_z/16.4;

			t = (Temperature/340.00)+36.53;			

			dtostrf( Xa, 3, 2, float_ );				
			sprintf(buffer," Ax = %s g\t",float_);
     70e:	8b e0       	ldi	r24, 0x0B	; 11
     710:	28 2e       	mov	r2, r24
     712:	31 2c       	mov	r3, r1
     714:	2c 0e       	add	r2, r28
     716:	3d 1e       	adc	r3, r29
	
		//char DATA_IN = USART_Receive();
		
		//if(DATA_IN == '1') {

			Read_RawValue();
     718:	0e 94 1b 02 	call	0x436	; 0x436 <Read_RawValue>

			Xa = Acc_x/16384.0;								
			Ya = Acc_y/16384.0;
     71c:	60 91 da 00 	lds	r22, 0x00DA
     720:	70 91 db 00 	lds	r23, 0x00DB
     724:	80 91 dc 00 	lds	r24, 0x00DC
     728:	90 91 dd 00 	lds	r25, 0x00DD
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	40 e8       	ldi	r20, 0x80	; 128
     732:	58 e3       	ldi	r21, 0x38	; 56
     734:	0e 94 1c 07 	call	0xe38	; 0xe38 <__mulsf3>
     738:	6b 01       	movw	r12, r22
     73a:	7c 01       	movw	r14, r24
			Za = Acc_z/16384.0;
     73c:	60 91 ce 00 	lds	r22, 0x00CE
     740:	70 91 cf 00 	lds	r23, 0x00CF
     744:	80 91 d0 00 	lds	r24, 0x00D0
     748:	90 91 d1 00 	lds	r25, 0x00D1
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e8       	ldi	r20, 0x80	; 128
     752:	58 e3       	ldi	r21, 0x38	; 56
     754:	0e 94 1c 07 	call	0xe38	; 0xe38 <__mulsf3>
     758:	4b 01       	movw	r8, r22
     75a:	5c 01       	movw	r10, r24
		
			Xg = Gyro_x/16.4;
     75c:	60 91 d2 00 	lds	r22, 0x00D2
     760:	70 91 d3 00 	lds	r23, 0x00D3
     764:	80 91 d4 00 	lds	r24, 0x00D4
     768:	90 91 d5 00 	lds	r25, 0x00D5
     76c:	23 e3       	ldi	r18, 0x33	; 51
     76e:	33 e3       	ldi	r19, 0x33	; 51
     770:	43 e8       	ldi	r20, 0x83	; 131
     772:	51 e4       	ldi	r21, 0x41	; 65
     774:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__divsf3>
     778:	6f 8f       	std	Y+31, r22	; 0x1f
     77a:	78 a3       	std	Y+32, r23	; 0x20
     77c:	89 a3       	std	Y+33, r24	; 0x21
     77e:	9a a3       	std	Y+34, r25	; 0x22
			Yg = Gyro_y/16.4;
     780:	60 91 e6 00 	lds	r22, 0x00E6
     784:	70 91 e7 00 	lds	r23, 0x00E7
     788:	80 91 e8 00 	lds	r24, 0x00E8
     78c:	90 91 e9 00 	lds	r25, 0x00E9
     790:	23 e3       	ldi	r18, 0x33	; 51
     792:	33 e3       	ldi	r19, 0x33	; 51
     794:	43 e8       	ldi	r20, 0x83	; 131
     796:	51 e4       	ldi	r21, 0x41	; 65
     798:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__divsf3>
     79c:	6b a3       	std	Y+35, r22	; 0x23
     79e:	7c a3       	std	Y+36, r23	; 0x24
     7a0:	8d a3       	std	Y+37, r24	; 0x25
     7a2:	9e a3       	std	Y+38, r25	; 0x26
			Zg = Gyro_z/16.4;
     7a4:	60 91 de 00 	lds	r22, 0x00DE
     7a8:	70 91 df 00 	lds	r23, 0x00DF
     7ac:	80 91 e0 00 	lds	r24, 0x00E0
     7b0:	90 91 e1 00 	lds	r25, 0x00E1
     7b4:	23 e3       	ldi	r18, 0x33	; 51
     7b6:	33 e3       	ldi	r19, 0x33	; 51
     7b8:	43 e8       	ldi	r20, 0x83	; 131
     7ba:	51 e4       	ldi	r21, 0x41	; 65
     7bc:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__divsf3>
     7c0:	6f a3       	std	Y+39, r22	; 0x27
     7c2:	78 a7       	std	Y+40, r23	; 0x28
     7c4:	89 a7       	std	Y+41, r24	; 0x29
     7c6:	9a a7       	std	Y+42, r25	; 0x2a

			t = (Temperature/340.00)+36.53;			
     7c8:	60 91 d6 00 	lds	r22, 0x00D6
     7cc:	70 91 d7 00 	lds	r23, 0x00D7
     7d0:	80 91 d8 00 	lds	r24, 0x00D8
     7d4:	90 91 d9 00 	lds	r25, 0x00D9
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	4a ea       	ldi	r20, 0xAA	; 170
     7de:	53 e4       	ldi	r21, 0x43	; 67
     7e0:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__divsf3>
     7e4:	28 eb       	ldi	r18, 0xB8	; 184
     7e6:	3e e1       	ldi	r19, 0x1E	; 30
     7e8:	42 e1       	ldi	r20, 0x12	; 18
     7ea:	52 e4       	ldi	r21, 0x42	; 66
     7ec:	0e 94 96 05 	call	0xb2c	; 0xb2c <__addsf3>
     7f0:	2b 01       	movw	r4, r22
     7f2:	3c 01       	movw	r6, r24

			dtostrf( Xa, 3, 2, float_ );				
     7f4:	60 91 e2 00 	lds	r22, 0x00E2
     7f8:	70 91 e3 00 	lds	r23, 0x00E3
     7fc:	80 91 e4 00 	lds	r24, 0x00E4
     800:	90 91 e5 00 	lds	r25, 0x00E5
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	40 e8       	ldi	r20, 0x80	; 128
     80a:	58 e3       	ldi	r21, 0x38	; 56
     80c:	0e 94 1c 07 	call	0xe38	; 0xe38 <__mulsf3>
     810:	43 e0       	ldi	r20, 0x03	; 3
     812:	22 e0       	ldi	r18, 0x02	; 2
     814:	8e 01       	movw	r16, r28
     816:	0f 5f       	subi	r16, 0xFF	; 255
     818:	1f 4f       	sbci	r17, 0xFF	; 255
     81a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <dtostrf>
			sprintf(buffer," Ax = %s g\t",float_);
     81e:	00 d0       	rcall	.+0      	; 0x820 <main+0x152>
     820:	00 d0       	rcall	.+0      	; 0x822 <main+0x154>
     822:	00 d0       	rcall	.+0      	; 0x824 <main+0x156>
     824:	ed b7       	in	r30, 0x3d	; 61
     826:	fe b7       	in	r31, 0x3e	; 62
     828:	31 96       	adiw	r30, 0x01	; 1
     82a:	ad b7       	in	r26, 0x3d	; 61
     82c:	be b7       	in	r27, 0x3e	; 62
     82e:	12 96       	adiw	r26, 0x02	; 2
     830:	3c 92       	st	X, r3
     832:	2e 92       	st	-X, r2
     834:	11 97       	sbiw	r26, 0x01	; 1
     836:	83 e7       	ldi	r24, 0x73	; 115
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	93 83       	std	Z+3, r25	; 0x03
     83c:	82 83       	std	Z+2, r24	; 0x02
     83e:	15 83       	std	Z+5, r17	; 0x05
     840:	04 83       	std	Z+4, r16	; 0x04
     842:	0e 94 71 05 	call	0xae2	; 0xae2 <sprintf>
			USART_SendString(buffer);
     846:	8d b7       	in	r24, 0x3d	; 61
     848:	9e b7       	in	r25, 0x3e	; 62
     84a:	06 96       	adiw	r24, 0x06	; 6
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	9e bf       	out	0x3e, r25	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	8d bf       	out	0x3d, r24	; 61
     856:	c1 01       	movw	r24, r2
     858:	0e 94 13 03 	call	0x626	; 0x626 <USART_SendString>

			dtostrf( Ya, 3, 2, float_ );
     85c:	b6 01       	movw	r22, r12
     85e:	c7 01       	movw	r24, r14
     860:	43 e0       	ldi	r20, 0x03	; 3
     862:	22 e0       	ldi	r18, 0x02	; 2
     864:	8e 01       	movw	r16, r28
     866:	0f 5f       	subi	r16, 0xFF	; 255
     868:	1f 4f       	sbci	r17, 0xFF	; 255
     86a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <dtostrf>
			sprintf(buffer," Ay = %s g\t",float_);
     86e:	00 d0       	rcall	.+0      	; 0x870 <__stack+0x11>
     870:	00 d0       	rcall	.+0      	; 0x872 <__stack+0x13>
     872:	00 d0       	rcall	.+0      	; 0x874 <__stack+0x15>
     874:	ed b7       	in	r30, 0x3d	; 61
     876:	fe b7       	in	r31, 0x3e	; 62
     878:	31 96       	adiw	r30, 0x01	; 1
     87a:	ad b7       	in	r26, 0x3d	; 61
     87c:	be b7       	in	r27, 0x3e	; 62
     87e:	12 96       	adiw	r26, 0x02	; 2
     880:	3c 92       	st	X, r3
     882:	2e 92       	st	-X, r2
     884:	11 97       	sbiw	r26, 0x01	; 1
     886:	8f e7       	ldi	r24, 0x7F	; 127
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	93 83       	std	Z+3, r25	; 0x03
     88c:	82 83       	std	Z+2, r24	; 0x02
     88e:	15 83       	std	Z+5, r17	; 0x05
     890:	04 83       	std	Z+4, r16	; 0x04
     892:	0e 94 71 05 	call	0xae2	; 0xae2 <sprintf>
			USART_SendString(buffer);
     896:	8d b7       	in	r24, 0x3d	; 61
     898:	9e b7       	in	r25, 0x3e	; 62
     89a:	06 96       	adiw	r24, 0x06	; 6
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	9e bf       	out	0x3e, r25	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	8d bf       	out	0x3d, r24	; 61
     8a6:	c1 01       	movw	r24, r2
     8a8:	0e 94 13 03 	call	0x626	; 0x626 <USART_SendString>
		
			dtostrf( Za, 3, 2, float_ );
     8ac:	b4 01       	movw	r22, r8
     8ae:	c5 01       	movw	r24, r10
     8b0:	43 e0       	ldi	r20, 0x03	; 3
     8b2:	22 e0       	ldi	r18, 0x02	; 2
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5f       	subi	r16, 0xFF	; 255
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	0e 94 4d 05 	call	0xa9a	; 0xa9a <dtostrf>
			sprintf(buffer," Az = %s g\t",float_);
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <__stack+0x61>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <__stack+0x63>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <__stack+0x65>
     8c4:	ed b7       	in	r30, 0x3d	; 61
     8c6:	fe b7       	in	r31, 0x3e	; 62
     8c8:	31 96       	adiw	r30, 0x01	; 1
     8ca:	ad b7       	in	r26, 0x3d	; 61
     8cc:	be b7       	in	r27, 0x3e	; 62
     8ce:	12 96       	adiw	r26, 0x02	; 2
     8d0:	3c 92       	st	X, r3
     8d2:	2e 92       	st	-X, r2
     8d4:	11 97       	sbiw	r26, 0x01	; 1
     8d6:	8b e8       	ldi	r24, 0x8B	; 139
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	93 83       	std	Z+3, r25	; 0x03
     8dc:	82 83       	std	Z+2, r24	; 0x02
     8de:	15 83       	std	Z+5, r17	; 0x05
     8e0:	04 83       	std	Z+4, r16	; 0x04
     8e2:	0e 94 71 05 	call	0xae2	; 0xae2 <sprintf>
			USART_SendString(buffer);
     8e6:	8d b7       	in	r24, 0x3d	; 61
     8e8:	9e b7       	in	r25, 0x3e	; 62
     8ea:	06 96       	adiw	r24, 0x06	; 6
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	9e bf       	out	0x3e, r25	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	8d bf       	out	0x3d, r24	; 61
     8f6:	c1 01       	movw	r24, r2
     8f8:	0e 94 13 03 	call	0x626	; 0x626 <USART_SendString>

			dtostrf( t, 3, 2, float_ );
     8fc:	b2 01       	movw	r22, r4
     8fe:	c3 01       	movw	r24, r6
     900:	43 e0       	ldi	r20, 0x03	; 3
     902:	22 e0       	ldi	r18, 0x02	; 2
     904:	8e 01       	movw	r16, r28
     906:	0f 5f       	subi	r16, 0xFF	; 255
     908:	1f 4f       	sbci	r17, 0xFF	; 255
     90a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <dtostrf>
			sprintf(buffer," T = %s%cC\t",float_,0xF8);        
     90e:	ad b7       	in	r26, 0x3d	; 61
     910:	be b7       	in	r27, 0x3e	; 62
     912:	18 97       	sbiw	r26, 0x08	; 8
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	be bf       	out	0x3e, r27	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	ad bf       	out	0x3d, r26	; 61
     91e:	ed b7       	in	r30, 0x3d	; 61
     920:	fe b7       	in	r31, 0x3e	; 62
     922:	31 96       	adiw	r30, 0x01	; 1
     924:	12 96       	adiw	r26, 0x02	; 2
     926:	3c 92       	st	X, r3
     928:	2e 92       	st	-X, r2
     92a:	11 97       	sbiw	r26, 0x01	; 1
     92c:	87 e9       	ldi	r24, 0x97	; 151
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	93 83       	std	Z+3, r25	; 0x03
     932:	82 83       	std	Z+2, r24	; 0x02
     934:	15 83       	std	Z+5, r17	; 0x05
     936:	04 83       	std	Z+4, r16	; 0x04
     938:	88 ef       	ldi	r24, 0xF8	; 248
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	97 83       	std	Z+7, r25	; 0x07
     93e:	86 83       	std	Z+6, r24	; 0x06
     940:	0e 94 71 05 	call	0xae2	; 0xae2 <sprintf>
			USART_SendString(buffer);
     944:	ad b7       	in	r26, 0x3d	; 61
     946:	be b7       	in	r27, 0x3e	; 62
     948:	18 96       	adiw	r26, 0x08	; 8
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	be bf       	out	0x3e, r27	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	ad bf       	out	0x3d, r26	; 61
     954:	c1 01       	movw	r24, r2
     956:	0e 94 13 03 	call	0x626	; 0x626 <USART_SendString>

			dtostrf( Xg, 3, 2, float_ );
     95a:	2f 8d       	ldd	r18, Y+31	; 0x1f
     95c:	38 a1       	ldd	r19, Y+32	; 0x20
     95e:	49 a1       	ldd	r20, Y+33	; 0x21
     960:	5a a1       	ldd	r21, Y+34	; 0x22
     962:	b9 01       	movw	r22, r18
     964:	ca 01       	movw	r24, r20
     966:	43 e0       	ldi	r20, 0x03	; 3
     968:	22 e0       	ldi	r18, 0x02	; 2
     96a:	8e 01       	movw	r16, r28
     96c:	0f 5f       	subi	r16, 0xFF	; 255
     96e:	1f 4f       	sbci	r17, 0xFF	; 255
     970:	0e 94 4d 05 	call	0xa9a	; 0xa9a <dtostrf>
			sprintf(buffer," Gx = %s%c/s\t",float_,0xF8);
     974:	8d b7       	in	r24, 0x3d	; 61
     976:	9e b7       	in	r25, 0x3e	; 62
     978:	08 97       	sbiw	r24, 0x08	; 8
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	9e bf       	out	0x3e, r25	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	8d bf       	out	0x3d, r24	; 61
     984:	ed b7       	in	r30, 0x3d	; 61
     986:	fe b7       	in	r31, 0x3e	; 62
     988:	31 96       	adiw	r30, 0x01	; 1
     98a:	ad b7       	in	r26, 0x3d	; 61
     98c:	be b7       	in	r27, 0x3e	; 62
     98e:	12 96       	adiw	r26, 0x02	; 2
     990:	3c 92       	st	X, r3
     992:	2e 92       	st	-X, r2
     994:	11 97       	sbiw	r26, 0x01	; 1
     996:	83 ea       	ldi	r24, 0xA3	; 163
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	93 83       	std	Z+3, r25	; 0x03
     99c:	82 83       	std	Z+2, r24	; 0x02
     99e:	15 83       	std	Z+5, r17	; 0x05
     9a0:	04 83       	std	Z+4, r16	; 0x04
     9a2:	88 ef       	ldi	r24, 0xF8	; 248
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	97 83       	std	Z+7, r25	; 0x07
     9a8:	86 83       	std	Z+6, r24	; 0x06
     9aa:	0e 94 71 05 	call	0xae2	; 0xae2 <sprintf>
			USART_SendString(buffer);
     9ae:	ad b7       	in	r26, 0x3d	; 61
     9b0:	be b7       	in	r27, 0x3e	; 62
     9b2:	18 96       	adiw	r26, 0x08	; 8
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	f8 94       	cli
     9b8:	be bf       	out	0x3e, r27	; 62
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	ad bf       	out	0x3d, r26	; 61
     9be:	c1 01       	movw	r24, r2
     9c0:	0e 94 13 03 	call	0x626	; 0x626 <USART_SendString>

			dtostrf( Yg, 3, 2, float_ );
     9c4:	2b a1       	ldd	r18, Y+35	; 0x23
     9c6:	3c a1       	ldd	r19, Y+36	; 0x24
     9c8:	4d a1       	ldd	r20, Y+37	; 0x25
     9ca:	5e a1       	ldd	r21, Y+38	; 0x26
     9cc:	b9 01       	movw	r22, r18
     9ce:	ca 01       	movw	r24, r20
     9d0:	43 e0       	ldi	r20, 0x03	; 3
     9d2:	22 e0       	ldi	r18, 0x02	; 2
     9d4:	8e 01       	movw	r16, r28
     9d6:	0f 5f       	subi	r16, 0xFF	; 255
     9d8:	1f 4f       	sbci	r17, 0xFF	; 255
     9da:	0e 94 4d 05 	call	0xa9a	; 0xa9a <dtostrf>
			sprintf(buffer," Gy = %s%c/s\t",float_,0xF8);
     9de:	8d b7       	in	r24, 0x3d	; 61
     9e0:	9e b7       	in	r25, 0x3e	; 62
     9e2:	08 97       	sbiw	r24, 0x08	; 8
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	9e bf       	out	0x3e, r25	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	8d bf       	out	0x3d, r24	; 61
     9ee:	ed b7       	in	r30, 0x3d	; 61
     9f0:	fe b7       	in	r31, 0x3e	; 62
     9f2:	31 96       	adiw	r30, 0x01	; 1
     9f4:	ad b7       	in	r26, 0x3d	; 61
     9f6:	be b7       	in	r27, 0x3e	; 62
     9f8:	12 96       	adiw	r26, 0x02	; 2
     9fa:	3c 92       	st	X, r3
     9fc:	2e 92       	st	-X, r2
     9fe:	11 97       	sbiw	r26, 0x01	; 1
     a00:	81 eb       	ldi	r24, 0xB1	; 177
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	93 83       	std	Z+3, r25	; 0x03
     a06:	82 83       	std	Z+2, r24	; 0x02
     a08:	15 83       	std	Z+5, r17	; 0x05
     a0a:	04 83       	std	Z+4, r16	; 0x04
     a0c:	88 ef       	ldi	r24, 0xF8	; 248
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	97 83       	std	Z+7, r25	; 0x07
     a12:	86 83       	std	Z+6, r24	; 0x06
     a14:	0e 94 71 05 	call	0xae2	; 0xae2 <sprintf>
			USART_SendString(buffer);
     a18:	ad b7       	in	r26, 0x3d	; 61
     a1a:	be b7       	in	r27, 0x3e	; 62
     a1c:	18 96       	adiw	r26, 0x08	; 8
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	f8 94       	cli
     a22:	be bf       	out	0x3e, r27	; 62
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	ad bf       	out	0x3d, r26	; 61
     a28:	c1 01       	movw	r24, r2
     a2a:	0e 94 13 03 	call	0x626	; 0x626 <USART_SendString>
		
			dtostrf( Zg, 3, 2, float_ );
     a2e:	2f a1       	ldd	r18, Y+39	; 0x27
     a30:	38 a5       	ldd	r19, Y+40	; 0x28
     a32:	49 a5       	ldd	r20, Y+41	; 0x29
     a34:	5a a5       	ldd	r21, Y+42	; 0x2a
     a36:	b9 01       	movw	r22, r18
     a38:	ca 01       	movw	r24, r20
     a3a:	43 e0       	ldi	r20, 0x03	; 3
     a3c:	22 e0       	ldi	r18, 0x02	; 2
     a3e:	8e 01       	movw	r16, r28
     a40:	0f 5f       	subi	r16, 0xFF	; 255
     a42:	1f 4f       	sbci	r17, 0xFF	; 255
     a44:	0e 94 4d 05 	call	0xa9a	; 0xa9a <dtostrf>
			sprintf(buffer," Gz = %s%c/s\r\n",float_,0xF8);
     a48:	8d b7       	in	r24, 0x3d	; 61
     a4a:	9e b7       	in	r25, 0x3e	; 62
     a4c:	08 97       	sbiw	r24, 0x08	; 8
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	9e bf       	out	0x3e, r25	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	8d bf       	out	0x3d, r24	; 61
     a58:	ed b7       	in	r30, 0x3d	; 61
     a5a:	fe b7       	in	r31, 0x3e	; 62
     a5c:	31 96       	adiw	r30, 0x01	; 1
     a5e:	ad b7       	in	r26, 0x3d	; 61
     a60:	be b7       	in	r27, 0x3e	; 62
     a62:	12 96       	adiw	r26, 0x02	; 2
     a64:	3c 92       	st	X, r3
     a66:	2e 92       	st	-X, r2
     a68:	11 97       	sbiw	r26, 0x01	; 1
     a6a:	8f eb       	ldi	r24, 0xBF	; 191
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	93 83       	std	Z+3, r25	; 0x03
     a70:	82 83       	std	Z+2, r24	; 0x02
     a72:	15 83       	std	Z+5, r17	; 0x05
     a74:	04 83       	std	Z+4, r16	; 0x04
     a76:	88 ef       	ldi	r24, 0xF8	; 248
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	97 83       	std	Z+7, r25	; 0x07
     a7c:	86 83       	std	Z+6, r24	; 0x06
     a7e:	0e 94 71 05 	call	0xae2	; 0xae2 <sprintf>
			USART_SendString(buffer);
     a82:	ad b7       	in	r26, 0x3d	; 61
     a84:	be b7       	in	r27, 0x3e	; 62
     a86:	18 96       	adiw	r26, 0x08	; 8
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	be bf       	out	0x3e, r27	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	ad bf       	out	0x3d, r26	; 61
     a92:	c1 01       	movw	r24, r2
     a94:	0e 94 13 03 	call	0x626	; 0x626 <USART_SendString>
     a98:	3f ce       	rjmp	.-898    	; 0x718 <main+0x4a>

00000a9a <dtostrf>:
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	f2 2f       	mov	r31, r18
     aa4:	f0 2e       	mov	r15, r16
     aa6:	47 fd       	sbrc	r20, 7
     aa8:	02 c0       	rjmp	.+4      	; 0xaae <dtostrf+0x14>
     aaa:	e4 e0       	ldi	r30, 0x04	; 4
     aac:	01 c0       	rjmp	.+2      	; 0xab0 <dtostrf+0x16>
     aae:	e4 e1       	ldi	r30, 0x14	; 20
     ab0:	24 2f       	mov	r18, r20
     ab2:	33 27       	eor	r19, r19
     ab4:	27 fd       	sbrc	r18, 7
     ab6:	30 95       	com	r19
     ab8:	37 ff       	sbrs	r19, 7
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <dtostrf+0x28>
     abc:	30 95       	com	r19
     abe:	21 95       	neg	r18
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	4f 2d       	mov	r20, r15
     ac4:	51 2f       	mov	r21, r17
     ac6:	0f 2f       	mov	r16, r31
     ac8:	ee 2e       	mov	r14, r30
     aca:	0e 94 a8 09 	call	0x1350	; 0x1350 <dtoa_prf>
     ace:	8f 2d       	mov	r24, r15
     ad0:	91 2f       	mov	r25, r17
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	08 95       	ret

00000adc <exit>:
     adc:	f8 94       	cli
     ade:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <_exit>

00000ae2 <sprintf>:
     ae2:	ae e0       	ldi	r26, 0x0E	; 14
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e7 e7       	ldi	r30, 0x77	; 119
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <__prologue_saves__+0x1c>
     aee:	0d 89       	ldd	r16, Y+21	; 0x15
     af0:	1e 89       	ldd	r17, Y+22	; 0x16
     af2:	86 e0       	ldi	r24, 0x06	; 6
     af4:	8c 83       	std	Y+4, r24	; 0x04
     af6:	1a 83       	std	Y+2, r17	; 0x02
     af8:	09 83       	std	Y+1, r16	; 0x01
     afa:	8f ef       	ldi	r24, 0xFF	; 255
     afc:	9f e7       	ldi	r25, 0x7F	; 127
     afe:	9e 83       	std	Y+6, r25	; 0x06
     b00:	8d 83       	std	Y+5, r24	; 0x05
     b02:	9e 01       	movw	r18, r28
     b04:	27 5e       	subi	r18, 0xE7	; 231
     b06:	3f 4f       	sbci	r19, 0xFF	; 255
     b08:	ce 01       	movw	r24, r28
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	6f 89       	ldd	r22, Y+23	; 0x17
     b0e:	78 8d       	ldd	r23, Y+24	; 0x18
     b10:	a9 01       	movw	r20, r18
     b12:	0e 94 cb 07 	call	0xf96	; 0xf96 <vfprintf>
     b16:	2f 81       	ldd	r18, Y+7	; 0x07
     b18:	38 85       	ldd	r19, Y+8	; 0x08
     b1a:	02 0f       	add	r16, r18
     b1c:	13 1f       	adc	r17, r19
     b1e:	f8 01       	movw	r30, r16
     b20:	10 82       	st	Z, r1
     b22:	2e 96       	adiw	r28, 0x0e	; 14
     b24:	e4 e0       	ldi	r30, 0x04	; 4
     b26:	0c 94 c5 0d 	jmp	0x1b8a	; 0x1b8a <__epilogue_restores__+0x1c>

00000b2a <__subsf3>:
     b2a:	50 58       	subi	r21, 0x80	; 128

00000b2c <__addsf3>:
     b2c:	bb 27       	eor	r27, r27
     b2e:	aa 27       	eor	r26, r26
     b30:	0e d0       	rcall	.+28     	; 0xb4e <__addsf3x>
     b32:	48 c1       	rjmp	.+656    	; 0xdc4 <__fp_round>
     b34:	39 d1       	rcall	.+626    	; 0xda8 <__fp_pscA>
     b36:	30 f0       	brcs	.+12     	; 0xb44 <__addsf3+0x18>
     b38:	3e d1       	rcall	.+636    	; 0xdb6 <__fp_pscB>
     b3a:	20 f0       	brcs	.+8      	; 0xb44 <__addsf3+0x18>
     b3c:	31 f4       	brne	.+12     	; 0xb4a <__addsf3+0x1e>
     b3e:	9f 3f       	cpi	r25, 0xFF	; 255
     b40:	11 f4       	brne	.+4      	; 0xb46 <__addsf3+0x1a>
     b42:	1e f4       	brtc	.+6      	; 0xb4a <__addsf3+0x1e>
     b44:	2e c1       	rjmp	.+604    	; 0xda2 <__fp_nan>
     b46:	0e f4       	brtc	.+2      	; 0xb4a <__addsf3+0x1e>
     b48:	e0 95       	com	r30
     b4a:	e7 fb       	bst	r30, 7
     b4c:	24 c1       	rjmp	.+584    	; 0xd96 <__fp_inf>

00000b4e <__addsf3x>:
     b4e:	e9 2f       	mov	r30, r25
     b50:	4a d1       	rcall	.+660    	; 0xde6 <__fp_split3>
     b52:	80 f3       	brcs	.-32     	; 0xb34 <__addsf3+0x8>
     b54:	ba 17       	cp	r27, r26
     b56:	62 07       	cpc	r22, r18
     b58:	73 07       	cpc	r23, r19
     b5a:	84 07       	cpc	r24, r20
     b5c:	95 07       	cpc	r25, r21
     b5e:	18 f0       	brcs	.+6      	; 0xb66 <__addsf3x+0x18>
     b60:	71 f4       	brne	.+28     	; 0xb7e <__addsf3x+0x30>
     b62:	9e f5       	brtc	.+102    	; 0xbca <__addsf3x+0x7c>
     b64:	62 c1       	rjmp	.+708    	; 0xe2a <__fp_zero>
     b66:	0e f4       	brtc	.+2      	; 0xb6a <__addsf3x+0x1c>
     b68:	e0 95       	com	r30
     b6a:	0b 2e       	mov	r0, r27
     b6c:	ba 2f       	mov	r27, r26
     b6e:	a0 2d       	mov	r26, r0
     b70:	0b 01       	movw	r0, r22
     b72:	b9 01       	movw	r22, r18
     b74:	90 01       	movw	r18, r0
     b76:	0c 01       	movw	r0, r24
     b78:	ca 01       	movw	r24, r20
     b7a:	a0 01       	movw	r20, r0
     b7c:	11 24       	eor	r1, r1
     b7e:	ff 27       	eor	r31, r31
     b80:	59 1b       	sub	r21, r25
     b82:	99 f0       	breq	.+38     	; 0xbaa <__addsf3x+0x5c>
     b84:	59 3f       	cpi	r21, 0xF9	; 249
     b86:	50 f4       	brcc	.+20     	; 0xb9c <__addsf3x+0x4e>
     b88:	50 3e       	cpi	r21, 0xE0	; 224
     b8a:	68 f1       	brcs	.+90     	; 0xbe6 <__addsf3x+0x98>
     b8c:	1a 16       	cp	r1, r26
     b8e:	f0 40       	sbci	r31, 0x00	; 0
     b90:	a2 2f       	mov	r26, r18
     b92:	23 2f       	mov	r18, r19
     b94:	34 2f       	mov	r19, r20
     b96:	44 27       	eor	r20, r20
     b98:	58 5f       	subi	r21, 0xF8	; 248
     b9a:	f3 cf       	rjmp	.-26     	; 0xb82 <__addsf3x+0x34>
     b9c:	46 95       	lsr	r20
     b9e:	37 95       	ror	r19
     ba0:	27 95       	ror	r18
     ba2:	a7 95       	ror	r26
     ba4:	f0 40       	sbci	r31, 0x00	; 0
     ba6:	53 95       	inc	r21
     ba8:	c9 f7       	brne	.-14     	; 0xb9c <__addsf3x+0x4e>
     baa:	7e f4       	brtc	.+30     	; 0xbca <__addsf3x+0x7c>
     bac:	1f 16       	cp	r1, r31
     bae:	ba 0b       	sbc	r27, r26
     bb0:	62 0b       	sbc	r22, r18
     bb2:	73 0b       	sbc	r23, r19
     bb4:	84 0b       	sbc	r24, r20
     bb6:	ba f0       	brmi	.+46     	; 0xbe6 <__addsf3x+0x98>
     bb8:	91 50       	subi	r25, 0x01	; 1
     bba:	a1 f0       	breq	.+40     	; 0xbe4 <__addsf3x+0x96>
     bbc:	ff 0f       	add	r31, r31
     bbe:	bb 1f       	adc	r27, r27
     bc0:	66 1f       	adc	r22, r22
     bc2:	77 1f       	adc	r23, r23
     bc4:	88 1f       	adc	r24, r24
     bc6:	c2 f7       	brpl	.-16     	; 0xbb8 <__addsf3x+0x6a>
     bc8:	0e c0       	rjmp	.+28     	; 0xbe6 <__addsf3x+0x98>
     bca:	ba 0f       	add	r27, r26
     bcc:	62 1f       	adc	r22, r18
     bce:	73 1f       	adc	r23, r19
     bd0:	84 1f       	adc	r24, r20
     bd2:	48 f4       	brcc	.+18     	; 0xbe6 <__addsf3x+0x98>
     bd4:	87 95       	ror	r24
     bd6:	77 95       	ror	r23
     bd8:	67 95       	ror	r22
     bda:	b7 95       	ror	r27
     bdc:	f7 95       	ror	r31
     bde:	9e 3f       	cpi	r25, 0xFE	; 254
     be0:	08 f0       	brcs	.+2      	; 0xbe4 <__addsf3x+0x96>
     be2:	b3 cf       	rjmp	.-154    	; 0xb4a <__addsf3+0x1e>
     be4:	93 95       	inc	r25
     be6:	88 0f       	add	r24, r24
     be8:	08 f0       	brcs	.+2      	; 0xbec <__addsf3x+0x9e>
     bea:	99 27       	eor	r25, r25
     bec:	ee 0f       	add	r30, r30
     bee:	97 95       	ror	r25
     bf0:	87 95       	ror	r24
     bf2:	08 95       	ret

00000bf4 <__divsf3>:
     bf4:	0c d0       	rcall	.+24     	; 0xc0e <__divsf3x>
     bf6:	e6 c0       	rjmp	.+460    	; 0xdc4 <__fp_round>
     bf8:	de d0       	rcall	.+444    	; 0xdb6 <__fp_pscB>
     bfa:	40 f0       	brcs	.+16     	; 0xc0c <__divsf3+0x18>
     bfc:	d5 d0       	rcall	.+426    	; 0xda8 <__fp_pscA>
     bfe:	30 f0       	brcs	.+12     	; 0xc0c <__divsf3+0x18>
     c00:	21 f4       	brne	.+8      	; 0xc0a <__divsf3+0x16>
     c02:	5f 3f       	cpi	r21, 0xFF	; 255
     c04:	19 f0       	breq	.+6      	; 0xc0c <__divsf3+0x18>
     c06:	c7 c0       	rjmp	.+398    	; 0xd96 <__fp_inf>
     c08:	51 11       	cpse	r21, r1
     c0a:	10 c1       	rjmp	.+544    	; 0xe2c <__fp_szero>
     c0c:	ca c0       	rjmp	.+404    	; 0xda2 <__fp_nan>

00000c0e <__divsf3x>:
     c0e:	eb d0       	rcall	.+470    	; 0xde6 <__fp_split3>
     c10:	98 f3       	brcs	.-26     	; 0xbf8 <__divsf3+0x4>

00000c12 <__divsf3_pse>:
     c12:	99 23       	and	r25, r25
     c14:	c9 f3       	breq	.-14     	; 0xc08 <__divsf3+0x14>
     c16:	55 23       	and	r21, r21
     c18:	b1 f3       	breq	.-20     	; 0xc06 <__divsf3+0x12>
     c1a:	95 1b       	sub	r25, r21
     c1c:	55 0b       	sbc	r21, r21
     c1e:	bb 27       	eor	r27, r27
     c20:	aa 27       	eor	r26, r26
     c22:	62 17       	cp	r22, r18
     c24:	73 07       	cpc	r23, r19
     c26:	84 07       	cpc	r24, r20
     c28:	38 f0       	brcs	.+14     	; 0xc38 <__divsf3_pse+0x26>
     c2a:	9f 5f       	subi	r25, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	22 0f       	add	r18, r18
     c30:	33 1f       	adc	r19, r19
     c32:	44 1f       	adc	r20, r20
     c34:	aa 1f       	adc	r26, r26
     c36:	a9 f3       	breq	.-22     	; 0xc22 <__divsf3_pse+0x10>
     c38:	33 d0       	rcall	.+102    	; 0xca0 <__divsf3_pse+0x8e>
     c3a:	0e 2e       	mov	r0, r30
     c3c:	3a f0       	brmi	.+14     	; 0xc4c <__divsf3_pse+0x3a>
     c3e:	e0 e8       	ldi	r30, 0x80	; 128
     c40:	30 d0       	rcall	.+96     	; 0xca2 <__divsf3_pse+0x90>
     c42:	91 50       	subi	r25, 0x01	; 1
     c44:	50 40       	sbci	r21, 0x00	; 0
     c46:	e6 95       	lsr	r30
     c48:	00 1c       	adc	r0, r0
     c4a:	ca f7       	brpl	.-14     	; 0xc3e <__divsf3_pse+0x2c>
     c4c:	29 d0       	rcall	.+82     	; 0xca0 <__divsf3_pse+0x8e>
     c4e:	fe 2f       	mov	r31, r30
     c50:	27 d0       	rcall	.+78     	; 0xca0 <__divsf3_pse+0x8e>
     c52:	66 0f       	add	r22, r22
     c54:	77 1f       	adc	r23, r23
     c56:	88 1f       	adc	r24, r24
     c58:	bb 1f       	adc	r27, r27
     c5a:	26 17       	cp	r18, r22
     c5c:	37 07       	cpc	r19, r23
     c5e:	48 07       	cpc	r20, r24
     c60:	ab 07       	cpc	r26, r27
     c62:	b0 e8       	ldi	r27, 0x80	; 128
     c64:	09 f0       	breq	.+2      	; 0xc68 <__divsf3_pse+0x56>
     c66:	bb 0b       	sbc	r27, r27
     c68:	80 2d       	mov	r24, r0
     c6a:	bf 01       	movw	r22, r30
     c6c:	ff 27       	eor	r31, r31
     c6e:	93 58       	subi	r25, 0x83	; 131
     c70:	5f 4f       	sbci	r21, 0xFF	; 255
     c72:	2a f0       	brmi	.+10     	; 0xc7e <__divsf3_pse+0x6c>
     c74:	9e 3f       	cpi	r25, 0xFE	; 254
     c76:	51 05       	cpc	r21, r1
     c78:	68 f0       	brcs	.+26     	; 0xc94 <__divsf3_pse+0x82>
     c7a:	8d c0       	rjmp	.+282    	; 0xd96 <__fp_inf>
     c7c:	d7 c0       	rjmp	.+430    	; 0xe2c <__fp_szero>
     c7e:	5f 3f       	cpi	r21, 0xFF	; 255
     c80:	ec f3       	brlt	.-6      	; 0xc7c <__divsf3_pse+0x6a>
     c82:	98 3e       	cpi	r25, 0xE8	; 232
     c84:	dc f3       	brlt	.-10     	; 0xc7c <__divsf3_pse+0x6a>
     c86:	86 95       	lsr	r24
     c88:	77 95       	ror	r23
     c8a:	67 95       	ror	r22
     c8c:	b7 95       	ror	r27
     c8e:	f7 95       	ror	r31
     c90:	9f 5f       	subi	r25, 0xFF	; 255
     c92:	c9 f7       	brne	.-14     	; 0xc86 <__divsf3_pse+0x74>
     c94:	88 0f       	add	r24, r24
     c96:	91 1d       	adc	r25, r1
     c98:	96 95       	lsr	r25
     c9a:	87 95       	ror	r24
     c9c:	97 f9       	bld	r25, 7
     c9e:	08 95       	ret
     ca0:	e1 e0       	ldi	r30, 0x01	; 1
     ca2:	66 0f       	add	r22, r22
     ca4:	77 1f       	adc	r23, r23
     ca6:	88 1f       	adc	r24, r24
     ca8:	bb 1f       	adc	r27, r27
     caa:	62 17       	cp	r22, r18
     cac:	73 07       	cpc	r23, r19
     cae:	84 07       	cpc	r24, r20
     cb0:	ba 07       	cpc	r27, r26
     cb2:	20 f0       	brcs	.+8      	; 0xcbc <__divsf3_pse+0xaa>
     cb4:	62 1b       	sub	r22, r18
     cb6:	73 0b       	sbc	r23, r19
     cb8:	84 0b       	sbc	r24, r20
     cba:	ba 0b       	sbc	r27, r26
     cbc:	ee 1f       	adc	r30, r30
     cbe:	88 f7       	brcc	.-30     	; 0xca2 <__divsf3_pse+0x90>
     cc0:	e0 95       	com	r30
     cc2:	08 95       	ret

00000cc4 <__fixunssfsi>:
     cc4:	98 d0       	rcall	.+304    	; 0xdf6 <__fp_splitA>
     cc6:	88 f0       	brcs	.+34     	; 0xcea <__fixunssfsi+0x26>
     cc8:	9f 57       	subi	r25, 0x7F	; 127
     cca:	90 f0       	brcs	.+36     	; 0xcf0 <__fixunssfsi+0x2c>
     ccc:	b9 2f       	mov	r27, r25
     cce:	99 27       	eor	r25, r25
     cd0:	b7 51       	subi	r27, 0x17	; 23
     cd2:	a0 f0       	brcs	.+40     	; 0xcfc <__fixunssfsi+0x38>
     cd4:	d1 f0       	breq	.+52     	; 0xd0a <__fixunssfsi+0x46>
     cd6:	66 0f       	add	r22, r22
     cd8:	77 1f       	adc	r23, r23
     cda:	88 1f       	adc	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	1a f0       	brmi	.+6      	; 0xce6 <__fixunssfsi+0x22>
     ce0:	ba 95       	dec	r27
     ce2:	c9 f7       	brne	.-14     	; 0xcd6 <__fixunssfsi+0x12>
     ce4:	12 c0       	rjmp	.+36     	; 0xd0a <__fixunssfsi+0x46>
     ce6:	b1 30       	cpi	r27, 0x01	; 1
     ce8:	81 f0       	breq	.+32     	; 0xd0a <__fixunssfsi+0x46>
     cea:	9f d0       	rcall	.+318    	; 0xe2a <__fp_zero>
     cec:	b1 e0       	ldi	r27, 0x01	; 1
     cee:	08 95       	ret
     cf0:	9c c0       	rjmp	.+312    	; 0xe2a <__fp_zero>
     cf2:	67 2f       	mov	r22, r23
     cf4:	78 2f       	mov	r23, r24
     cf6:	88 27       	eor	r24, r24
     cf8:	b8 5f       	subi	r27, 0xF8	; 248
     cfa:	39 f0       	breq	.+14     	; 0xd0a <__fixunssfsi+0x46>
     cfc:	b9 3f       	cpi	r27, 0xF9	; 249
     cfe:	cc f3       	brlt	.-14     	; 0xcf2 <__fixunssfsi+0x2e>
     d00:	86 95       	lsr	r24
     d02:	77 95       	ror	r23
     d04:	67 95       	ror	r22
     d06:	b3 95       	inc	r27
     d08:	d9 f7       	brne	.-10     	; 0xd00 <__fixunssfsi+0x3c>
     d0a:	3e f4       	brtc	.+14     	; 0xd1a <__fixunssfsi+0x56>
     d0c:	90 95       	com	r25
     d0e:	80 95       	com	r24
     d10:	70 95       	com	r23
     d12:	61 95       	neg	r22
     d14:	7f 4f       	sbci	r23, 0xFF	; 255
     d16:	8f 4f       	sbci	r24, 0xFF	; 255
     d18:	9f 4f       	sbci	r25, 0xFF	; 255
     d1a:	08 95       	ret

00000d1c <__floatunsisf>:
     d1c:	e8 94       	clt
     d1e:	09 c0       	rjmp	.+18     	; 0xd32 <__floatsisf+0x12>

00000d20 <__floatsisf>:
     d20:	97 fb       	bst	r25, 7
     d22:	3e f4       	brtc	.+14     	; 0xd32 <__floatsisf+0x12>
     d24:	90 95       	com	r25
     d26:	80 95       	com	r24
     d28:	70 95       	com	r23
     d2a:	61 95       	neg	r22
     d2c:	7f 4f       	sbci	r23, 0xFF	; 255
     d2e:	8f 4f       	sbci	r24, 0xFF	; 255
     d30:	9f 4f       	sbci	r25, 0xFF	; 255
     d32:	99 23       	and	r25, r25
     d34:	a9 f0       	breq	.+42     	; 0xd60 <__floatsisf+0x40>
     d36:	f9 2f       	mov	r31, r25
     d38:	96 e9       	ldi	r25, 0x96	; 150
     d3a:	bb 27       	eor	r27, r27
     d3c:	93 95       	inc	r25
     d3e:	f6 95       	lsr	r31
     d40:	87 95       	ror	r24
     d42:	77 95       	ror	r23
     d44:	67 95       	ror	r22
     d46:	b7 95       	ror	r27
     d48:	f1 11       	cpse	r31, r1
     d4a:	f8 cf       	rjmp	.-16     	; 0xd3c <__floatsisf+0x1c>
     d4c:	fa f4       	brpl	.+62     	; 0xd8c <__floatsisf+0x6c>
     d4e:	bb 0f       	add	r27, r27
     d50:	11 f4       	brne	.+4      	; 0xd56 <__floatsisf+0x36>
     d52:	60 ff       	sbrs	r22, 0
     d54:	1b c0       	rjmp	.+54     	; 0xd8c <__floatsisf+0x6c>
     d56:	6f 5f       	subi	r22, 0xFF	; 255
     d58:	7f 4f       	sbci	r23, 0xFF	; 255
     d5a:	8f 4f       	sbci	r24, 0xFF	; 255
     d5c:	9f 4f       	sbci	r25, 0xFF	; 255
     d5e:	16 c0       	rjmp	.+44     	; 0xd8c <__floatsisf+0x6c>
     d60:	88 23       	and	r24, r24
     d62:	11 f0       	breq	.+4      	; 0xd68 <__floatsisf+0x48>
     d64:	96 e9       	ldi	r25, 0x96	; 150
     d66:	11 c0       	rjmp	.+34     	; 0xd8a <__floatsisf+0x6a>
     d68:	77 23       	and	r23, r23
     d6a:	21 f0       	breq	.+8      	; 0xd74 <__floatsisf+0x54>
     d6c:	9e e8       	ldi	r25, 0x8E	; 142
     d6e:	87 2f       	mov	r24, r23
     d70:	76 2f       	mov	r23, r22
     d72:	05 c0       	rjmp	.+10     	; 0xd7e <__floatsisf+0x5e>
     d74:	66 23       	and	r22, r22
     d76:	71 f0       	breq	.+28     	; 0xd94 <__floatsisf+0x74>
     d78:	96 e8       	ldi	r25, 0x86	; 134
     d7a:	86 2f       	mov	r24, r22
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	2a f0       	brmi	.+10     	; 0xd8c <__floatsisf+0x6c>
     d82:	9a 95       	dec	r25
     d84:	66 0f       	add	r22, r22
     d86:	77 1f       	adc	r23, r23
     d88:	88 1f       	adc	r24, r24
     d8a:	da f7       	brpl	.-10     	; 0xd82 <__floatsisf+0x62>
     d8c:	88 0f       	add	r24, r24
     d8e:	96 95       	lsr	r25
     d90:	87 95       	ror	r24
     d92:	97 f9       	bld	r25, 7
     d94:	08 95       	ret

00000d96 <__fp_inf>:
     d96:	97 f9       	bld	r25, 7
     d98:	9f 67       	ori	r25, 0x7F	; 127
     d9a:	80 e8       	ldi	r24, 0x80	; 128
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	08 95       	ret

00000da2 <__fp_nan>:
     da2:	9f ef       	ldi	r25, 0xFF	; 255
     da4:	80 ec       	ldi	r24, 0xC0	; 192
     da6:	08 95       	ret

00000da8 <__fp_pscA>:
     da8:	00 24       	eor	r0, r0
     daa:	0a 94       	dec	r0
     dac:	16 16       	cp	r1, r22
     dae:	17 06       	cpc	r1, r23
     db0:	18 06       	cpc	r1, r24
     db2:	09 06       	cpc	r0, r25
     db4:	08 95       	ret

00000db6 <__fp_pscB>:
     db6:	00 24       	eor	r0, r0
     db8:	0a 94       	dec	r0
     dba:	12 16       	cp	r1, r18
     dbc:	13 06       	cpc	r1, r19
     dbe:	14 06       	cpc	r1, r20
     dc0:	05 06       	cpc	r0, r21
     dc2:	08 95       	ret

00000dc4 <__fp_round>:
     dc4:	09 2e       	mov	r0, r25
     dc6:	03 94       	inc	r0
     dc8:	00 0c       	add	r0, r0
     dca:	11 f4       	brne	.+4      	; 0xdd0 <__fp_round+0xc>
     dcc:	88 23       	and	r24, r24
     dce:	52 f0       	brmi	.+20     	; 0xde4 <__fp_round+0x20>
     dd0:	bb 0f       	add	r27, r27
     dd2:	40 f4       	brcc	.+16     	; 0xde4 <__fp_round+0x20>
     dd4:	bf 2b       	or	r27, r31
     dd6:	11 f4       	brne	.+4      	; 0xddc <__fp_round+0x18>
     dd8:	60 ff       	sbrs	r22, 0
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <__fp_round+0x20>
     ddc:	6f 5f       	subi	r22, 0xFF	; 255
     dde:	7f 4f       	sbci	r23, 0xFF	; 255
     de0:	8f 4f       	sbci	r24, 0xFF	; 255
     de2:	9f 4f       	sbci	r25, 0xFF	; 255
     de4:	08 95       	ret

00000de6 <__fp_split3>:
     de6:	57 fd       	sbrc	r21, 7
     de8:	90 58       	subi	r25, 0x80	; 128
     dea:	44 0f       	add	r20, r20
     dec:	55 1f       	adc	r21, r21
     dee:	59 f0       	breq	.+22     	; 0xe06 <__fp_splitA+0x10>
     df0:	5f 3f       	cpi	r21, 0xFF	; 255
     df2:	71 f0       	breq	.+28     	; 0xe10 <__fp_splitA+0x1a>
     df4:	47 95       	ror	r20

00000df6 <__fp_splitA>:
     df6:	88 0f       	add	r24, r24
     df8:	97 fb       	bst	r25, 7
     dfa:	99 1f       	adc	r25, r25
     dfc:	61 f0       	breq	.+24     	; 0xe16 <__fp_splitA+0x20>
     dfe:	9f 3f       	cpi	r25, 0xFF	; 255
     e00:	79 f0       	breq	.+30     	; 0xe20 <__fp_splitA+0x2a>
     e02:	87 95       	ror	r24
     e04:	08 95       	ret
     e06:	12 16       	cp	r1, r18
     e08:	13 06       	cpc	r1, r19
     e0a:	14 06       	cpc	r1, r20
     e0c:	55 1f       	adc	r21, r21
     e0e:	f2 cf       	rjmp	.-28     	; 0xdf4 <__fp_split3+0xe>
     e10:	46 95       	lsr	r20
     e12:	f1 df       	rcall	.-30     	; 0xdf6 <__fp_splitA>
     e14:	08 c0       	rjmp	.+16     	; 0xe26 <__fp_splitA+0x30>
     e16:	16 16       	cp	r1, r22
     e18:	17 06       	cpc	r1, r23
     e1a:	18 06       	cpc	r1, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	f1 cf       	rjmp	.-30     	; 0xe02 <__fp_splitA+0xc>
     e20:	86 95       	lsr	r24
     e22:	71 05       	cpc	r23, r1
     e24:	61 05       	cpc	r22, r1
     e26:	08 94       	sec
     e28:	08 95       	ret

00000e2a <__fp_zero>:
     e2a:	e8 94       	clt

00000e2c <__fp_szero>:
     e2c:	bb 27       	eor	r27, r27
     e2e:	66 27       	eor	r22, r22
     e30:	77 27       	eor	r23, r23
     e32:	cb 01       	movw	r24, r22
     e34:	97 f9       	bld	r25, 7
     e36:	08 95       	ret

00000e38 <__mulsf3>:
     e38:	0b d0       	rcall	.+22     	; 0xe50 <__mulsf3x>
     e3a:	c4 cf       	rjmp	.-120    	; 0xdc4 <__fp_round>
     e3c:	b5 df       	rcall	.-150    	; 0xda8 <__fp_pscA>
     e3e:	28 f0       	brcs	.+10     	; 0xe4a <__mulsf3+0x12>
     e40:	ba df       	rcall	.-140    	; 0xdb6 <__fp_pscB>
     e42:	18 f0       	brcs	.+6      	; 0xe4a <__mulsf3+0x12>
     e44:	95 23       	and	r25, r21
     e46:	09 f0       	breq	.+2      	; 0xe4a <__mulsf3+0x12>
     e48:	a6 cf       	rjmp	.-180    	; 0xd96 <__fp_inf>
     e4a:	ab cf       	rjmp	.-170    	; 0xda2 <__fp_nan>
     e4c:	11 24       	eor	r1, r1
     e4e:	ee cf       	rjmp	.-36     	; 0xe2c <__fp_szero>

00000e50 <__mulsf3x>:
     e50:	ca df       	rcall	.-108    	; 0xde6 <__fp_split3>
     e52:	a0 f3       	brcs	.-24     	; 0xe3c <__mulsf3+0x4>

00000e54 <__mulsf3_pse>:
     e54:	95 9f       	mul	r25, r21
     e56:	d1 f3       	breq	.-12     	; 0xe4c <__mulsf3+0x14>
     e58:	95 0f       	add	r25, r21
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	55 1f       	adc	r21, r21
     e5e:	62 9f       	mul	r22, r18
     e60:	f0 01       	movw	r30, r0
     e62:	72 9f       	mul	r23, r18
     e64:	bb 27       	eor	r27, r27
     e66:	f0 0d       	add	r31, r0
     e68:	b1 1d       	adc	r27, r1
     e6a:	63 9f       	mul	r22, r19
     e6c:	aa 27       	eor	r26, r26
     e6e:	f0 0d       	add	r31, r0
     e70:	b1 1d       	adc	r27, r1
     e72:	aa 1f       	adc	r26, r26
     e74:	64 9f       	mul	r22, r20
     e76:	66 27       	eor	r22, r22
     e78:	b0 0d       	add	r27, r0
     e7a:	a1 1d       	adc	r26, r1
     e7c:	66 1f       	adc	r22, r22
     e7e:	82 9f       	mul	r24, r18
     e80:	22 27       	eor	r18, r18
     e82:	b0 0d       	add	r27, r0
     e84:	a1 1d       	adc	r26, r1
     e86:	62 1f       	adc	r22, r18
     e88:	73 9f       	mul	r23, r19
     e8a:	b0 0d       	add	r27, r0
     e8c:	a1 1d       	adc	r26, r1
     e8e:	62 1f       	adc	r22, r18
     e90:	83 9f       	mul	r24, r19
     e92:	a0 0d       	add	r26, r0
     e94:	61 1d       	adc	r22, r1
     e96:	22 1f       	adc	r18, r18
     e98:	74 9f       	mul	r23, r20
     e9a:	33 27       	eor	r19, r19
     e9c:	a0 0d       	add	r26, r0
     e9e:	61 1d       	adc	r22, r1
     ea0:	23 1f       	adc	r18, r19
     ea2:	84 9f       	mul	r24, r20
     ea4:	60 0d       	add	r22, r0
     ea6:	21 1d       	adc	r18, r1
     ea8:	82 2f       	mov	r24, r18
     eaa:	76 2f       	mov	r23, r22
     eac:	6a 2f       	mov	r22, r26
     eae:	11 24       	eor	r1, r1
     eb0:	9f 57       	subi	r25, 0x7F	; 127
     eb2:	50 40       	sbci	r21, 0x00	; 0
     eb4:	8a f0       	brmi	.+34     	; 0xed8 <__mulsf3_pse+0x84>
     eb6:	e1 f0       	breq	.+56     	; 0xef0 <__mulsf3_pse+0x9c>
     eb8:	88 23       	and	r24, r24
     eba:	4a f0       	brmi	.+18     	; 0xece <__mulsf3_pse+0x7a>
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	bb 1f       	adc	r27, r27
     ec2:	66 1f       	adc	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	91 50       	subi	r25, 0x01	; 1
     eca:	50 40       	sbci	r21, 0x00	; 0
     ecc:	a9 f7       	brne	.-22     	; 0xeb8 <__mulsf3_pse+0x64>
     ece:	9e 3f       	cpi	r25, 0xFE	; 254
     ed0:	51 05       	cpc	r21, r1
     ed2:	70 f0       	brcs	.+28     	; 0xef0 <__mulsf3_pse+0x9c>
     ed4:	60 cf       	rjmp	.-320    	; 0xd96 <__fp_inf>
     ed6:	aa cf       	rjmp	.-172    	; 0xe2c <__fp_szero>
     ed8:	5f 3f       	cpi	r21, 0xFF	; 255
     eda:	ec f3       	brlt	.-6      	; 0xed6 <__mulsf3_pse+0x82>
     edc:	98 3e       	cpi	r25, 0xE8	; 232
     ede:	dc f3       	brlt	.-10     	; 0xed6 <__mulsf3_pse+0x82>
     ee0:	86 95       	lsr	r24
     ee2:	77 95       	ror	r23
     ee4:	67 95       	ror	r22
     ee6:	b7 95       	ror	r27
     ee8:	f7 95       	ror	r31
     eea:	e7 95       	ror	r30
     eec:	9f 5f       	subi	r25, 0xFF	; 255
     eee:	c1 f7       	brne	.-16     	; 0xee0 <__mulsf3_pse+0x8c>
     ef0:	fe 2b       	or	r31, r30
     ef2:	88 0f       	add	r24, r24
     ef4:	91 1d       	adc	r25, r1
     ef6:	96 95       	lsr	r25
     ef8:	87 95       	ror	r24
     efa:	97 f9       	bld	r25, 7
     efc:	08 95       	ret

00000efe <pow>:
     efe:	fa 01       	movw	r30, r20
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	30 96       	adiw	r30, 0x00	; 0
     f06:	21 05       	cpc	r18, r1
     f08:	31 05       	cpc	r19, r1
     f0a:	99 f1       	breq	.+102    	; 0xf72 <pow+0x74>
     f0c:	61 15       	cp	r22, r1
     f0e:	71 05       	cpc	r23, r1
     f10:	61 f4       	brne	.+24     	; 0xf2a <pow+0x2c>
     f12:	80 38       	cpi	r24, 0x80	; 128
     f14:	bf e3       	ldi	r27, 0x3F	; 63
     f16:	9b 07       	cpc	r25, r27
     f18:	49 f1       	breq	.+82     	; 0xf6c <pow+0x6e>
     f1a:	68 94       	set
     f1c:	90 38       	cpi	r25, 0x80	; 128
     f1e:	81 05       	cpc	r24, r1
     f20:	61 f0       	breq	.+24     	; 0xf3a <pow+0x3c>
     f22:	80 38       	cpi	r24, 0x80	; 128
     f24:	bf ef       	ldi	r27, 0xFF	; 255
     f26:	9b 07       	cpc	r25, r27
     f28:	41 f0       	breq	.+16     	; 0xf3a <pow+0x3c>
     f2a:	99 23       	and	r25, r25
     f2c:	42 f5       	brpl	.+80     	; 0xf7e <pow+0x80>
     f2e:	ff 3f       	cpi	r31, 0xFF	; 255
     f30:	e1 05       	cpc	r30, r1
     f32:	31 05       	cpc	r19, r1
     f34:	21 05       	cpc	r18, r1
     f36:	11 f1       	breq	.+68     	; 0xf7c <pow+0x7e>
     f38:	e8 94       	clt
     f3a:	08 94       	sec
     f3c:	e7 95       	ror	r30
     f3e:	d9 01       	movw	r26, r18
     f40:	aa 23       	and	r26, r26
     f42:	29 f4       	brne	.+10     	; 0xf4e <pow+0x50>
     f44:	ab 2f       	mov	r26, r27
     f46:	be 2f       	mov	r27, r30
     f48:	f8 5f       	subi	r31, 0xF8	; 248
     f4a:	d0 f3       	brcs	.-12     	; 0xf40 <pow+0x42>
     f4c:	10 c0       	rjmp	.+32     	; 0xf6e <pow+0x70>
     f4e:	ff 5f       	subi	r31, 0xFF	; 255
     f50:	70 f4       	brcc	.+28     	; 0xf6e <pow+0x70>
     f52:	a6 95       	lsr	r26
     f54:	e0 f7       	brcc	.-8      	; 0xf4e <pow+0x50>
     f56:	f7 39       	cpi	r31, 0x97	; 151
     f58:	50 f0       	brcs	.+20     	; 0xf6e <pow+0x70>
     f5a:	19 f0       	breq	.+6      	; 0xf62 <pow+0x64>
     f5c:	ff 3a       	cpi	r31, 0xAF	; 175
     f5e:	38 f4       	brcc	.+14     	; 0xf6e <pow+0x70>
     f60:	9f 77       	andi	r25, 0x7F	; 127
     f62:	9f 93       	push	r25
     f64:	0c d0       	rcall	.+24     	; 0xf7e <pow+0x80>
     f66:	0f 90       	pop	r0
     f68:	07 fc       	sbrc	r0, 7
     f6a:	90 58       	subi	r25, 0x80	; 128
     f6c:	08 95       	ret
     f6e:	3e f0       	brts	.+14     	; 0xf7e <pow+0x80>
     f70:	18 cf       	rjmp	.-464    	; 0xda2 <__fp_nan>
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	70 e0       	ldi	r23, 0x00	; 0
     f76:	80 e8       	ldi	r24, 0x80	; 128
     f78:	9f e3       	ldi	r25, 0x3F	; 63
     f7a:	08 95       	ret
     f7c:	4f e7       	ldi	r20, 0x7F	; 127
     f7e:	9f 77       	andi	r25, 0x7F	; 127
     f80:	5f 93       	push	r21
     f82:	4f 93       	push	r20
     f84:	3f 93       	push	r19
     f86:	2f 93       	push	r18
     f88:	55 d5       	rcall	.+2730   	; 0x1a34 <log>
     f8a:	2f 91       	pop	r18
     f8c:	3f 91       	pop	r19
     f8e:	4f 91       	pop	r20
     f90:	5f 91       	pop	r21
     f92:	52 df       	rcall	.-348    	; 0xe38 <__mulsf3>
     f94:	bc c4       	rjmp	.+2424   	; 0x190e <exp>

00000f96 <vfprintf>:
     f96:	ab e0       	ldi	r26, 0x0B	; 11
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e1 ed       	ldi	r30, 0xD1	; 209
     f9c:	f7 e0       	ldi	r31, 0x07	; 7
     f9e:	0c 94 9b 0d 	jmp	0x1b36	; 0x1b36 <__prologue_saves__>
     fa2:	3c 01       	movw	r6, r24
     fa4:	2b 01       	movw	r4, r22
     fa6:	5a 01       	movw	r10, r20
     fa8:	fc 01       	movw	r30, r24
     faa:	17 82       	std	Z+7, r1	; 0x07
     fac:	16 82       	std	Z+6, r1	; 0x06
     fae:	83 81       	ldd	r24, Z+3	; 0x03
     fb0:	81 fd       	sbrc	r24, 1
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <vfprintf+0x24>
     fb4:	6f ef       	ldi	r22, 0xFF	; 255
     fb6:	7f ef       	ldi	r23, 0xFF	; 255
     fb8:	c6 c1       	rjmp	.+908    	; 0x1346 <vfprintf+0x3b0>
     fba:	9a e0       	ldi	r25, 0x0A	; 10
     fbc:	89 2e       	mov	r8, r25
     fbe:	1e 01       	movw	r2, r28
     fc0:	08 94       	sec
     fc2:	21 1c       	adc	r2, r1
     fc4:	31 1c       	adc	r3, r1
     fc6:	f3 01       	movw	r30, r6
     fc8:	23 81       	ldd	r18, Z+3	; 0x03
     fca:	f2 01       	movw	r30, r4
     fcc:	23 fd       	sbrc	r18, 3
     fce:	85 91       	lpm	r24, Z+
     fd0:	23 ff       	sbrs	r18, 3
     fd2:	81 91       	ld	r24, Z+
     fd4:	2f 01       	movw	r4, r30
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <vfprintf+0x46>
     fda:	b2 c1       	rjmp	.+868    	; 0x1340 <vfprintf+0x3aa>
     fdc:	85 32       	cpi	r24, 0x25	; 37
     fde:	39 f4       	brne	.+14     	; 0xfee <vfprintf+0x58>
     fe0:	23 fd       	sbrc	r18, 3
     fe2:	85 91       	lpm	r24, Z+
     fe4:	23 ff       	sbrs	r18, 3
     fe6:	81 91       	ld	r24, Z+
     fe8:	2f 01       	movw	r4, r30
     fea:	85 32       	cpi	r24, 0x25	; 37
     fec:	29 f4       	brne	.+10     	; 0xff8 <vfprintf+0x62>
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	b3 01       	movw	r22, r6
     ff2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <fputc>
     ff6:	e7 cf       	rjmp	.-50     	; 0xfc6 <vfprintf+0x30>
     ff8:	98 2f       	mov	r25, r24
     ffa:	ff 24       	eor	r15, r15
     ffc:	ee 24       	eor	r14, r14
     ffe:	99 24       	eor	r9, r9
    1000:	ff e1       	ldi	r31, 0x1F	; 31
    1002:	ff 15       	cp	r31, r15
    1004:	d0 f0       	brcs	.+52     	; 0x103a <vfprintf+0xa4>
    1006:	9b 32       	cpi	r25, 0x2B	; 43
    1008:	69 f0       	breq	.+26     	; 0x1024 <vfprintf+0x8e>
    100a:	9c 32       	cpi	r25, 0x2C	; 44
    100c:	28 f4       	brcc	.+10     	; 0x1018 <vfprintf+0x82>
    100e:	90 32       	cpi	r25, 0x20	; 32
    1010:	59 f0       	breq	.+22     	; 0x1028 <vfprintf+0x92>
    1012:	93 32       	cpi	r25, 0x23	; 35
    1014:	91 f4       	brne	.+36     	; 0x103a <vfprintf+0xa4>
    1016:	0e c0       	rjmp	.+28     	; 0x1034 <vfprintf+0x9e>
    1018:	9d 32       	cpi	r25, 0x2D	; 45
    101a:	49 f0       	breq	.+18     	; 0x102e <vfprintf+0x98>
    101c:	90 33       	cpi	r25, 0x30	; 48
    101e:	69 f4       	brne	.+26     	; 0x103a <vfprintf+0xa4>
    1020:	41 e0       	ldi	r20, 0x01	; 1
    1022:	24 c0       	rjmp	.+72     	; 0x106c <vfprintf+0xd6>
    1024:	52 e0       	ldi	r21, 0x02	; 2
    1026:	f5 2a       	or	r15, r21
    1028:	84 e0       	ldi	r24, 0x04	; 4
    102a:	f8 2a       	or	r15, r24
    102c:	28 c0       	rjmp	.+80     	; 0x107e <vfprintf+0xe8>
    102e:	98 e0       	ldi	r25, 0x08	; 8
    1030:	f9 2a       	or	r15, r25
    1032:	25 c0       	rjmp	.+74     	; 0x107e <vfprintf+0xe8>
    1034:	e0 e1       	ldi	r30, 0x10	; 16
    1036:	fe 2a       	or	r15, r30
    1038:	22 c0       	rjmp	.+68     	; 0x107e <vfprintf+0xe8>
    103a:	f7 fc       	sbrc	r15, 7
    103c:	29 c0       	rjmp	.+82     	; 0x1090 <vfprintf+0xfa>
    103e:	89 2f       	mov	r24, r25
    1040:	80 53       	subi	r24, 0x30	; 48
    1042:	8a 30       	cpi	r24, 0x0A	; 10
    1044:	70 f4       	brcc	.+28     	; 0x1062 <vfprintf+0xcc>
    1046:	f6 fe       	sbrs	r15, 6
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <vfprintf+0xbe>
    104a:	98 9c       	mul	r9, r8
    104c:	90 2c       	mov	r9, r0
    104e:	11 24       	eor	r1, r1
    1050:	98 0e       	add	r9, r24
    1052:	15 c0       	rjmp	.+42     	; 0x107e <vfprintf+0xe8>
    1054:	e8 9c       	mul	r14, r8
    1056:	e0 2c       	mov	r14, r0
    1058:	11 24       	eor	r1, r1
    105a:	e8 0e       	add	r14, r24
    105c:	f0 e2       	ldi	r31, 0x20	; 32
    105e:	ff 2a       	or	r15, r31
    1060:	0e c0       	rjmp	.+28     	; 0x107e <vfprintf+0xe8>
    1062:	9e 32       	cpi	r25, 0x2E	; 46
    1064:	29 f4       	brne	.+10     	; 0x1070 <vfprintf+0xda>
    1066:	f6 fc       	sbrc	r15, 6
    1068:	6b c1       	rjmp	.+726    	; 0x1340 <vfprintf+0x3aa>
    106a:	40 e4       	ldi	r20, 0x40	; 64
    106c:	f4 2a       	or	r15, r20
    106e:	07 c0       	rjmp	.+14     	; 0x107e <vfprintf+0xe8>
    1070:	9c 36       	cpi	r25, 0x6C	; 108
    1072:	19 f4       	brne	.+6      	; 0x107a <vfprintf+0xe4>
    1074:	50 e8       	ldi	r21, 0x80	; 128
    1076:	f5 2a       	or	r15, r21
    1078:	02 c0       	rjmp	.+4      	; 0x107e <vfprintf+0xe8>
    107a:	98 36       	cpi	r25, 0x68	; 104
    107c:	49 f4       	brne	.+18     	; 0x1090 <vfprintf+0xfa>
    107e:	f2 01       	movw	r30, r4
    1080:	23 fd       	sbrc	r18, 3
    1082:	95 91       	lpm	r25, Z+
    1084:	23 ff       	sbrs	r18, 3
    1086:	91 91       	ld	r25, Z+
    1088:	2f 01       	movw	r4, r30
    108a:	99 23       	and	r25, r25
    108c:	09 f0       	breq	.+2      	; 0x1090 <vfprintf+0xfa>
    108e:	b8 cf       	rjmp	.-144    	; 0x1000 <vfprintf+0x6a>
    1090:	89 2f       	mov	r24, r25
    1092:	85 54       	subi	r24, 0x45	; 69
    1094:	83 30       	cpi	r24, 0x03	; 3
    1096:	18 f0       	brcs	.+6      	; 0x109e <vfprintf+0x108>
    1098:	80 52       	subi	r24, 0x20	; 32
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	38 f4       	brcc	.+14     	; 0x10ac <vfprintf+0x116>
    109e:	44 e0       	ldi	r20, 0x04	; 4
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	a4 0e       	add	r10, r20
    10a4:	b5 1e       	adc	r11, r21
    10a6:	5f e3       	ldi	r21, 0x3F	; 63
    10a8:	59 83       	std	Y+1, r21	; 0x01
    10aa:	0f c0       	rjmp	.+30     	; 0x10ca <vfprintf+0x134>
    10ac:	93 36       	cpi	r25, 0x63	; 99
    10ae:	31 f0       	breq	.+12     	; 0x10bc <vfprintf+0x126>
    10b0:	93 37       	cpi	r25, 0x73	; 115
    10b2:	79 f0       	breq	.+30     	; 0x10d2 <vfprintf+0x13c>
    10b4:	93 35       	cpi	r25, 0x53	; 83
    10b6:	09 f0       	breq	.+2      	; 0x10ba <vfprintf+0x124>
    10b8:	56 c0       	rjmp	.+172    	; 0x1166 <vfprintf+0x1d0>
    10ba:	20 c0       	rjmp	.+64     	; 0x10fc <vfprintf+0x166>
    10bc:	f5 01       	movw	r30, r10
    10be:	80 81       	ld	r24, Z
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	42 e0       	ldi	r20, 0x02	; 2
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	a4 0e       	add	r10, r20
    10c8:	b5 1e       	adc	r11, r21
    10ca:	61 01       	movw	r12, r2
    10cc:	01 e0       	ldi	r16, 0x01	; 1
    10ce:	10 e0       	ldi	r17, 0x00	; 0
    10d0:	12 c0       	rjmp	.+36     	; 0x10f6 <vfprintf+0x160>
    10d2:	f5 01       	movw	r30, r10
    10d4:	c0 80       	ld	r12, Z
    10d6:	d1 80       	ldd	r13, Z+1	; 0x01
    10d8:	f6 fc       	sbrc	r15, 6
    10da:	03 c0       	rjmp	.+6      	; 0x10e2 <vfprintf+0x14c>
    10dc:	6f ef       	ldi	r22, 0xFF	; 255
    10de:	7f ef       	ldi	r23, 0xFF	; 255
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <vfprintf+0x150>
    10e2:	69 2d       	mov	r22, r9
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	42 e0       	ldi	r20, 0x02	; 2
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	a4 0e       	add	r10, r20
    10ec:	b5 1e       	adc	r11, r21
    10ee:	c6 01       	movw	r24, r12
    10f0:	0e 94 ed 0b 	call	0x17da	; 0x17da <strnlen>
    10f4:	8c 01       	movw	r16, r24
    10f6:	5f e7       	ldi	r21, 0x7F	; 127
    10f8:	f5 22       	and	r15, r21
    10fa:	14 c0       	rjmp	.+40     	; 0x1124 <vfprintf+0x18e>
    10fc:	f5 01       	movw	r30, r10
    10fe:	c0 80       	ld	r12, Z
    1100:	d1 80       	ldd	r13, Z+1	; 0x01
    1102:	f6 fc       	sbrc	r15, 6
    1104:	03 c0       	rjmp	.+6      	; 0x110c <vfprintf+0x176>
    1106:	6f ef       	ldi	r22, 0xFF	; 255
    1108:	7f ef       	ldi	r23, 0xFF	; 255
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <vfprintf+0x17a>
    110c:	69 2d       	mov	r22, r9
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	42 e0       	ldi	r20, 0x02	; 2
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	a4 0e       	add	r10, r20
    1116:	b5 1e       	adc	r11, r21
    1118:	c6 01       	movw	r24, r12
    111a:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <strnlen_P>
    111e:	8c 01       	movw	r16, r24
    1120:	50 e8       	ldi	r21, 0x80	; 128
    1122:	f5 2a       	or	r15, r21
    1124:	f3 fe       	sbrs	r15, 3
    1126:	07 c0       	rjmp	.+14     	; 0x1136 <vfprintf+0x1a0>
    1128:	1a c0       	rjmp	.+52     	; 0x115e <vfprintf+0x1c8>
    112a:	80 e2       	ldi	r24, 0x20	; 32
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	b3 01       	movw	r22, r6
    1130:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <fputc>
    1134:	ea 94       	dec	r14
    1136:	8e 2d       	mov	r24, r14
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	08 17       	cp	r16, r24
    113c:	19 07       	cpc	r17, r25
    113e:	a8 f3       	brcs	.-22     	; 0x112a <vfprintf+0x194>
    1140:	0e c0       	rjmp	.+28     	; 0x115e <vfprintf+0x1c8>
    1142:	f6 01       	movw	r30, r12
    1144:	f7 fc       	sbrc	r15, 7
    1146:	85 91       	lpm	r24, Z+
    1148:	f7 fe       	sbrs	r15, 7
    114a:	81 91       	ld	r24, Z+
    114c:	6f 01       	movw	r12, r30
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	b3 01       	movw	r22, r6
    1152:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <fputc>
    1156:	e1 10       	cpse	r14, r1
    1158:	ea 94       	dec	r14
    115a:	01 50       	subi	r16, 0x01	; 1
    115c:	10 40       	sbci	r17, 0x00	; 0
    115e:	01 15       	cp	r16, r1
    1160:	11 05       	cpc	r17, r1
    1162:	79 f7       	brne	.-34     	; 0x1142 <vfprintf+0x1ac>
    1164:	ea c0       	rjmp	.+468    	; 0x133a <vfprintf+0x3a4>
    1166:	94 36       	cpi	r25, 0x64	; 100
    1168:	11 f0       	breq	.+4      	; 0x116e <vfprintf+0x1d8>
    116a:	99 36       	cpi	r25, 0x69	; 105
    116c:	69 f5       	brne	.+90     	; 0x11c8 <vfprintf+0x232>
    116e:	f7 fe       	sbrs	r15, 7
    1170:	08 c0       	rjmp	.+16     	; 0x1182 <vfprintf+0x1ec>
    1172:	f5 01       	movw	r30, r10
    1174:	20 81       	ld	r18, Z
    1176:	31 81       	ldd	r19, Z+1	; 0x01
    1178:	42 81       	ldd	r20, Z+2	; 0x02
    117a:	53 81       	ldd	r21, Z+3	; 0x03
    117c:	84 e0       	ldi	r24, 0x04	; 4
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0a c0       	rjmp	.+20     	; 0x1196 <vfprintf+0x200>
    1182:	f5 01       	movw	r30, r10
    1184:	80 81       	ld	r24, Z
    1186:	91 81       	ldd	r25, Z+1	; 0x01
    1188:	9c 01       	movw	r18, r24
    118a:	44 27       	eor	r20, r20
    118c:	37 fd       	sbrc	r19, 7
    118e:	40 95       	com	r20
    1190:	54 2f       	mov	r21, r20
    1192:	82 e0       	ldi	r24, 0x02	; 2
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a8 0e       	add	r10, r24
    1198:	b9 1e       	adc	r11, r25
    119a:	9f e6       	ldi	r25, 0x6F	; 111
    119c:	f9 22       	and	r15, r25
    119e:	57 ff       	sbrs	r21, 7
    11a0:	09 c0       	rjmp	.+18     	; 0x11b4 <vfprintf+0x21e>
    11a2:	50 95       	com	r21
    11a4:	40 95       	com	r20
    11a6:	30 95       	com	r19
    11a8:	21 95       	neg	r18
    11aa:	3f 4f       	sbci	r19, 0xFF	; 255
    11ac:	4f 4f       	sbci	r20, 0xFF	; 255
    11ae:	5f 4f       	sbci	r21, 0xFF	; 255
    11b0:	e0 e8       	ldi	r30, 0x80	; 128
    11b2:	fe 2a       	or	r15, r30
    11b4:	ca 01       	movw	r24, r20
    11b6:	b9 01       	movw	r22, r18
    11b8:	a1 01       	movw	r20, r2
    11ba:	2a e0       	ldi	r18, 0x0A	; 10
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	0e 94 24 0c 	call	0x1848	; 0x1848 <__ultoa_invert>
    11c2:	d8 2e       	mov	r13, r24
    11c4:	d2 18       	sub	r13, r2
    11c6:	40 c0       	rjmp	.+128    	; 0x1248 <vfprintf+0x2b2>
    11c8:	95 37       	cpi	r25, 0x75	; 117
    11ca:	29 f4       	brne	.+10     	; 0x11d6 <vfprintf+0x240>
    11cc:	1f 2d       	mov	r17, r15
    11ce:	1f 7e       	andi	r17, 0xEF	; 239
    11d0:	2a e0       	ldi	r18, 0x0A	; 10
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	1d c0       	rjmp	.+58     	; 0x1210 <vfprintf+0x27a>
    11d6:	1f 2d       	mov	r17, r15
    11d8:	19 7f       	andi	r17, 0xF9	; 249
    11da:	9f 36       	cpi	r25, 0x6F	; 111
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <vfprintf+0x260>
    11de:	90 37       	cpi	r25, 0x70	; 112
    11e0:	20 f4       	brcc	.+8      	; 0x11ea <vfprintf+0x254>
    11e2:	98 35       	cpi	r25, 0x58	; 88
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <vfprintf+0x252>
    11e6:	ac c0       	rjmp	.+344    	; 0x1340 <vfprintf+0x3aa>
    11e8:	0f c0       	rjmp	.+30     	; 0x1208 <vfprintf+0x272>
    11ea:	90 37       	cpi	r25, 0x70	; 112
    11ec:	39 f0       	breq	.+14     	; 0x11fc <vfprintf+0x266>
    11ee:	98 37       	cpi	r25, 0x78	; 120
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <vfprintf+0x25e>
    11f2:	a6 c0       	rjmp	.+332    	; 0x1340 <vfprintf+0x3aa>
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <vfprintf+0x268>
    11f6:	28 e0       	ldi	r18, 0x08	; 8
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	0a c0       	rjmp	.+20     	; 0x1210 <vfprintf+0x27a>
    11fc:	10 61       	ori	r17, 0x10	; 16
    11fe:	14 fd       	sbrc	r17, 4
    1200:	14 60       	ori	r17, 0x04	; 4
    1202:	20 e1       	ldi	r18, 0x10	; 16
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	04 c0       	rjmp	.+8      	; 0x1210 <vfprintf+0x27a>
    1208:	14 fd       	sbrc	r17, 4
    120a:	16 60       	ori	r17, 0x06	; 6
    120c:	20 e1       	ldi	r18, 0x10	; 16
    120e:	32 e0       	ldi	r19, 0x02	; 2
    1210:	17 ff       	sbrs	r17, 7
    1212:	08 c0       	rjmp	.+16     	; 0x1224 <vfprintf+0x28e>
    1214:	f5 01       	movw	r30, r10
    1216:	60 81       	ld	r22, Z
    1218:	71 81       	ldd	r23, Z+1	; 0x01
    121a:	82 81       	ldd	r24, Z+2	; 0x02
    121c:	93 81       	ldd	r25, Z+3	; 0x03
    121e:	44 e0       	ldi	r20, 0x04	; 4
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	08 c0       	rjmp	.+16     	; 0x1234 <vfprintf+0x29e>
    1224:	f5 01       	movw	r30, r10
    1226:	80 81       	ld	r24, Z
    1228:	91 81       	ldd	r25, Z+1	; 0x01
    122a:	bc 01       	movw	r22, r24
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	42 e0       	ldi	r20, 0x02	; 2
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	a4 0e       	add	r10, r20
    1236:	b5 1e       	adc	r11, r21
    1238:	a1 01       	movw	r20, r2
    123a:	0e 94 24 0c 	call	0x1848	; 0x1848 <__ultoa_invert>
    123e:	d8 2e       	mov	r13, r24
    1240:	d2 18       	sub	r13, r2
    1242:	8f e7       	ldi	r24, 0x7F	; 127
    1244:	f8 2e       	mov	r15, r24
    1246:	f1 22       	and	r15, r17
    1248:	f6 fe       	sbrs	r15, 6
    124a:	0b c0       	rjmp	.+22     	; 0x1262 <vfprintf+0x2cc>
    124c:	5e ef       	ldi	r21, 0xFE	; 254
    124e:	f5 22       	and	r15, r21
    1250:	d9 14       	cp	r13, r9
    1252:	38 f4       	brcc	.+14     	; 0x1262 <vfprintf+0x2cc>
    1254:	f4 fe       	sbrs	r15, 4
    1256:	07 c0       	rjmp	.+14     	; 0x1266 <vfprintf+0x2d0>
    1258:	f2 fc       	sbrc	r15, 2
    125a:	05 c0       	rjmp	.+10     	; 0x1266 <vfprintf+0x2d0>
    125c:	8f ee       	ldi	r24, 0xEF	; 239
    125e:	f8 22       	and	r15, r24
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <vfprintf+0x2d0>
    1262:	1d 2d       	mov	r17, r13
    1264:	01 c0       	rjmp	.+2      	; 0x1268 <vfprintf+0x2d2>
    1266:	19 2d       	mov	r17, r9
    1268:	f4 fe       	sbrs	r15, 4
    126a:	0d c0       	rjmp	.+26     	; 0x1286 <vfprintf+0x2f0>
    126c:	fe 01       	movw	r30, r28
    126e:	ed 0d       	add	r30, r13
    1270:	f1 1d       	adc	r31, r1
    1272:	80 81       	ld	r24, Z
    1274:	80 33       	cpi	r24, 0x30	; 48
    1276:	19 f4       	brne	.+6      	; 0x127e <vfprintf+0x2e8>
    1278:	99 ee       	ldi	r25, 0xE9	; 233
    127a:	f9 22       	and	r15, r25
    127c:	08 c0       	rjmp	.+16     	; 0x128e <vfprintf+0x2f8>
    127e:	1f 5f       	subi	r17, 0xFF	; 255
    1280:	f2 fe       	sbrs	r15, 2
    1282:	05 c0       	rjmp	.+10     	; 0x128e <vfprintf+0x2f8>
    1284:	03 c0       	rjmp	.+6      	; 0x128c <vfprintf+0x2f6>
    1286:	8f 2d       	mov	r24, r15
    1288:	86 78       	andi	r24, 0x86	; 134
    128a:	09 f0       	breq	.+2      	; 0x128e <vfprintf+0x2f8>
    128c:	1f 5f       	subi	r17, 0xFF	; 255
    128e:	0f 2d       	mov	r16, r15
    1290:	f3 fc       	sbrc	r15, 3
    1292:	14 c0       	rjmp	.+40     	; 0x12bc <vfprintf+0x326>
    1294:	f0 fe       	sbrs	r15, 0
    1296:	0f c0       	rjmp	.+30     	; 0x12b6 <vfprintf+0x320>
    1298:	1e 15       	cp	r17, r14
    129a:	10 f0       	brcs	.+4      	; 0x12a0 <vfprintf+0x30a>
    129c:	9d 2c       	mov	r9, r13
    129e:	0b c0       	rjmp	.+22     	; 0x12b6 <vfprintf+0x320>
    12a0:	9d 2c       	mov	r9, r13
    12a2:	9e 0c       	add	r9, r14
    12a4:	91 1a       	sub	r9, r17
    12a6:	1e 2d       	mov	r17, r14
    12a8:	06 c0       	rjmp	.+12     	; 0x12b6 <vfprintf+0x320>
    12aa:	80 e2       	ldi	r24, 0x20	; 32
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	b3 01       	movw	r22, r6
    12b0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <fputc>
    12b4:	1f 5f       	subi	r17, 0xFF	; 255
    12b6:	1e 15       	cp	r17, r14
    12b8:	c0 f3       	brcs	.-16     	; 0x12aa <vfprintf+0x314>
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <vfprintf+0x32e>
    12bc:	1e 15       	cp	r17, r14
    12be:	10 f4       	brcc	.+4      	; 0x12c4 <vfprintf+0x32e>
    12c0:	e1 1a       	sub	r14, r17
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <vfprintf+0x330>
    12c4:	ee 24       	eor	r14, r14
    12c6:	04 ff       	sbrs	r16, 4
    12c8:	0f c0       	rjmp	.+30     	; 0x12e8 <vfprintf+0x352>
    12ca:	80 e3       	ldi	r24, 0x30	; 48
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	b3 01       	movw	r22, r6
    12d0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <fputc>
    12d4:	02 ff       	sbrs	r16, 2
    12d6:	1d c0       	rjmp	.+58     	; 0x1312 <vfprintf+0x37c>
    12d8:	01 fd       	sbrc	r16, 1
    12da:	03 c0       	rjmp	.+6      	; 0x12e2 <vfprintf+0x34c>
    12dc:	88 e7       	ldi	r24, 0x78	; 120
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <vfprintf+0x368>
    12e2:	88 e5       	ldi	r24, 0x58	; 88
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0b c0       	rjmp	.+22     	; 0x12fe <vfprintf+0x368>
    12e8:	80 2f       	mov	r24, r16
    12ea:	86 78       	andi	r24, 0x86	; 134
    12ec:	91 f0       	breq	.+36     	; 0x1312 <vfprintf+0x37c>
    12ee:	01 ff       	sbrs	r16, 1
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <vfprintf+0x360>
    12f2:	8b e2       	ldi	r24, 0x2B	; 43
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <vfprintf+0x362>
    12f6:	80 e2       	ldi	r24, 0x20	; 32
    12f8:	f7 fc       	sbrc	r15, 7
    12fa:	8d e2       	ldi	r24, 0x2D	; 45
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	b3 01       	movw	r22, r6
    1300:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <fputc>
    1304:	06 c0       	rjmp	.+12     	; 0x1312 <vfprintf+0x37c>
    1306:	80 e3       	ldi	r24, 0x30	; 48
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	b3 01       	movw	r22, r6
    130c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <fputc>
    1310:	9a 94       	dec	r9
    1312:	d9 14       	cp	r13, r9
    1314:	c0 f3       	brcs	.-16     	; 0x1306 <vfprintf+0x370>
    1316:	da 94       	dec	r13
    1318:	f1 01       	movw	r30, r2
    131a:	ed 0d       	add	r30, r13
    131c:	f1 1d       	adc	r31, r1
    131e:	80 81       	ld	r24, Z
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	b3 01       	movw	r22, r6
    1324:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <fputc>
    1328:	dd 20       	and	r13, r13
    132a:	a9 f7       	brne	.-22     	; 0x1316 <vfprintf+0x380>
    132c:	06 c0       	rjmp	.+12     	; 0x133a <vfprintf+0x3a4>
    132e:	80 e2       	ldi	r24, 0x20	; 32
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	b3 01       	movw	r22, r6
    1334:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <fputc>
    1338:	ea 94       	dec	r14
    133a:	ee 20       	and	r14, r14
    133c:	c1 f7       	brne	.-16     	; 0x132e <vfprintf+0x398>
    133e:	43 ce       	rjmp	.-890    	; 0xfc6 <vfprintf+0x30>
    1340:	f3 01       	movw	r30, r6
    1342:	66 81       	ldd	r22, Z+6	; 0x06
    1344:	77 81       	ldd	r23, Z+7	; 0x07
    1346:	cb 01       	movw	r24, r22
    1348:	2b 96       	adiw	r28, 0x0b	; 11
    134a:	e2 e1       	ldi	r30, 0x12	; 18
    134c:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <__epilogue_restores__>

00001350 <dtoa_prf>:
    1350:	a9 e0       	ldi	r26, 0x09	; 9
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	ee ea       	ldi	r30, 0xAE	; 174
    1356:	f9 e0       	ldi	r31, 0x09	; 9
    1358:	0c 94 9f 0d 	jmp	0x1b3e	; 0x1b3e <__prologue_saves__+0x8>
    135c:	6a 01       	movw	r12, r20
    135e:	12 2f       	mov	r17, r18
    1360:	a0 2e       	mov	r10, r16
    1362:	be 2c       	mov	r11, r14
    1364:	2b e3       	ldi	r18, 0x3B	; 59
    1366:	20 17       	cp	r18, r16
    1368:	18 f4       	brcc	.+6      	; 0x1370 <dtoa_prf+0x20>
    136a:	2c e3       	ldi	r18, 0x3C	; 60
    136c:	92 2e       	mov	r9, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <dtoa_prf+0x24>
    1370:	90 2e       	mov	r9, r16
    1372:	93 94       	inc	r9
    1374:	ae 01       	movw	r20, r28
    1376:	4f 5f       	subi	r20, 0xFF	; 255
    1378:	5f 4f       	sbci	r21, 0xFF	; 255
    137a:	27 e0       	ldi	r18, 0x07	; 7
    137c:	09 2d       	mov	r16, r9
    137e:	0e 94 0a 0b 	call	0x1614	; 0x1614 <__ftoa_engine>
    1382:	bc 01       	movw	r22, r24
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	e8 2e       	mov	r14, r24
    1388:	ff 24       	eor	r15, r15
    138a:	c7 01       	movw	r24, r14
    138c:	89 70       	andi	r24, 0x09	; 9
    138e:	90 70       	andi	r25, 0x00	; 0
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	11 f4       	brne	.+4      	; 0x1398 <dtoa_prf+0x48>
    1394:	ad e2       	ldi	r26, 0x2D	; 45
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <dtoa_prf+0x5a>
    1398:	b1 fe       	sbrs	r11, 1
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <dtoa_prf+0x50>
    139c:	ab e2       	ldi	r26, 0x2B	; 43
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <dtoa_prf+0x5a>
    13a0:	b0 fc       	sbrc	r11, 0
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <dtoa_prf+0x58>
    13a4:	a0 e0       	ldi	r26, 0x00	; 0
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <dtoa_prf+0x5a>
    13a8:	a0 e2       	ldi	r26, 0x20	; 32
    13aa:	e3 fe       	sbrs	r14, 3
    13ac:	3b c0       	rjmp	.+118    	; 0x1424 <dtoa_prf+0xd4>
    13ae:	aa 23       	and	r26, r26
    13b0:	11 f4       	brne	.+4      	; 0x13b6 <dtoa_prf+0x66>
    13b2:	23 e0       	ldi	r18, 0x03	; 3
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <dtoa_prf+0x68>
    13b6:	24 e0       	ldi	r18, 0x04	; 4
    13b8:	21 17       	cp	r18, r17
    13ba:	10 f0       	brcs	.+4      	; 0x13c0 <dtoa_prf+0x70>
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <dtoa_prf+0x74>
    13c0:	12 1b       	sub	r17, r18
    13c2:	21 2f       	mov	r18, r17
    13c4:	eb 2c       	mov	r14, r11
    13c6:	b4 fe       	sbrs	r11, 4
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <dtoa_prf+0x7e>
    13ca:	32 2f       	mov	r19, r18
    13cc:	0a c0       	rjmp	.+20     	; 0x13e2 <dtoa_prf+0x92>
    13ce:	f6 01       	movw	r30, r12
    13d0:	32 2f       	mov	r19, r18
    13d2:	80 e2       	ldi	r24, 0x20	; 32
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <dtoa_prf+0x8a>
    13d6:	81 93       	st	Z+, r24
    13d8:	31 50       	subi	r19, 0x01	; 1
    13da:	33 23       	and	r19, r19
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <dtoa_prf+0x86>
    13de:	c2 0e       	add	r12, r18
    13e0:	d1 1c       	adc	r13, r1
    13e2:	aa 23       	and	r26, r26
    13e4:	19 f0       	breq	.+6      	; 0x13ec <dtoa_prf+0x9c>
    13e6:	f6 01       	movw	r30, r12
    13e8:	a1 93       	st	Z+, r26
    13ea:	6f 01       	movw	r12, r30
    13ec:	f6 01       	movw	r30, r12
    13ee:	31 96       	adiw	r30, 0x01	; 1
    13f0:	e2 fe       	sbrs	r14, 2
    13f2:	05 c0       	rjmp	.+10     	; 0x13fe <dtoa_prf+0xae>
    13f4:	9e e4       	ldi	r25, 0x4E	; 78
    13f6:	d6 01       	movw	r26, r12
    13f8:	9c 93       	st	X, r25
    13fa:	81 e4       	ldi	r24, 0x41	; 65
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <dtoa_prf+0xb6>
    13fe:	9e e6       	ldi	r25, 0x6E	; 110
    1400:	d6 01       	movw	r26, r12
    1402:	9c 93       	st	X, r25
    1404:	81 e6       	ldi	r24, 0x61	; 97
    1406:	11 96       	adiw	r26, 0x01	; 1
    1408:	8c 93       	st	X, r24
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	32 96       	adiw	r30, 0x02	; 2
    140e:	df 01       	movw	r26, r30
    1410:	83 2f       	mov	r24, r19
    1412:	90 e2       	ldi	r25, 0x20	; 32
    1414:	02 c0       	rjmp	.+4      	; 0x141a <dtoa_prf+0xca>
    1416:	9d 93       	st	X+, r25
    1418:	81 50       	subi	r24, 0x01	; 1
    141a:	88 23       	and	r24, r24
    141c:	e1 f7       	brne	.-8      	; 0x1416 <dtoa_prf+0xc6>
    141e:	e3 0f       	add	r30, r19
    1420:	f1 1d       	adc	r31, r1
    1422:	40 c0       	rjmp	.+128    	; 0x14a4 <dtoa_prf+0x154>
    1424:	e2 fe       	sbrs	r14, 2
    1426:	42 c0       	rjmp	.+132    	; 0x14ac <dtoa_prf+0x15c>
    1428:	aa 23       	and	r26, r26
    142a:	11 f4       	brne	.+4      	; 0x1430 <dtoa_prf+0xe0>
    142c:	23 e0       	ldi	r18, 0x03	; 3
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <dtoa_prf+0xe2>
    1430:	24 e0       	ldi	r18, 0x04	; 4
    1432:	21 17       	cp	r18, r17
    1434:	10 f0       	brcs	.+4      	; 0x143a <dtoa_prf+0xea>
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	02 c0       	rjmp	.+4      	; 0x143e <dtoa_prf+0xee>
    143a:	12 1b       	sub	r17, r18
    143c:	21 2f       	mov	r18, r17
    143e:	eb 2c       	mov	r14, r11
    1440:	b4 fe       	sbrs	r11, 4
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <dtoa_prf+0xf8>
    1444:	92 2f       	mov	r25, r18
    1446:	0a c0       	rjmp	.+20     	; 0x145c <dtoa_prf+0x10c>
    1448:	f6 01       	movw	r30, r12
    144a:	92 2f       	mov	r25, r18
    144c:	80 e2       	ldi	r24, 0x20	; 32
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <dtoa_prf+0x104>
    1450:	81 93       	st	Z+, r24
    1452:	91 50       	subi	r25, 0x01	; 1
    1454:	99 23       	and	r25, r25
    1456:	e1 f7       	brne	.-8      	; 0x1450 <dtoa_prf+0x100>
    1458:	c2 0e       	add	r12, r18
    145a:	d1 1c       	adc	r13, r1
    145c:	aa 23       	and	r26, r26
    145e:	19 f0       	breq	.+6      	; 0x1466 <dtoa_prf+0x116>
    1460:	f6 01       	movw	r30, r12
    1462:	a1 93       	st	Z+, r26
    1464:	6f 01       	movw	r12, r30
    1466:	f6 01       	movw	r30, r12
    1468:	31 96       	adiw	r30, 0x01	; 1
    146a:	e2 fe       	sbrs	r14, 2
    146c:	08 c0       	rjmp	.+16     	; 0x147e <dtoa_prf+0x12e>
    146e:	89 e4       	ldi	r24, 0x49	; 73
    1470:	d6 01       	movw	r26, r12
    1472:	8c 93       	st	X, r24
    1474:	8e e4       	ldi	r24, 0x4E	; 78
    1476:	11 96       	adiw	r26, 0x01	; 1
    1478:	8c 93       	st	X, r24
    147a:	86 e4       	ldi	r24, 0x46	; 70
    147c:	07 c0       	rjmp	.+14     	; 0x148c <dtoa_prf+0x13c>
    147e:	89 e6       	ldi	r24, 0x69	; 105
    1480:	d6 01       	movw	r26, r12
    1482:	8c 93       	st	X, r24
    1484:	8e e6       	ldi	r24, 0x6E	; 110
    1486:	11 96       	adiw	r26, 0x01	; 1
    1488:	8c 93       	st	X, r24
    148a:	86 e6       	ldi	r24, 0x66	; 102
    148c:	81 83       	std	Z+1, r24	; 0x01
    148e:	32 96       	adiw	r30, 0x02	; 2
    1490:	df 01       	movw	r26, r30
    1492:	89 2f       	mov	r24, r25
    1494:	20 e2       	ldi	r18, 0x20	; 32
    1496:	02 c0       	rjmp	.+4      	; 0x149c <dtoa_prf+0x14c>
    1498:	2d 93       	st	X+, r18
    149a:	81 50       	subi	r24, 0x01	; 1
    149c:	88 23       	and	r24, r24
    149e:	e1 f7       	brne	.-8      	; 0x1498 <dtoa_prf+0x148>
    14a0:	e9 0f       	add	r30, r25
    14a2:	f1 1d       	adc	r31, r1
    14a4:	10 82       	st	Z, r1
    14a6:	2e ef       	ldi	r18, 0xFE	; 254
    14a8:	3f ef       	ldi	r19, 0xFF	; 255
    14aa:	af c0       	rjmp	.+350    	; 0x160a <dtoa_prf+0x2ba>
    14ac:	16 16       	cp	r1, r22
    14ae:	17 06       	cpc	r1, r23
    14b0:	1c f0       	brlt	.+6      	; 0x14b8 <dtoa_prf+0x168>
    14b2:	41 e0       	ldi	r20, 0x01	; 1
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	03 c0       	rjmp	.+6      	; 0x14be <dtoa_prf+0x16e>
    14b8:	ab 01       	movw	r20, r22
    14ba:	4f 5f       	subi	r20, 0xFF	; 255
    14bc:	5f 4f       	sbci	r21, 0xFF	; 255
    14be:	aa 20       	and	r10, r10
    14c0:	19 f4       	brne	.+6      	; 0x14c8 <dtoa_prf+0x178>
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <dtoa_prf+0x17e>
    14c8:	8a 2d       	mov	r24, r10
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	01 96       	adiw	r24, 0x01	; 1
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	aa 23       	and	r26, r26
    14d4:	11 f0       	breq	.+4      	; 0x14da <dtoa_prf+0x18a>
    14d6:	21 e0       	ldi	r18, 0x01	; 1
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	24 0f       	add	r18, r20
    14dc:	35 1f       	adc	r19, r21
    14de:	28 0f       	add	r18, r24
    14e0:	39 1f       	adc	r19, r25
    14e2:	81 2f       	mov	r24, r17
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	28 17       	cp	r18, r24
    14e8:	39 07       	cpc	r19, r25
    14ea:	14 f0       	brlt	.+4      	; 0x14f0 <dtoa_prf+0x1a0>
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <dtoa_prf+0x1a4>
    14f0:	12 1b       	sub	r17, r18
    14f2:	21 2f       	mov	r18, r17
    14f4:	4b 2d       	mov	r20, r11
    14f6:	50 e0       	ldi	r21, 0x00	; 0
    14f8:	ca 01       	movw	r24, r20
    14fa:	80 71       	andi	r24, 0x10	; 16
    14fc:	90 70       	andi	r25, 0x00	; 0
    14fe:	b4 fc       	sbrc	r11, 4
    1500:	0d c0       	rjmp	.+26     	; 0x151c <dtoa_prf+0x1cc>
    1502:	b3 fc       	sbrc	r11, 3
    1504:	0b c0       	rjmp	.+22     	; 0x151c <dtoa_prf+0x1cc>
    1506:	f6 01       	movw	r30, r12
    1508:	32 2f       	mov	r19, r18
    150a:	40 e2       	ldi	r20, 0x20	; 32
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <dtoa_prf+0x1c2>
    150e:	41 93       	st	Z+, r20
    1510:	31 50       	subi	r19, 0x01	; 1
    1512:	33 23       	and	r19, r19
    1514:	e1 f7       	brne	.-8      	; 0x150e <dtoa_prf+0x1be>
    1516:	c2 0e       	add	r12, r18
    1518:	d1 1c       	adc	r13, r1
    151a:	01 c0       	rjmp	.+2      	; 0x151e <dtoa_prf+0x1ce>
    151c:	32 2f       	mov	r19, r18
    151e:	aa 23       	and	r26, r26
    1520:	19 f0       	breq	.+6      	; 0x1528 <dtoa_prf+0x1d8>
    1522:	f6 01       	movw	r30, r12
    1524:	a1 93       	st	Z+, r26
    1526:	6f 01       	movw	r12, r30
    1528:	89 2b       	or	r24, r25
    152a:	11 f0       	breq	.+4      	; 0x1530 <dtoa_prf+0x1e0>
    152c:	13 2f       	mov	r17, r19
    152e:	0a c0       	rjmp	.+20     	; 0x1544 <dtoa_prf+0x1f4>
    1530:	f6 01       	movw	r30, r12
    1532:	13 2f       	mov	r17, r19
    1534:	80 e3       	ldi	r24, 0x30	; 48
    1536:	02 c0       	rjmp	.+4      	; 0x153c <dtoa_prf+0x1ec>
    1538:	81 93       	st	Z+, r24
    153a:	11 50       	subi	r17, 0x01	; 1
    153c:	11 23       	and	r17, r17
    153e:	e1 f7       	brne	.-8      	; 0x1538 <dtoa_prf+0x1e8>
    1540:	c3 0e       	add	r12, r19
    1542:	d1 1c       	adc	r13, r1
    1544:	09 2d       	mov	r16, r9
    1546:	06 0f       	add	r16, r22
    1548:	ba 80       	ldd	r11, Y+2	; 0x02
    154a:	90 e1       	ldi	r25, 0x10	; 16
    154c:	89 2e       	mov	r8, r25
    154e:	91 2c       	mov	r9, r1
    1550:	8e 20       	and	r8, r14
    1552:	9f 20       	and	r9, r15
    1554:	e4 fe       	sbrs	r14, 4
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <dtoa_prf+0x210>
    1558:	f1 e3       	ldi	r31, 0x31	; 49
    155a:	bf 16       	cp	r11, r31
    155c:	09 f4       	brne	.+2      	; 0x1560 <dtoa_prf+0x210>
    155e:	01 50       	subi	r16, 0x01	; 1
    1560:	10 16       	cp	r1, r16
    1562:	14 f0       	brlt	.+4      	; 0x1568 <dtoa_prf+0x218>
    1564:	01 e0       	ldi	r16, 0x01	; 1
    1566:	03 c0       	rjmp	.+6      	; 0x156e <dtoa_prf+0x21e>
    1568:	09 30       	cpi	r16, 0x09	; 9
    156a:	08 f0       	brcs	.+2      	; 0x156e <dtoa_prf+0x21e>
    156c:	08 e0       	ldi	r16, 0x08	; 8
    156e:	9b 01       	movw	r18, r22
    1570:	77 ff       	sbrs	r23, 7
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <dtoa_prf+0x228>
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	cb 01       	movw	r24, r22
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	82 1b       	sub	r24, r18
    157e:	93 0b       	sbc	r25, r19
    1580:	fe 01       	movw	r30, r28
    1582:	31 96       	adiw	r30, 0x01	; 1
    1584:	e8 0f       	add	r30, r24
    1586:	f9 1f       	adc	r31, r25
    1588:	8e e2       	ldi	r24, 0x2E	; 46
    158a:	f8 2e       	mov	r15, r24
    158c:	3b 01       	movw	r6, r22
    158e:	60 1a       	sub	r6, r16
    1590:	71 08       	sbc	r7, r1
    1592:	8a 2d       	mov	r24, r10
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	44 27       	eor	r20, r20
    1598:	55 27       	eor	r21, r21
    159a:	48 1b       	sub	r20, r24
    159c:	59 0b       	sbc	r21, r25
    159e:	8f ef       	ldi	r24, 0xFF	; 255
    15a0:	2f 3f       	cpi	r18, 0xFF	; 255
    15a2:	38 07       	cpc	r19, r24
    15a4:	19 f4       	brne	.+6      	; 0x15ac <dtoa_prf+0x25c>
    15a6:	d6 01       	movw	r26, r12
    15a8:	fd 92       	st	X+, r15
    15aa:	6d 01       	movw	r12, r26
    15ac:	62 17       	cp	r22, r18
    15ae:	73 07       	cpc	r23, r19
    15b0:	2c f0       	brlt	.+10     	; 0x15bc <dtoa_prf+0x26c>
    15b2:	62 16       	cp	r6, r18
    15b4:	73 06       	cpc	r7, r19
    15b6:	14 f4       	brge	.+4      	; 0x15bc <dtoa_prf+0x26c>
    15b8:	80 81       	ld	r24, Z
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <dtoa_prf+0x26e>
    15bc:	80 e3       	ldi	r24, 0x30	; 48
    15be:	21 50       	subi	r18, 0x01	; 1
    15c0:	30 40       	sbci	r19, 0x00	; 0
    15c2:	31 96       	adiw	r30, 0x01	; 1
    15c4:	24 17       	cp	r18, r20
    15c6:	35 07       	cpc	r19, r21
    15c8:	24 f0       	brlt	.+8      	; 0x15d2 <dtoa_prf+0x282>
    15ca:	d6 01       	movw	r26, r12
    15cc:	8d 93       	st	X+, r24
    15ce:	6d 01       	movw	r12, r26
    15d0:	e6 cf       	rjmp	.-52     	; 0x159e <dtoa_prf+0x24e>
    15d2:	26 17       	cp	r18, r22
    15d4:	37 07       	cpc	r19, r23
    15d6:	49 f4       	brne	.+18     	; 0x15ea <dtoa_prf+0x29a>
    15d8:	b5 e3       	ldi	r27, 0x35	; 53
    15da:	bb 15       	cp	r27, r11
    15dc:	28 f0       	brcs	.+10     	; 0x15e8 <dtoa_prf+0x298>
    15de:	bb 16       	cp	r11, r27
    15e0:	21 f4       	brne	.+8      	; 0x15ea <dtoa_prf+0x29a>
    15e2:	81 14       	cp	r8, r1
    15e4:	91 04       	cpc	r9, r1
    15e6:	09 f4       	brne	.+2      	; 0x15ea <dtoa_prf+0x29a>
    15e8:	81 e3       	ldi	r24, 0x31	; 49
    15ea:	f6 01       	movw	r30, r12
    15ec:	81 93       	st	Z+, r24
    15ee:	d6 01       	movw	r26, r12
    15f0:	81 2f       	mov	r24, r17
    15f2:	90 e2       	ldi	r25, 0x20	; 32
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <dtoa_prf+0x2aa>
    15f6:	9c 93       	st	X, r25
    15f8:	81 50       	subi	r24, 0x01	; 1
    15fa:	11 96       	adiw	r26, 0x01	; 1
    15fc:	88 23       	and	r24, r24
    15fe:	d9 f7       	brne	.-10     	; 0x15f6 <dtoa_prf+0x2a6>
    1600:	e1 0f       	add	r30, r17
    1602:	f1 1d       	adc	r31, r1
    1604:	10 82       	st	Z, r1
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	c9 01       	movw	r24, r18
    160c:	29 96       	adiw	r28, 0x09	; 9
    160e:	ee e0       	ldi	r30, 0x0E	; 14
    1610:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <__epilogue_restores__+0x8>

00001614 <__ftoa_engine>:
    1614:	28 30       	cpi	r18, 0x08	; 8
    1616:	08 f0       	brcs	.+2      	; 0x161a <__ftoa_engine+0x6>
    1618:	27 e0       	ldi	r18, 0x07	; 7
    161a:	33 27       	eor	r19, r19
    161c:	da 01       	movw	r26, r20
    161e:	99 0f       	add	r25, r25
    1620:	31 1d       	adc	r19, r1
    1622:	87 fd       	sbrc	r24, 7
    1624:	91 60       	ori	r25, 0x01	; 1
    1626:	00 96       	adiw	r24, 0x00	; 0
    1628:	61 05       	cpc	r22, r1
    162a:	71 05       	cpc	r23, r1
    162c:	39 f4       	brne	.+14     	; 0x163c <__ftoa_engine+0x28>
    162e:	32 60       	ori	r19, 0x02	; 2
    1630:	2e 5f       	subi	r18, 0xFE	; 254
    1632:	3d 93       	st	X+, r19
    1634:	30 e3       	ldi	r19, 0x30	; 48
    1636:	2a 95       	dec	r18
    1638:	e1 f7       	brne	.-8      	; 0x1632 <__ftoa_engine+0x1e>
    163a:	08 95       	ret
    163c:	9f 3f       	cpi	r25, 0xFF	; 255
    163e:	30 f0       	brcs	.+12     	; 0x164c <__ftoa_engine+0x38>
    1640:	80 38       	cpi	r24, 0x80	; 128
    1642:	71 05       	cpc	r23, r1
    1644:	61 05       	cpc	r22, r1
    1646:	09 f0       	breq	.+2      	; 0x164a <__ftoa_engine+0x36>
    1648:	3c 5f       	subi	r19, 0xFC	; 252
    164a:	3c 5f       	subi	r19, 0xFC	; 252
    164c:	3d 93       	st	X+, r19
    164e:	91 30       	cpi	r25, 0x01	; 1
    1650:	08 f0       	brcs	.+2      	; 0x1654 <__ftoa_engine+0x40>
    1652:	80 68       	ori	r24, 0x80	; 128
    1654:	91 1d       	adc	r25, r1
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	1f 93       	push	r17
    165c:	0f 93       	push	r16
    165e:	ff 92       	push	r15
    1660:	ef 92       	push	r14
    1662:	19 2f       	mov	r17, r25
    1664:	98 7f       	andi	r25, 0xF8	; 248
    1666:	96 95       	lsr	r25
    1668:	e9 2f       	mov	r30, r25
    166a:	96 95       	lsr	r25
    166c:	96 95       	lsr	r25
    166e:	e9 0f       	add	r30, r25
    1670:	ff 27       	eor	r31, r31
    1672:	e0 5d       	subi	r30, 0xD0	; 208
    1674:	fe 4f       	sbci	r31, 0xFE	; 254
    1676:	99 27       	eor	r25, r25
    1678:	33 27       	eor	r19, r19
    167a:	ee 24       	eor	r14, r14
    167c:	ff 24       	eor	r15, r15
    167e:	a7 01       	movw	r20, r14
    1680:	e7 01       	movw	r28, r14
    1682:	05 90       	lpm	r0, Z+
    1684:	08 94       	sec
    1686:	07 94       	ror	r0
    1688:	28 f4       	brcc	.+10     	; 0x1694 <__ftoa_engine+0x80>
    168a:	36 0f       	add	r19, r22
    168c:	e7 1e       	adc	r14, r23
    168e:	f8 1e       	adc	r15, r24
    1690:	49 1f       	adc	r20, r25
    1692:	51 1d       	adc	r21, r1
    1694:	66 0f       	add	r22, r22
    1696:	77 1f       	adc	r23, r23
    1698:	88 1f       	adc	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	06 94       	lsr	r0
    169e:	a1 f7       	brne	.-24     	; 0x1688 <__ftoa_engine+0x74>
    16a0:	05 90       	lpm	r0, Z+
    16a2:	07 94       	ror	r0
    16a4:	28 f4       	brcc	.+10     	; 0x16b0 <__ftoa_engine+0x9c>
    16a6:	e7 0e       	add	r14, r23
    16a8:	f8 1e       	adc	r15, r24
    16aa:	49 1f       	adc	r20, r25
    16ac:	56 1f       	adc	r21, r22
    16ae:	c1 1d       	adc	r28, r1
    16b0:	77 0f       	add	r23, r23
    16b2:	88 1f       	adc	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	66 1f       	adc	r22, r22
    16b8:	06 94       	lsr	r0
    16ba:	a1 f7       	brne	.-24     	; 0x16a4 <__ftoa_engine+0x90>
    16bc:	05 90       	lpm	r0, Z+
    16be:	07 94       	ror	r0
    16c0:	28 f4       	brcc	.+10     	; 0x16cc <__ftoa_engine+0xb8>
    16c2:	f8 0e       	add	r15, r24
    16c4:	49 1f       	adc	r20, r25
    16c6:	56 1f       	adc	r21, r22
    16c8:	c7 1f       	adc	r28, r23
    16ca:	d1 1d       	adc	r29, r1
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	66 1f       	adc	r22, r22
    16d2:	77 1f       	adc	r23, r23
    16d4:	06 94       	lsr	r0
    16d6:	a1 f7       	brne	.-24     	; 0x16c0 <__ftoa_engine+0xac>
    16d8:	05 90       	lpm	r0, Z+
    16da:	07 94       	ror	r0
    16dc:	20 f4       	brcc	.+8      	; 0x16e6 <__ftoa_engine+0xd2>
    16de:	49 0f       	add	r20, r25
    16e0:	56 1f       	adc	r21, r22
    16e2:	c7 1f       	adc	r28, r23
    16e4:	d8 1f       	adc	r29, r24
    16e6:	99 0f       	add	r25, r25
    16e8:	66 1f       	adc	r22, r22
    16ea:	77 1f       	adc	r23, r23
    16ec:	88 1f       	adc	r24, r24
    16ee:	06 94       	lsr	r0
    16f0:	a9 f7       	brne	.-22     	; 0x16dc <__ftoa_engine+0xc8>
    16f2:	84 91       	lpm	r24, Z+
    16f4:	10 95       	com	r17
    16f6:	17 70       	andi	r17, 0x07	; 7
    16f8:	41 f0       	breq	.+16     	; 0x170a <__ftoa_engine+0xf6>
    16fa:	d6 95       	lsr	r29
    16fc:	c7 95       	ror	r28
    16fe:	57 95       	ror	r21
    1700:	47 95       	ror	r20
    1702:	f7 94       	ror	r15
    1704:	e7 94       	ror	r14
    1706:	1a 95       	dec	r17
    1708:	c1 f7       	brne	.-16     	; 0x16fa <__ftoa_engine+0xe6>
    170a:	e6 ed       	ldi	r30, 0xD6	; 214
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	68 94       	set
    1710:	15 90       	lpm	r1, Z+
    1712:	15 91       	lpm	r17, Z+
    1714:	35 91       	lpm	r19, Z+
    1716:	65 91       	lpm	r22, Z+
    1718:	95 91       	lpm	r25, Z+
    171a:	05 90       	lpm	r0, Z+
    171c:	7f e2       	ldi	r23, 0x2F	; 47
    171e:	73 95       	inc	r23
    1720:	e1 18       	sub	r14, r1
    1722:	f1 0a       	sbc	r15, r17
    1724:	43 0b       	sbc	r20, r19
    1726:	56 0b       	sbc	r21, r22
    1728:	c9 0b       	sbc	r28, r25
    172a:	d0 09       	sbc	r29, r0
    172c:	c0 f7       	brcc	.-16     	; 0x171e <__ftoa_engine+0x10a>
    172e:	e1 0c       	add	r14, r1
    1730:	f1 1e       	adc	r15, r17
    1732:	43 1f       	adc	r20, r19
    1734:	56 1f       	adc	r21, r22
    1736:	c9 1f       	adc	r28, r25
    1738:	d0 1d       	adc	r29, r0
    173a:	7e f4       	brtc	.+30     	; 0x175a <__ftoa_engine+0x146>
    173c:	70 33       	cpi	r23, 0x30	; 48
    173e:	11 f4       	brne	.+4      	; 0x1744 <__ftoa_engine+0x130>
    1740:	8a 95       	dec	r24
    1742:	e6 cf       	rjmp	.-52     	; 0x1710 <__ftoa_engine+0xfc>
    1744:	e8 94       	clt
    1746:	01 50       	subi	r16, 0x01	; 1
    1748:	30 f0       	brcs	.+12     	; 0x1756 <__ftoa_engine+0x142>
    174a:	08 0f       	add	r16, r24
    174c:	0a f4       	brpl	.+2      	; 0x1750 <__ftoa_engine+0x13c>
    174e:	00 27       	eor	r16, r16
    1750:	02 17       	cp	r16, r18
    1752:	08 f4       	brcc	.+2      	; 0x1756 <__ftoa_engine+0x142>
    1754:	20 2f       	mov	r18, r16
    1756:	23 95       	inc	r18
    1758:	02 2f       	mov	r16, r18
    175a:	7a 33       	cpi	r23, 0x3A	; 58
    175c:	28 f0       	brcs	.+10     	; 0x1768 <__ftoa_engine+0x154>
    175e:	79 e3       	ldi	r23, 0x39	; 57
    1760:	7d 93       	st	X+, r23
    1762:	2a 95       	dec	r18
    1764:	e9 f7       	brne	.-6      	; 0x1760 <__ftoa_engine+0x14c>
    1766:	10 c0       	rjmp	.+32     	; 0x1788 <__ftoa_engine+0x174>
    1768:	7d 93       	st	X+, r23
    176a:	2a 95       	dec	r18
    176c:	89 f6       	brne	.-94     	; 0x1710 <__ftoa_engine+0xfc>
    176e:	06 94       	lsr	r0
    1770:	97 95       	ror	r25
    1772:	67 95       	ror	r22
    1774:	37 95       	ror	r19
    1776:	17 95       	ror	r17
    1778:	17 94       	ror	r1
    177a:	e1 18       	sub	r14, r1
    177c:	f1 0a       	sbc	r15, r17
    177e:	43 0b       	sbc	r20, r19
    1780:	56 0b       	sbc	r21, r22
    1782:	c9 0b       	sbc	r28, r25
    1784:	d0 09       	sbc	r29, r0
    1786:	98 f0       	brcs	.+38     	; 0x17ae <__ftoa_engine+0x19a>
    1788:	23 95       	inc	r18
    178a:	7e 91       	ld	r23, -X
    178c:	73 95       	inc	r23
    178e:	7a 33       	cpi	r23, 0x3A	; 58
    1790:	08 f0       	brcs	.+2      	; 0x1794 <__ftoa_engine+0x180>
    1792:	70 e3       	ldi	r23, 0x30	; 48
    1794:	7c 93       	st	X, r23
    1796:	20 13       	cpse	r18, r16
    1798:	b8 f7       	brcc	.-18     	; 0x1788 <__ftoa_engine+0x174>
    179a:	7e 91       	ld	r23, -X
    179c:	70 61       	ori	r23, 0x10	; 16
    179e:	7d 93       	st	X+, r23
    17a0:	30 f0       	brcs	.+12     	; 0x17ae <__ftoa_engine+0x19a>
    17a2:	83 95       	inc	r24
    17a4:	71 e3       	ldi	r23, 0x31	; 49
    17a6:	7d 93       	st	X+, r23
    17a8:	70 e3       	ldi	r23, 0x30	; 48
    17aa:	2a 95       	dec	r18
    17ac:	e1 f7       	brne	.-8      	; 0x17a6 <__ftoa_engine+0x192>
    17ae:	11 24       	eor	r1, r1
    17b0:	ef 90       	pop	r14
    17b2:	ff 90       	pop	r15
    17b4:	0f 91       	pop	r16
    17b6:	1f 91       	pop	r17
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	99 27       	eor	r25, r25
    17be:	87 fd       	sbrc	r24, 7
    17c0:	90 95       	com	r25
    17c2:	08 95       	ret

000017c4 <strnlen_P>:
    17c4:	fc 01       	movw	r30, r24
    17c6:	05 90       	lpm	r0, Z+
    17c8:	61 50       	subi	r22, 0x01	; 1
    17ca:	70 40       	sbci	r23, 0x00	; 0
    17cc:	01 10       	cpse	r0, r1
    17ce:	d8 f7       	brcc	.-10     	; 0x17c6 <strnlen_P+0x2>
    17d0:	80 95       	com	r24
    17d2:	90 95       	com	r25
    17d4:	8e 0f       	add	r24, r30
    17d6:	9f 1f       	adc	r25, r31
    17d8:	08 95       	ret

000017da <strnlen>:
    17da:	fc 01       	movw	r30, r24
    17dc:	61 50       	subi	r22, 0x01	; 1
    17de:	70 40       	sbci	r23, 0x00	; 0
    17e0:	01 90       	ld	r0, Z+
    17e2:	01 10       	cpse	r0, r1
    17e4:	d8 f7       	brcc	.-10     	; 0x17dc <strnlen+0x2>
    17e6:	80 95       	com	r24
    17e8:	90 95       	com	r25
    17ea:	8e 0f       	add	r24, r30
    17ec:	9f 1f       	adc	r25, r31
    17ee:	08 95       	ret

000017f0 <fputc>:
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	8c 01       	movw	r16, r24
    17fa:	eb 01       	movw	r28, r22
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	81 ff       	sbrs	r24, 1
    1800:	1b c0       	rjmp	.+54     	; 0x1838 <fputc+0x48>
    1802:	82 ff       	sbrs	r24, 2
    1804:	0d c0       	rjmp	.+26     	; 0x1820 <fputc+0x30>
    1806:	2e 81       	ldd	r18, Y+6	; 0x06
    1808:	3f 81       	ldd	r19, Y+7	; 0x07
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	9d 81       	ldd	r25, Y+5	; 0x05
    180e:	28 17       	cp	r18, r24
    1810:	39 07       	cpc	r19, r25
    1812:	64 f4       	brge	.+24     	; 0x182c <fputc+0x3c>
    1814:	e8 81       	ld	r30, Y
    1816:	f9 81       	ldd	r31, Y+1	; 0x01
    1818:	01 93       	st	Z+, r16
    181a:	f9 83       	std	Y+1, r31	; 0x01
    181c:	e8 83       	st	Y, r30
    181e:	06 c0       	rjmp	.+12     	; 0x182c <fputc+0x3c>
    1820:	e8 85       	ldd	r30, Y+8	; 0x08
    1822:	f9 85       	ldd	r31, Y+9	; 0x09
    1824:	80 2f       	mov	r24, r16
    1826:	09 95       	icall
    1828:	89 2b       	or	r24, r25
    182a:	31 f4       	brne	.+12     	; 0x1838 <fputc+0x48>
    182c:	8e 81       	ldd	r24, Y+6	; 0x06
    182e:	9f 81       	ldd	r25, Y+7	; 0x07
    1830:	01 96       	adiw	r24, 0x01	; 1
    1832:	9f 83       	std	Y+7, r25	; 0x07
    1834:	8e 83       	std	Y+6, r24	; 0x06
    1836:	02 c0       	rjmp	.+4      	; 0x183c <fputc+0x4c>
    1838:	0f ef       	ldi	r16, 0xFF	; 255
    183a:	1f ef       	ldi	r17, 0xFF	; 255
    183c:	c8 01       	movw	r24, r16
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	08 95       	ret

00001848 <__ultoa_invert>:
    1848:	fa 01       	movw	r30, r20
    184a:	aa 27       	eor	r26, r26
    184c:	28 30       	cpi	r18, 0x08	; 8
    184e:	51 f1       	breq	.+84     	; 0x18a4 <__ultoa_invert+0x5c>
    1850:	20 31       	cpi	r18, 0x10	; 16
    1852:	81 f1       	breq	.+96     	; 0x18b4 <__ultoa_invert+0x6c>
    1854:	e8 94       	clt
    1856:	6f 93       	push	r22
    1858:	6e 7f       	andi	r22, 0xFE	; 254
    185a:	6e 5f       	subi	r22, 0xFE	; 254
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	8f 4f       	sbci	r24, 0xFF	; 255
    1860:	9f 4f       	sbci	r25, 0xFF	; 255
    1862:	af 4f       	sbci	r26, 0xFF	; 255
    1864:	b1 e0       	ldi	r27, 0x01	; 1
    1866:	3e d0       	rcall	.+124    	; 0x18e4 <__ultoa_invert+0x9c>
    1868:	b4 e0       	ldi	r27, 0x04	; 4
    186a:	3c d0       	rcall	.+120    	; 0x18e4 <__ultoa_invert+0x9c>
    186c:	67 0f       	add	r22, r23
    186e:	78 1f       	adc	r23, r24
    1870:	89 1f       	adc	r24, r25
    1872:	9a 1f       	adc	r25, r26
    1874:	a1 1d       	adc	r26, r1
    1876:	68 0f       	add	r22, r24
    1878:	79 1f       	adc	r23, r25
    187a:	8a 1f       	adc	r24, r26
    187c:	91 1d       	adc	r25, r1
    187e:	a1 1d       	adc	r26, r1
    1880:	6a 0f       	add	r22, r26
    1882:	71 1d       	adc	r23, r1
    1884:	81 1d       	adc	r24, r1
    1886:	91 1d       	adc	r25, r1
    1888:	a1 1d       	adc	r26, r1
    188a:	20 d0       	rcall	.+64     	; 0x18cc <__ultoa_invert+0x84>
    188c:	09 f4       	brne	.+2      	; 0x1890 <__ultoa_invert+0x48>
    188e:	68 94       	set
    1890:	3f 91       	pop	r19
    1892:	2a e0       	ldi	r18, 0x0A	; 10
    1894:	26 9f       	mul	r18, r22
    1896:	11 24       	eor	r1, r1
    1898:	30 19       	sub	r19, r0
    189a:	30 5d       	subi	r19, 0xD0	; 208
    189c:	31 93       	st	Z+, r19
    189e:	de f6       	brtc	.-74     	; 0x1856 <__ultoa_invert+0xe>
    18a0:	cf 01       	movw	r24, r30
    18a2:	08 95       	ret
    18a4:	46 2f       	mov	r20, r22
    18a6:	47 70       	andi	r20, 0x07	; 7
    18a8:	40 5d       	subi	r20, 0xD0	; 208
    18aa:	41 93       	st	Z+, r20
    18ac:	b3 e0       	ldi	r27, 0x03	; 3
    18ae:	0f d0       	rcall	.+30     	; 0x18ce <__ultoa_invert+0x86>
    18b0:	c9 f7       	brne	.-14     	; 0x18a4 <__ultoa_invert+0x5c>
    18b2:	f6 cf       	rjmp	.-20     	; 0x18a0 <__ultoa_invert+0x58>
    18b4:	46 2f       	mov	r20, r22
    18b6:	4f 70       	andi	r20, 0x0F	; 15
    18b8:	40 5d       	subi	r20, 0xD0	; 208
    18ba:	4a 33       	cpi	r20, 0x3A	; 58
    18bc:	18 f0       	brcs	.+6      	; 0x18c4 <__ultoa_invert+0x7c>
    18be:	49 5d       	subi	r20, 0xD9	; 217
    18c0:	31 fd       	sbrc	r19, 1
    18c2:	40 52       	subi	r20, 0x20	; 32
    18c4:	41 93       	st	Z+, r20
    18c6:	02 d0       	rcall	.+4      	; 0x18cc <__ultoa_invert+0x84>
    18c8:	a9 f7       	brne	.-22     	; 0x18b4 <__ultoa_invert+0x6c>
    18ca:	ea cf       	rjmp	.-44     	; 0x18a0 <__ultoa_invert+0x58>
    18cc:	b4 e0       	ldi	r27, 0x04	; 4
    18ce:	a6 95       	lsr	r26
    18d0:	97 95       	ror	r25
    18d2:	87 95       	ror	r24
    18d4:	77 95       	ror	r23
    18d6:	67 95       	ror	r22
    18d8:	ba 95       	dec	r27
    18da:	c9 f7       	brne	.-14     	; 0x18ce <__ultoa_invert+0x86>
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	61 05       	cpc	r22, r1
    18e0:	71 05       	cpc	r23, r1
    18e2:	08 95       	ret
    18e4:	9b 01       	movw	r18, r22
    18e6:	ac 01       	movw	r20, r24
    18e8:	0a 2e       	mov	r0, r26
    18ea:	06 94       	lsr	r0
    18ec:	57 95       	ror	r21
    18ee:	47 95       	ror	r20
    18f0:	37 95       	ror	r19
    18f2:	27 95       	ror	r18
    18f4:	ba 95       	dec	r27
    18f6:	c9 f7       	brne	.-14     	; 0x18ea <__ultoa_invert+0xa2>
    18f8:	62 0f       	add	r22, r18
    18fa:	73 1f       	adc	r23, r19
    18fc:	84 1f       	adc	r24, r20
    18fe:	95 1f       	adc	r25, r21
    1900:	a0 1d       	adc	r26, r0
    1902:	08 95       	ret
    1904:	19 f4       	brne	.+6      	; 0x190c <__ultoa_invert+0xc4>
    1906:	0e f0       	brts	.+2      	; 0x190a <__ultoa_invert+0xc2>
    1908:	46 ca       	rjmp	.-2932   	; 0xd96 <__fp_inf>
    190a:	8f ca       	rjmp	.-2786   	; 0xe2a <__fp_zero>
    190c:	4a ca       	rjmp	.-2924   	; 0xda2 <__fp_nan>

0000190e <exp>:
    190e:	73 da       	rcall	.-2842   	; 0xdf6 <__fp_splitA>
    1910:	c8 f3       	brcs	.-14     	; 0x1904 <__ultoa_invert+0xbc>
    1912:	96 38       	cpi	r25, 0x86	; 134
    1914:	c0 f7       	brcc	.-16     	; 0x1906 <__ultoa_invert+0xbe>
    1916:	07 f8       	bld	r0, 7
    1918:	0f 92       	push	r0
    191a:	e8 94       	clt
    191c:	2b e3       	ldi	r18, 0x3B	; 59
    191e:	3a ea       	ldi	r19, 0xAA	; 170
    1920:	48 eb       	ldi	r20, 0xB8	; 184
    1922:	5f e7       	ldi	r21, 0x7F	; 127
    1924:	97 da       	rcall	.-2770   	; 0xe54 <__mulsf3_pse>
    1926:	0f 92       	push	r0
    1928:	0f 92       	push	r0
    192a:	0f 92       	push	r0
    192c:	4d b7       	in	r20, 0x3d	; 61
    192e:	5e b7       	in	r21, 0x3e	; 62
    1930:	0f 92       	push	r0
    1932:	c0 d0       	rcall	.+384    	; 0x1ab4 <modf>
    1934:	e4 e5       	ldi	r30, 0x54	; 84
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	16 d0       	rcall	.+44     	; 0x1966 <__fp_powser>
    193a:	4f 91       	pop	r20
    193c:	5f 91       	pop	r21
    193e:	ef 91       	pop	r30
    1940:	ff 91       	pop	r31
    1942:	e5 95       	asr	r30
    1944:	ee 1f       	adc	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	49 f0       	breq	.+18     	; 0x195c <exp+0x4e>
    194a:	fe 57       	subi	r31, 0x7E	; 126
    194c:	e0 68       	ori	r30, 0x80	; 128
    194e:	44 27       	eor	r20, r20
    1950:	ee 0f       	add	r30, r30
    1952:	44 1f       	adc	r20, r20
    1954:	fa 95       	dec	r31
    1956:	e1 f7       	brne	.-8      	; 0x1950 <exp+0x42>
    1958:	41 95       	neg	r20
    195a:	55 0b       	sbc	r21, r21
    195c:	32 d0       	rcall	.+100    	; 0x19c2 <ldexp>
    195e:	0f 90       	pop	r0
    1960:	07 fe       	sbrs	r0, 7
    1962:	26 c0       	rjmp	.+76     	; 0x19b0 <inverse>
    1964:	08 95       	ret

00001966 <__fp_powser>:
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	1f 93       	push	r17
    196c:	0f 93       	push	r16
    196e:	ff 92       	push	r15
    1970:	ef 92       	push	r14
    1972:	df 92       	push	r13
    1974:	7b 01       	movw	r14, r22
    1976:	8c 01       	movw	r16, r24
    1978:	68 94       	set
    197a:	05 c0       	rjmp	.+10     	; 0x1986 <__fp_powser+0x20>
    197c:	da 2e       	mov	r13, r26
    197e:	ef 01       	movw	r28, r30
    1980:	67 da       	rcall	.-2866   	; 0xe50 <__mulsf3x>
    1982:	fe 01       	movw	r30, r28
    1984:	e8 94       	clt
    1986:	a5 91       	lpm	r26, Z+
    1988:	25 91       	lpm	r18, Z+
    198a:	35 91       	lpm	r19, Z+
    198c:	45 91       	lpm	r20, Z+
    198e:	55 91       	lpm	r21, Z+
    1990:	ae f3       	brts	.-22     	; 0x197c <__fp_powser+0x16>
    1992:	ef 01       	movw	r28, r30
    1994:	dc d8       	rcall	.-3656   	; 0xb4e <__addsf3x>
    1996:	fe 01       	movw	r30, r28
    1998:	97 01       	movw	r18, r14
    199a:	a8 01       	movw	r20, r16
    199c:	da 94       	dec	r13
    199e:	79 f7       	brne	.-34     	; 0x197e <__fp_powser+0x18>
    19a0:	df 90       	pop	r13
    19a2:	ef 90       	pop	r14
    19a4:	ff 90       	pop	r15
    19a6:	0f 91       	pop	r16
    19a8:	1f 91       	pop	r17
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <inverse>:
    19b0:	9b 01       	movw	r18, r22
    19b2:	ac 01       	movw	r20, r24
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	80 e8       	ldi	r24, 0x80	; 128
    19ba:	9f e3       	ldi	r25, 0x3F	; 63
    19bc:	1b c9       	rjmp	.-3530   	; 0xbf4 <__divsf3>
    19be:	eb c9       	rjmp	.-3114   	; 0xd96 <__fp_inf>
    19c0:	ac c0       	rjmp	.+344    	; 0x1b1a <__fp_mpack>

000019c2 <ldexp>:
    19c2:	19 da       	rcall	.-3022   	; 0xdf6 <__fp_splitA>
    19c4:	e8 f3       	brcs	.-6      	; 0x19c0 <inverse+0x10>
    19c6:	99 23       	and	r25, r25
    19c8:	d9 f3       	breq	.-10     	; 0x19c0 <inverse+0x10>
    19ca:	94 0f       	add	r25, r20
    19cc:	51 1d       	adc	r21, r1
    19ce:	bb f3       	brvs	.-18     	; 0x19be <inverse+0xe>
    19d0:	91 50       	subi	r25, 0x01	; 1
    19d2:	50 40       	sbci	r21, 0x00	; 0
    19d4:	94 f0       	brlt	.+36     	; 0x19fa <ldexp+0x38>
    19d6:	59 f0       	breq	.+22     	; 0x19ee <ldexp+0x2c>
    19d8:	88 23       	and	r24, r24
    19da:	32 f0       	brmi	.+12     	; 0x19e8 <ldexp+0x26>
    19dc:	66 0f       	add	r22, r22
    19de:	77 1f       	adc	r23, r23
    19e0:	88 1f       	adc	r24, r24
    19e2:	91 50       	subi	r25, 0x01	; 1
    19e4:	50 40       	sbci	r21, 0x00	; 0
    19e6:	c1 f7       	brne	.-16     	; 0x19d8 <ldexp+0x16>
    19e8:	9e 3f       	cpi	r25, 0xFE	; 254
    19ea:	51 05       	cpc	r21, r1
    19ec:	44 f7       	brge	.-48     	; 0x19be <inverse+0xe>
    19ee:	88 0f       	add	r24, r24
    19f0:	91 1d       	adc	r25, r1
    19f2:	96 95       	lsr	r25
    19f4:	87 95       	ror	r24
    19f6:	97 f9       	bld	r25, 7
    19f8:	08 95       	ret
    19fa:	5f 3f       	cpi	r21, 0xFF	; 255
    19fc:	ac f0       	brlt	.+42     	; 0x1a28 <ldexp+0x66>
    19fe:	98 3e       	cpi	r25, 0xE8	; 232
    1a00:	9c f0       	brlt	.+38     	; 0x1a28 <ldexp+0x66>
    1a02:	bb 27       	eor	r27, r27
    1a04:	86 95       	lsr	r24
    1a06:	77 95       	ror	r23
    1a08:	67 95       	ror	r22
    1a0a:	b7 95       	ror	r27
    1a0c:	08 f4       	brcc	.+2      	; 0x1a10 <ldexp+0x4e>
    1a0e:	b1 60       	ori	r27, 0x01	; 1
    1a10:	93 95       	inc	r25
    1a12:	c1 f7       	brne	.-16     	; 0x1a04 <ldexp+0x42>
    1a14:	bb 0f       	add	r27, r27
    1a16:	58 f7       	brcc	.-42     	; 0x19ee <ldexp+0x2c>
    1a18:	11 f4       	brne	.+4      	; 0x1a1e <ldexp+0x5c>
    1a1a:	60 ff       	sbrs	r22, 0
    1a1c:	e8 cf       	rjmp	.-48     	; 0x19ee <ldexp+0x2c>
    1a1e:	6f 5f       	subi	r22, 0xFF	; 255
    1a20:	7f 4f       	sbci	r23, 0xFF	; 255
    1a22:	8f 4f       	sbci	r24, 0xFF	; 255
    1a24:	9f 4f       	sbci	r25, 0xFF	; 255
    1a26:	e3 cf       	rjmp	.-58     	; 0x19ee <ldexp+0x2c>
    1a28:	01 ca       	rjmp	.-3070   	; 0xe2c <__fp_szero>
    1a2a:	0e f0       	brts	.+2      	; 0x1a2e <ldexp+0x6c>
    1a2c:	76 c0       	rjmp	.+236    	; 0x1b1a <__fp_mpack>
    1a2e:	b9 c9       	rjmp	.-3214   	; 0xda2 <__fp_nan>
    1a30:	68 94       	set
    1a32:	b1 c9       	rjmp	.-3230   	; 0xd96 <__fp_inf>

00001a34 <log>:
    1a34:	e0 d9       	rcall	.-3136   	; 0xdf6 <__fp_splitA>
    1a36:	c8 f3       	brcs	.-14     	; 0x1a2a <ldexp+0x68>
    1a38:	99 23       	and	r25, r25
    1a3a:	d1 f3       	breq	.-12     	; 0x1a30 <ldexp+0x6e>
    1a3c:	c6 f3       	brts	.-16     	; 0x1a2e <ldexp+0x6c>
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	1f 93       	push	r17
    1a44:	0f 93       	push	r16
    1a46:	ff 92       	push	r15
    1a48:	c9 2f       	mov	r28, r25
    1a4a:	dd 27       	eor	r29, r29
    1a4c:	88 23       	and	r24, r24
    1a4e:	2a f0       	brmi	.+10     	; 0x1a5a <log+0x26>
    1a50:	21 97       	sbiw	r28, 0x01	; 1
    1a52:	66 0f       	add	r22, r22
    1a54:	77 1f       	adc	r23, r23
    1a56:	88 1f       	adc	r24, r24
    1a58:	da f7       	brpl	.-10     	; 0x1a50 <log+0x1c>
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e8       	ldi	r20, 0x80	; 128
    1a60:	5f eb       	ldi	r21, 0xBF	; 191
    1a62:	9f e3       	ldi	r25, 0x3F	; 63
    1a64:	88 39       	cpi	r24, 0x98	; 152
    1a66:	20 f0       	brcs	.+8      	; 0x1a70 <log+0x3c>
    1a68:	80 3e       	cpi	r24, 0xE0	; 224
    1a6a:	30 f0       	brcs	.+12     	; 0x1a78 <log+0x44>
    1a6c:	21 96       	adiw	r28, 0x01	; 1
    1a6e:	8f 77       	andi	r24, 0x7F	; 127
    1a70:	5d d8       	rcall	.-3910   	; 0xb2c <__addsf3>
    1a72:	ec e7       	ldi	r30, 0x7C	; 124
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	03 c0       	rjmp	.+6      	; 0x1a7e <log+0x4a>
    1a78:	59 d8       	rcall	.-3918   	; 0xb2c <__addsf3>
    1a7a:	e9 ea       	ldi	r30, 0xA9	; 169
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	73 df       	rcall	.-282    	; 0x1966 <__fp_powser>
    1a80:	8b 01       	movw	r16, r22
    1a82:	be 01       	movw	r22, r28
    1a84:	ec 01       	movw	r28, r24
    1a86:	fb 2e       	mov	r15, r27
    1a88:	6f 57       	subi	r22, 0x7F	; 127
    1a8a:	71 09       	sbc	r23, r1
    1a8c:	75 95       	asr	r23
    1a8e:	77 1f       	adc	r23, r23
    1a90:	88 0b       	sbc	r24, r24
    1a92:	99 0b       	sbc	r25, r25
    1a94:	45 d9       	rcall	.-3446   	; 0xd20 <__floatsisf>
    1a96:	28 e1       	ldi	r18, 0x18	; 24
    1a98:	32 e7       	ldi	r19, 0x72	; 114
    1a9a:	41 e3       	ldi	r20, 0x31	; 49
    1a9c:	5f e3       	ldi	r21, 0x3F	; 63
    1a9e:	d8 d9       	rcall	.-3152   	; 0xe50 <__mulsf3x>
    1aa0:	af 2d       	mov	r26, r15
    1aa2:	98 01       	movw	r18, r16
    1aa4:	ae 01       	movw	r20, r28
    1aa6:	ff 90       	pop	r15
    1aa8:	0f 91       	pop	r16
    1aaa:	1f 91       	pop	r17
    1aac:	cf 91       	pop	r28
    1aae:	df 91       	pop	r29
    1ab0:	4e d8       	rcall	.-3940   	; 0xb4e <__addsf3x>
    1ab2:	88 c9       	rjmp	.-3312   	; 0xdc4 <__fp_round>

00001ab4 <modf>:
    1ab4:	fa 01       	movw	r30, r20
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	aa 0f       	add	r26, r26
    1aba:	bb 1f       	adc	r27, r27
    1abc:	9b 01       	movw	r18, r22
    1abe:	ac 01       	movw	r20, r24
    1ac0:	bf 57       	subi	r27, 0x7F	; 127
    1ac2:	28 f4       	brcc	.+10     	; 0x1ace <modf+0x1a>
    1ac4:	22 27       	eor	r18, r18
    1ac6:	33 27       	eor	r19, r19
    1ac8:	44 27       	eor	r20, r20
    1aca:	50 78       	andi	r21, 0x80	; 128
    1acc:	1f c0       	rjmp	.+62     	; 0x1b0c <modf+0x58>
    1ace:	b7 51       	subi	r27, 0x17	; 23
    1ad0:	88 f4       	brcc	.+34     	; 0x1af4 <modf+0x40>
    1ad2:	ab 2f       	mov	r26, r27
    1ad4:	00 24       	eor	r0, r0
    1ad6:	46 95       	lsr	r20
    1ad8:	37 95       	ror	r19
    1ada:	27 95       	ror	r18
    1adc:	01 1c       	adc	r0, r1
    1ade:	a3 95       	inc	r26
    1ae0:	d2 f3       	brmi	.-12     	; 0x1ad6 <modf+0x22>
    1ae2:	00 20       	and	r0, r0
    1ae4:	69 f0       	breq	.+26     	; 0x1b00 <modf+0x4c>
    1ae6:	22 0f       	add	r18, r18
    1ae8:	33 1f       	adc	r19, r19
    1aea:	44 1f       	adc	r20, r20
    1aec:	b3 95       	inc	r27
    1aee:	da f3       	brmi	.-10     	; 0x1ae6 <modf+0x32>
    1af0:	0d d0       	rcall	.+26     	; 0x1b0c <modf+0x58>
    1af2:	1b c8       	rjmp	.-4042   	; 0xb2a <__subsf3>
    1af4:	61 30       	cpi	r22, 0x01	; 1
    1af6:	71 05       	cpc	r23, r1
    1af8:	a0 e8       	ldi	r26, 0x80	; 128
    1afa:	8a 07       	cpc	r24, r26
    1afc:	b9 46       	sbci	r27, 0x69	; 105
    1afe:	30 f4       	brcc	.+12     	; 0x1b0c <modf+0x58>
    1b00:	9b 01       	movw	r18, r22
    1b02:	ac 01       	movw	r20, r24
    1b04:	66 27       	eor	r22, r22
    1b06:	77 27       	eor	r23, r23
    1b08:	88 27       	eor	r24, r24
    1b0a:	90 78       	andi	r25, 0x80	; 128
    1b0c:	30 96       	adiw	r30, 0x00	; 0
    1b0e:	21 f0       	breq	.+8      	; 0x1b18 <modf+0x64>
    1b10:	20 83       	st	Z, r18
    1b12:	31 83       	std	Z+1, r19	; 0x01
    1b14:	42 83       	std	Z+2, r20	; 0x02
    1b16:	53 83       	std	Z+3, r21	; 0x03
    1b18:	08 95       	ret

00001b1a <__fp_mpack>:
    1b1a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b1c:	31 f0       	breq	.+12     	; 0x1b2a <__fp_mpack_finite+0xc>

00001b1e <__fp_mpack_finite>:
    1b1e:	91 50       	subi	r25, 0x01	; 1
    1b20:	20 f4       	brcc	.+8      	; 0x1b2a <__fp_mpack_finite+0xc>
    1b22:	87 95       	ror	r24
    1b24:	77 95       	ror	r23
    1b26:	67 95       	ror	r22
    1b28:	b7 95       	ror	r27
    1b2a:	88 0f       	add	r24, r24
    1b2c:	91 1d       	adc	r25, r1
    1b2e:	96 95       	lsr	r25
    1b30:	87 95       	ror	r24
    1b32:	97 f9       	bld	r25, 7
    1b34:	08 95       	ret

00001b36 <__prologue_saves__>:
    1b36:	2f 92       	push	r2
    1b38:	3f 92       	push	r3
    1b3a:	4f 92       	push	r4
    1b3c:	5f 92       	push	r5
    1b3e:	6f 92       	push	r6
    1b40:	7f 92       	push	r7
    1b42:	8f 92       	push	r8
    1b44:	9f 92       	push	r9
    1b46:	af 92       	push	r10
    1b48:	bf 92       	push	r11
    1b4a:	cf 92       	push	r12
    1b4c:	df 92       	push	r13
    1b4e:	ef 92       	push	r14
    1b50:	ff 92       	push	r15
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
    1b5e:	ca 1b       	sub	r28, r26
    1b60:	db 0b       	sbc	r29, r27
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	de bf       	out	0x3e, r29	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	09 94       	ijmp

00001b6e <__epilogue_restores__>:
    1b6e:	2a 88       	ldd	r2, Y+18	; 0x12
    1b70:	39 88       	ldd	r3, Y+17	; 0x11
    1b72:	48 88       	ldd	r4, Y+16	; 0x10
    1b74:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b76:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b78:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b80:	b9 84       	ldd	r11, Y+9	; 0x09
    1b82:	c8 84       	ldd	r12, Y+8	; 0x08
    1b84:	df 80       	ldd	r13, Y+7	; 0x07
    1b86:	ee 80       	ldd	r14, Y+6	; 0x06
    1b88:	fd 80       	ldd	r15, Y+5	; 0x05
    1b8a:	0c 81       	ldd	r16, Y+4	; 0x04
    1b8c:	1b 81       	ldd	r17, Y+3	; 0x03
    1b8e:	aa 81       	ldd	r26, Y+2	; 0x02
    1b90:	b9 81       	ldd	r27, Y+1	; 0x01
    1b92:	ce 0f       	add	r28, r30
    1b94:	d1 1d       	adc	r29, r1
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	ed 01       	movw	r28, r26
    1ba2:	08 95       	ret

00001ba4 <_exit>:
    1ba4:	f8 94       	cli

00001ba6 <__stop_program>:
    1ba6:	ff cf       	rjmp	.-2      	; 0x1ba6 <__stop_program>
