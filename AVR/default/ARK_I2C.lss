
ARK_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00001934  000019c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800064  00800064  000019cc  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001b3  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000656  00000000  00000000  00001b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000026d  00000000  00000000  000021f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000844  00000000  00000000  00002462  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000263  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000178  00000000  00000000  0000305b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000031d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__ctors_end>
       4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      10:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      14:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      18:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      1c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      24:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      28:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      34:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      3c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      40:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      44:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      4c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      50:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__addsf3+0x18>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	7a 10       	cpse	r7, r10
      da:	f3 5a       	subi	r31, 0xA3	; 163
      dc:	00 a0       	ldd	r0, Z+32	; 0x20
      de:	72 4e       	sbci	r23, 0xE2	; 226
      e0:	18 09       	sbc	r17, r8
      e2:	00 10       	cpse	r0, r0
      e4:	a5 d4       	rcall	.+2378   	; 0xa30 <__divsf3_pse+0x92>
      e6:	e8 00       	.word	0x00e8	; ????
      e8:	00 e8       	ldi	r16, 0x80	; 128
      ea:	76 48       	sbci	r23, 0x86	; 134
      ec:	17 00       	.word	0x0017	; ????
      ee:	00 e4       	ldi	r16, 0x40	; 64
      f0:	0b 54       	subi	r16, 0x4B	; 75
      f2:	02 00       	.word	0x0002	; ????
      f4:	00 ca       	rjmp	.-3072   	; 0xfffff4f6 <__eeprom_end+0xff7ef4f6>
      f6:	9a 3b       	cpi	r25, 0xBA	; 186
      f8:	00 00       	nop
      fa:	00 e1       	ldi	r16, 0x10	; 16
      fc:	f5 05       	cpc	r31, r5
      fe:	00 00       	nop
     100:	80 96       	adiw	r24, 0x20	; 32
     102:	98 00       	.word	0x0098	; ????
     104:	00 00       	nop
     106:	40 42       	sbci	r20, 0x20	; 32
     108:	0f 00       	.word	0x000f	; ????
     10a:	00 00       	nop
     10c:	a0 86       	std	Z+8, r10	; 0x08
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	10 27       	eor	r17, r16
     114:	00 00       	nop
     116:	00 00       	nop
     118:	e8 03       	fmulsu	r22, r16
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	64 00       	.word	0x0064	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	0a 00       	.word	0x000a	; ????
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	01 00       	.word	0x0001	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	2c 76       	andi	r18, 0x6C	; 108
     132:	d8 88       	ldd	r13, Y+16	; 0x10
     134:	dc 67       	ori	r29, 0x7C	; 124
     136:	4f 08       	sbc	r4, r15
     138:	23 df       	rcall	.-442    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     13a:	c1 df       	rcall	.-126    	; 0xbe <__SREG__+0x7f>
     13c:	ae 59       	subi	r26, 0x9E	; 158
     13e:	e1 b1       	in	r30, 0x01	; 1
     140:	b7 96       	adiw	r30, 0x27	; 39
     142:	e5 e3       	ldi	r30, 0x35	; 53
     144:	e4 53       	subi	r30, 0x34	; 52
     146:	c6 3a       	cpi	r28, 0xA6	; 166
     148:	e6 51       	subi	r30, 0x16	; 22
     14a:	99 76       	andi	r25, 0x69	; 105
     14c:	96 e8       	ldi	r25, 0x86	; 134
     14e:	e6 c2       	rjmp	.+1484   	; 0x71c <main+0xca>
     150:	84 26       	eor	r8, r20
     152:	eb 89       	ldd	r30, Y+19	; 0x13
     154:	8c 9b       	sbis	0x11, 4	; 17
     156:	62 ed       	ldi	r22, 0xD2	; 210
     158:	40 7c       	andi	r20, 0xC0	; 192
     15a:	6f fc       	.word	0xfc6f	; ????
     15c:	ef bc       	out	0x2f, r14	; 47
     15e:	9c 9f       	mul	r25, r28
     160:	40 f2       	brcs	.-112    	; 0xf2 <__SREG__+0xb3>
     162:	ba a5       	ldd	r27, Y+42	; 0x2a
     164:	6f a5       	ldd	r22, Y+47	; 0x2f
     166:	f4 90       	lpm	r15, Z+
     168:	05 5a       	subi	r16, 0xA5	; 165
     16a:	2a f7       	brpl	.-54     	; 0x136 <__SREG__+0xf7>
     16c:	5c 93       	st	X, r21
     16e:	6b 6c       	ori	r22, 0xCB	; 203
     170:	f9 67       	ori	r31, 0x79	; 121
     172:	6d c1       	rjmp	.+730    	; 0x44e <Read_RawValue+0x62>
     174:	1b fc       	.word	0xfc1b	; ????
     176:	e0 e4       	ldi	r30, 0x40	; 64
     178:	0d 47       	sbci	r16, 0x7D	; 125
     17a:	fe f5       	brtc	.+126    	; 0x1fa <.do_clear_bss_loop>
     17c:	20 e6       	ldi	r18, 0x60	; 96
     17e:	b5 00       	.word	0x00b5	; ????
     180:	d0 ed       	ldi	r29, 0xD0	; 208
     182:	90 2e       	mov	r9, r16
     184:	03 00       	.word	0x0003	; ????
     186:	94 35       	cpi	r25, 0x54	; 84
     188:	77 05       	cpc	r23, r7
     18a:	00 80       	ld	r0, Z
     18c:	84 1e       	adc	r8, r20
     18e:	08 00       	.word	0x0008	; ????
     190:	00 20       	and	r0, r0
     192:	4e 0a       	sbc	r4, r30
     194:	00 00       	nop
     196:	00 c8       	rjmp	.-4096   	; 0xfffff198 <__eeprom_end+0xff7ef198>
     198:	0c 33       	cpi	r16, 0x3C	; 60
     19a:	33 33       	cpi	r19, 0x33	; 51
     19c:	33 0f       	add	r19, r19
     19e:	98 6e       	ori	r25, 0xE8	; 232
     1a0:	12 83       	std	Z+2, r17	; 0x02
     1a2:	11 41       	sbci	r17, 0x11	; 17
     1a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1a6:	21 14       	cp	r2, r1
     1a8:	89 3b       	cpi	r24, 0xB9	; 185
     1aa:	e6 55       	subi	r30, 0x56	; 86
     1ac:	16 cf       	rjmp	.-468    	; 0xffffffda <__eeprom_end+0xff7effda>
     1ae:	fe e6       	ldi	r31, 0x6E	; 110
     1b0:	db 18       	sub	r13, r11
     1b2:	d1 84       	ldd	r13, Z+9	; 0x09
     1b4:	4b 38       	cpi	r20, 0x8B	; 139
     1b6:	1b f7       	brvc	.-58     	; 0x17e <__SREG__+0x13f>
     1b8:	7c 1d       	adc	r23, r12
     1ba:	90 1d       	adc	r25, r0
     1bc:	a4 bb       	out	0x14, r26	; 20
     1be:	e4 24       	eor	r14, r4
     1c0:	20 32       	cpi	r18, 0x20	; 32
     1c2:	84 72       	andi	r24, 0x24	; 36
     1c4:	5e 22       	and	r5, r30
     1c6:	81 00       	.word	0x0081	; ????
     1c8:	c9 f1       	breq	.+114    	; 0x23c <read_adc+0x2e>
     1ca:	24 ec       	ldi	r18, 0xC4	; 196
     1cc:	a1 e5       	ldi	r26, 0x51	; 81
     1ce:	3d 27       	eor	r19, r29

000001d0 <__ctors_end>:
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf e5       	ldi	r28, 0x5F	; 95
     1d6:	d8 e0       	ldi	r29, 0x08	; 8
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
     1dc:	10 e0       	ldi	r17, 0x00	; 0
     1de:	a0 e6       	ldi	r26, 0x60	; 96
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	e4 e3       	ldi	r30, 0x34	; 52
     1e4:	f9 e1       	ldi	r31, 0x19	; 25
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <.do_copy_data_start>

000001e8 <.do_copy_data_loop>:
     1e8:	05 90       	lpm	r0, Z+
     1ea:	0d 92       	st	X+, r0

000001ec <.do_copy_data_start>:
     1ec:	a4 36       	cpi	r26, 0x64	; 100
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <.do_copy_data_loop>

000001f2 <__do_clear_bss>:
     1f2:	10 e0       	ldi	r17, 0x00	; 0
     1f4:	a4 e6       	ldi	r26, 0x64	; 100
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	a0 38       	cpi	r26, 0x80	; 128
     1fe:	b1 07       	cpc	r27, r17
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	0e 94 29 03 	call	0x652	; 0x652 <main>
     206:	0c 94 34 04 	jmp	0x868	; 0x868 <exit>

0000020a <__bad_interrupt>:
     20a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020e <read_adc>:
////////////////////////////////////////////////////////////////////////////


unsigned int read_adc(int axis){

	if(axis==1){		// z axis is PA0
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	91 05       	cpc	r25, r1
     212:	11 f4       	brne	.+4      	; 0x218 <read_adc+0xa>
		ADMUX = 0b10100000;
     214:	80 ea       	ldi	r24, 0xA0	; 160
     216:	0b c0       	rjmp	.+22     	; 0x22e <read_adc+0x20>
	}
	else if(axis==2){	// y axis is PA1
     218:	82 30       	cpi	r24, 0x02	; 2
     21a:	91 05       	cpc	r25, r1
     21c:	11 f4       	brne	.+4      	; 0x222 <read_adc+0x14>
		ADMUX = 0b10100001;
     21e:	81 ea       	ldi	r24, 0xA1	; 161
     220:	06 c0       	rjmp	.+12     	; 0x22e <read_adc+0x20>
	}
	else if(axis==3){	// x axis is PA2
     222:	03 97       	sbiw	r24, 0x03	; 3
     224:	19 f0       	breq	.+6      	; 0x22c <read_adc+0x1e>
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	0b c0       	rjmp	.+22     	; 0x242 <read_adc+0x34>
		ADMUX = 0b10100010;
     22c:	82 ea       	ldi	r24, 0xA2	; 162
     22e:	87 b9       	out	0x07, r24	; 7
	}
	else{
		return 0;
	}
	ADMUX = (1<<REFS0);	// set mux
     230:	80 e4       	ldi	r24, 0x40	; 64
     232:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS0);	// divided by prescale of 32
     234:	85 e8       	ldi	r24, 0x85	; 133
     236:	86 b9       	out	0x06, r24	; 6
	ADCSRA|= (1<<ADSC);	// clear ADSC by writing one to it
     238:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADSC)))	// wait for conversion to complete
     23a:	36 9b       	sbis	0x06, 6	; 6
     23c:	fe cf       	rjmp	.-4      	; 0x23a <read_adc+0x2c>
		;
	return(ADC);		// retuens 10 bit unsigned number
     23e:	24 b1       	in	r18, 0x04	; 4
     240:	35 b1       	in	r19, 0x05	; 5
}
     242:	c9 01       	movw	r24, r18
     244:	08 95       	ret

00000246 <I2C_Start>:
    TWBR = ((F_CPU/SCL_CLK)-16)/(2*pow(4,(TWSR&((1<<TWPS0)|(1<<TWPS1))))); // SCL frequency

}

uint8_t I2C_Start(char slave_write_address)						/* I2C start function */
{
     246:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     248:	84 ea       	ldi	r24, 0xA4	; 164
     24a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     24c:	06 b6       	in	r0, 0x36	; 54
     24e:	07 fe       	sbrs	r0, 7
     250:	fd cf       	rjmp	.-6      	; 0x24c <I2C_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     252:	81 b1       	in	r24, 0x01	; 1
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
     254:	88 7f       	andi	r24, 0xF8	; 248
     256:	88 30       	cpi	r24, 0x08	; 8
     258:	11 f0       	breq	.+4      	; 0x25e <I2C_Start+0x18>
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	08 95       	ret
	return 0;												/* If not then return 0 to indicate start condition fail */
	TWDR = slave_write_address<<1;								/* If yes then write SLA+W in TWI data register */
     25e:	99 0f       	add	r25, r25
     260:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     262:	84 e8       	ldi	r24, 0x84	; 132
     264:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     266:	06 b6       	in	r0, 0x36	; 54
     268:	07 fe       	sbrs	r0, 7
     26a:	fd cf       	rjmp	.-6      	; 0x266 <I2C_Start+0x20>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
     26c:	81 b1       	in	r24, 0x01	; 1
     26e:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
     270:	88 31       	cpi	r24, 0x18	; 24
     272:	11 f4       	brne	.+4      	; 0x278 <I2C_Start+0x32>
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
     278:	80 32       	cpi	r24, 0x20	; 32
     27a:	11 f0       	breq	.+4      	; 0x280 <I2C_Start+0x3a>
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	08 95       	ret
     280:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     282:	08 95       	ret

00000284 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
     284:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     286:	84 ea       	ldi	r24, 0xA4	; 164
     288:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     28a:	06 b6       	in	r0, 0x36	; 54
     28c:	07 fe       	sbrs	r0, 7
     28e:	fd cf       	rjmp	.-6      	; 0x28a <I2C_Repeated_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     290:	81 b1       	in	r24, 0x01	; 1
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     292:	88 7f       	andi	r24, 0xF8	; 248
     294:	80 31       	cpi	r24, 0x10	; 16
     296:	11 f0       	breq	.+4      	; 0x29c <I2C_Repeated_Start+0x18>
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     29c:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     29e:	84 e8       	ldi	r24, 0x84	; 132
     2a0:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     2a2:	06 b6       	in	r0, 0x36	; 54
     2a4:	07 fe       	sbrs	r0, 7
     2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <I2C_Repeated_Start+0x1e>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     2a8:	81 b1       	in	r24, 0x01	; 1
     2aa:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     2ac:	80 34       	cpi	r24, 0x40	; 64
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <I2C_Repeated_Start+0x30>
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     2b4:	80 32       	cpi	r24, 0x20	; 32
     2b6:	11 f0       	breq	.+4      	; 0x2bc <I2C_Repeated_Start+0x38>
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	08 95       	ret
     2bc:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     2be:	08 95       	ret

000002c0 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     2c0:	84 e9       	ldi	r24, 0x94	; 148
     2c2:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     2c4:	06 b6       	in	r0, 0x36	; 54
     2c6:	04 fc       	sbrc	r0, 4
     2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <I2C_Stop+0x4>
}
     2ca:	08 95       	ret

000002cc <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)			/* I2C start wait function */
{
     2cc:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     2ce:	44 ea       	ldi	r20, 0xA4	; 164
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     2d0:	34 e8       	ldi	r19, 0x84	; 132
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     2d2:	24 e9       	ldi	r18, 0x94	; 148
void I2C_Start_Wait(char slave_write_address)			/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     2d4:	46 bf       	out	0x36, r20	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     2d6:	06 b6       	in	r0, 0x36	; 54
     2d8:	07 fe       	sbrs	r0, 7
     2da:	fd cf       	rjmp	.-6      	; 0x2d6 <I2C_Start_Wait+0xa>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     2dc:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     2de:	88 7f       	andi	r24, 0xF8	; 248
     2e0:	88 30       	cpi	r24, 0x08	; 8
     2e2:	c1 f7       	brne	.-16     	; 0x2d4 <I2C_Start_Wait+0x8>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     2e4:	93 b9       	out	0x03, r25	; 3
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     2e6:	36 bf       	out	0x36, r19	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     2e8:	06 b6       	in	r0, 0x36	; 54
     2ea:	07 fe       	sbrs	r0, 7
     2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <I2C_Start_Wait+0x1c>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     2ee:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     2f0:	88 7f       	andi	r24, 0xF8	; 248
     2f2:	88 31       	cpi	r24, 0x18	; 24
     2f4:	29 f0       	breq	.+10     	; 0x300 <I2C_Start_Wait+0x34>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     2f6:	26 bf       	out	0x36, r18	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     2f8:	06 b6       	in	r0, 0x36	; 54
     2fa:	04 fc       	sbrc	r0, 4
     2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <I2C_Start_Wait+0x2c>
     2fe:	ea cf       	rjmp	.-44     	; 0x2d4 <I2C_Start_Wait+0x8>
     300:	08 95       	ret

00000302 <I2C_Write>:
}

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     302:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     304:	84 e8       	ldi	r24, 0x84	; 132
     306:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     308:	06 b6       	in	r0, 0x36	; 54
     30a:	07 fe       	sbrs	r0, 7
     30c:	fd cf       	rjmp	.-6      	; 0x308 <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     30e:	81 b1       	in	r24, 0x01	; 1
     310:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     312:	88 32       	cpi	r24, 0x28	; 40
     314:	11 f4       	brne	.+4      	; 0x31a <I2C_Write+0x18>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	08 95       	ret
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     31a:	80 33       	cpi	r24, 0x30	; 48
     31c:	11 f0       	breq	.+4      	; 0x322 <I2C_Write+0x20>
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	08 95       	ret
     322:	81 e0       	ldi	r24, 0x01	; 1
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     324:	08 95       	ret

00000326 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     326:	84 ec       	ldi	r24, 0xC4	; 196
     328:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     32a:	06 b6       	in	r0, 0x36	; 54
     32c:	07 fe       	sbrs	r0, 7
     32e:	fd cf       	rjmp	.-6      	; 0x32a <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
     330:	83 b1       	in	r24, 0x03	; 3
}	
     332:	08 95       	ret

00000334 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     334:	84 e8       	ldi	r24, 0x84	; 132
     336:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     338:	06 b6       	in	r0, 0x36	; 54
     33a:	07 fe       	sbrs	r0, 7
     33c:	fd cf       	rjmp	.-6      	; 0x338 <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
     33e:	83 b1       	in	r24, 0x03	; 3
}	
     340:	08 95       	ret

00000342 <MPU6050_Init>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     342:	8c e7       	ldi	r24, 0x7C	; 124
     344:	92 e9       	ldi	r25, 0x92	; 146
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <MPU6050_Init+0x4>

void MPU6050_Init()										/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
     34a:	80 ed       	ldi	r24, 0xD0	; 208
     34c:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
     350:	89 e1       	ldi	r24, 0x19	; 25
     352:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
     356:	87 e0       	ldi	r24, 0x07	; 7
     358:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     35c:	84 e9       	ldi	r24, 0x94	; 148
     35e:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     360:	06 b6       	in	r0, 0x36	; 54
     362:	04 fc       	sbrc	r0, 4
     364:	fd cf       	rjmp	.-6      	; 0x360 <MPU6050_Init+0x1e>
	I2C_Start_Wait(0xD0);								/* Start with device write address */
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
	I2C_Write(0x07);									/* 1KHz sample rate */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     366:	80 ed       	ldi	r24, 0xD0	; 208
     368:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
     36c:	8b e6       	ldi	r24, 0x6B	; 107
     36e:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     378:	84 e9       	ldi	r24, 0x94	; 148
     37a:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     37c:	06 b6       	in	r0, 0x36	; 54
     37e:	04 fc       	sbrc	r0, 4
     380:	fd cf       	rjmp	.-6      	; 0x37c <MPU6050_Init+0x3a>
	I2C_Start_Wait(0xD0);
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     382:	80 ed       	ldi	r24, 0xD0	; 208
     384:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
     388:	8a e1       	ldi	r24, 0x1A	; 26
     38a:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     394:	84 e9       	ldi	r24, 0x94	; 148
     396:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     398:	06 b6       	in	r0, 0x36	; 54
     39a:	04 fc       	sbrc	r0, 4
     39c:	fd cf       	rjmp	.-6      	; 0x398 <MPU6050_Init+0x56>
	I2C_Start_Wait(0xD0);
	I2C_Write(CONFIG);									/* Write to Configuration register */
	I2C_Write(0x00);									/* Fs = 8KHz */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     39e:	80 ed       	ldi	r24, 0xD0	; 208
     3a0:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
     3a4:	8b e1       	ldi	r24, 0x1B	; 27
     3a6:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
     3aa:	88 e1       	ldi	r24, 0x18	; 24
     3ac:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3b0:	84 e9       	ldi	r24, 0x94	; 148
     3b2:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3b4:	06 b6       	in	r0, 0x36	; 54
     3b6:	04 fc       	sbrc	r0, 4
     3b8:	fd cf       	rjmp	.-6      	; 0x3b4 <MPU6050_Init+0x72>
	I2C_Start_Wait(0xD0);
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     3ba:	80 ed       	ldi	r24, 0xD0	; 208
     3bc:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
     3c0:	88 e3       	ldi	r24, 0x38	; 56
     3c2:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x01);
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3cc:	84 e9       	ldi	r24, 0x94	; 148
     3ce:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3d0:	06 b6       	in	r0, 0x36	; 54
     3d2:	04 fc       	sbrc	r0, 4
     3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <MPU6050_Init+0x8e>

	I2C_Start_Wait(0xD0);
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
	I2C_Write(0x01);
	I2C_Stop();
}
     3d6:	08 95       	ret

000003d8 <MPU_Start_Loc>:

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
     3d8:	80 ed       	ldi	r24, 0xD0	; 208
     3da:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */ 
     3de:	8b e3       	ldi	r24, 0x3B	; 59
     3e0:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
     3e4:	81 ed       	ldi	r24, 0xD1	; 209
     3e6:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Repeated_Start>
}
     3ea:	08 95       	ret

000003ec <Read_RawValue>:

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
     3ec:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MPU_Start_Loc>
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     3f0:	84 ec       	ldi	r24, 0xC4	; 196
     3f2:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     3f4:	06 b6       	in	r0, 0x36	; 54
     3f6:	07 fe       	sbrs	r0, 7
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <Read_RawValue+0x8>
	return TWDR;											/* Return received data */
     3fa:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     3fc:	84 ec       	ldi	r24, 0xC4	; 196
     3fe:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     400:	06 b6       	in	r0, 0x36	; 54
     402:	07 fe       	sbrs	r0, 7
     404:	fd cf       	rjmp	.-6      	; 0x400 <Read_RawValue+0x14>
	return TWDR;											/* Return received data */
     406:	23 b1       	in	r18, 0x03	; 3
}

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     408:	79 2f       	mov	r23, r25
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	62 2b       	or	r22, r18
     410:	73 2b       	or	r23, r19
     412:	88 27       	eor	r24, r24
     414:	77 fd       	sbrc	r23, 7
     416:	80 95       	com	r24
     418:	98 2f       	mov	r25, r24
     41a:	0e 94 56 05 	call	0xaac	; 0xaac <__floatsisf>
     41e:	60 93 78 00 	sts	0x0078, r22
     422:	70 93 79 00 	sts	0x0079, r23
     426:	80 93 7a 00 	sts	0x007A, r24
     42a:	90 93 7b 00 	sts	0x007B, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     42e:	84 ec       	ldi	r24, 0xC4	; 196
     430:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     432:	06 b6       	in	r0, 0x36	; 54
     434:	07 fe       	sbrs	r0, 7
     436:	fd cf       	rjmp	.-6      	; 0x432 <Read_RawValue+0x46>
	return TWDR;											/* Return received data */
     438:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     43a:	84 ec       	ldi	r24, 0xC4	; 196
     43c:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     43e:	06 b6       	in	r0, 0x36	; 54
     440:	07 fe       	sbrs	r0, 7
     442:	fd cf       	rjmp	.-6      	; 0x43e <Read_RawValue+0x52>
	return TWDR;											/* Return received data */
     444:	23 b1       	in	r18, 0x03	; 3

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     446:	79 2f       	mov	r23, r25
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	62 2b       	or	r22, r18
     44e:	73 2b       	or	r23, r19
     450:	88 27       	eor	r24, r24
     452:	77 fd       	sbrc	r23, 7
     454:	80 95       	com	r24
     456:	98 2f       	mov	r25, r24
     458:	0e 94 56 05 	call	0xaac	; 0xaac <__floatsisf>
     45c:	60 93 70 00 	sts	0x0070, r22
     460:	70 93 71 00 	sts	0x0071, r23
     464:	80 93 72 00 	sts	0x0072, r24
     468:	90 93 73 00 	sts	0x0073, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     46c:	84 ec       	ldi	r24, 0xC4	; 196
     46e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     470:	06 b6       	in	r0, 0x36	; 54
     472:	07 fe       	sbrs	r0, 7
     474:	fd cf       	rjmp	.-6      	; 0x470 <Read_RawValue+0x84>
	return TWDR;											/* Return received data */
     476:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     478:	84 ec       	ldi	r24, 0xC4	; 196
     47a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     47c:	06 b6       	in	r0, 0x36	; 54
     47e:	07 fe       	sbrs	r0, 7
     480:	fd cf       	rjmp	.-6      	; 0x47c <Read_RawValue+0x90>
	return TWDR;											/* Return received data */
     482:	23 b1       	in	r18, 0x03	; 3
void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     484:	79 2f       	mov	r23, r25
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	62 2b       	or	r22, r18
     48c:	73 2b       	or	r23, r19
     48e:	88 27       	eor	r24, r24
     490:	77 fd       	sbrc	r23, 7
     492:	80 95       	com	r24
     494:	98 2f       	mov	r25, r24
     496:	0e 94 56 05 	call	0xaac	; 0xaac <__floatsisf>
     49a:	60 93 64 00 	sts	0x0064, r22
     49e:	70 93 65 00 	sts	0x0065, r23
     4a2:	80 93 66 00 	sts	0x0066, r24
     4a6:	90 93 67 00 	sts	0x0067, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4aa:	84 ec       	ldi	r24, 0xC4	; 196
     4ac:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4ae:	06 b6       	in	r0, 0x36	; 54
     4b0:	07 fe       	sbrs	r0, 7
     4b2:	fd cf       	rjmp	.-6      	; 0x4ae <Read_RawValue+0xc2>
	return TWDR;											/* Return received data */
     4b4:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4b6:	84 ec       	ldi	r24, 0xC4	; 196
     4b8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4ba:	06 b6       	in	r0, 0x36	; 54
     4bc:	07 fe       	sbrs	r0, 7
     4be:	fd cf       	rjmp	.-6      	; 0x4ba <Read_RawValue+0xce>
	return TWDR;											/* Return received data */
     4c0:	23 b1       	in	r18, 0x03	; 3
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     4c2:	79 2f       	mov	r23, r25
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	62 2b       	or	r22, r18
     4ca:	73 2b       	or	r23, r19
     4cc:	88 27       	eor	r24, r24
     4ce:	77 fd       	sbrc	r23, 7
     4d0:	80 95       	com	r24
     4d2:	98 2f       	mov	r25, r24
     4d4:	0e 94 56 05 	call	0xaac	; 0xaac <__floatsisf>
     4d8:	60 93 6c 00 	sts	0x006C, r22
     4dc:	70 93 6d 00 	sts	0x006D, r23
     4e0:	80 93 6e 00 	sts	0x006E, r24
     4e4:	90 93 6f 00 	sts	0x006F, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4e8:	84 ec       	ldi	r24, 0xC4	; 196
     4ea:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4ec:	06 b6       	in	r0, 0x36	; 54
     4ee:	07 fe       	sbrs	r0, 7
     4f0:	fd cf       	rjmp	.-6      	; 0x4ec <Read_RawValue+0x100>
	return TWDR;											/* Return received data */
     4f2:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4f4:	84 ec       	ldi	r24, 0xC4	; 196
     4f6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4f8:	06 b6       	in	r0, 0x36	; 54
     4fa:	07 fe       	sbrs	r0, 7
     4fc:	fd cf       	rjmp	.-6      	; 0x4f8 <Read_RawValue+0x10c>
	return TWDR;											/* Return received data */
     4fe:	23 b1       	in	r18, 0x03	; 3
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     500:	79 2f       	mov	r23, r25
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	62 2b       	or	r22, r18
     508:	73 2b       	or	r23, r19
     50a:	88 27       	eor	r24, r24
     50c:	77 fd       	sbrc	r23, 7
     50e:	80 95       	com	r24
     510:	98 2f       	mov	r25, r24
     512:	0e 94 56 05 	call	0xaac	; 0xaac <__floatsisf>
     516:	60 93 68 00 	sts	0x0068, r22
     51a:	70 93 69 00 	sts	0x0069, r23
     51e:	80 93 6a 00 	sts	0x006A, r24
     522:	90 93 6b 00 	sts	0x006B, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     526:	84 ec       	ldi	r24, 0xC4	; 196
     528:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     52a:	06 b6       	in	r0, 0x36	; 54
     52c:	07 fe       	sbrs	r0, 7
     52e:	fd cf       	rjmp	.-6      	; 0x52a <Read_RawValue+0x13e>
	return TWDR;											/* Return received data */
     530:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     532:	84 ec       	ldi	r24, 0xC4	; 196
     534:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     536:	06 b6       	in	r0, 0x36	; 54
     538:	07 fe       	sbrs	r0, 7
     53a:	fd cf       	rjmp	.-6      	; 0x536 <Read_RawValue+0x14a>
	return TWDR;											/* Return received data */
     53c:	23 b1       	in	r18, 0x03	; 3
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     53e:	79 2f       	mov	r23, r25
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	62 2b       	or	r22, r18
     546:	73 2b       	or	r23, r19
     548:	88 27       	eor	r24, r24
     54a:	77 fd       	sbrc	r23, 7
     54c:	80 95       	com	r24
     54e:	98 2f       	mov	r25, r24
     550:	0e 94 56 05 	call	0xaac	; 0xaac <__floatsisf>
     554:	60 93 7c 00 	sts	0x007C, r22
     558:	70 93 7d 00 	sts	0x007D, r23
     55c:	80 93 7e 00 	sts	0x007E, r24
     560:	90 93 7f 00 	sts	0x007F, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     564:	84 ec       	ldi	r24, 0xC4	; 196
     566:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     568:	06 b6       	in	r0, 0x36	; 54
     56a:	07 fe       	sbrs	r0, 7
     56c:	fd cf       	rjmp	.-6      	; 0x568 <Read_RawValue+0x17c>
	return TWDR;											/* Return received data */
     56e:	93 b1       	in	r25, 0x03	; 3
}	

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     570:	84 e8       	ldi	r24, 0x84	; 132
     572:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     574:	06 b6       	in	r0, 0x36	; 54
     576:	07 fe       	sbrs	r0, 7
     578:	fd cf       	rjmp	.-6      	; 0x574 <Read_RawValue+0x188>
	return TWDR;											/* Return received data */
     57a:	23 b1       	in	r18, 0x03	; 3
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     57c:	79 2f       	mov	r23, r25
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	62 2b       	or	r22, r18
     584:	73 2b       	or	r23, r19
     586:	88 27       	eor	r24, r24
     588:	77 fd       	sbrc	r23, 7
     58a:	80 95       	com	r24
     58c:	98 2f       	mov	r25, r24
     58e:	0e 94 56 05 	call	0xaac	; 0xaac <__floatsisf>
     592:	60 93 74 00 	sts	0x0074, r22
     596:	70 93 75 00 	sts	0x0075, r23
     59a:	80 93 76 00 	sts	0x0076, r24
     59e:	90 93 77 00 	sts	0x0077, r25
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     5a2:	84 e9       	ldi	r24, 0x94	; 148
     5a4:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     5a6:	06 b6       	in	r0, 0x36	; 54
     5a8:	04 fc       	sbrc	r0, 4
     5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <Read_RawValue+0x1ba>
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
	I2C_Stop();
}
     5ac:	08 95       	ret

000005ae <USART_Receive>:

// Data from Bluetooth TX given to USART RX
unsigned char USART_Receive( void ){

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) ) {  }
     5ae:	5f 9b       	sbis	0x0b, 7	; 11
     5b0:	fe cf       	rjmp	.-4      	; 0x5ae <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
     5b2:	8c b1       	in	r24, 0x0c	; 12
}
     5b4:	08 95       	ret

000005b6 <USART_Transmit>:

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
     5b6:	5d 9b       	sbis	0x0b, 5	; 11
     5b8:	fe cf       	rjmp	.-4      	; 0x5b6 <USART_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
     5ba:	8c b9       	out	0x0c, r24	; 12
}
     5bc:	08 95       	ret

000005be <USART_SendString>:

/* Send string of USART data function */ 
void USART_SendString(char *str){
     5be:	fc 01       	movw	r30, r24
     5c0:	04 c0       	rjmp	.+8      	; 0x5ca <USART_SendString+0xc>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
     5c2:	5d 9b       	sbis	0x0b, 5	; 11
     5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <USART_SendString+0x4>

	/* Put data into buffer, sends the data */
	UDR = data;
     5c6:	8c b9       	out	0x0c, r24	; 12
     5c8:	31 96       	adiw	r30, 0x01	; 1
/* Send string of USART data function */ 
void USART_SendString(char *str){

	int i=0;			
	/* Send each char of string till the NULL */														
	while (str[i]!=0){
     5ca:	80 81       	ld	r24, Z
     5cc:	88 23       	and	r24, r24
     5ce:	c9 f7       	brne	.-14     	; 0x5c2 <USART_SendString+0x4>
		USART_Transmit( str[i] );
		i++;
	}
}
     5d0:	08 95       	ret

000005d2 <USART_Flush>:

// Flush USART
void USART_Flush( void ){
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <USART_Flush+0x4>

	unsigned char dummy;
	while ( UCSRA & (1<<RXC) ) dummy = UDR;
     5d4:	8c b1       	in	r24, 0x0c	; 12
     5d6:	5f 99       	sbic	0x0b, 7	; 11
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <USART_Flush+0x2>
}
     5da:	08 95       	ret

000005dc <USART_Init>:

// Initialize USART
void USART_Init( unsigned int baud ){
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
     5dc:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
     5de:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X);
     5e0:	59 9a       	sbi	0x0b, 1	; 11

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
     5e2:	88 e1       	ldi	r24, 0x18	; 24
     5e4:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     5e6:	8e e8       	ldi	r24, 0x8E	; 142
     5e8:	80 bd       	out	0x20, r24	; 32
}
     5ea:	08 95       	ret

000005ec <Bluetooth_Init>:

// Initialize Bluetooth connection through USART
void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
     5ec:	8c e0       	ldi	r24, 0x0C	; 12
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <USART_Init>
	while (*cmd != '\0'){
		USART_Transmit( *cmd );
		++cmd;
	}
	*/
}
     5f4:	08 95       	ret

000005f6 <USART_Start_Timer>:

void USART_Start_Timer(){

	TCCR1B |= (1 << CS11);	// Timer1 prescaler = 8
     5f6:	8e b5       	in	r24, 0x2e	; 46
     5f8:	82 60       	ori	r24, 0x02	; 2
     5fa:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;				// Clear the timer counter
     5fc:	1d bc       	out	0x2d, r1	; 45
     5fe:	1c bc       	out	0x2c, r1	; 44
	TIMSK = (1 << TOIE1);	// Enable timer1 overflow interrupt(TOIE1)
     600:	84 e0       	ldi	r24, 0x04	; 4
     602:	89 bf       	out	0x39, r24	; 57
	sei();					// Enable global interrupts
     604:	78 94       	sei
}
     606:	08 95       	ret

00000608 <init_clock>:


void init_clock(){

	/* Initialize clock settings */
	TWSR = 0x00; // set presca1er bits to 1 (0x00=1, 0x01=4, 0x02=16, 0x03=64)
     608:	11 b8       	out	0x01, r1	; 1
    TWBR = ((F_CPU/SCL_CLK)-16)/(2*pow(4,(TWSR&((1<<TWPS0)|(1<<TWPS1))))); // SCL frequency
     60a:	61 b1       	in	r22, 0x01	; 1
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	63 70       	andi	r22, 0x03	; 3
     610:	70 70       	andi	r23, 0x00	; 0
     612:	88 27       	eor	r24, r24
     614:	77 fd       	sbrc	r23, 7
     616:	80 95       	com	r24
     618:	98 2f       	mov	r25, r24
     61a:	0e 94 56 05 	call	0xaac	; 0xaac <__floatsisf>
     61e:	9b 01       	movw	r18, r22
     620:	ac 01       	movw	r20, r24
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	80 e8       	ldi	r24, 0x80	; 128
     628:	90 e4       	ldi	r25, 0x40	; 64
     62a:	0e 94 45 06 	call	0xc8a	; 0xc8a <pow>
     62e:	9b 01       	movw	r18, r22
     630:	ac 01       	movw	r20, r24
     632:	ca 01       	movw	r24, r20
     634:	b9 01       	movw	r22, r18
     636:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <__addsf3>
     63a:	9b 01       	movw	r18, r22
     63c:	ac 01       	movw	r20, r24
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	80 e8       	ldi	r24, 0x80	; 128
     644:	92 e4       	ldi	r25, 0x42	; 66
     646:	0e 94 c0 04 	call	0x980	; 0x980 <__divsf3>
     64a:	0e 94 28 05 	call	0xa50	; 0xa50 <__fixunssfsi>
     64e:	60 b9       	out	0x00, r22	; 0

}
     650:	08 95       	ret

00000652 <main>:
// 																		  //
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


int main(void) {
     652:	2f 92       	push	r2
     654:	3f 92       	push	r3
     656:	4f 92       	push	r4
     658:	5f 92       	push	r5
     65a:	6f 92       	push	r6
     65c:	7f 92       	push	r7
     65e:	8f 92       	push	r8
     660:	9f 92       	push	r9
     662:	af 92       	push	r10
     664:	bf 92       	push	r11
     666:	cf 92       	push	r12
     668:	df 92       	push	r13
     66a:	ef 92       	push	r14
     66c:	ff 92       	push	r15
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	df 93       	push	r29
     674:	cf 93       	push	r28
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	a7 97       	sbiw	r28, 0x27	; 39
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
	char buffer[20], float_[10];
	float Xa,Ya,Za;
	float Xg=0,Yg=0,Zg=0;

	// initialize bluetooth, USART, mpu6050
	Bluetooth_Init();
     686:	0e 94 f6 02 	call	0x5ec	; 0x5ec <Bluetooth_Init>
	init_clock();
     68a:	0e 94 04 03 	call	0x608	; 0x608 <init_clock>
	MPU6050_Init();
     68e:	0e 94 a1 01 	call	0x342	; 0x342 <MPU6050_Init>
				dtostrf( Yg, 3, 2, float_ );
				sprintf(buffer,"%s\n",float_);
				USART_SendString(buffer);		
		}
		if(DATA_IN == '6') {	// print acceleration x
				dtostrf( Zg, 3, 2, float_ );
     692:	1e 01       	movw	r2, r28
     694:	08 94       	sec
     696:	21 1c       	adc	r2, r1
     698:	31 1c       	adc	r3, r1
				sprintf(buffer,"%s\n",float_);
     69a:	8b e0       	ldi	r24, 0x0B	; 11
     69c:	48 2e       	mov	r4, r24
     69e:	51 2c       	mov	r5, r1
     6a0:	4c 0e       	add	r4, r28
     6a2:	5d 1e       	adc	r5, r29

// Data from Bluetooth TX given to USART RX
unsigned char USART_Receive( void ){

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) ) {  }
     6a4:	5f 9b       	sbis	0x0b, 7	; 11
     6a6:	fe cf       	rjmp	.-4      	; 0x6a4 <main+0x52>
	/* Get and return received data from buffer */
	return UDR;
     6a8:	2c b1       	in	r18, 0x0c	; 12
     6aa:	2f 8f       	std	Y+31, r18	; 0x1f
	
	while(1){

		DATA_IN = USART_Receive(); // check input
	
		Read_RawValue();
     6ac:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Read_RawValue>

		Xa = Acc_x/16384.0;								
     6b0:	80 91 78 00 	lds	r24, 0x0078
     6b4:	90 91 79 00 	lds	r25, 0x0079
     6b8:	a0 91 7a 00 	lds	r26, 0x007A
     6bc:	b0 91 7b 00 	lds	r27, 0x007B
     6c0:	8c a3       	std	Y+36, r24	; 0x24
     6c2:	9d a3       	std	Y+37, r25	; 0x25
     6c4:	ae a3       	std	Y+38, r26	; 0x26
     6c6:	bf a3       	std	Y+39, r27	; 0x27
		Ya = Acc_y/16384.0;
     6c8:	20 91 70 00 	lds	r18, 0x0070
     6cc:	30 91 71 00 	lds	r19, 0x0071
     6d0:	40 91 72 00 	lds	r20, 0x0072
     6d4:	50 91 73 00 	lds	r21, 0x0073
		Za = Acc_z/16384.0;
     6d8:	e0 90 64 00 	lds	r14, 0x0064
     6dc:	f0 90 65 00 	lds	r15, 0x0065
     6e0:	00 91 66 00 	lds	r16, 0x0066
     6e4:	10 91 67 00 	lds	r17, 0x0067
		
		Xg = Gyro_x/16.4;
     6e8:	a0 90 68 00 	lds	r10, 0x0068
     6ec:	b0 90 69 00 	lds	r11, 0x0069
     6f0:	c0 90 6a 00 	lds	r12, 0x006A
     6f4:	d0 90 6b 00 	lds	r13, 0x006B
		Yg = Gyro_y/16.4;
     6f8:	60 90 7c 00 	lds	r6, 0x007C
     6fc:	70 90 7d 00 	lds	r7, 0x007D
     700:	80 90 7e 00 	lds	r8, 0x007E
     704:	90 90 7f 00 	lds	r9, 0x007F
		Zg = Gyro_z/16.4;
     708:	80 91 74 00 	lds	r24, 0x0074
     70c:	90 91 75 00 	lds	r25, 0x0075
     710:	a0 91 76 00 	lds	r26, 0x0076
     714:	b0 91 77 00 	lds	r27, 0x0077
     718:	88 a3       	std	Y+32, r24	; 0x20
     71a:	99 a3       	std	Y+33, r25	; 0x21
     71c:	aa a3       	std	Y+34, r26	; 0x22
     71e:	bb a3       	std	Y+35, r27	; 0x23

		if(DATA_IN == '1') {	// print acceleration x
     720:	9f 8d       	ldd	r25, Y+31	; 0x1f
     722:	91 33       	cpi	r25, 0x31	; 49
     724:	29 f4       	brne	.+10     	; 0x730 <main+0xde>
				dtostrf( Xa, 3, 2, float_ );				
     726:	6c a1       	ldd	r22, Y+36	; 0x24
     728:	7d a1       	ldd	r23, Y+37	; 0x25
     72a:	8e a1       	ldd	r24, Y+38	; 0x26
     72c:	9f a1       	ldd	r25, Y+39	; 0x27
     72e:	0b c0       	rjmp	.+22     	; 0x746 <main+0xf4>
				sprintf(buffer,"%s\n",float_);
				USART_SendString(buffer);
		}
		if(DATA_IN == '2') {	// print acceleration x
     730:	bf 8d       	ldd	r27, Y+31	; 0x1f
     732:	b2 33       	cpi	r27, 0x32	; 50
     734:	19 f4       	brne	.+6      	; 0x73c <main+0xea>
				dtostrf( Ya, 3, 2, float_ );
     736:	ca 01       	movw	r24, r20
     738:	b9 01       	movw	r22, r18
     73a:	05 c0       	rjmp	.+10     	; 0x746 <main+0xf4>
				sprintf(buffer,"%s\n",float_);
				USART_SendString(buffer);		
		}
		if(DATA_IN == '3') {	// print acceleration x
     73c:	bf 8d       	ldd	r27, Y+31	; 0x1f
     73e:	b3 33       	cpi	r27, 0x33	; 51
     740:	69 f5       	brne	.+90     	; 0x79c <main+0x14a>
				dtostrf( Za, 3, 2, float_ );
     742:	c8 01       	movw	r24, r16
     744:	b7 01       	movw	r22, r14
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e8       	ldi	r20, 0x80	; 128
     74c:	58 e3       	ldi	r21, 0x38	; 56
     74e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__mulsf3>
     752:	43 e0       	ldi	r20, 0x03	; 3
     754:	22 e0       	ldi	r18, 0x02	; 2
     756:	81 01       	movw	r16, r2
     758:	0e 94 13 04 	call	0x826	; 0x826 <dtostrf>
				sprintf(buffer,"%s\n",float_);
     75c:	00 d0       	rcall	.+0      	; 0x75e <main+0x10c>
     75e:	00 d0       	rcall	.+0      	; 0x760 <main+0x10e>
     760:	00 d0       	rcall	.+0      	; 0x762 <main+0x110>
     762:	ed b7       	in	r30, 0x3d	; 61
     764:	fe b7       	in	r31, 0x3e	; 62
     766:	31 96       	adiw	r30, 0x01	; 1
     768:	ad b7       	in	r26, 0x3d	; 61
     76a:	be b7       	in	r27, 0x3e	; 62
     76c:	12 96       	adiw	r26, 0x02	; 2
     76e:	5c 92       	st	X, r5
     770:	4e 92       	st	-X, r4
     772:	11 97       	sbiw	r26, 0x01	; 1
     774:	80 e6       	ldi	r24, 0x60	; 96
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	93 83       	std	Z+3, r25	; 0x03
     77a:	82 83       	std	Z+2, r24	; 0x02
     77c:	35 82       	std	Z+5, r3	; 0x05
     77e:	24 82       	std	Z+4, r2	; 0x04
     780:	0e 94 37 04 	call	0x86e	; 0x86e <sprintf>
				USART_SendString(buffer);		
     784:	ad b7       	in	r26, 0x3d	; 61
     786:	be b7       	in	r27, 0x3e	; 62
     788:	16 96       	adiw	r26, 0x06	; 6
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	be bf       	out	0x3e, r27	; 62
     790:	0f be       	out	0x3f, r0	; 63
     792:	ad bf       	out	0x3d, r26	; 61
     794:	c2 01       	movw	r24, r4
     796:	0e 94 df 02 	call	0x5be	; 0x5be <USART_SendString>
     79a:	12 c0       	rjmp	.+36     	; 0x7c0 <main+0x16e>
		}
		if(DATA_IN == '4') {	// print acceleration x
     79c:	bf 8d       	ldd	r27, Y+31	; 0x1f
     79e:	b4 33       	cpi	r27, 0x34	; 52
     7a0:	19 f4       	brne	.+6      	; 0x7a8 <main+0x156>
				dtostrf( Xg, 3, 2, float_ );
     7a2:	c6 01       	movw	r24, r12
     7a4:	b5 01       	movw	r22, r10
     7a6:	05 c0       	rjmp	.+10     	; 0x7b2 <main+0x160>
				sprintf(buffer,"%s\n",float_);
				USART_SendString(buffer);		
		}
		if(DATA_IN == '5') {	// print acceleration x
     7a8:	bf 8d       	ldd	r27, Y+31	; 0x1f
     7aa:	b5 33       	cpi	r27, 0x35	; 53
     7ac:	49 f4       	brne	.+18     	; 0x7c0 <main+0x16e>
				dtostrf( Yg, 3, 2, float_ );
     7ae:	c4 01       	movw	r24, r8
     7b0:	b3 01       	movw	r22, r6
     7b2:	23 e3       	ldi	r18, 0x33	; 51
     7b4:	33 e3       	ldi	r19, 0x33	; 51
     7b6:	43 e8       	ldi	r20, 0x83	; 131
     7b8:	51 e4       	ldi	r21, 0x41	; 65
     7ba:	0e 94 c0 04 	call	0x980	; 0x980 <__divsf3>
     7be:	0e c0       	rjmp	.+28     	; 0x7dc <main+0x18a>
		Ya = Acc_y/16384.0;
		Za = Acc_z/16384.0;
		
		Xg = Gyro_x/16.4;
		Yg = Gyro_y/16.4;
		Zg = Gyro_z/16.4;
     7c0:	68 a1       	ldd	r22, Y+32	; 0x20
     7c2:	79 a1       	ldd	r23, Y+33	; 0x21
     7c4:	8a a1       	ldd	r24, Y+34	; 0x22
     7c6:	9b a1       	ldd	r25, Y+35	; 0x23
     7c8:	23 e3       	ldi	r18, 0x33	; 51
     7ca:	33 e3       	ldi	r19, 0x33	; 51
     7cc:	43 e8       	ldi	r20, 0x83	; 131
     7ce:	51 e4       	ldi	r21, 0x41	; 65
     7d0:	0e 94 c0 04 	call	0x980	; 0x980 <__divsf3>
		if(DATA_IN == '5') {	// print acceleration x
				dtostrf( Yg, 3, 2, float_ );
				sprintf(buffer,"%s\n",float_);
				USART_SendString(buffer);		
		}
		if(DATA_IN == '6') {	// print acceleration x
     7d4:	bf 8d       	ldd	r27, Y+31	; 0x1f
     7d6:	b6 33       	cpi	r27, 0x36	; 54
     7d8:	09 f0       	breq	.+2      	; 0x7dc <main+0x18a>
     7da:	64 cf       	rjmp	.-312    	; 0x6a4 <main+0x52>
				dtostrf( Zg, 3, 2, float_ );
     7dc:	43 e0       	ldi	r20, 0x03	; 3
     7de:	22 e0       	ldi	r18, 0x02	; 2
     7e0:	81 01       	movw	r16, r2
     7e2:	0e 94 13 04 	call	0x826	; 0x826 <dtostrf>
				sprintf(buffer,"%s\n",float_);
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <main+0x196>
     7e8:	00 d0       	rcall	.+0      	; 0x7ea <main+0x198>
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <main+0x19a>
     7ec:	ed b7       	in	r30, 0x3d	; 61
     7ee:	fe b7       	in	r31, 0x3e	; 62
     7f0:	31 96       	adiw	r30, 0x01	; 1
     7f2:	ad b7       	in	r26, 0x3d	; 61
     7f4:	be b7       	in	r27, 0x3e	; 62
     7f6:	12 96       	adiw	r26, 0x02	; 2
     7f8:	5c 92       	st	X, r5
     7fa:	4e 92       	st	-X, r4
     7fc:	11 97       	sbiw	r26, 0x01	; 1
     7fe:	80 e6       	ldi	r24, 0x60	; 96
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	93 83       	std	Z+3, r25	; 0x03
     804:	82 83       	std	Z+2, r24	; 0x02
     806:	35 82       	std	Z+5, r3	; 0x05
     808:	24 82       	std	Z+4, r2	; 0x04
     80a:	0e 94 37 04 	call	0x86e	; 0x86e <sprintf>
				USART_SendString(buffer);		
     80e:	ad b7       	in	r26, 0x3d	; 61
     810:	be b7       	in	r27, 0x3e	; 62
     812:	16 96       	adiw	r26, 0x06	; 6
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	be bf       	out	0x3e, r27	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	ad bf       	out	0x3d, r26	; 61
     81e:	c2 01       	movw	r24, r4
     820:	0e 94 df 02 	call	0x5be	; 0x5be <USART_SendString>
     824:	3f cf       	rjmp	.-386    	; 0x6a4 <main+0x52>

00000826 <dtostrf>:
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	f2 2f       	mov	r31, r18
     830:	f0 2e       	mov	r15, r16
     832:	47 fd       	sbrc	r20, 7
     834:	02 c0       	rjmp	.+4      	; 0x83a <dtostrf+0x14>
     836:	e4 e0       	ldi	r30, 0x04	; 4
     838:	01 c0       	rjmp	.+2      	; 0x83c <dtostrf+0x16>
     83a:	e4 e1       	ldi	r30, 0x14	; 20
     83c:	24 2f       	mov	r18, r20
     83e:	33 27       	eor	r19, r19
     840:	27 fd       	sbrc	r18, 7
     842:	30 95       	com	r19
     844:	37 ff       	sbrs	r19, 7
     846:	03 c0       	rjmp	.+6      	; 0x84e <dtostrf+0x28>
     848:	30 95       	com	r19
     84a:	21 95       	neg	r18
     84c:	3f 4f       	sbci	r19, 0xFF	; 255
     84e:	4f 2d       	mov	r20, r15
     850:	51 2f       	mov	r21, r17
     852:	0f 2f       	mov	r16, r31
     854:	ee 2e       	mov	r14, r30
     856:	0e 94 6e 08 	call	0x10dc	; 0x10dc <dtoa_prf>
     85a:	8f 2d       	mov	r24, r15
     85c:	91 2f       	mov	r25, r17
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	08 95       	ret

00000868 <exit>:
     868:	f8 94       	cli
     86a:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <_exit>

0000086e <sprintf>:
     86e:	ae e0       	ldi	r26, 0x0E	; 14
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ed e3       	ldi	r30, 0x3D	; 61
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__prologue_saves__+0x1c>
     87a:	0d 89       	ldd	r16, Y+21	; 0x15
     87c:	1e 89       	ldd	r17, Y+22	; 0x16
     87e:	86 e0       	ldi	r24, 0x06	; 6
     880:	8c 83       	std	Y+4, r24	; 0x04
     882:	1a 83       	std	Y+2, r17	; 0x02
     884:	09 83       	std	Y+1, r16	; 0x01
     886:	8f ef       	ldi	r24, 0xFF	; 255
     888:	9f e7       	ldi	r25, 0x7F	; 127
     88a:	9e 83       	std	Y+6, r25	; 0x06
     88c:	8d 83       	std	Y+5, r24	; 0x05
     88e:	9e 01       	movw	r18, r28
     890:	27 5e       	subi	r18, 0xE7	; 231
     892:	3f 4f       	sbci	r19, 0xFF	; 255
     894:	ce 01       	movw	r24, r28
     896:	01 96       	adiw	r24, 0x01	; 1
     898:	6f 89       	ldd	r22, Y+23	; 0x17
     89a:	78 8d       	ldd	r23, Y+24	; 0x18
     89c:	a9 01       	movw	r20, r18
     89e:	0e 94 91 06 	call	0xd22	; 0xd22 <vfprintf>
     8a2:	2f 81       	ldd	r18, Y+7	; 0x07
     8a4:	38 85       	ldd	r19, Y+8	; 0x08
     8a6:	02 0f       	add	r16, r18
     8a8:	13 1f       	adc	r17, r19
     8aa:	f8 01       	movw	r30, r16
     8ac:	10 82       	st	Z, r1
     8ae:	2e 96       	adiw	r28, 0x0e	; 14
     8b0:	e4 e0       	ldi	r30, 0x04	; 4
     8b2:	0c 94 8b 0c 	jmp	0x1916	; 0x1916 <__epilogue_restores__+0x1c>

000008b6 <__subsf3>:
     8b6:	50 58       	subi	r21, 0x80	; 128

000008b8 <__addsf3>:
     8b8:	bb 27       	eor	r27, r27
     8ba:	aa 27       	eor	r26, r26
     8bc:	0e d0       	rcall	.+28     	; 0x8da <__addsf3x>
     8be:	48 c1       	rjmp	.+656    	; 0xb50 <__fp_round>
     8c0:	39 d1       	rcall	.+626    	; 0xb34 <__fp_pscA>
     8c2:	30 f0       	brcs	.+12     	; 0x8d0 <__addsf3+0x18>
     8c4:	3e d1       	rcall	.+636    	; 0xb42 <__fp_pscB>
     8c6:	20 f0       	brcs	.+8      	; 0x8d0 <__addsf3+0x18>
     8c8:	31 f4       	brne	.+12     	; 0x8d6 <__addsf3+0x1e>
     8ca:	9f 3f       	cpi	r25, 0xFF	; 255
     8cc:	11 f4       	brne	.+4      	; 0x8d2 <__addsf3+0x1a>
     8ce:	1e f4       	brtc	.+6      	; 0x8d6 <__addsf3+0x1e>
     8d0:	2e c1       	rjmp	.+604    	; 0xb2e <__fp_nan>
     8d2:	0e f4       	brtc	.+2      	; 0x8d6 <__addsf3+0x1e>
     8d4:	e0 95       	com	r30
     8d6:	e7 fb       	bst	r30, 7
     8d8:	24 c1       	rjmp	.+584    	; 0xb22 <__fp_inf>

000008da <__addsf3x>:
     8da:	e9 2f       	mov	r30, r25
     8dc:	4a d1       	rcall	.+660    	; 0xb72 <__fp_split3>
     8de:	80 f3       	brcs	.-32     	; 0x8c0 <__addsf3+0x8>
     8e0:	ba 17       	cp	r27, r26
     8e2:	62 07       	cpc	r22, r18
     8e4:	73 07       	cpc	r23, r19
     8e6:	84 07       	cpc	r24, r20
     8e8:	95 07       	cpc	r25, r21
     8ea:	18 f0       	brcs	.+6      	; 0x8f2 <__addsf3x+0x18>
     8ec:	71 f4       	brne	.+28     	; 0x90a <__addsf3x+0x30>
     8ee:	9e f5       	brtc	.+102    	; 0x956 <__addsf3x+0x7c>
     8f0:	62 c1       	rjmp	.+708    	; 0xbb6 <__fp_zero>
     8f2:	0e f4       	brtc	.+2      	; 0x8f6 <__addsf3x+0x1c>
     8f4:	e0 95       	com	r30
     8f6:	0b 2e       	mov	r0, r27
     8f8:	ba 2f       	mov	r27, r26
     8fa:	a0 2d       	mov	r26, r0
     8fc:	0b 01       	movw	r0, r22
     8fe:	b9 01       	movw	r22, r18
     900:	90 01       	movw	r18, r0
     902:	0c 01       	movw	r0, r24
     904:	ca 01       	movw	r24, r20
     906:	a0 01       	movw	r20, r0
     908:	11 24       	eor	r1, r1
     90a:	ff 27       	eor	r31, r31
     90c:	59 1b       	sub	r21, r25
     90e:	99 f0       	breq	.+38     	; 0x936 <__addsf3x+0x5c>
     910:	59 3f       	cpi	r21, 0xF9	; 249
     912:	50 f4       	brcc	.+20     	; 0x928 <__addsf3x+0x4e>
     914:	50 3e       	cpi	r21, 0xE0	; 224
     916:	68 f1       	brcs	.+90     	; 0x972 <__addsf3x+0x98>
     918:	1a 16       	cp	r1, r26
     91a:	f0 40       	sbci	r31, 0x00	; 0
     91c:	a2 2f       	mov	r26, r18
     91e:	23 2f       	mov	r18, r19
     920:	34 2f       	mov	r19, r20
     922:	44 27       	eor	r20, r20
     924:	58 5f       	subi	r21, 0xF8	; 248
     926:	f3 cf       	rjmp	.-26     	; 0x90e <__addsf3x+0x34>
     928:	46 95       	lsr	r20
     92a:	37 95       	ror	r19
     92c:	27 95       	ror	r18
     92e:	a7 95       	ror	r26
     930:	f0 40       	sbci	r31, 0x00	; 0
     932:	53 95       	inc	r21
     934:	c9 f7       	brne	.-14     	; 0x928 <__addsf3x+0x4e>
     936:	7e f4       	brtc	.+30     	; 0x956 <__addsf3x+0x7c>
     938:	1f 16       	cp	r1, r31
     93a:	ba 0b       	sbc	r27, r26
     93c:	62 0b       	sbc	r22, r18
     93e:	73 0b       	sbc	r23, r19
     940:	84 0b       	sbc	r24, r20
     942:	ba f0       	brmi	.+46     	; 0x972 <__addsf3x+0x98>
     944:	91 50       	subi	r25, 0x01	; 1
     946:	a1 f0       	breq	.+40     	; 0x970 <__addsf3x+0x96>
     948:	ff 0f       	add	r31, r31
     94a:	bb 1f       	adc	r27, r27
     94c:	66 1f       	adc	r22, r22
     94e:	77 1f       	adc	r23, r23
     950:	88 1f       	adc	r24, r24
     952:	c2 f7       	brpl	.-16     	; 0x944 <__addsf3x+0x6a>
     954:	0e c0       	rjmp	.+28     	; 0x972 <__addsf3x+0x98>
     956:	ba 0f       	add	r27, r26
     958:	62 1f       	adc	r22, r18
     95a:	73 1f       	adc	r23, r19
     95c:	84 1f       	adc	r24, r20
     95e:	48 f4       	brcc	.+18     	; 0x972 <__addsf3x+0x98>
     960:	87 95       	ror	r24
     962:	77 95       	ror	r23
     964:	67 95       	ror	r22
     966:	b7 95       	ror	r27
     968:	f7 95       	ror	r31
     96a:	9e 3f       	cpi	r25, 0xFE	; 254
     96c:	08 f0       	brcs	.+2      	; 0x970 <__addsf3x+0x96>
     96e:	b3 cf       	rjmp	.-154    	; 0x8d6 <__addsf3+0x1e>
     970:	93 95       	inc	r25
     972:	88 0f       	add	r24, r24
     974:	08 f0       	brcs	.+2      	; 0x978 <__addsf3x+0x9e>
     976:	99 27       	eor	r25, r25
     978:	ee 0f       	add	r30, r30
     97a:	97 95       	ror	r25
     97c:	87 95       	ror	r24
     97e:	08 95       	ret

00000980 <__divsf3>:
     980:	0c d0       	rcall	.+24     	; 0x99a <__divsf3x>
     982:	e6 c0       	rjmp	.+460    	; 0xb50 <__fp_round>
     984:	de d0       	rcall	.+444    	; 0xb42 <__fp_pscB>
     986:	40 f0       	brcs	.+16     	; 0x998 <__divsf3+0x18>
     988:	d5 d0       	rcall	.+426    	; 0xb34 <__fp_pscA>
     98a:	30 f0       	brcs	.+12     	; 0x998 <__divsf3+0x18>
     98c:	21 f4       	brne	.+8      	; 0x996 <__divsf3+0x16>
     98e:	5f 3f       	cpi	r21, 0xFF	; 255
     990:	19 f0       	breq	.+6      	; 0x998 <__divsf3+0x18>
     992:	c7 c0       	rjmp	.+398    	; 0xb22 <__fp_inf>
     994:	51 11       	cpse	r21, r1
     996:	10 c1       	rjmp	.+544    	; 0xbb8 <__fp_szero>
     998:	ca c0       	rjmp	.+404    	; 0xb2e <__fp_nan>

0000099a <__divsf3x>:
     99a:	eb d0       	rcall	.+470    	; 0xb72 <__fp_split3>
     99c:	98 f3       	brcs	.-26     	; 0x984 <__divsf3+0x4>

0000099e <__divsf3_pse>:
     99e:	99 23       	and	r25, r25
     9a0:	c9 f3       	breq	.-14     	; 0x994 <__divsf3+0x14>
     9a2:	55 23       	and	r21, r21
     9a4:	b1 f3       	breq	.-20     	; 0x992 <__divsf3+0x12>
     9a6:	95 1b       	sub	r25, r21
     9a8:	55 0b       	sbc	r21, r21
     9aa:	bb 27       	eor	r27, r27
     9ac:	aa 27       	eor	r26, r26
     9ae:	62 17       	cp	r22, r18
     9b0:	73 07       	cpc	r23, r19
     9b2:	84 07       	cpc	r24, r20
     9b4:	38 f0       	brcs	.+14     	; 0x9c4 <__divsf3_pse+0x26>
     9b6:	9f 5f       	subi	r25, 0xFF	; 255
     9b8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ba:	22 0f       	add	r18, r18
     9bc:	33 1f       	adc	r19, r19
     9be:	44 1f       	adc	r20, r20
     9c0:	aa 1f       	adc	r26, r26
     9c2:	a9 f3       	breq	.-22     	; 0x9ae <__divsf3_pse+0x10>
     9c4:	33 d0       	rcall	.+102    	; 0xa2c <__divsf3_pse+0x8e>
     9c6:	0e 2e       	mov	r0, r30
     9c8:	3a f0       	brmi	.+14     	; 0x9d8 <__divsf3_pse+0x3a>
     9ca:	e0 e8       	ldi	r30, 0x80	; 128
     9cc:	30 d0       	rcall	.+96     	; 0xa2e <__divsf3_pse+0x90>
     9ce:	91 50       	subi	r25, 0x01	; 1
     9d0:	50 40       	sbci	r21, 0x00	; 0
     9d2:	e6 95       	lsr	r30
     9d4:	00 1c       	adc	r0, r0
     9d6:	ca f7       	brpl	.-14     	; 0x9ca <__divsf3_pse+0x2c>
     9d8:	29 d0       	rcall	.+82     	; 0xa2c <__divsf3_pse+0x8e>
     9da:	fe 2f       	mov	r31, r30
     9dc:	27 d0       	rcall	.+78     	; 0xa2c <__divsf3_pse+0x8e>
     9de:	66 0f       	add	r22, r22
     9e0:	77 1f       	adc	r23, r23
     9e2:	88 1f       	adc	r24, r24
     9e4:	bb 1f       	adc	r27, r27
     9e6:	26 17       	cp	r18, r22
     9e8:	37 07       	cpc	r19, r23
     9ea:	48 07       	cpc	r20, r24
     9ec:	ab 07       	cpc	r26, r27
     9ee:	b0 e8       	ldi	r27, 0x80	; 128
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <__divsf3_pse+0x56>
     9f2:	bb 0b       	sbc	r27, r27
     9f4:	80 2d       	mov	r24, r0
     9f6:	bf 01       	movw	r22, r30
     9f8:	ff 27       	eor	r31, r31
     9fa:	93 58       	subi	r25, 0x83	; 131
     9fc:	5f 4f       	sbci	r21, 0xFF	; 255
     9fe:	2a f0       	brmi	.+10     	; 0xa0a <__divsf3_pse+0x6c>
     a00:	9e 3f       	cpi	r25, 0xFE	; 254
     a02:	51 05       	cpc	r21, r1
     a04:	68 f0       	brcs	.+26     	; 0xa20 <__divsf3_pse+0x82>
     a06:	8d c0       	rjmp	.+282    	; 0xb22 <__fp_inf>
     a08:	d7 c0       	rjmp	.+430    	; 0xbb8 <__fp_szero>
     a0a:	5f 3f       	cpi	r21, 0xFF	; 255
     a0c:	ec f3       	brlt	.-6      	; 0xa08 <__divsf3_pse+0x6a>
     a0e:	98 3e       	cpi	r25, 0xE8	; 232
     a10:	dc f3       	brlt	.-10     	; 0xa08 <__divsf3_pse+0x6a>
     a12:	86 95       	lsr	r24
     a14:	77 95       	ror	r23
     a16:	67 95       	ror	r22
     a18:	b7 95       	ror	r27
     a1a:	f7 95       	ror	r31
     a1c:	9f 5f       	subi	r25, 0xFF	; 255
     a1e:	c9 f7       	brne	.-14     	; 0xa12 <__divsf3_pse+0x74>
     a20:	88 0f       	add	r24, r24
     a22:	91 1d       	adc	r25, r1
     a24:	96 95       	lsr	r25
     a26:	87 95       	ror	r24
     a28:	97 f9       	bld	r25, 7
     a2a:	08 95       	ret
     a2c:	e1 e0       	ldi	r30, 0x01	; 1
     a2e:	66 0f       	add	r22, r22
     a30:	77 1f       	adc	r23, r23
     a32:	88 1f       	adc	r24, r24
     a34:	bb 1f       	adc	r27, r27
     a36:	62 17       	cp	r22, r18
     a38:	73 07       	cpc	r23, r19
     a3a:	84 07       	cpc	r24, r20
     a3c:	ba 07       	cpc	r27, r26
     a3e:	20 f0       	brcs	.+8      	; 0xa48 <__divsf3_pse+0xaa>
     a40:	62 1b       	sub	r22, r18
     a42:	73 0b       	sbc	r23, r19
     a44:	84 0b       	sbc	r24, r20
     a46:	ba 0b       	sbc	r27, r26
     a48:	ee 1f       	adc	r30, r30
     a4a:	88 f7       	brcc	.-30     	; 0xa2e <__divsf3_pse+0x90>
     a4c:	e0 95       	com	r30
     a4e:	08 95       	ret

00000a50 <__fixunssfsi>:
     a50:	98 d0       	rcall	.+304    	; 0xb82 <__fp_splitA>
     a52:	88 f0       	brcs	.+34     	; 0xa76 <__fixunssfsi+0x26>
     a54:	9f 57       	subi	r25, 0x7F	; 127
     a56:	90 f0       	brcs	.+36     	; 0xa7c <__fixunssfsi+0x2c>
     a58:	b9 2f       	mov	r27, r25
     a5a:	99 27       	eor	r25, r25
     a5c:	b7 51       	subi	r27, 0x17	; 23
     a5e:	a0 f0       	brcs	.+40     	; 0xa88 <__fixunssfsi+0x38>
     a60:	d1 f0       	breq	.+52     	; 0xa96 <__fixunssfsi+0x46>
     a62:	66 0f       	add	r22, r22
     a64:	77 1f       	adc	r23, r23
     a66:	88 1f       	adc	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	1a f0       	brmi	.+6      	; 0xa72 <__fixunssfsi+0x22>
     a6c:	ba 95       	dec	r27
     a6e:	c9 f7       	brne	.-14     	; 0xa62 <__fixunssfsi+0x12>
     a70:	12 c0       	rjmp	.+36     	; 0xa96 <__fixunssfsi+0x46>
     a72:	b1 30       	cpi	r27, 0x01	; 1
     a74:	81 f0       	breq	.+32     	; 0xa96 <__fixunssfsi+0x46>
     a76:	9f d0       	rcall	.+318    	; 0xbb6 <__fp_zero>
     a78:	b1 e0       	ldi	r27, 0x01	; 1
     a7a:	08 95       	ret
     a7c:	9c c0       	rjmp	.+312    	; 0xbb6 <__fp_zero>
     a7e:	67 2f       	mov	r22, r23
     a80:	78 2f       	mov	r23, r24
     a82:	88 27       	eor	r24, r24
     a84:	b8 5f       	subi	r27, 0xF8	; 248
     a86:	39 f0       	breq	.+14     	; 0xa96 <__fixunssfsi+0x46>
     a88:	b9 3f       	cpi	r27, 0xF9	; 249
     a8a:	cc f3       	brlt	.-14     	; 0xa7e <__fixunssfsi+0x2e>
     a8c:	86 95       	lsr	r24
     a8e:	77 95       	ror	r23
     a90:	67 95       	ror	r22
     a92:	b3 95       	inc	r27
     a94:	d9 f7       	brne	.-10     	; 0xa8c <__fixunssfsi+0x3c>
     a96:	3e f4       	brtc	.+14     	; 0xaa6 <__fixunssfsi+0x56>
     a98:	90 95       	com	r25
     a9a:	80 95       	com	r24
     a9c:	70 95       	com	r23
     a9e:	61 95       	neg	r22
     aa0:	7f 4f       	sbci	r23, 0xFF	; 255
     aa2:	8f 4f       	sbci	r24, 0xFF	; 255
     aa4:	9f 4f       	sbci	r25, 0xFF	; 255
     aa6:	08 95       	ret

00000aa8 <__floatunsisf>:
     aa8:	e8 94       	clt
     aaa:	09 c0       	rjmp	.+18     	; 0xabe <__floatsisf+0x12>

00000aac <__floatsisf>:
     aac:	97 fb       	bst	r25, 7
     aae:	3e f4       	brtc	.+14     	; 0xabe <__floatsisf+0x12>
     ab0:	90 95       	com	r25
     ab2:	80 95       	com	r24
     ab4:	70 95       	com	r23
     ab6:	61 95       	neg	r22
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255
     aba:	8f 4f       	sbci	r24, 0xFF	; 255
     abc:	9f 4f       	sbci	r25, 0xFF	; 255
     abe:	99 23       	and	r25, r25
     ac0:	a9 f0       	breq	.+42     	; 0xaec <__floatsisf+0x40>
     ac2:	f9 2f       	mov	r31, r25
     ac4:	96 e9       	ldi	r25, 0x96	; 150
     ac6:	bb 27       	eor	r27, r27
     ac8:	93 95       	inc	r25
     aca:	f6 95       	lsr	r31
     acc:	87 95       	ror	r24
     ace:	77 95       	ror	r23
     ad0:	67 95       	ror	r22
     ad2:	b7 95       	ror	r27
     ad4:	f1 11       	cpse	r31, r1
     ad6:	f8 cf       	rjmp	.-16     	; 0xac8 <__floatsisf+0x1c>
     ad8:	fa f4       	brpl	.+62     	; 0xb18 <__floatsisf+0x6c>
     ada:	bb 0f       	add	r27, r27
     adc:	11 f4       	brne	.+4      	; 0xae2 <__floatsisf+0x36>
     ade:	60 ff       	sbrs	r22, 0
     ae0:	1b c0       	rjmp	.+54     	; 0xb18 <__floatsisf+0x6c>
     ae2:	6f 5f       	subi	r22, 0xFF	; 255
     ae4:	7f 4f       	sbci	r23, 0xFF	; 255
     ae6:	8f 4f       	sbci	r24, 0xFF	; 255
     ae8:	9f 4f       	sbci	r25, 0xFF	; 255
     aea:	16 c0       	rjmp	.+44     	; 0xb18 <__floatsisf+0x6c>
     aec:	88 23       	and	r24, r24
     aee:	11 f0       	breq	.+4      	; 0xaf4 <__floatsisf+0x48>
     af0:	96 e9       	ldi	r25, 0x96	; 150
     af2:	11 c0       	rjmp	.+34     	; 0xb16 <__floatsisf+0x6a>
     af4:	77 23       	and	r23, r23
     af6:	21 f0       	breq	.+8      	; 0xb00 <__floatsisf+0x54>
     af8:	9e e8       	ldi	r25, 0x8E	; 142
     afa:	87 2f       	mov	r24, r23
     afc:	76 2f       	mov	r23, r22
     afe:	05 c0       	rjmp	.+10     	; 0xb0a <__floatsisf+0x5e>
     b00:	66 23       	and	r22, r22
     b02:	71 f0       	breq	.+28     	; 0xb20 <__floatsisf+0x74>
     b04:	96 e8       	ldi	r25, 0x86	; 134
     b06:	86 2f       	mov	r24, r22
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	2a f0       	brmi	.+10     	; 0xb18 <__floatsisf+0x6c>
     b0e:	9a 95       	dec	r25
     b10:	66 0f       	add	r22, r22
     b12:	77 1f       	adc	r23, r23
     b14:	88 1f       	adc	r24, r24
     b16:	da f7       	brpl	.-10     	; 0xb0e <__floatsisf+0x62>
     b18:	88 0f       	add	r24, r24
     b1a:	96 95       	lsr	r25
     b1c:	87 95       	ror	r24
     b1e:	97 f9       	bld	r25, 7
     b20:	08 95       	ret

00000b22 <__fp_inf>:
     b22:	97 f9       	bld	r25, 7
     b24:	9f 67       	ori	r25, 0x7F	; 127
     b26:	80 e8       	ldi	r24, 0x80	; 128
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	08 95       	ret

00000b2e <__fp_nan>:
     b2e:	9f ef       	ldi	r25, 0xFF	; 255
     b30:	80 ec       	ldi	r24, 0xC0	; 192
     b32:	08 95       	ret

00000b34 <__fp_pscA>:
     b34:	00 24       	eor	r0, r0
     b36:	0a 94       	dec	r0
     b38:	16 16       	cp	r1, r22
     b3a:	17 06       	cpc	r1, r23
     b3c:	18 06       	cpc	r1, r24
     b3e:	09 06       	cpc	r0, r25
     b40:	08 95       	ret

00000b42 <__fp_pscB>:
     b42:	00 24       	eor	r0, r0
     b44:	0a 94       	dec	r0
     b46:	12 16       	cp	r1, r18
     b48:	13 06       	cpc	r1, r19
     b4a:	14 06       	cpc	r1, r20
     b4c:	05 06       	cpc	r0, r21
     b4e:	08 95       	ret

00000b50 <__fp_round>:
     b50:	09 2e       	mov	r0, r25
     b52:	03 94       	inc	r0
     b54:	00 0c       	add	r0, r0
     b56:	11 f4       	brne	.+4      	; 0xb5c <__fp_round+0xc>
     b58:	88 23       	and	r24, r24
     b5a:	52 f0       	brmi	.+20     	; 0xb70 <__fp_round+0x20>
     b5c:	bb 0f       	add	r27, r27
     b5e:	40 f4       	brcc	.+16     	; 0xb70 <__fp_round+0x20>
     b60:	bf 2b       	or	r27, r31
     b62:	11 f4       	brne	.+4      	; 0xb68 <__fp_round+0x18>
     b64:	60 ff       	sbrs	r22, 0
     b66:	04 c0       	rjmp	.+8      	; 0xb70 <__fp_round+0x20>
     b68:	6f 5f       	subi	r22, 0xFF	; 255
     b6a:	7f 4f       	sbci	r23, 0xFF	; 255
     b6c:	8f 4f       	sbci	r24, 0xFF	; 255
     b6e:	9f 4f       	sbci	r25, 0xFF	; 255
     b70:	08 95       	ret

00000b72 <__fp_split3>:
     b72:	57 fd       	sbrc	r21, 7
     b74:	90 58       	subi	r25, 0x80	; 128
     b76:	44 0f       	add	r20, r20
     b78:	55 1f       	adc	r21, r21
     b7a:	59 f0       	breq	.+22     	; 0xb92 <__fp_splitA+0x10>
     b7c:	5f 3f       	cpi	r21, 0xFF	; 255
     b7e:	71 f0       	breq	.+28     	; 0xb9c <__fp_splitA+0x1a>
     b80:	47 95       	ror	r20

00000b82 <__fp_splitA>:
     b82:	88 0f       	add	r24, r24
     b84:	97 fb       	bst	r25, 7
     b86:	99 1f       	adc	r25, r25
     b88:	61 f0       	breq	.+24     	; 0xba2 <__fp_splitA+0x20>
     b8a:	9f 3f       	cpi	r25, 0xFF	; 255
     b8c:	79 f0       	breq	.+30     	; 0xbac <__fp_splitA+0x2a>
     b8e:	87 95       	ror	r24
     b90:	08 95       	ret
     b92:	12 16       	cp	r1, r18
     b94:	13 06       	cpc	r1, r19
     b96:	14 06       	cpc	r1, r20
     b98:	55 1f       	adc	r21, r21
     b9a:	f2 cf       	rjmp	.-28     	; 0xb80 <__fp_split3+0xe>
     b9c:	46 95       	lsr	r20
     b9e:	f1 df       	rcall	.-30     	; 0xb82 <__fp_splitA>
     ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <__fp_splitA+0x30>
     ba2:	16 16       	cp	r1, r22
     ba4:	17 06       	cpc	r1, r23
     ba6:	18 06       	cpc	r1, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	f1 cf       	rjmp	.-30     	; 0xb8e <__fp_splitA+0xc>
     bac:	86 95       	lsr	r24
     bae:	71 05       	cpc	r23, r1
     bb0:	61 05       	cpc	r22, r1
     bb2:	08 94       	sec
     bb4:	08 95       	ret

00000bb6 <__fp_zero>:
     bb6:	e8 94       	clt

00000bb8 <__fp_szero>:
     bb8:	bb 27       	eor	r27, r27
     bba:	66 27       	eor	r22, r22
     bbc:	77 27       	eor	r23, r23
     bbe:	cb 01       	movw	r24, r22
     bc0:	97 f9       	bld	r25, 7
     bc2:	08 95       	ret

00000bc4 <__mulsf3>:
     bc4:	0b d0       	rcall	.+22     	; 0xbdc <__mulsf3x>
     bc6:	c4 cf       	rjmp	.-120    	; 0xb50 <__fp_round>
     bc8:	b5 df       	rcall	.-150    	; 0xb34 <__fp_pscA>
     bca:	28 f0       	brcs	.+10     	; 0xbd6 <__mulsf3+0x12>
     bcc:	ba df       	rcall	.-140    	; 0xb42 <__fp_pscB>
     bce:	18 f0       	brcs	.+6      	; 0xbd6 <__mulsf3+0x12>
     bd0:	95 23       	and	r25, r21
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <__mulsf3+0x12>
     bd4:	a6 cf       	rjmp	.-180    	; 0xb22 <__fp_inf>
     bd6:	ab cf       	rjmp	.-170    	; 0xb2e <__fp_nan>
     bd8:	11 24       	eor	r1, r1
     bda:	ee cf       	rjmp	.-36     	; 0xbb8 <__fp_szero>

00000bdc <__mulsf3x>:
     bdc:	ca df       	rcall	.-108    	; 0xb72 <__fp_split3>
     bde:	a0 f3       	brcs	.-24     	; 0xbc8 <__mulsf3+0x4>

00000be0 <__mulsf3_pse>:
     be0:	95 9f       	mul	r25, r21
     be2:	d1 f3       	breq	.-12     	; 0xbd8 <__mulsf3+0x14>
     be4:	95 0f       	add	r25, r21
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	55 1f       	adc	r21, r21
     bea:	62 9f       	mul	r22, r18
     bec:	f0 01       	movw	r30, r0
     bee:	72 9f       	mul	r23, r18
     bf0:	bb 27       	eor	r27, r27
     bf2:	f0 0d       	add	r31, r0
     bf4:	b1 1d       	adc	r27, r1
     bf6:	63 9f       	mul	r22, r19
     bf8:	aa 27       	eor	r26, r26
     bfa:	f0 0d       	add	r31, r0
     bfc:	b1 1d       	adc	r27, r1
     bfe:	aa 1f       	adc	r26, r26
     c00:	64 9f       	mul	r22, r20
     c02:	66 27       	eor	r22, r22
     c04:	b0 0d       	add	r27, r0
     c06:	a1 1d       	adc	r26, r1
     c08:	66 1f       	adc	r22, r22
     c0a:	82 9f       	mul	r24, r18
     c0c:	22 27       	eor	r18, r18
     c0e:	b0 0d       	add	r27, r0
     c10:	a1 1d       	adc	r26, r1
     c12:	62 1f       	adc	r22, r18
     c14:	73 9f       	mul	r23, r19
     c16:	b0 0d       	add	r27, r0
     c18:	a1 1d       	adc	r26, r1
     c1a:	62 1f       	adc	r22, r18
     c1c:	83 9f       	mul	r24, r19
     c1e:	a0 0d       	add	r26, r0
     c20:	61 1d       	adc	r22, r1
     c22:	22 1f       	adc	r18, r18
     c24:	74 9f       	mul	r23, r20
     c26:	33 27       	eor	r19, r19
     c28:	a0 0d       	add	r26, r0
     c2a:	61 1d       	adc	r22, r1
     c2c:	23 1f       	adc	r18, r19
     c2e:	84 9f       	mul	r24, r20
     c30:	60 0d       	add	r22, r0
     c32:	21 1d       	adc	r18, r1
     c34:	82 2f       	mov	r24, r18
     c36:	76 2f       	mov	r23, r22
     c38:	6a 2f       	mov	r22, r26
     c3a:	11 24       	eor	r1, r1
     c3c:	9f 57       	subi	r25, 0x7F	; 127
     c3e:	50 40       	sbci	r21, 0x00	; 0
     c40:	8a f0       	brmi	.+34     	; 0xc64 <__mulsf3_pse+0x84>
     c42:	e1 f0       	breq	.+56     	; 0xc7c <__mulsf3_pse+0x9c>
     c44:	88 23       	and	r24, r24
     c46:	4a f0       	brmi	.+18     	; 0xc5a <__mulsf3_pse+0x7a>
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	bb 1f       	adc	r27, r27
     c4e:	66 1f       	adc	r22, r22
     c50:	77 1f       	adc	r23, r23
     c52:	88 1f       	adc	r24, r24
     c54:	91 50       	subi	r25, 0x01	; 1
     c56:	50 40       	sbci	r21, 0x00	; 0
     c58:	a9 f7       	brne	.-22     	; 0xc44 <__mulsf3_pse+0x64>
     c5a:	9e 3f       	cpi	r25, 0xFE	; 254
     c5c:	51 05       	cpc	r21, r1
     c5e:	70 f0       	brcs	.+28     	; 0xc7c <__mulsf3_pse+0x9c>
     c60:	60 cf       	rjmp	.-320    	; 0xb22 <__fp_inf>
     c62:	aa cf       	rjmp	.-172    	; 0xbb8 <__fp_szero>
     c64:	5f 3f       	cpi	r21, 0xFF	; 255
     c66:	ec f3       	brlt	.-6      	; 0xc62 <__mulsf3_pse+0x82>
     c68:	98 3e       	cpi	r25, 0xE8	; 232
     c6a:	dc f3       	brlt	.-10     	; 0xc62 <__mulsf3_pse+0x82>
     c6c:	86 95       	lsr	r24
     c6e:	77 95       	ror	r23
     c70:	67 95       	ror	r22
     c72:	b7 95       	ror	r27
     c74:	f7 95       	ror	r31
     c76:	e7 95       	ror	r30
     c78:	9f 5f       	subi	r25, 0xFF	; 255
     c7a:	c1 f7       	brne	.-16     	; 0xc6c <__mulsf3_pse+0x8c>
     c7c:	fe 2b       	or	r31, r30
     c7e:	88 0f       	add	r24, r24
     c80:	91 1d       	adc	r25, r1
     c82:	96 95       	lsr	r25
     c84:	87 95       	ror	r24
     c86:	97 f9       	bld	r25, 7
     c88:	08 95       	ret

00000c8a <pow>:
     c8a:	fa 01       	movw	r30, r20
     c8c:	ee 0f       	add	r30, r30
     c8e:	ff 1f       	adc	r31, r31
     c90:	30 96       	adiw	r30, 0x00	; 0
     c92:	21 05       	cpc	r18, r1
     c94:	31 05       	cpc	r19, r1
     c96:	99 f1       	breq	.+102    	; 0xcfe <pow+0x74>
     c98:	61 15       	cp	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	61 f4       	brne	.+24     	; 0xcb6 <pow+0x2c>
     c9e:	80 38       	cpi	r24, 0x80	; 128
     ca0:	bf e3       	ldi	r27, 0x3F	; 63
     ca2:	9b 07       	cpc	r25, r27
     ca4:	49 f1       	breq	.+82     	; 0xcf8 <pow+0x6e>
     ca6:	68 94       	set
     ca8:	90 38       	cpi	r25, 0x80	; 128
     caa:	81 05       	cpc	r24, r1
     cac:	61 f0       	breq	.+24     	; 0xcc6 <pow+0x3c>
     cae:	80 38       	cpi	r24, 0x80	; 128
     cb0:	bf ef       	ldi	r27, 0xFF	; 255
     cb2:	9b 07       	cpc	r25, r27
     cb4:	41 f0       	breq	.+16     	; 0xcc6 <pow+0x3c>
     cb6:	99 23       	and	r25, r25
     cb8:	42 f5       	brpl	.+80     	; 0xd0a <pow+0x80>
     cba:	ff 3f       	cpi	r31, 0xFF	; 255
     cbc:	e1 05       	cpc	r30, r1
     cbe:	31 05       	cpc	r19, r1
     cc0:	21 05       	cpc	r18, r1
     cc2:	11 f1       	breq	.+68     	; 0xd08 <pow+0x7e>
     cc4:	e8 94       	clt
     cc6:	08 94       	sec
     cc8:	e7 95       	ror	r30
     cca:	d9 01       	movw	r26, r18
     ccc:	aa 23       	and	r26, r26
     cce:	29 f4       	brne	.+10     	; 0xcda <pow+0x50>
     cd0:	ab 2f       	mov	r26, r27
     cd2:	be 2f       	mov	r27, r30
     cd4:	f8 5f       	subi	r31, 0xF8	; 248
     cd6:	d0 f3       	brcs	.-12     	; 0xccc <pow+0x42>
     cd8:	10 c0       	rjmp	.+32     	; 0xcfa <pow+0x70>
     cda:	ff 5f       	subi	r31, 0xFF	; 255
     cdc:	70 f4       	brcc	.+28     	; 0xcfa <pow+0x70>
     cde:	a6 95       	lsr	r26
     ce0:	e0 f7       	brcc	.-8      	; 0xcda <pow+0x50>
     ce2:	f7 39       	cpi	r31, 0x97	; 151
     ce4:	50 f0       	brcs	.+20     	; 0xcfa <pow+0x70>
     ce6:	19 f0       	breq	.+6      	; 0xcee <pow+0x64>
     ce8:	ff 3a       	cpi	r31, 0xAF	; 175
     cea:	38 f4       	brcc	.+14     	; 0xcfa <pow+0x70>
     cec:	9f 77       	andi	r25, 0x7F	; 127
     cee:	9f 93       	push	r25
     cf0:	0c d0       	rcall	.+24     	; 0xd0a <pow+0x80>
     cf2:	0f 90       	pop	r0
     cf4:	07 fc       	sbrc	r0, 7
     cf6:	90 58       	subi	r25, 0x80	; 128
     cf8:	08 95       	ret
     cfa:	3e f0       	brts	.+14     	; 0xd0a <pow+0x80>
     cfc:	18 cf       	rjmp	.-464    	; 0xb2e <__fp_nan>
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	70 e0       	ldi	r23, 0x00	; 0
     d02:	80 e8       	ldi	r24, 0x80	; 128
     d04:	9f e3       	ldi	r25, 0x3F	; 63
     d06:	08 95       	ret
     d08:	4f e7       	ldi	r20, 0x7F	; 127
     d0a:	9f 77       	andi	r25, 0x7F	; 127
     d0c:	5f 93       	push	r21
     d0e:	4f 93       	push	r20
     d10:	3f 93       	push	r19
     d12:	2f 93       	push	r18
     d14:	55 d5       	rcall	.+2730   	; 0x17c0 <log>
     d16:	2f 91       	pop	r18
     d18:	3f 91       	pop	r19
     d1a:	4f 91       	pop	r20
     d1c:	5f 91       	pop	r21
     d1e:	52 df       	rcall	.-348    	; 0xbc4 <__mulsf3>
     d20:	bc c4       	rjmp	.+2424   	; 0x169a <exp>

00000d22 <vfprintf>:
     d22:	ab e0       	ldi	r26, 0x0B	; 11
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e7 e9       	ldi	r30, 0x97	; 151
     d28:	f6 e0       	ldi	r31, 0x06	; 6
     d2a:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__prologue_saves__>
     d2e:	3c 01       	movw	r6, r24
     d30:	2b 01       	movw	r4, r22
     d32:	5a 01       	movw	r10, r20
     d34:	fc 01       	movw	r30, r24
     d36:	17 82       	std	Z+7, r1	; 0x07
     d38:	16 82       	std	Z+6, r1	; 0x06
     d3a:	83 81       	ldd	r24, Z+3	; 0x03
     d3c:	81 fd       	sbrc	r24, 1
     d3e:	03 c0       	rjmp	.+6      	; 0xd46 <vfprintf+0x24>
     d40:	6f ef       	ldi	r22, 0xFF	; 255
     d42:	7f ef       	ldi	r23, 0xFF	; 255
     d44:	c6 c1       	rjmp	.+908    	; 0x10d2 <vfprintf+0x3b0>
     d46:	9a e0       	ldi	r25, 0x0A	; 10
     d48:	89 2e       	mov	r8, r25
     d4a:	1e 01       	movw	r2, r28
     d4c:	08 94       	sec
     d4e:	21 1c       	adc	r2, r1
     d50:	31 1c       	adc	r3, r1
     d52:	f3 01       	movw	r30, r6
     d54:	23 81       	ldd	r18, Z+3	; 0x03
     d56:	f2 01       	movw	r30, r4
     d58:	23 fd       	sbrc	r18, 3
     d5a:	85 91       	lpm	r24, Z+
     d5c:	23 ff       	sbrs	r18, 3
     d5e:	81 91       	ld	r24, Z+
     d60:	2f 01       	movw	r4, r30
     d62:	88 23       	and	r24, r24
     d64:	09 f4       	brne	.+2      	; 0xd68 <vfprintf+0x46>
     d66:	b2 c1       	rjmp	.+868    	; 0x10cc <vfprintf+0x3aa>
     d68:	85 32       	cpi	r24, 0x25	; 37
     d6a:	39 f4       	brne	.+14     	; 0xd7a <vfprintf+0x58>
     d6c:	23 fd       	sbrc	r18, 3
     d6e:	85 91       	lpm	r24, Z+
     d70:	23 ff       	sbrs	r18, 3
     d72:	81 91       	ld	r24, Z+
     d74:	2f 01       	movw	r4, r30
     d76:	85 32       	cpi	r24, 0x25	; 37
     d78:	29 f4       	brne	.+10     	; 0xd84 <vfprintf+0x62>
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	b3 01       	movw	r22, r6
     d7e:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
     d82:	e7 cf       	rjmp	.-50     	; 0xd52 <vfprintf+0x30>
     d84:	98 2f       	mov	r25, r24
     d86:	ff 24       	eor	r15, r15
     d88:	ee 24       	eor	r14, r14
     d8a:	99 24       	eor	r9, r9
     d8c:	ff e1       	ldi	r31, 0x1F	; 31
     d8e:	ff 15       	cp	r31, r15
     d90:	d0 f0       	brcs	.+52     	; 0xdc6 <vfprintf+0xa4>
     d92:	9b 32       	cpi	r25, 0x2B	; 43
     d94:	69 f0       	breq	.+26     	; 0xdb0 <vfprintf+0x8e>
     d96:	9c 32       	cpi	r25, 0x2C	; 44
     d98:	28 f4       	brcc	.+10     	; 0xda4 <vfprintf+0x82>
     d9a:	90 32       	cpi	r25, 0x20	; 32
     d9c:	59 f0       	breq	.+22     	; 0xdb4 <vfprintf+0x92>
     d9e:	93 32       	cpi	r25, 0x23	; 35
     da0:	91 f4       	brne	.+36     	; 0xdc6 <vfprintf+0xa4>
     da2:	0e c0       	rjmp	.+28     	; 0xdc0 <vfprintf+0x9e>
     da4:	9d 32       	cpi	r25, 0x2D	; 45
     da6:	49 f0       	breq	.+18     	; 0xdba <vfprintf+0x98>
     da8:	90 33       	cpi	r25, 0x30	; 48
     daa:	69 f4       	brne	.+26     	; 0xdc6 <vfprintf+0xa4>
     dac:	41 e0       	ldi	r20, 0x01	; 1
     dae:	24 c0       	rjmp	.+72     	; 0xdf8 <vfprintf+0xd6>
     db0:	52 e0       	ldi	r21, 0x02	; 2
     db2:	f5 2a       	or	r15, r21
     db4:	84 e0       	ldi	r24, 0x04	; 4
     db6:	f8 2a       	or	r15, r24
     db8:	28 c0       	rjmp	.+80     	; 0xe0a <vfprintf+0xe8>
     dba:	98 e0       	ldi	r25, 0x08	; 8
     dbc:	f9 2a       	or	r15, r25
     dbe:	25 c0       	rjmp	.+74     	; 0xe0a <vfprintf+0xe8>
     dc0:	e0 e1       	ldi	r30, 0x10	; 16
     dc2:	fe 2a       	or	r15, r30
     dc4:	22 c0       	rjmp	.+68     	; 0xe0a <vfprintf+0xe8>
     dc6:	f7 fc       	sbrc	r15, 7
     dc8:	29 c0       	rjmp	.+82     	; 0xe1c <vfprintf+0xfa>
     dca:	89 2f       	mov	r24, r25
     dcc:	80 53       	subi	r24, 0x30	; 48
     dce:	8a 30       	cpi	r24, 0x0A	; 10
     dd0:	70 f4       	brcc	.+28     	; 0xdee <vfprintf+0xcc>
     dd2:	f6 fe       	sbrs	r15, 6
     dd4:	05 c0       	rjmp	.+10     	; 0xde0 <vfprintf+0xbe>
     dd6:	98 9c       	mul	r9, r8
     dd8:	90 2c       	mov	r9, r0
     dda:	11 24       	eor	r1, r1
     ddc:	98 0e       	add	r9, r24
     dde:	15 c0       	rjmp	.+42     	; 0xe0a <vfprintf+0xe8>
     de0:	e8 9c       	mul	r14, r8
     de2:	e0 2c       	mov	r14, r0
     de4:	11 24       	eor	r1, r1
     de6:	e8 0e       	add	r14, r24
     de8:	f0 e2       	ldi	r31, 0x20	; 32
     dea:	ff 2a       	or	r15, r31
     dec:	0e c0       	rjmp	.+28     	; 0xe0a <vfprintf+0xe8>
     dee:	9e 32       	cpi	r25, 0x2E	; 46
     df0:	29 f4       	brne	.+10     	; 0xdfc <vfprintf+0xda>
     df2:	f6 fc       	sbrc	r15, 6
     df4:	6b c1       	rjmp	.+726    	; 0x10cc <vfprintf+0x3aa>
     df6:	40 e4       	ldi	r20, 0x40	; 64
     df8:	f4 2a       	or	r15, r20
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <vfprintf+0xe8>
     dfc:	9c 36       	cpi	r25, 0x6C	; 108
     dfe:	19 f4       	brne	.+6      	; 0xe06 <vfprintf+0xe4>
     e00:	50 e8       	ldi	r21, 0x80	; 128
     e02:	f5 2a       	or	r15, r21
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <vfprintf+0xe8>
     e06:	98 36       	cpi	r25, 0x68	; 104
     e08:	49 f4       	brne	.+18     	; 0xe1c <vfprintf+0xfa>
     e0a:	f2 01       	movw	r30, r4
     e0c:	23 fd       	sbrc	r18, 3
     e0e:	95 91       	lpm	r25, Z+
     e10:	23 ff       	sbrs	r18, 3
     e12:	91 91       	ld	r25, Z+
     e14:	2f 01       	movw	r4, r30
     e16:	99 23       	and	r25, r25
     e18:	09 f0       	breq	.+2      	; 0xe1c <vfprintf+0xfa>
     e1a:	b8 cf       	rjmp	.-144    	; 0xd8c <vfprintf+0x6a>
     e1c:	89 2f       	mov	r24, r25
     e1e:	85 54       	subi	r24, 0x45	; 69
     e20:	83 30       	cpi	r24, 0x03	; 3
     e22:	18 f0       	brcs	.+6      	; 0xe2a <vfprintf+0x108>
     e24:	80 52       	subi	r24, 0x20	; 32
     e26:	83 30       	cpi	r24, 0x03	; 3
     e28:	38 f4       	brcc	.+14     	; 0xe38 <vfprintf+0x116>
     e2a:	44 e0       	ldi	r20, 0x04	; 4
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	a4 0e       	add	r10, r20
     e30:	b5 1e       	adc	r11, r21
     e32:	5f e3       	ldi	r21, 0x3F	; 63
     e34:	59 83       	std	Y+1, r21	; 0x01
     e36:	0f c0       	rjmp	.+30     	; 0xe56 <vfprintf+0x134>
     e38:	93 36       	cpi	r25, 0x63	; 99
     e3a:	31 f0       	breq	.+12     	; 0xe48 <vfprintf+0x126>
     e3c:	93 37       	cpi	r25, 0x73	; 115
     e3e:	79 f0       	breq	.+30     	; 0xe5e <vfprintf+0x13c>
     e40:	93 35       	cpi	r25, 0x53	; 83
     e42:	09 f0       	breq	.+2      	; 0xe46 <vfprintf+0x124>
     e44:	56 c0       	rjmp	.+172    	; 0xef2 <vfprintf+0x1d0>
     e46:	20 c0       	rjmp	.+64     	; 0xe88 <vfprintf+0x166>
     e48:	f5 01       	movw	r30, r10
     e4a:	80 81       	ld	r24, Z
     e4c:	89 83       	std	Y+1, r24	; 0x01
     e4e:	42 e0       	ldi	r20, 0x02	; 2
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	a4 0e       	add	r10, r20
     e54:	b5 1e       	adc	r11, r21
     e56:	61 01       	movw	r12, r2
     e58:	01 e0       	ldi	r16, 0x01	; 1
     e5a:	10 e0       	ldi	r17, 0x00	; 0
     e5c:	12 c0       	rjmp	.+36     	; 0xe82 <vfprintf+0x160>
     e5e:	f5 01       	movw	r30, r10
     e60:	c0 80       	ld	r12, Z
     e62:	d1 80       	ldd	r13, Z+1	; 0x01
     e64:	f6 fc       	sbrc	r15, 6
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <vfprintf+0x14c>
     e68:	6f ef       	ldi	r22, 0xFF	; 255
     e6a:	7f ef       	ldi	r23, 0xFF	; 255
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <vfprintf+0x150>
     e6e:	69 2d       	mov	r22, r9
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	42 e0       	ldi	r20, 0x02	; 2
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	a4 0e       	add	r10, r20
     e78:	b5 1e       	adc	r11, r21
     e7a:	c6 01       	movw	r24, r12
     e7c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <strnlen>
     e80:	8c 01       	movw	r16, r24
     e82:	5f e7       	ldi	r21, 0x7F	; 127
     e84:	f5 22       	and	r15, r21
     e86:	14 c0       	rjmp	.+40     	; 0xeb0 <vfprintf+0x18e>
     e88:	f5 01       	movw	r30, r10
     e8a:	c0 80       	ld	r12, Z
     e8c:	d1 80       	ldd	r13, Z+1	; 0x01
     e8e:	f6 fc       	sbrc	r15, 6
     e90:	03 c0       	rjmp	.+6      	; 0xe98 <vfprintf+0x176>
     e92:	6f ef       	ldi	r22, 0xFF	; 255
     e94:	7f ef       	ldi	r23, 0xFF	; 255
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <vfprintf+0x17a>
     e98:	69 2d       	mov	r22, r9
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	42 e0       	ldi	r20, 0x02	; 2
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	a4 0e       	add	r10, r20
     ea2:	b5 1e       	adc	r11, r21
     ea4:	c6 01       	movw	r24, r12
     ea6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <strnlen_P>
     eaa:	8c 01       	movw	r16, r24
     eac:	50 e8       	ldi	r21, 0x80	; 128
     eae:	f5 2a       	or	r15, r21
     eb0:	f3 fe       	sbrs	r15, 3
     eb2:	07 c0       	rjmp	.+14     	; 0xec2 <vfprintf+0x1a0>
     eb4:	1a c0       	rjmp	.+52     	; 0xeea <vfprintf+0x1c8>
     eb6:	80 e2       	ldi	r24, 0x20	; 32
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	b3 01       	movw	r22, r6
     ebc:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
     ec0:	ea 94       	dec	r14
     ec2:	8e 2d       	mov	r24, r14
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	08 17       	cp	r16, r24
     ec8:	19 07       	cpc	r17, r25
     eca:	a8 f3       	brcs	.-22     	; 0xeb6 <vfprintf+0x194>
     ecc:	0e c0       	rjmp	.+28     	; 0xeea <vfprintf+0x1c8>
     ece:	f6 01       	movw	r30, r12
     ed0:	f7 fc       	sbrc	r15, 7
     ed2:	85 91       	lpm	r24, Z+
     ed4:	f7 fe       	sbrs	r15, 7
     ed6:	81 91       	ld	r24, Z+
     ed8:	6f 01       	movw	r12, r30
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	b3 01       	movw	r22, r6
     ede:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
     ee2:	e1 10       	cpse	r14, r1
     ee4:	ea 94       	dec	r14
     ee6:	01 50       	subi	r16, 0x01	; 1
     ee8:	10 40       	sbci	r17, 0x00	; 0
     eea:	01 15       	cp	r16, r1
     eec:	11 05       	cpc	r17, r1
     eee:	79 f7       	brne	.-34     	; 0xece <vfprintf+0x1ac>
     ef0:	ea c0       	rjmp	.+468    	; 0x10c6 <vfprintf+0x3a4>
     ef2:	94 36       	cpi	r25, 0x64	; 100
     ef4:	11 f0       	breq	.+4      	; 0xefa <vfprintf+0x1d8>
     ef6:	99 36       	cpi	r25, 0x69	; 105
     ef8:	69 f5       	brne	.+90     	; 0xf54 <vfprintf+0x232>
     efa:	f7 fe       	sbrs	r15, 7
     efc:	08 c0       	rjmp	.+16     	; 0xf0e <vfprintf+0x1ec>
     efe:	f5 01       	movw	r30, r10
     f00:	20 81       	ld	r18, Z
     f02:	31 81       	ldd	r19, Z+1	; 0x01
     f04:	42 81       	ldd	r20, Z+2	; 0x02
     f06:	53 81       	ldd	r21, Z+3	; 0x03
     f08:	84 e0       	ldi	r24, 0x04	; 4
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0a c0       	rjmp	.+20     	; 0xf22 <vfprintf+0x200>
     f0e:	f5 01       	movw	r30, r10
     f10:	80 81       	ld	r24, Z
     f12:	91 81       	ldd	r25, Z+1	; 0x01
     f14:	9c 01       	movw	r18, r24
     f16:	44 27       	eor	r20, r20
     f18:	37 fd       	sbrc	r19, 7
     f1a:	40 95       	com	r20
     f1c:	54 2f       	mov	r21, r20
     f1e:	82 e0       	ldi	r24, 0x02	; 2
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	a8 0e       	add	r10, r24
     f24:	b9 1e       	adc	r11, r25
     f26:	9f e6       	ldi	r25, 0x6F	; 111
     f28:	f9 22       	and	r15, r25
     f2a:	57 ff       	sbrs	r21, 7
     f2c:	09 c0       	rjmp	.+18     	; 0xf40 <vfprintf+0x21e>
     f2e:	50 95       	com	r21
     f30:	40 95       	com	r20
     f32:	30 95       	com	r19
     f34:	21 95       	neg	r18
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	4f 4f       	sbci	r20, 0xFF	; 255
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
     f3c:	e0 e8       	ldi	r30, 0x80	; 128
     f3e:	fe 2a       	or	r15, r30
     f40:	ca 01       	movw	r24, r20
     f42:	b9 01       	movw	r22, r18
     f44:	a1 01       	movw	r20, r2
     f46:	2a e0       	ldi	r18, 0x0A	; 10
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__ultoa_invert>
     f4e:	d8 2e       	mov	r13, r24
     f50:	d2 18       	sub	r13, r2
     f52:	40 c0       	rjmp	.+128    	; 0xfd4 <vfprintf+0x2b2>
     f54:	95 37       	cpi	r25, 0x75	; 117
     f56:	29 f4       	brne	.+10     	; 0xf62 <vfprintf+0x240>
     f58:	1f 2d       	mov	r17, r15
     f5a:	1f 7e       	andi	r17, 0xEF	; 239
     f5c:	2a e0       	ldi	r18, 0x0A	; 10
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	1d c0       	rjmp	.+58     	; 0xf9c <vfprintf+0x27a>
     f62:	1f 2d       	mov	r17, r15
     f64:	19 7f       	andi	r17, 0xF9	; 249
     f66:	9f 36       	cpi	r25, 0x6F	; 111
     f68:	61 f0       	breq	.+24     	; 0xf82 <vfprintf+0x260>
     f6a:	90 37       	cpi	r25, 0x70	; 112
     f6c:	20 f4       	brcc	.+8      	; 0xf76 <vfprintf+0x254>
     f6e:	98 35       	cpi	r25, 0x58	; 88
     f70:	09 f0       	breq	.+2      	; 0xf74 <vfprintf+0x252>
     f72:	ac c0       	rjmp	.+344    	; 0x10cc <vfprintf+0x3aa>
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <vfprintf+0x272>
     f76:	90 37       	cpi	r25, 0x70	; 112
     f78:	39 f0       	breq	.+14     	; 0xf88 <vfprintf+0x266>
     f7a:	98 37       	cpi	r25, 0x78	; 120
     f7c:	09 f0       	breq	.+2      	; 0xf80 <vfprintf+0x25e>
     f7e:	a6 c0       	rjmp	.+332    	; 0x10cc <vfprintf+0x3aa>
     f80:	04 c0       	rjmp	.+8      	; 0xf8a <vfprintf+0x268>
     f82:	28 e0       	ldi	r18, 0x08	; 8
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	0a c0       	rjmp	.+20     	; 0xf9c <vfprintf+0x27a>
     f88:	10 61       	ori	r17, 0x10	; 16
     f8a:	14 fd       	sbrc	r17, 4
     f8c:	14 60       	ori	r17, 0x04	; 4
     f8e:	20 e1       	ldi	r18, 0x10	; 16
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <vfprintf+0x27a>
     f94:	14 fd       	sbrc	r17, 4
     f96:	16 60       	ori	r17, 0x06	; 6
     f98:	20 e1       	ldi	r18, 0x10	; 16
     f9a:	32 e0       	ldi	r19, 0x02	; 2
     f9c:	17 ff       	sbrs	r17, 7
     f9e:	08 c0       	rjmp	.+16     	; 0xfb0 <vfprintf+0x28e>
     fa0:	f5 01       	movw	r30, r10
     fa2:	60 81       	ld	r22, Z
     fa4:	71 81       	ldd	r23, Z+1	; 0x01
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	44 e0       	ldi	r20, 0x04	; 4
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	08 c0       	rjmp	.+16     	; 0xfc0 <vfprintf+0x29e>
     fb0:	f5 01       	movw	r30, r10
     fb2:	80 81       	ld	r24, Z
     fb4:	91 81       	ldd	r25, Z+1	; 0x01
     fb6:	bc 01       	movw	r22, r24
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	42 e0       	ldi	r20, 0x02	; 2
     fbe:	50 e0       	ldi	r21, 0x00	; 0
     fc0:	a4 0e       	add	r10, r20
     fc2:	b5 1e       	adc	r11, r21
     fc4:	a1 01       	movw	r20, r2
     fc6:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__ultoa_invert>
     fca:	d8 2e       	mov	r13, r24
     fcc:	d2 18       	sub	r13, r2
     fce:	8f e7       	ldi	r24, 0x7F	; 127
     fd0:	f8 2e       	mov	r15, r24
     fd2:	f1 22       	and	r15, r17
     fd4:	f6 fe       	sbrs	r15, 6
     fd6:	0b c0       	rjmp	.+22     	; 0xfee <vfprintf+0x2cc>
     fd8:	5e ef       	ldi	r21, 0xFE	; 254
     fda:	f5 22       	and	r15, r21
     fdc:	d9 14       	cp	r13, r9
     fde:	38 f4       	brcc	.+14     	; 0xfee <vfprintf+0x2cc>
     fe0:	f4 fe       	sbrs	r15, 4
     fe2:	07 c0       	rjmp	.+14     	; 0xff2 <vfprintf+0x2d0>
     fe4:	f2 fc       	sbrc	r15, 2
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <vfprintf+0x2d0>
     fe8:	8f ee       	ldi	r24, 0xEF	; 239
     fea:	f8 22       	and	r15, r24
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <vfprintf+0x2d0>
     fee:	1d 2d       	mov	r17, r13
     ff0:	01 c0       	rjmp	.+2      	; 0xff4 <vfprintf+0x2d2>
     ff2:	19 2d       	mov	r17, r9
     ff4:	f4 fe       	sbrs	r15, 4
     ff6:	0d c0       	rjmp	.+26     	; 0x1012 <vfprintf+0x2f0>
     ff8:	fe 01       	movw	r30, r28
     ffa:	ed 0d       	add	r30, r13
     ffc:	f1 1d       	adc	r31, r1
     ffe:	80 81       	ld	r24, Z
    1000:	80 33       	cpi	r24, 0x30	; 48
    1002:	19 f4       	brne	.+6      	; 0x100a <vfprintf+0x2e8>
    1004:	99 ee       	ldi	r25, 0xE9	; 233
    1006:	f9 22       	and	r15, r25
    1008:	08 c0       	rjmp	.+16     	; 0x101a <vfprintf+0x2f8>
    100a:	1f 5f       	subi	r17, 0xFF	; 255
    100c:	f2 fe       	sbrs	r15, 2
    100e:	05 c0       	rjmp	.+10     	; 0x101a <vfprintf+0x2f8>
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <vfprintf+0x2f6>
    1012:	8f 2d       	mov	r24, r15
    1014:	86 78       	andi	r24, 0x86	; 134
    1016:	09 f0       	breq	.+2      	; 0x101a <vfprintf+0x2f8>
    1018:	1f 5f       	subi	r17, 0xFF	; 255
    101a:	0f 2d       	mov	r16, r15
    101c:	f3 fc       	sbrc	r15, 3
    101e:	14 c0       	rjmp	.+40     	; 0x1048 <vfprintf+0x326>
    1020:	f0 fe       	sbrs	r15, 0
    1022:	0f c0       	rjmp	.+30     	; 0x1042 <vfprintf+0x320>
    1024:	1e 15       	cp	r17, r14
    1026:	10 f0       	brcs	.+4      	; 0x102c <vfprintf+0x30a>
    1028:	9d 2c       	mov	r9, r13
    102a:	0b c0       	rjmp	.+22     	; 0x1042 <vfprintf+0x320>
    102c:	9d 2c       	mov	r9, r13
    102e:	9e 0c       	add	r9, r14
    1030:	91 1a       	sub	r9, r17
    1032:	1e 2d       	mov	r17, r14
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <vfprintf+0x320>
    1036:	80 e2       	ldi	r24, 0x20	; 32
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	b3 01       	movw	r22, r6
    103c:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    1040:	1f 5f       	subi	r17, 0xFF	; 255
    1042:	1e 15       	cp	r17, r14
    1044:	c0 f3       	brcs	.-16     	; 0x1036 <vfprintf+0x314>
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <vfprintf+0x32e>
    1048:	1e 15       	cp	r17, r14
    104a:	10 f4       	brcc	.+4      	; 0x1050 <vfprintf+0x32e>
    104c:	e1 1a       	sub	r14, r17
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <vfprintf+0x330>
    1050:	ee 24       	eor	r14, r14
    1052:	04 ff       	sbrs	r16, 4
    1054:	0f c0       	rjmp	.+30     	; 0x1074 <vfprintf+0x352>
    1056:	80 e3       	ldi	r24, 0x30	; 48
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	b3 01       	movw	r22, r6
    105c:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    1060:	02 ff       	sbrs	r16, 2
    1062:	1d c0       	rjmp	.+58     	; 0x109e <vfprintf+0x37c>
    1064:	01 fd       	sbrc	r16, 1
    1066:	03 c0       	rjmp	.+6      	; 0x106e <vfprintf+0x34c>
    1068:	88 e7       	ldi	r24, 0x78	; 120
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e c0       	rjmp	.+28     	; 0x108a <vfprintf+0x368>
    106e:	88 e5       	ldi	r24, 0x58	; 88
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0b c0       	rjmp	.+22     	; 0x108a <vfprintf+0x368>
    1074:	80 2f       	mov	r24, r16
    1076:	86 78       	andi	r24, 0x86	; 134
    1078:	91 f0       	breq	.+36     	; 0x109e <vfprintf+0x37c>
    107a:	01 ff       	sbrs	r16, 1
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <vfprintf+0x360>
    107e:	8b e2       	ldi	r24, 0x2B	; 43
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <vfprintf+0x362>
    1082:	80 e2       	ldi	r24, 0x20	; 32
    1084:	f7 fc       	sbrc	r15, 7
    1086:	8d e2       	ldi	r24, 0x2D	; 45
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	b3 01       	movw	r22, r6
    108c:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    1090:	06 c0       	rjmp	.+12     	; 0x109e <vfprintf+0x37c>
    1092:	80 e3       	ldi	r24, 0x30	; 48
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	b3 01       	movw	r22, r6
    1098:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    109c:	9a 94       	dec	r9
    109e:	d9 14       	cp	r13, r9
    10a0:	c0 f3       	brcs	.-16     	; 0x1092 <vfprintf+0x370>
    10a2:	da 94       	dec	r13
    10a4:	f1 01       	movw	r30, r2
    10a6:	ed 0d       	add	r30, r13
    10a8:	f1 1d       	adc	r31, r1
    10aa:	80 81       	ld	r24, Z
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	b3 01       	movw	r22, r6
    10b0:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    10b4:	dd 20       	and	r13, r13
    10b6:	a9 f7       	brne	.-22     	; 0x10a2 <vfprintf+0x380>
    10b8:	06 c0       	rjmp	.+12     	; 0x10c6 <vfprintf+0x3a4>
    10ba:	80 e2       	ldi	r24, 0x20	; 32
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	b3 01       	movw	r22, r6
    10c0:	0e 94 be 0a 	call	0x157c	; 0x157c <fputc>
    10c4:	ea 94       	dec	r14
    10c6:	ee 20       	and	r14, r14
    10c8:	c1 f7       	brne	.-16     	; 0x10ba <vfprintf+0x398>
    10ca:	43 ce       	rjmp	.-890    	; 0xd52 <vfprintf+0x30>
    10cc:	f3 01       	movw	r30, r6
    10ce:	66 81       	ldd	r22, Z+6	; 0x06
    10d0:	77 81       	ldd	r23, Z+7	; 0x07
    10d2:	cb 01       	movw	r24, r22
    10d4:	2b 96       	adiw	r28, 0x0b	; 11
    10d6:	e2 e1       	ldi	r30, 0x12	; 18
    10d8:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__epilogue_restores__>

000010dc <dtoa_prf>:
    10dc:	a9 e0       	ldi	r26, 0x09	; 9
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e4 e7       	ldi	r30, 0x74	; 116
    10e2:	f8 e0       	ldi	r31, 0x08	; 8
    10e4:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <__prologue_saves__+0x8>
    10e8:	6a 01       	movw	r12, r20
    10ea:	12 2f       	mov	r17, r18
    10ec:	a0 2e       	mov	r10, r16
    10ee:	be 2c       	mov	r11, r14
    10f0:	2b e3       	ldi	r18, 0x3B	; 59
    10f2:	20 17       	cp	r18, r16
    10f4:	18 f4       	brcc	.+6      	; 0x10fc <dtoa_prf+0x20>
    10f6:	2c e3       	ldi	r18, 0x3C	; 60
    10f8:	92 2e       	mov	r9, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <dtoa_prf+0x24>
    10fc:	90 2e       	mov	r9, r16
    10fe:	93 94       	inc	r9
    1100:	ae 01       	movw	r20, r28
    1102:	4f 5f       	subi	r20, 0xFF	; 255
    1104:	5f 4f       	sbci	r21, 0xFF	; 255
    1106:	27 e0       	ldi	r18, 0x07	; 7
    1108:	09 2d       	mov	r16, r9
    110a:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__ftoa_engine>
    110e:	bc 01       	movw	r22, r24
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	e8 2e       	mov	r14, r24
    1114:	ff 24       	eor	r15, r15
    1116:	c7 01       	movw	r24, r14
    1118:	89 70       	andi	r24, 0x09	; 9
    111a:	90 70       	andi	r25, 0x00	; 0
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	11 f4       	brne	.+4      	; 0x1124 <dtoa_prf+0x48>
    1120:	ad e2       	ldi	r26, 0x2D	; 45
    1122:	09 c0       	rjmp	.+18     	; 0x1136 <dtoa_prf+0x5a>
    1124:	b1 fe       	sbrs	r11, 1
    1126:	02 c0       	rjmp	.+4      	; 0x112c <dtoa_prf+0x50>
    1128:	ab e2       	ldi	r26, 0x2B	; 43
    112a:	05 c0       	rjmp	.+10     	; 0x1136 <dtoa_prf+0x5a>
    112c:	b0 fc       	sbrc	r11, 0
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <dtoa_prf+0x58>
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <dtoa_prf+0x5a>
    1134:	a0 e2       	ldi	r26, 0x20	; 32
    1136:	e3 fe       	sbrs	r14, 3
    1138:	3b c0       	rjmp	.+118    	; 0x11b0 <dtoa_prf+0xd4>
    113a:	aa 23       	and	r26, r26
    113c:	11 f4       	brne	.+4      	; 0x1142 <dtoa_prf+0x66>
    113e:	23 e0       	ldi	r18, 0x03	; 3
    1140:	01 c0       	rjmp	.+2      	; 0x1144 <dtoa_prf+0x68>
    1142:	24 e0       	ldi	r18, 0x04	; 4
    1144:	21 17       	cp	r18, r17
    1146:	10 f0       	brcs	.+4      	; 0x114c <dtoa_prf+0x70>
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <dtoa_prf+0x74>
    114c:	12 1b       	sub	r17, r18
    114e:	21 2f       	mov	r18, r17
    1150:	eb 2c       	mov	r14, r11
    1152:	b4 fe       	sbrs	r11, 4
    1154:	02 c0       	rjmp	.+4      	; 0x115a <dtoa_prf+0x7e>
    1156:	32 2f       	mov	r19, r18
    1158:	0a c0       	rjmp	.+20     	; 0x116e <dtoa_prf+0x92>
    115a:	f6 01       	movw	r30, r12
    115c:	32 2f       	mov	r19, r18
    115e:	80 e2       	ldi	r24, 0x20	; 32
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <dtoa_prf+0x8a>
    1162:	81 93       	st	Z+, r24
    1164:	31 50       	subi	r19, 0x01	; 1
    1166:	33 23       	and	r19, r19
    1168:	e1 f7       	brne	.-8      	; 0x1162 <dtoa_prf+0x86>
    116a:	c2 0e       	add	r12, r18
    116c:	d1 1c       	adc	r13, r1
    116e:	aa 23       	and	r26, r26
    1170:	19 f0       	breq	.+6      	; 0x1178 <dtoa_prf+0x9c>
    1172:	f6 01       	movw	r30, r12
    1174:	a1 93       	st	Z+, r26
    1176:	6f 01       	movw	r12, r30
    1178:	f6 01       	movw	r30, r12
    117a:	31 96       	adiw	r30, 0x01	; 1
    117c:	e2 fe       	sbrs	r14, 2
    117e:	05 c0       	rjmp	.+10     	; 0x118a <dtoa_prf+0xae>
    1180:	9e e4       	ldi	r25, 0x4E	; 78
    1182:	d6 01       	movw	r26, r12
    1184:	9c 93       	st	X, r25
    1186:	81 e4       	ldi	r24, 0x41	; 65
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <dtoa_prf+0xb6>
    118a:	9e e6       	ldi	r25, 0x6E	; 110
    118c:	d6 01       	movw	r26, r12
    118e:	9c 93       	st	X, r25
    1190:	81 e6       	ldi	r24, 0x61	; 97
    1192:	11 96       	adiw	r26, 0x01	; 1
    1194:	8c 93       	st	X, r24
    1196:	91 83       	std	Z+1, r25	; 0x01
    1198:	32 96       	adiw	r30, 0x02	; 2
    119a:	df 01       	movw	r26, r30
    119c:	83 2f       	mov	r24, r19
    119e:	90 e2       	ldi	r25, 0x20	; 32
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <dtoa_prf+0xca>
    11a2:	9d 93       	st	X+, r25
    11a4:	81 50       	subi	r24, 0x01	; 1
    11a6:	88 23       	and	r24, r24
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <dtoa_prf+0xc6>
    11aa:	e3 0f       	add	r30, r19
    11ac:	f1 1d       	adc	r31, r1
    11ae:	40 c0       	rjmp	.+128    	; 0x1230 <dtoa_prf+0x154>
    11b0:	e2 fe       	sbrs	r14, 2
    11b2:	42 c0       	rjmp	.+132    	; 0x1238 <dtoa_prf+0x15c>
    11b4:	aa 23       	and	r26, r26
    11b6:	11 f4       	brne	.+4      	; 0x11bc <dtoa_prf+0xe0>
    11b8:	23 e0       	ldi	r18, 0x03	; 3
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <dtoa_prf+0xe2>
    11bc:	24 e0       	ldi	r18, 0x04	; 4
    11be:	21 17       	cp	r18, r17
    11c0:	10 f0       	brcs	.+4      	; 0x11c6 <dtoa_prf+0xea>
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <dtoa_prf+0xee>
    11c6:	12 1b       	sub	r17, r18
    11c8:	21 2f       	mov	r18, r17
    11ca:	eb 2c       	mov	r14, r11
    11cc:	b4 fe       	sbrs	r11, 4
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <dtoa_prf+0xf8>
    11d0:	92 2f       	mov	r25, r18
    11d2:	0a c0       	rjmp	.+20     	; 0x11e8 <dtoa_prf+0x10c>
    11d4:	f6 01       	movw	r30, r12
    11d6:	92 2f       	mov	r25, r18
    11d8:	80 e2       	ldi	r24, 0x20	; 32
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <dtoa_prf+0x104>
    11dc:	81 93       	st	Z+, r24
    11de:	91 50       	subi	r25, 0x01	; 1
    11e0:	99 23       	and	r25, r25
    11e2:	e1 f7       	brne	.-8      	; 0x11dc <dtoa_prf+0x100>
    11e4:	c2 0e       	add	r12, r18
    11e6:	d1 1c       	adc	r13, r1
    11e8:	aa 23       	and	r26, r26
    11ea:	19 f0       	breq	.+6      	; 0x11f2 <dtoa_prf+0x116>
    11ec:	f6 01       	movw	r30, r12
    11ee:	a1 93       	st	Z+, r26
    11f0:	6f 01       	movw	r12, r30
    11f2:	f6 01       	movw	r30, r12
    11f4:	31 96       	adiw	r30, 0x01	; 1
    11f6:	e2 fe       	sbrs	r14, 2
    11f8:	08 c0       	rjmp	.+16     	; 0x120a <dtoa_prf+0x12e>
    11fa:	89 e4       	ldi	r24, 0x49	; 73
    11fc:	d6 01       	movw	r26, r12
    11fe:	8c 93       	st	X, r24
    1200:	8e e4       	ldi	r24, 0x4E	; 78
    1202:	11 96       	adiw	r26, 0x01	; 1
    1204:	8c 93       	st	X, r24
    1206:	86 e4       	ldi	r24, 0x46	; 70
    1208:	07 c0       	rjmp	.+14     	; 0x1218 <dtoa_prf+0x13c>
    120a:	89 e6       	ldi	r24, 0x69	; 105
    120c:	d6 01       	movw	r26, r12
    120e:	8c 93       	st	X, r24
    1210:	8e e6       	ldi	r24, 0x6E	; 110
    1212:	11 96       	adiw	r26, 0x01	; 1
    1214:	8c 93       	st	X, r24
    1216:	86 e6       	ldi	r24, 0x66	; 102
    1218:	81 83       	std	Z+1, r24	; 0x01
    121a:	32 96       	adiw	r30, 0x02	; 2
    121c:	df 01       	movw	r26, r30
    121e:	89 2f       	mov	r24, r25
    1220:	20 e2       	ldi	r18, 0x20	; 32
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <dtoa_prf+0x14c>
    1224:	2d 93       	st	X+, r18
    1226:	81 50       	subi	r24, 0x01	; 1
    1228:	88 23       	and	r24, r24
    122a:	e1 f7       	brne	.-8      	; 0x1224 <dtoa_prf+0x148>
    122c:	e9 0f       	add	r30, r25
    122e:	f1 1d       	adc	r31, r1
    1230:	10 82       	st	Z, r1
    1232:	2e ef       	ldi	r18, 0xFE	; 254
    1234:	3f ef       	ldi	r19, 0xFF	; 255
    1236:	af c0       	rjmp	.+350    	; 0x1396 <dtoa_prf+0x2ba>
    1238:	16 16       	cp	r1, r22
    123a:	17 06       	cpc	r1, r23
    123c:	1c f0       	brlt	.+6      	; 0x1244 <dtoa_prf+0x168>
    123e:	41 e0       	ldi	r20, 0x01	; 1
    1240:	50 e0       	ldi	r21, 0x00	; 0
    1242:	03 c0       	rjmp	.+6      	; 0x124a <dtoa_prf+0x16e>
    1244:	ab 01       	movw	r20, r22
    1246:	4f 5f       	subi	r20, 0xFF	; 255
    1248:	5f 4f       	sbci	r21, 0xFF	; 255
    124a:	aa 20       	and	r10, r10
    124c:	19 f4       	brne	.+6      	; 0x1254 <dtoa_prf+0x178>
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	03 c0       	rjmp	.+6      	; 0x125a <dtoa_prf+0x17e>
    1254:	8a 2d       	mov	r24, r10
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	aa 23       	and	r26, r26
    1260:	11 f0       	breq	.+4      	; 0x1266 <dtoa_prf+0x18a>
    1262:	21 e0       	ldi	r18, 0x01	; 1
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	24 0f       	add	r18, r20
    1268:	35 1f       	adc	r19, r21
    126a:	28 0f       	add	r18, r24
    126c:	39 1f       	adc	r19, r25
    126e:	81 2f       	mov	r24, r17
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	28 17       	cp	r18, r24
    1274:	39 07       	cpc	r19, r25
    1276:	14 f0       	brlt	.+4      	; 0x127c <dtoa_prf+0x1a0>
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <dtoa_prf+0x1a4>
    127c:	12 1b       	sub	r17, r18
    127e:	21 2f       	mov	r18, r17
    1280:	4b 2d       	mov	r20, r11
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	ca 01       	movw	r24, r20
    1286:	80 71       	andi	r24, 0x10	; 16
    1288:	90 70       	andi	r25, 0x00	; 0
    128a:	b4 fc       	sbrc	r11, 4
    128c:	0d c0       	rjmp	.+26     	; 0x12a8 <dtoa_prf+0x1cc>
    128e:	b3 fc       	sbrc	r11, 3
    1290:	0b c0       	rjmp	.+22     	; 0x12a8 <dtoa_prf+0x1cc>
    1292:	f6 01       	movw	r30, r12
    1294:	32 2f       	mov	r19, r18
    1296:	40 e2       	ldi	r20, 0x20	; 32
    1298:	02 c0       	rjmp	.+4      	; 0x129e <dtoa_prf+0x1c2>
    129a:	41 93       	st	Z+, r20
    129c:	31 50       	subi	r19, 0x01	; 1
    129e:	33 23       	and	r19, r19
    12a0:	e1 f7       	brne	.-8      	; 0x129a <dtoa_prf+0x1be>
    12a2:	c2 0e       	add	r12, r18
    12a4:	d1 1c       	adc	r13, r1
    12a6:	01 c0       	rjmp	.+2      	; 0x12aa <dtoa_prf+0x1ce>
    12a8:	32 2f       	mov	r19, r18
    12aa:	aa 23       	and	r26, r26
    12ac:	19 f0       	breq	.+6      	; 0x12b4 <dtoa_prf+0x1d8>
    12ae:	f6 01       	movw	r30, r12
    12b0:	a1 93       	st	Z+, r26
    12b2:	6f 01       	movw	r12, r30
    12b4:	89 2b       	or	r24, r25
    12b6:	11 f0       	breq	.+4      	; 0x12bc <dtoa_prf+0x1e0>
    12b8:	13 2f       	mov	r17, r19
    12ba:	0a c0       	rjmp	.+20     	; 0x12d0 <dtoa_prf+0x1f4>
    12bc:	f6 01       	movw	r30, r12
    12be:	13 2f       	mov	r17, r19
    12c0:	80 e3       	ldi	r24, 0x30	; 48
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <dtoa_prf+0x1ec>
    12c4:	81 93       	st	Z+, r24
    12c6:	11 50       	subi	r17, 0x01	; 1
    12c8:	11 23       	and	r17, r17
    12ca:	e1 f7       	brne	.-8      	; 0x12c4 <dtoa_prf+0x1e8>
    12cc:	c3 0e       	add	r12, r19
    12ce:	d1 1c       	adc	r13, r1
    12d0:	09 2d       	mov	r16, r9
    12d2:	06 0f       	add	r16, r22
    12d4:	ba 80       	ldd	r11, Y+2	; 0x02
    12d6:	90 e1       	ldi	r25, 0x10	; 16
    12d8:	89 2e       	mov	r8, r25
    12da:	91 2c       	mov	r9, r1
    12dc:	8e 20       	and	r8, r14
    12de:	9f 20       	and	r9, r15
    12e0:	e4 fe       	sbrs	r14, 4
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <dtoa_prf+0x210>
    12e4:	f1 e3       	ldi	r31, 0x31	; 49
    12e6:	bf 16       	cp	r11, r31
    12e8:	09 f4       	brne	.+2      	; 0x12ec <dtoa_prf+0x210>
    12ea:	01 50       	subi	r16, 0x01	; 1
    12ec:	10 16       	cp	r1, r16
    12ee:	14 f0       	brlt	.+4      	; 0x12f4 <dtoa_prf+0x218>
    12f0:	01 e0       	ldi	r16, 0x01	; 1
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <dtoa_prf+0x21e>
    12f4:	09 30       	cpi	r16, 0x09	; 9
    12f6:	08 f0       	brcs	.+2      	; 0x12fa <dtoa_prf+0x21e>
    12f8:	08 e0       	ldi	r16, 0x08	; 8
    12fa:	9b 01       	movw	r18, r22
    12fc:	77 ff       	sbrs	r23, 7
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <dtoa_prf+0x228>
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	cb 01       	movw	r24, r22
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	82 1b       	sub	r24, r18
    130a:	93 0b       	sbc	r25, r19
    130c:	fe 01       	movw	r30, r28
    130e:	31 96       	adiw	r30, 0x01	; 1
    1310:	e8 0f       	add	r30, r24
    1312:	f9 1f       	adc	r31, r25
    1314:	8e e2       	ldi	r24, 0x2E	; 46
    1316:	f8 2e       	mov	r15, r24
    1318:	3b 01       	movw	r6, r22
    131a:	60 1a       	sub	r6, r16
    131c:	71 08       	sbc	r7, r1
    131e:	8a 2d       	mov	r24, r10
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	44 27       	eor	r20, r20
    1324:	55 27       	eor	r21, r21
    1326:	48 1b       	sub	r20, r24
    1328:	59 0b       	sbc	r21, r25
    132a:	8f ef       	ldi	r24, 0xFF	; 255
    132c:	2f 3f       	cpi	r18, 0xFF	; 255
    132e:	38 07       	cpc	r19, r24
    1330:	19 f4       	brne	.+6      	; 0x1338 <dtoa_prf+0x25c>
    1332:	d6 01       	movw	r26, r12
    1334:	fd 92       	st	X+, r15
    1336:	6d 01       	movw	r12, r26
    1338:	62 17       	cp	r22, r18
    133a:	73 07       	cpc	r23, r19
    133c:	2c f0       	brlt	.+10     	; 0x1348 <dtoa_prf+0x26c>
    133e:	62 16       	cp	r6, r18
    1340:	73 06       	cpc	r7, r19
    1342:	14 f4       	brge	.+4      	; 0x1348 <dtoa_prf+0x26c>
    1344:	80 81       	ld	r24, Z
    1346:	01 c0       	rjmp	.+2      	; 0x134a <dtoa_prf+0x26e>
    1348:	80 e3       	ldi	r24, 0x30	; 48
    134a:	21 50       	subi	r18, 0x01	; 1
    134c:	30 40       	sbci	r19, 0x00	; 0
    134e:	31 96       	adiw	r30, 0x01	; 1
    1350:	24 17       	cp	r18, r20
    1352:	35 07       	cpc	r19, r21
    1354:	24 f0       	brlt	.+8      	; 0x135e <dtoa_prf+0x282>
    1356:	d6 01       	movw	r26, r12
    1358:	8d 93       	st	X+, r24
    135a:	6d 01       	movw	r12, r26
    135c:	e6 cf       	rjmp	.-52     	; 0x132a <dtoa_prf+0x24e>
    135e:	26 17       	cp	r18, r22
    1360:	37 07       	cpc	r19, r23
    1362:	49 f4       	brne	.+18     	; 0x1376 <dtoa_prf+0x29a>
    1364:	b5 e3       	ldi	r27, 0x35	; 53
    1366:	bb 15       	cp	r27, r11
    1368:	28 f0       	brcs	.+10     	; 0x1374 <dtoa_prf+0x298>
    136a:	bb 16       	cp	r11, r27
    136c:	21 f4       	brne	.+8      	; 0x1376 <dtoa_prf+0x29a>
    136e:	81 14       	cp	r8, r1
    1370:	91 04       	cpc	r9, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <dtoa_prf+0x29a>
    1374:	81 e3       	ldi	r24, 0x31	; 49
    1376:	f6 01       	movw	r30, r12
    1378:	81 93       	st	Z+, r24
    137a:	d6 01       	movw	r26, r12
    137c:	81 2f       	mov	r24, r17
    137e:	90 e2       	ldi	r25, 0x20	; 32
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <dtoa_prf+0x2aa>
    1382:	9c 93       	st	X, r25
    1384:	81 50       	subi	r24, 0x01	; 1
    1386:	11 96       	adiw	r26, 0x01	; 1
    1388:	88 23       	and	r24, r24
    138a:	d9 f7       	brne	.-10     	; 0x1382 <dtoa_prf+0x2a6>
    138c:	e1 0f       	add	r30, r17
    138e:	f1 1d       	adc	r31, r1
    1390:	10 82       	st	Z, r1
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	c9 01       	movw	r24, r18
    1398:	29 96       	adiw	r28, 0x09	; 9
    139a:	ee e0       	ldi	r30, 0x0E	; 14
    139c:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <__epilogue_restores__+0x8>

000013a0 <__ftoa_engine>:
    13a0:	28 30       	cpi	r18, 0x08	; 8
    13a2:	08 f0       	brcs	.+2      	; 0x13a6 <__ftoa_engine+0x6>
    13a4:	27 e0       	ldi	r18, 0x07	; 7
    13a6:	33 27       	eor	r19, r19
    13a8:	da 01       	movw	r26, r20
    13aa:	99 0f       	add	r25, r25
    13ac:	31 1d       	adc	r19, r1
    13ae:	87 fd       	sbrc	r24, 7
    13b0:	91 60       	ori	r25, 0x01	; 1
    13b2:	00 96       	adiw	r24, 0x00	; 0
    13b4:	61 05       	cpc	r22, r1
    13b6:	71 05       	cpc	r23, r1
    13b8:	39 f4       	brne	.+14     	; 0x13c8 <__ftoa_engine+0x28>
    13ba:	32 60       	ori	r19, 0x02	; 2
    13bc:	2e 5f       	subi	r18, 0xFE	; 254
    13be:	3d 93       	st	X+, r19
    13c0:	30 e3       	ldi	r19, 0x30	; 48
    13c2:	2a 95       	dec	r18
    13c4:	e1 f7       	brne	.-8      	; 0x13be <__ftoa_engine+0x1e>
    13c6:	08 95       	ret
    13c8:	9f 3f       	cpi	r25, 0xFF	; 255
    13ca:	30 f0       	brcs	.+12     	; 0x13d8 <__ftoa_engine+0x38>
    13cc:	80 38       	cpi	r24, 0x80	; 128
    13ce:	71 05       	cpc	r23, r1
    13d0:	61 05       	cpc	r22, r1
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <__ftoa_engine+0x36>
    13d4:	3c 5f       	subi	r19, 0xFC	; 252
    13d6:	3c 5f       	subi	r19, 0xFC	; 252
    13d8:	3d 93       	st	X+, r19
    13da:	91 30       	cpi	r25, 0x01	; 1
    13dc:	08 f0       	brcs	.+2      	; 0x13e0 <__ftoa_engine+0x40>
    13de:	80 68       	ori	r24, 0x80	; 128
    13e0:	91 1d       	adc	r25, r1
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	1f 93       	push	r17
    13e8:	0f 93       	push	r16
    13ea:	ff 92       	push	r15
    13ec:	ef 92       	push	r14
    13ee:	19 2f       	mov	r17, r25
    13f0:	98 7f       	andi	r25, 0xF8	; 248
    13f2:	96 95       	lsr	r25
    13f4:	e9 2f       	mov	r30, r25
    13f6:	96 95       	lsr	r25
    13f8:	96 95       	lsr	r25
    13fa:	e9 0f       	add	r30, r25
    13fc:	ff 27       	eor	r31, r31
    13fe:	e0 5d       	subi	r30, 0xD0	; 208
    1400:	fe 4f       	sbci	r31, 0xFE	; 254
    1402:	99 27       	eor	r25, r25
    1404:	33 27       	eor	r19, r19
    1406:	ee 24       	eor	r14, r14
    1408:	ff 24       	eor	r15, r15
    140a:	a7 01       	movw	r20, r14
    140c:	e7 01       	movw	r28, r14
    140e:	05 90       	lpm	r0, Z+
    1410:	08 94       	sec
    1412:	07 94       	ror	r0
    1414:	28 f4       	brcc	.+10     	; 0x1420 <__ftoa_engine+0x80>
    1416:	36 0f       	add	r19, r22
    1418:	e7 1e       	adc	r14, r23
    141a:	f8 1e       	adc	r15, r24
    141c:	49 1f       	adc	r20, r25
    141e:	51 1d       	adc	r21, r1
    1420:	66 0f       	add	r22, r22
    1422:	77 1f       	adc	r23, r23
    1424:	88 1f       	adc	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	06 94       	lsr	r0
    142a:	a1 f7       	brne	.-24     	; 0x1414 <__ftoa_engine+0x74>
    142c:	05 90       	lpm	r0, Z+
    142e:	07 94       	ror	r0
    1430:	28 f4       	brcc	.+10     	; 0x143c <__ftoa_engine+0x9c>
    1432:	e7 0e       	add	r14, r23
    1434:	f8 1e       	adc	r15, r24
    1436:	49 1f       	adc	r20, r25
    1438:	56 1f       	adc	r21, r22
    143a:	c1 1d       	adc	r28, r1
    143c:	77 0f       	add	r23, r23
    143e:	88 1f       	adc	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	66 1f       	adc	r22, r22
    1444:	06 94       	lsr	r0
    1446:	a1 f7       	brne	.-24     	; 0x1430 <__ftoa_engine+0x90>
    1448:	05 90       	lpm	r0, Z+
    144a:	07 94       	ror	r0
    144c:	28 f4       	brcc	.+10     	; 0x1458 <__ftoa_engine+0xb8>
    144e:	f8 0e       	add	r15, r24
    1450:	49 1f       	adc	r20, r25
    1452:	56 1f       	adc	r21, r22
    1454:	c7 1f       	adc	r28, r23
    1456:	d1 1d       	adc	r29, r1
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	66 1f       	adc	r22, r22
    145e:	77 1f       	adc	r23, r23
    1460:	06 94       	lsr	r0
    1462:	a1 f7       	brne	.-24     	; 0x144c <__ftoa_engine+0xac>
    1464:	05 90       	lpm	r0, Z+
    1466:	07 94       	ror	r0
    1468:	20 f4       	brcc	.+8      	; 0x1472 <__ftoa_engine+0xd2>
    146a:	49 0f       	add	r20, r25
    146c:	56 1f       	adc	r21, r22
    146e:	c7 1f       	adc	r28, r23
    1470:	d8 1f       	adc	r29, r24
    1472:	99 0f       	add	r25, r25
    1474:	66 1f       	adc	r22, r22
    1476:	77 1f       	adc	r23, r23
    1478:	88 1f       	adc	r24, r24
    147a:	06 94       	lsr	r0
    147c:	a9 f7       	brne	.-22     	; 0x1468 <__ftoa_engine+0xc8>
    147e:	84 91       	lpm	r24, Z+
    1480:	10 95       	com	r17
    1482:	17 70       	andi	r17, 0x07	; 7
    1484:	41 f0       	breq	.+16     	; 0x1496 <__ftoa_engine+0xf6>
    1486:	d6 95       	lsr	r29
    1488:	c7 95       	ror	r28
    148a:	57 95       	ror	r21
    148c:	47 95       	ror	r20
    148e:	f7 94       	ror	r15
    1490:	e7 94       	ror	r14
    1492:	1a 95       	dec	r17
    1494:	c1 f7       	brne	.-16     	; 0x1486 <__ftoa_engine+0xe6>
    1496:	e6 ed       	ldi	r30, 0xD6	; 214
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	68 94       	set
    149c:	15 90       	lpm	r1, Z+
    149e:	15 91       	lpm	r17, Z+
    14a0:	35 91       	lpm	r19, Z+
    14a2:	65 91       	lpm	r22, Z+
    14a4:	95 91       	lpm	r25, Z+
    14a6:	05 90       	lpm	r0, Z+
    14a8:	7f e2       	ldi	r23, 0x2F	; 47
    14aa:	73 95       	inc	r23
    14ac:	e1 18       	sub	r14, r1
    14ae:	f1 0a       	sbc	r15, r17
    14b0:	43 0b       	sbc	r20, r19
    14b2:	56 0b       	sbc	r21, r22
    14b4:	c9 0b       	sbc	r28, r25
    14b6:	d0 09       	sbc	r29, r0
    14b8:	c0 f7       	brcc	.-16     	; 0x14aa <__ftoa_engine+0x10a>
    14ba:	e1 0c       	add	r14, r1
    14bc:	f1 1e       	adc	r15, r17
    14be:	43 1f       	adc	r20, r19
    14c0:	56 1f       	adc	r21, r22
    14c2:	c9 1f       	adc	r28, r25
    14c4:	d0 1d       	adc	r29, r0
    14c6:	7e f4       	brtc	.+30     	; 0x14e6 <__ftoa_engine+0x146>
    14c8:	70 33       	cpi	r23, 0x30	; 48
    14ca:	11 f4       	brne	.+4      	; 0x14d0 <__ftoa_engine+0x130>
    14cc:	8a 95       	dec	r24
    14ce:	e6 cf       	rjmp	.-52     	; 0x149c <__ftoa_engine+0xfc>
    14d0:	e8 94       	clt
    14d2:	01 50       	subi	r16, 0x01	; 1
    14d4:	30 f0       	brcs	.+12     	; 0x14e2 <__ftoa_engine+0x142>
    14d6:	08 0f       	add	r16, r24
    14d8:	0a f4       	brpl	.+2      	; 0x14dc <__ftoa_engine+0x13c>
    14da:	00 27       	eor	r16, r16
    14dc:	02 17       	cp	r16, r18
    14de:	08 f4       	brcc	.+2      	; 0x14e2 <__ftoa_engine+0x142>
    14e0:	20 2f       	mov	r18, r16
    14e2:	23 95       	inc	r18
    14e4:	02 2f       	mov	r16, r18
    14e6:	7a 33       	cpi	r23, 0x3A	; 58
    14e8:	28 f0       	brcs	.+10     	; 0x14f4 <__ftoa_engine+0x154>
    14ea:	79 e3       	ldi	r23, 0x39	; 57
    14ec:	7d 93       	st	X+, r23
    14ee:	2a 95       	dec	r18
    14f0:	e9 f7       	brne	.-6      	; 0x14ec <__ftoa_engine+0x14c>
    14f2:	10 c0       	rjmp	.+32     	; 0x1514 <__ftoa_engine+0x174>
    14f4:	7d 93       	st	X+, r23
    14f6:	2a 95       	dec	r18
    14f8:	89 f6       	brne	.-94     	; 0x149c <__ftoa_engine+0xfc>
    14fa:	06 94       	lsr	r0
    14fc:	97 95       	ror	r25
    14fe:	67 95       	ror	r22
    1500:	37 95       	ror	r19
    1502:	17 95       	ror	r17
    1504:	17 94       	ror	r1
    1506:	e1 18       	sub	r14, r1
    1508:	f1 0a       	sbc	r15, r17
    150a:	43 0b       	sbc	r20, r19
    150c:	56 0b       	sbc	r21, r22
    150e:	c9 0b       	sbc	r28, r25
    1510:	d0 09       	sbc	r29, r0
    1512:	98 f0       	brcs	.+38     	; 0x153a <__ftoa_engine+0x19a>
    1514:	23 95       	inc	r18
    1516:	7e 91       	ld	r23, -X
    1518:	73 95       	inc	r23
    151a:	7a 33       	cpi	r23, 0x3A	; 58
    151c:	08 f0       	brcs	.+2      	; 0x1520 <__ftoa_engine+0x180>
    151e:	70 e3       	ldi	r23, 0x30	; 48
    1520:	7c 93       	st	X, r23
    1522:	20 13       	cpse	r18, r16
    1524:	b8 f7       	brcc	.-18     	; 0x1514 <__ftoa_engine+0x174>
    1526:	7e 91       	ld	r23, -X
    1528:	70 61       	ori	r23, 0x10	; 16
    152a:	7d 93       	st	X+, r23
    152c:	30 f0       	brcs	.+12     	; 0x153a <__ftoa_engine+0x19a>
    152e:	83 95       	inc	r24
    1530:	71 e3       	ldi	r23, 0x31	; 49
    1532:	7d 93       	st	X+, r23
    1534:	70 e3       	ldi	r23, 0x30	; 48
    1536:	2a 95       	dec	r18
    1538:	e1 f7       	brne	.-8      	; 0x1532 <__ftoa_engine+0x192>
    153a:	11 24       	eor	r1, r1
    153c:	ef 90       	pop	r14
    153e:	ff 90       	pop	r15
    1540:	0f 91       	pop	r16
    1542:	1f 91       	pop	r17
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	99 27       	eor	r25, r25
    154a:	87 fd       	sbrc	r24, 7
    154c:	90 95       	com	r25
    154e:	08 95       	ret

00001550 <strnlen_P>:
    1550:	fc 01       	movw	r30, r24
    1552:	05 90       	lpm	r0, Z+
    1554:	61 50       	subi	r22, 0x01	; 1
    1556:	70 40       	sbci	r23, 0x00	; 0
    1558:	01 10       	cpse	r0, r1
    155a:	d8 f7       	brcc	.-10     	; 0x1552 <strnlen_P+0x2>
    155c:	80 95       	com	r24
    155e:	90 95       	com	r25
    1560:	8e 0f       	add	r24, r30
    1562:	9f 1f       	adc	r25, r31
    1564:	08 95       	ret

00001566 <strnlen>:
    1566:	fc 01       	movw	r30, r24
    1568:	61 50       	subi	r22, 0x01	; 1
    156a:	70 40       	sbci	r23, 0x00	; 0
    156c:	01 90       	ld	r0, Z+
    156e:	01 10       	cpse	r0, r1
    1570:	d8 f7       	brcc	.-10     	; 0x1568 <strnlen+0x2>
    1572:	80 95       	com	r24
    1574:	90 95       	com	r25
    1576:	8e 0f       	add	r24, r30
    1578:	9f 1f       	adc	r25, r31
    157a:	08 95       	ret

0000157c <fputc>:
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	8c 01       	movw	r16, r24
    1586:	eb 01       	movw	r28, r22
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	81 ff       	sbrs	r24, 1
    158c:	1b c0       	rjmp	.+54     	; 0x15c4 <fputc+0x48>
    158e:	82 ff       	sbrs	r24, 2
    1590:	0d c0       	rjmp	.+26     	; 0x15ac <fputc+0x30>
    1592:	2e 81       	ldd	r18, Y+6	; 0x06
    1594:	3f 81       	ldd	r19, Y+7	; 0x07
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	9d 81       	ldd	r25, Y+5	; 0x05
    159a:	28 17       	cp	r18, r24
    159c:	39 07       	cpc	r19, r25
    159e:	64 f4       	brge	.+24     	; 0x15b8 <fputc+0x3c>
    15a0:	e8 81       	ld	r30, Y
    15a2:	f9 81       	ldd	r31, Y+1	; 0x01
    15a4:	01 93       	st	Z+, r16
    15a6:	f9 83       	std	Y+1, r31	; 0x01
    15a8:	e8 83       	st	Y, r30
    15aa:	06 c0       	rjmp	.+12     	; 0x15b8 <fputc+0x3c>
    15ac:	e8 85       	ldd	r30, Y+8	; 0x08
    15ae:	f9 85       	ldd	r31, Y+9	; 0x09
    15b0:	80 2f       	mov	r24, r16
    15b2:	09 95       	icall
    15b4:	89 2b       	or	r24, r25
    15b6:	31 f4       	brne	.+12     	; 0x15c4 <fputc+0x48>
    15b8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ba:	9f 81       	ldd	r25, Y+7	; 0x07
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	9f 83       	std	Y+7, r25	; 0x07
    15c0:	8e 83       	std	Y+6, r24	; 0x06
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <fputc+0x4c>
    15c4:	0f ef       	ldi	r16, 0xFF	; 255
    15c6:	1f ef       	ldi	r17, 0xFF	; 255
    15c8:	c8 01       	movw	r24, r16
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	08 95       	ret

000015d4 <__ultoa_invert>:
    15d4:	fa 01       	movw	r30, r20
    15d6:	aa 27       	eor	r26, r26
    15d8:	28 30       	cpi	r18, 0x08	; 8
    15da:	51 f1       	breq	.+84     	; 0x1630 <__ultoa_invert+0x5c>
    15dc:	20 31       	cpi	r18, 0x10	; 16
    15de:	81 f1       	breq	.+96     	; 0x1640 <__ultoa_invert+0x6c>
    15e0:	e8 94       	clt
    15e2:	6f 93       	push	r22
    15e4:	6e 7f       	andi	r22, 0xFE	; 254
    15e6:	6e 5f       	subi	r22, 0xFE	; 254
    15e8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ea:	8f 4f       	sbci	r24, 0xFF	; 255
    15ec:	9f 4f       	sbci	r25, 0xFF	; 255
    15ee:	af 4f       	sbci	r26, 0xFF	; 255
    15f0:	b1 e0       	ldi	r27, 0x01	; 1
    15f2:	3e d0       	rcall	.+124    	; 0x1670 <__ultoa_invert+0x9c>
    15f4:	b4 e0       	ldi	r27, 0x04	; 4
    15f6:	3c d0       	rcall	.+120    	; 0x1670 <__ultoa_invert+0x9c>
    15f8:	67 0f       	add	r22, r23
    15fa:	78 1f       	adc	r23, r24
    15fc:	89 1f       	adc	r24, r25
    15fe:	9a 1f       	adc	r25, r26
    1600:	a1 1d       	adc	r26, r1
    1602:	68 0f       	add	r22, r24
    1604:	79 1f       	adc	r23, r25
    1606:	8a 1f       	adc	r24, r26
    1608:	91 1d       	adc	r25, r1
    160a:	a1 1d       	adc	r26, r1
    160c:	6a 0f       	add	r22, r26
    160e:	71 1d       	adc	r23, r1
    1610:	81 1d       	adc	r24, r1
    1612:	91 1d       	adc	r25, r1
    1614:	a1 1d       	adc	r26, r1
    1616:	20 d0       	rcall	.+64     	; 0x1658 <__ultoa_invert+0x84>
    1618:	09 f4       	brne	.+2      	; 0x161c <__ultoa_invert+0x48>
    161a:	68 94       	set
    161c:	3f 91       	pop	r19
    161e:	2a e0       	ldi	r18, 0x0A	; 10
    1620:	26 9f       	mul	r18, r22
    1622:	11 24       	eor	r1, r1
    1624:	30 19       	sub	r19, r0
    1626:	30 5d       	subi	r19, 0xD0	; 208
    1628:	31 93       	st	Z+, r19
    162a:	de f6       	brtc	.-74     	; 0x15e2 <__ultoa_invert+0xe>
    162c:	cf 01       	movw	r24, r30
    162e:	08 95       	ret
    1630:	46 2f       	mov	r20, r22
    1632:	47 70       	andi	r20, 0x07	; 7
    1634:	40 5d       	subi	r20, 0xD0	; 208
    1636:	41 93       	st	Z+, r20
    1638:	b3 e0       	ldi	r27, 0x03	; 3
    163a:	0f d0       	rcall	.+30     	; 0x165a <__ultoa_invert+0x86>
    163c:	c9 f7       	brne	.-14     	; 0x1630 <__ultoa_invert+0x5c>
    163e:	f6 cf       	rjmp	.-20     	; 0x162c <__ultoa_invert+0x58>
    1640:	46 2f       	mov	r20, r22
    1642:	4f 70       	andi	r20, 0x0F	; 15
    1644:	40 5d       	subi	r20, 0xD0	; 208
    1646:	4a 33       	cpi	r20, 0x3A	; 58
    1648:	18 f0       	brcs	.+6      	; 0x1650 <__ultoa_invert+0x7c>
    164a:	49 5d       	subi	r20, 0xD9	; 217
    164c:	31 fd       	sbrc	r19, 1
    164e:	40 52       	subi	r20, 0x20	; 32
    1650:	41 93       	st	Z+, r20
    1652:	02 d0       	rcall	.+4      	; 0x1658 <__ultoa_invert+0x84>
    1654:	a9 f7       	brne	.-22     	; 0x1640 <__ultoa_invert+0x6c>
    1656:	ea cf       	rjmp	.-44     	; 0x162c <__ultoa_invert+0x58>
    1658:	b4 e0       	ldi	r27, 0x04	; 4
    165a:	a6 95       	lsr	r26
    165c:	97 95       	ror	r25
    165e:	87 95       	ror	r24
    1660:	77 95       	ror	r23
    1662:	67 95       	ror	r22
    1664:	ba 95       	dec	r27
    1666:	c9 f7       	brne	.-14     	; 0x165a <__ultoa_invert+0x86>
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	61 05       	cpc	r22, r1
    166c:	71 05       	cpc	r23, r1
    166e:	08 95       	ret
    1670:	9b 01       	movw	r18, r22
    1672:	ac 01       	movw	r20, r24
    1674:	0a 2e       	mov	r0, r26
    1676:	06 94       	lsr	r0
    1678:	57 95       	ror	r21
    167a:	47 95       	ror	r20
    167c:	37 95       	ror	r19
    167e:	27 95       	ror	r18
    1680:	ba 95       	dec	r27
    1682:	c9 f7       	brne	.-14     	; 0x1676 <__ultoa_invert+0xa2>
    1684:	62 0f       	add	r22, r18
    1686:	73 1f       	adc	r23, r19
    1688:	84 1f       	adc	r24, r20
    168a:	95 1f       	adc	r25, r21
    168c:	a0 1d       	adc	r26, r0
    168e:	08 95       	ret
    1690:	19 f4       	brne	.+6      	; 0x1698 <__ultoa_invert+0xc4>
    1692:	0e f0       	brts	.+2      	; 0x1696 <__ultoa_invert+0xc2>
    1694:	46 ca       	rjmp	.-2932   	; 0xb22 <__fp_inf>
    1696:	8f ca       	rjmp	.-2786   	; 0xbb6 <__fp_zero>
    1698:	4a ca       	rjmp	.-2924   	; 0xb2e <__fp_nan>

0000169a <exp>:
    169a:	73 da       	rcall	.-2842   	; 0xb82 <__fp_splitA>
    169c:	c8 f3       	brcs	.-14     	; 0x1690 <__ultoa_invert+0xbc>
    169e:	96 38       	cpi	r25, 0x86	; 134
    16a0:	c0 f7       	brcc	.-16     	; 0x1692 <__ultoa_invert+0xbe>
    16a2:	07 f8       	bld	r0, 7
    16a4:	0f 92       	push	r0
    16a6:	e8 94       	clt
    16a8:	2b e3       	ldi	r18, 0x3B	; 59
    16aa:	3a ea       	ldi	r19, 0xAA	; 170
    16ac:	48 eb       	ldi	r20, 0xB8	; 184
    16ae:	5f e7       	ldi	r21, 0x7F	; 127
    16b0:	97 da       	rcall	.-2770   	; 0xbe0 <__mulsf3_pse>
    16b2:	0f 92       	push	r0
    16b4:	0f 92       	push	r0
    16b6:	0f 92       	push	r0
    16b8:	4d b7       	in	r20, 0x3d	; 61
    16ba:	5e b7       	in	r21, 0x3e	; 62
    16bc:	0f 92       	push	r0
    16be:	c0 d0       	rcall	.+384    	; 0x1840 <modf>
    16c0:	e4 e5       	ldi	r30, 0x54	; 84
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	16 d0       	rcall	.+44     	; 0x16f2 <__fp_powser>
    16c6:	4f 91       	pop	r20
    16c8:	5f 91       	pop	r21
    16ca:	ef 91       	pop	r30
    16cc:	ff 91       	pop	r31
    16ce:	e5 95       	asr	r30
    16d0:	ee 1f       	adc	r30, r30
    16d2:	ff 1f       	adc	r31, r31
    16d4:	49 f0       	breq	.+18     	; 0x16e8 <exp+0x4e>
    16d6:	fe 57       	subi	r31, 0x7E	; 126
    16d8:	e0 68       	ori	r30, 0x80	; 128
    16da:	44 27       	eor	r20, r20
    16dc:	ee 0f       	add	r30, r30
    16de:	44 1f       	adc	r20, r20
    16e0:	fa 95       	dec	r31
    16e2:	e1 f7       	brne	.-8      	; 0x16dc <exp+0x42>
    16e4:	41 95       	neg	r20
    16e6:	55 0b       	sbc	r21, r21
    16e8:	32 d0       	rcall	.+100    	; 0x174e <ldexp>
    16ea:	0f 90       	pop	r0
    16ec:	07 fe       	sbrs	r0, 7
    16ee:	26 c0       	rjmp	.+76     	; 0x173c <inverse>
    16f0:	08 95       	ret

000016f2 <__fp_powser>:
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	1f 93       	push	r17
    16f8:	0f 93       	push	r16
    16fa:	ff 92       	push	r15
    16fc:	ef 92       	push	r14
    16fe:	df 92       	push	r13
    1700:	7b 01       	movw	r14, r22
    1702:	8c 01       	movw	r16, r24
    1704:	68 94       	set
    1706:	05 c0       	rjmp	.+10     	; 0x1712 <__fp_powser+0x20>
    1708:	da 2e       	mov	r13, r26
    170a:	ef 01       	movw	r28, r30
    170c:	67 da       	rcall	.-2866   	; 0xbdc <__mulsf3x>
    170e:	fe 01       	movw	r30, r28
    1710:	e8 94       	clt
    1712:	a5 91       	lpm	r26, Z+
    1714:	25 91       	lpm	r18, Z+
    1716:	35 91       	lpm	r19, Z+
    1718:	45 91       	lpm	r20, Z+
    171a:	55 91       	lpm	r21, Z+
    171c:	ae f3       	brts	.-22     	; 0x1708 <__fp_powser+0x16>
    171e:	ef 01       	movw	r28, r30
    1720:	dc d8       	rcall	.-3656   	; 0x8da <__addsf3x>
    1722:	fe 01       	movw	r30, r28
    1724:	97 01       	movw	r18, r14
    1726:	a8 01       	movw	r20, r16
    1728:	da 94       	dec	r13
    172a:	79 f7       	brne	.-34     	; 0x170a <__fp_powser+0x18>
    172c:	df 90       	pop	r13
    172e:	ef 90       	pop	r14
    1730:	ff 90       	pop	r15
    1732:	0f 91       	pop	r16
    1734:	1f 91       	pop	r17
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	08 95       	ret

0000173c <inverse>:
    173c:	9b 01       	movw	r18, r22
    173e:	ac 01       	movw	r20, r24
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	80 e8       	ldi	r24, 0x80	; 128
    1746:	9f e3       	ldi	r25, 0x3F	; 63
    1748:	1b c9       	rjmp	.-3530   	; 0x980 <__divsf3>
    174a:	eb c9       	rjmp	.-3114   	; 0xb22 <__fp_inf>
    174c:	ac c0       	rjmp	.+344    	; 0x18a6 <__fp_mpack>

0000174e <ldexp>:
    174e:	19 da       	rcall	.-3022   	; 0xb82 <__fp_splitA>
    1750:	e8 f3       	brcs	.-6      	; 0x174c <inverse+0x10>
    1752:	99 23       	and	r25, r25
    1754:	d9 f3       	breq	.-10     	; 0x174c <inverse+0x10>
    1756:	94 0f       	add	r25, r20
    1758:	51 1d       	adc	r21, r1
    175a:	bb f3       	brvs	.-18     	; 0x174a <inverse+0xe>
    175c:	91 50       	subi	r25, 0x01	; 1
    175e:	50 40       	sbci	r21, 0x00	; 0
    1760:	94 f0       	brlt	.+36     	; 0x1786 <ldexp+0x38>
    1762:	59 f0       	breq	.+22     	; 0x177a <ldexp+0x2c>
    1764:	88 23       	and	r24, r24
    1766:	32 f0       	brmi	.+12     	; 0x1774 <ldexp+0x26>
    1768:	66 0f       	add	r22, r22
    176a:	77 1f       	adc	r23, r23
    176c:	88 1f       	adc	r24, r24
    176e:	91 50       	subi	r25, 0x01	; 1
    1770:	50 40       	sbci	r21, 0x00	; 0
    1772:	c1 f7       	brne	.-16     	; 0x1764 <ldexp+0x16>
    1774:	9e 3f       	cpi	r25, 0xFE	; 254
    1776:	51 05       	cpc	r21, r1
    1778:	44 f7       	brge	.-48     	; 0x174a <inverse+0xe>
    177a:	88 0f       	add	r24, r24
    177c:	91 1d       	adc	r25, r1
    177e:	96 95       	lsr	r25
    1780:	87 95       	ror	r24
    1782:	97 f9       	bld	r25, 7
    1784:	08 95       	ret
    1786:	5f 3f       	cpi	r21, 0xFF	; 255
    1788:	ac f0       	brlt	.+42     	; 0x17b4 <ldexp+0x66>
    178a:	98 3e       	cpi	r25, 0xE8	; 232
    178c:	9c f0       	brlt	.+38     	; 0x17b4 <ldexp+0x66>
    178e:	bb 27       	eor	r27, r27
    1790:	86 95       	lsr	r24
    1792:	77 95       	ror	r23
    1794:	67 95       	ror	r22
    1796:	b7 95       	ror	r27
    1798:	08 f4       	brcc	.+2      	; 0x179c <ldexp+0x4e>
    179a:	b1 60       	ori	r27, 0x01	; 1
    179c:	93 95       	inc	r25
    179e:	c1 f7       	brne	.-16     	; 0x1790 <ldexp+0x42>
    17a0:	bb 0f       	add	r27, r27
    17a2:	58 f7       	brcc	.-42     	; 0x177a <ldexp+0x2c>
    17a4:	11 f4       	brne	.+4      	; 0x17aa <ldexp+0x5c>
    17a6:	60 ff       	sbrs	r22, 0
    17a8:	e8 cf       	rjmp	.-48     	; 0x177a <ldexp+0x2c>
    17aa:	6f 5f       	subi	r22, 0xFF	; 255
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	8f 4f       	sbci	r24, 0xFF	; 255
    17b0:	9f 4f       	sbci	r25, 0xFF	; 255
    17b2:	e3 cf       	rjmp	.-58     	; 0x177a <ldexp+0x2c>
    17b4:	01 ca       	rjmp	.-3070   	; 0xbb8 <__fp_szero>
    17b6:	0e f0       	brts	.+2      	; 0x17ba <ldexp+0x6c>
    17b8:	76 c0       	rjmp	.+236    	; 0x18a6 <__fp_mpack>
    17ba:	b9 c9       	rjmp	.-3214   	; 0xb2e <__fp_nan>
    17bc:	68 94       	set
    17be:	b1 c9       	rjmp	.-3230   	; 0xb22 <__fp_inf>

000017c0 <log>:
    17c0:	e0 d9       	rcall	.-3136   	; 0xb82 <__fp_splitA>
    17c2:	c8 f3       	brcs	.-14     	; 0x17b6 <ldexp+0x68>
    17c4:	99 23       	and	r25, r25
    17c6:	d1 f3       	breq	.-12     	; 0x17bc <ldexp+0x6e>
    17c8:	c6 f3       	brts	.-16     	; 0x17ba <ldexp+0x6c>
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	1f 93       	push	r17
    17d0:	0f 93       	push	r16
    17d2:	ff 92       	push	r15
    17d4:	c9 2f       	mov	r28, r25
    17d6:	dd 27       	eor	r29, r29
    17d8:	88 23       	and	r24, r24
    17da:	2a f0       	brmi	.+10     	; 0x17e6 <log+0x26>
    17dc:	21 97       	sbiw	r28, 0x01	; 1
    17de:	66 0f       	add	r22, r22
    17e0:	77 1f       	adc	r23, r23
    17e2:	88 1f       	adc	r24, r24
    17e4:	da f7       	brpl	.-10     	; 0x17dc <log+0x1c>
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	5f eb       	ldi	r21, 0xBF	; 191
    17ee:	9f e3       	ldi	r25, 0x3F	; 63
    17f0:	88 39       	cpi	r24, 0x98	; 152
    17f2:	20 f0       	brcs	.+8      	; 0x17fc <log+0x3c>
    17f4:	80 3e       	cpi	r24, 0xE0	; 224
    17f6:	30 f0       	brcs	.+12     	; 0x1804 <log+0x44>
    17f8:	21 96       	adiw	r28, 0x01	; 1
    17fa:	8f 77       	andi	r24, 0x7F	; 127
    17fc:	5d d8       	rcall	.-3910   	; 0x8b8 <__addsf3>
    17fe:	ec e7       	ldi	r30, 0x7C	; 124
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	03 c0       	rjmp	.+6      	; 0x180a <log+0x4a>
    1804:	59 d8       	rcall	.-3918   	; 0x8b8 <__addsf3>
    1806:	e9 ea       	ldi	r30, 0xA9	; 169
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	73 df       	rcall	.-282    	; 0x16f2 <__fp_powser>
    180c:	8b 01       	movw	r16, r22
    180e:	be 01       	movw	r22, r28
    1810:	ec 01       	movw	r28, r24
    1812:	fb 2e       	mov	r15, r27
    1814:	6f 57       	subi	r22, 0x7F	; 127
    1816:	71 09       	sbc	r23, r1
    1818:	75 95       	asr	r23
    181a:	77 1f       	adc	r23, r23
    181c:	88 0b       	sbc	r24, r24
    181e:	99 0b       	sbc	r25, r25
    1820:	45 d9       	rcall	.-3446   	; 0xaac <__floatsisf>
    1822:	28 e1       	ldi	r18, 0x18	; 24
    1824:	32 e7       	ldi	r19, 0x72	; 114
    1826:	41 e3       	ldi	r20, 0x31	; 49
    1828:	5f e3       	ldi	r21, 0x3F	; 63
    182a:	d8 d9       	rcall	.-3152   	; 0xbdc <__mulsf3x>
    182c:	af 2d       	mov	r26, r15
    182e:	98 01       	movw	r18, r16
    1830:	ae 01       	movw	r20, r28
    1832:	ff 90       	pop	r15
    1834:	0f 91       	pop	r16
    1836:	1f 91       	pop	r17
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	4e d8       	rcall	.-3940   	; 0x8da <__addsf3x>
    183e:	88 c9       	rjmp	.-3312   	; 0xb50 <__fp_round>

00001840 <modf>:
    1840:	fa 01       	movw	r30, r20
    1842:	dc 01       	movw	r26, r24
    1844:	aa 0f       	add	r26, r26
    1846:	bb 1f       	adc	r27, r27
    1848:	9b 01       	movw	r18, r22
    184a:	ac 01       	movw	r20, r24
    184c:	bf 57       	subi	r27, 0x7F	; 127
    184e:	28 f4       	brcc	.+10     	; 0x185a <modf+0x1a>
    1850:	22 27       	eor	r18, r18
    1852:	33 27       	eor	r19, r19
    1854:	44 27       	eor	r20, r20
    1856:	50 78       	andi	r21, 0x80	; 128
    1858:	1f c0       	rjmp	.+62     	; 0x1898 <modf+0x58>
    185a:	b7 51       	subi	r27, 0x17	; 23
    185c:	88 f4       	brcc	.+34     	; 0x1880 <modf+0x40>
    185e:	ab 2f       	mov	r26, r27
    1860:	00 24       	eor	r0, r0
    1862:	46 95       	lsr	r20
    1864:	37 95       	ror	r19
    1866:	27 95       	ror	r18
    1868:	01 1c       	adc	r0, r1
    186a:	a3 95       	inc	r26
    186c:	d2 f3       	brmi	.-12     	; 0x1862 <modf+0x22>
    186e:	00 20       	and	r0, r0
    1870:	69 f0       	breq	.+26     	; 0x188c <modf+0x4c>
    1872:	22 0f       	add	r18, r18
    1874:	33 1f       	adc	r19, r19
    1876:	44 1f       	adc	r20, r20
    1878:	b3 95       	inc	r27
    187a:	da f3       	brmi	.-10     	; 0x1872 <modf+0x32>
    187c:	0d d0       	rcall	.+26     	; 0x1898 <modf+0x58>
    187e:	1b c8       	rjmp	.-4042   	; 0x8b6 <__subsf3>
    1880:	61 30       	cpi	r22, 0x01	; 1
    1882:	71 05       	cpc	r23, r1
    1884:	a0 e8       	ldi	r26, 0x80	; 128
    1886:	8a 07       	cpc	r24, r26
    1888:	b9 46       	sbci	r27, 0x69	; 105
    188a:	30 f4       	brcc	.+12     	; 0x1898 <modf+0x58>
    188c:	9b 01       	movw	r18, r22
    188e:	ac 01       	movw	r20, r24
    1890:	66 27       	eor	r22, r22
    1892:	77 27       	eor	r23, r23
    1894:	88 27       	eor	r24, r24
    1896:	90 78       	andi	r25, 0x80	; 128
    1898:	30 96       	adiw	r30, 0x00	; 0
    189a:	21 f0       	breq	.+8      	; 0x18a4 <modf+0x64>
    189c:	20 83       	st	Z, r18
    189e:	31 83       	std	Z+1, r19	; 0x01
    18a0:	42 83       	std	Z+2, r20	; 0x02
    18a2:	53 83       	std	Z+3, r21	; 0x03
    18a4:	08 95       	ret

000018a6 <__fp_mpack>:
    18a6:	9f 3f       	cpi	r25, 0xFF	; 255
    18a8:	31 f0       	breq	.+12     	; 0x18b6 <__fp_mpack_finite+0xc>

000018aa <__fp_mpack_finite>:
    18aa:	91 50       	subi	r25, 0x01	; 1
    18ac:	20 f4       	brcc	.+8      	; 0x18b6 <__fp_mpack_finite+0xc>
    18ae:	87 95       	ror	r24
    18b0:	77 95       	ror	r23
    18b2:	67 95       	ror	r22
    18b4:	b7 95       	ror	r27
    18b6:	88 0f       	add	r24, r24
    18b8:	91 1d       	adc	r25, r1
    18ba:	96 95       	lsr	r25
    18bc:	87 95       	ror	r24
    18be:	97 f9       	bld	r25, 7
    18c0:	08 95       	ret

000018c2 <__prologue_saves__>:
    18c2:	2f 92       	push	r2
    18c4:	3f 92       	push	r3
    18c6:	4f 92       	push	r4
    18c8:	5f 92       	push	r5
    18ca:	6f 92       	push	r6
    18cc:	7f 92       	push	r7
    18ce:	8f 92       	push	r8
    18d0:	9f 92       	push	r9
    18d2:	af 92       	push	r10
    18d4:	bf 92       	push	r11
    18d6:	cf 92       	push	r12
    18d8:	df 92       	push	r13
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	ca 1b       	sub	r28, r26
    18ec:	db 0b       	sbc	r29, r27
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	09 94       	ijmp

000018fa <__epilogue_restores__>:
    18fa:	2a 88       	ldd	r2, Y+18	; 0x12
    18fc:	39 88       	ldd	r3, Y+17	; 0x11
    18fe:	48 88       	ldd	r4, Y+16	; 0x10
    1900:	5f 84       	ldd	r5, Y+15	; 0x0f
    1902:	6e 84       	ldd	r6, Y+14	; 0x0e
    1904:	7d 84       	ldd	r7, Y+13	; 0x0d
    1906:	8c 84       	ldd	r8, Y+12	; 0x0c
    1908:	9b 84       	ldd	r9, Y+11	; 0x0b
    190a:	aa 84       	ldd	r10, Y+10	; 0x0a
    190c:	b9 84       	ldd	r11, Y+9	; 0x09
    190e:	c8 84       	ldd	r12, Y+8	; 0x08
    1910:	df 80       	ldd	r13, Y+7	; 0x07
    1912:	ee 80       	ldd	r14, Y+6	; 0x06
    1914:	fd 80       	ldd	r15, Y+5	; 0x05
    1916:	0c 81       	ldd	r16, Y+4	; 0x04
    1918:	1b 81       	ldd	r17, Y+3	; 0x03
    191a:	aa 81       	ldd	r26, Y+2	; 0x02
    191c:	b9 81       	ldd	r27, Y+1	; 0x01
    191e:	ce 0f       	add	r28, r30
    1920:	d1 1d       	adc	r29, r1
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	ed 01       	movw	r28, r26
    192e:	08 95       	ret

00001930 <_exit>:
    1930:	f8 94       	cli

00001932 <__stop_program>:
    1932:	ff cf       	rjmp	.-2      	; 0x1932 <__stop_program>
