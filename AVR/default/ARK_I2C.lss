
ARK_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001aa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00001aa6  00001b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  008000c2  008000c2  00001b9c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001b3  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000667  00000000  00000000  00001d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000295  00000000  00000000  000023d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000084b  00000000  00000000  0000266b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000025b  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b4  00000000  00000000  00003263  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00003417  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__ctors_end>
       4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      10:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      14:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      18:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      1c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      24:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      28:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      34:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      3c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      40:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      44:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      4c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      50:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	7a 10       	cpse	r7, r10
      da:	f3 5a       	subi	r31, 0xA3	; 163
      dc:	00 a0       	ldd	r0, Z+32	; 0x20
      de:	72 4e       	sbci	r23, 0xE2	; 226
      e0:	18 09       	sbc	r17, r8
      e2:	00 10       	cpse	r0, r0
      e4:	a5 d4       	rcall	.+2378   	; 0xa30 <__addsf3+0x6>
      e6:	e8 00       	.word	0x00e8	; ????
      e8:	00 e8       	ldi	r16, 0x80	; 128
      ea:	76 48       	sbci	r23, 0x86	; 134
      ec:	17 00       	.word	0x0017	; ????
      ee:	00 e4       	ldi	r16, 0x40	; 64
      f0:	0b 54       	subi	r16, 0x4B	; 75
      f2:	02 00       	.word	0x0002	; ????
      f4:	00 ca       	rjmp	.-3072   	; 0xfffff4f6 <__eeprom_end+0xff7ef4f6>
      f6:	9a 3b       	cpi	r25, 0xBA	; 186
      f8:	00 00       	nop
      fa:	00 e1       	ldi	r16, 0x10	; 16
      fc:	f5 05       	cpc	r31, r5
      fe:	00 00       	nop
     100:	80 96       	adiw	r24, 0x20	; 32
     102:	98 00       	.word	0x0098	; ????
     104:	00 00       	nop
     106:	40 42       	sbci	r20, 0x20	; 32
     108:	0f 00       	.word	0x000f	; ????
     10a:	00 00       	nop
     10c:	a0 86       	std	Z+8, r10	; 0x08
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	10 27       	eor	r17, r16
     114:	00 00       	nop
     116:	00 00       	nop
     118:	e8 03       	fmulsu	r22, r16
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	64 00       	.word	0x0064	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	0a 00       	.word	0x000a	; ????
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	01 00       	.word	0x0001	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	2c 76       	andi	r18, 0x6C	; 108
     132:	d8 88       	ldd	r13, Y+16	; 0x10
     134:	dc 67       	ori	r29, 0x7C	; 124
     136:	4f 08       	sbc	r4, r15
     138:	23 df       	rcall	.-442    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     13a:	c1 df       	rcall	.-126    	; 0xbe <__SREG__+0x7f>
     13c:	ae 59       	subi	r26, 0x9E	; 158
     13e:	e1 b1       	in	r30, 0x01	; 1
     140:	b7 96       	adiw	r30, 0x27	; 39
     142:	e5 e3       	ldi	r30, 0x35	; 53
     144:	e4 53       	subi	r30, 0x34	; 52
     146:	c6 3a       	cpi	r28, 0xA6	; 166
     148:	e6 51       	subi	r30, 0x16	; 22
     14a:	99 76       	andi	r25, 0x69	; 105
     14c:	96 e8       	ldi	r25, 0x86	; 134
     14e:	e6 c2       	rjmp	.+1484   	; 0x71c <main+0xb6>
     150:	84 26       	eor	r8, r20
     152:	eb 89       	ldd	r30, Y+19	; 0x13
     154:	8c 9b       	sbis	0x11, 4	; 17
     156:	62 ed       	ldi	r22, 0xD2	; 210
     158:	40 7c       	andi	r20, 0xC0	; 192
     15a:	6f fc       	.word	0xfc6f	; ????
     15c:	ef bc       	out	0x2f, r14	; 47
     15e:	9c 9f       	mul	r25, r28
     160:	40 f2       	brcs	.-112    	; 0xf2 <__SREG__+0xb3>
     162:	ba a5       	ldd	r27, Y+42	; 0x2a
     164:	6f a5       	ldd	r22, Y+47	; 0x2f
     166:	f4 90       	lpm	r15, Z+
     168:	05 5a       	subi	r16, 0xA5	; 165
     16a:	2a f7       	brpl	.-54     	; 0x136 <__SREG__+0xf7>
     16c:	5c 93       	st	X, r21
     16e:	6b 6c       	ori	r22, 0xCB	; 203
     170:	f9 67       	ori	r31, 0x79	; 121
     172:	6d c1       	rjmp	.+730    	; 0x44e <Read_RawValue+0x62>
     174:	1b fc       	.word	0xfc1b	; ????
     176:	e0 e4       	ldi	r30, 0x40	; 64
     178:	0d 47       	sbci	r16, 0x7D	; 125
     17a:	fe f5       	brtc	.+126    	; 0x1fa <.do_clear_bss_loop>
     17c:	20 e6       	ldi	r18, 0x60	; 96
     17e:	b5 00       	.word	0x00b5	; ????
     180:	d0 ed       	ldi	r29, 0xD0	; 208
     182:	90 2e       	mov	r9, r16
     184:	03 00       	.word	0x0003	; ????
     186:	94 35       	cpi	r25, 0x54	; 84
     188:	77 05       	cpc	r23, r7
     18a:	00 80       	ld	r0, Z
     18c:	84 1e       	adc	r8, r20
     18e:	08 00       	.word	0x0008	; ????
     190:	00 20       	and	r0, r0
     192:	4e 0a       	sbc	r4, r30
     194:	00 00       	nop
     196:	00 c8       	rjmp	.-4096   	; 0xfffff198 <__eeprom_end+0xff7ef198>
     198:	0c 33       	cpi	r16, 0x3C	; 60
     19a:	33 33       	cpi	r19, 0x33	; 51
     19c:	33 0f       	add	r19, r19
     19e:	98 6e       	ori	r25, 0xE8	; 232
     1a0:	12 83       	std	Z+2, r17	; 0x02
     1a2:	11 41       	sbci	r17, 0x11	; 17
     1a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1a6:	21 14       	cp	r2, r1
     1a8:	89 3b       	cpi	r24, 0xB9	; 185
     1aa:	e6 55       	subi	r30, 0x56	; 86
     1ac:	16 cf       	rjmp	.-468    	; 0xffffffda <__eeprom_end+0xff7effda>
     1ae:	fe e6       	ldi	r31, 0x6E	; 110
     1b0:	db 18       	sub	r13, r11
     1b2:	d1 84       	ldd	r13, Z+9	; 0x09
     1b4:	4b 38       	cpi	r20, 0x8B	; 139
     1b6:	1b f7       	brvc	.-58     	; 0x17e <__SREG__+0x13f>
     1b8:	7c 1d       	adc	r23, r12
     1ba:	90 1d       	adc	r25, r0
     1bc:	a4 bb       	out	0x14, r26	; 20
     1be:	e4 24       	eor	r14, r4
     1c0:	20 32       	cpi	r18, 0x20	; 32
     1c2:	84 72       	andi	r24, 0x24	; 36
     1c4:	5e 22       	and	r5, r30
     1c6:	81 00       	.word	0x0081	; ????
     1c8:	c9 f1       	breq	.+114    	; 0x23c <read_adc+0x2e>
     1ca:	24 ec       	ldi	r18, 0xC4	; 196
     1cc:	a1 e5       	ldi	r26, 0x51	; 81
     1ce:	3d 27       	eor	r19, r29

000001d0 <__ctors_end>:
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf e5       	ldi	r28, 0x5F	; 95
     1d6:	d8 e0       	ldi	r29, 0x08	; 8
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
     1dc:	10 e0       	ldi	r17, 0x00	; 0
     1de:	a0 e6       	ldi	r26, 0x60	; 96
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	e6 ea       	ldi	r30, 0xA6	; 166
     1e4:	fa e1       	ldi	r31, 0x1A	; 26
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <.do_copy_data_start>

000001e8 <.do_copy_data_loop>:
     1e8:	05 90       	lpm	r0, Z+
     1ea:	0d 92       	st	X+, r0

000001ec <.do_copy_data_start>:
     1ec:	a2 3c       	cpi	r26, 0xC2	; 194
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <.do_copy_data_loop>

000001f2 <__do_clear_bss>:
     1f2:	10 e0       	ldi	r17, 0x00	; 0
     1f4:	a2 ec       	ldi	r26, 0xC2	; 194
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	ae 3d       	cpi	r26, 0xDE	; 222
     1fe:	b1 07       	cpc	r27, r17
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	0e 94 33 03 	call	0x666	; 0x666 <main>
     206:	0c 94 ed 04 	jmp	0x9da	; 0x9da <exit>

0000020a <__bad_interrupt>:
     20a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020e <read_adc>:
////////////////////////////////////////////////////////////////////////////


unsigned int read_adc(int axis){

	if(axis==1){		// z axis is PA0
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	91 05       	cpc	r25, r1
     212:	11 f4       	brne	.+4      	; 0x218 <read_adc+0xa>
		ADMUX = 0b10100000;
     214:	80 ea       	ldi	r24, 0xA0	; 160
     216:	0b c0       	rjmp	.+22     	; 0x22e <read_adc+0x20>
	}
	else if(axis==2){	// y axis is PA1
     218:	82 30       	cpi	r24, 0x02	; 2
     21a:	91 05       	cpc	r25, r1
     21c:	11 f4       	brne	.+4      	; 0x222 <read_adc+0x14>
		ADMUX = 0b10100001;
     21e:	81 ea       	ldi	r24, 0xA1	; 161
     220:	06 c0       	rjmp	.+12     	; 0x22e <read_adc+0x20>
	}
	else if(axis==3){	// x axis is PA2
     222:	03 97       	sbiw	r24, 0x03	; 3
     224:	19 f0       	breq	.+6      	; 0x22c <read_adc+0x1e>
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	0b c0       	rjmp	.+22     	; 0x242 <read_adc+0x34>
		ADMUX = 0b10100010;
     22c:	82 ea       	ldi	r24, 0xA2	; 162
     22e:	87 b9       	out	0x07, r24	; 7
	}
	else{
		return 0;
	}
	ADMUX = (1<<REFS0);	// set mux
     230:	80 e4       	ldi	r24, 0x40	; 64
     232:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS0);	// divided by prescale of 32
     234:	85 e8       	ldi	r24, 0x85	; 133
     236:	86 b9       	out	0x06, r24	; 6
	ADCSRA|= (1<<ADSC);	// clear ADSC by writing one to it
     238:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADSC)))	// wait for conversion to complete
     23a:	36 9b       	sbis	0x06, 6	; 6
     23c:	fe cf       	rjmp	.-4      	; 0x23a <read_adc+0x2c>
		;
	return(ADC);		// retuens 10 bit unsigned number
     23e:	24 b1       	in	r18, 0x04	; 4
     240:	35 b1       	in	r19, 0x05	; 5
}
     242:	c9 01       	movw	r24, r18
     244:	08 95       	ret

00000246 <I2C_Start>:
    TWBR = ((F_CPU/SCL_CLK)-16)/(2*pow(4,(TWSR&((1<<TWPS0)|(1<<TWPS1))))); // SCL frequency

}

uint8_t I2C_Start(char slave_write_address)						/* I2C start function */
{
     246:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     248:	84 ea       	ldi	r24, 0xA4	; 164
     24a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     24c:	06 b6       	in	r0, 0x36	; 54
     24e:	07 fe       	sbrs	r0, 7
     250:	fd cf       	rjmp	.-6      	; 0x24c <I2C_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     252:	81 b1       	in	r24, 0x01	; 1
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
     254:	88 7f       	andi	r24, 0xF8	; 248
     256:	88 30       	cpi	r24, 0x08	; 8
     258:	11 f0       	breq	.+4      	; 0x25e <I2C_Start+0x18>
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	08 95       	ret
	return 0;												/* If not then return 0 to indicate start condition fail */
	TWDR = slave_write_address<<1;								/* If yes then write SLA+W in TWI data register */
     25e:	99 0f       	add	r25, r25
     260:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     262:	84 e8       	ldi	r24, 0x84	; 132
     264:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     266:	06 b6       	in	r0, 0x36	; 54
     268:	07 fe       	sbrs	r0, 7
     26a:	fd cf       	rjmp	.-6      	; 0x266 <I2C_Start+0x20>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
     26c:	81 b1       	in	r24, 0x01	; 1
     26e:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
     270:	88 31       	cpi	r24, 0x18	; 24
     272:	11 f4       	brne	.+4      	; 0x278 <I2C_Start+0x32>
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
     278:	80 32       	cpi	r24, 0x20	; 32
     27a:	11 f0       	breq	.+4      	; 0x280 <I2C_Start+0x3a>
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	08 95       	ret
     280:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     282:	08 95       	ret

00000284 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
     284:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     286:	84 ea       	ldi	r24, 0xA4	; 164
     288:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     28a:	06 b6       	in	r0, 0x36	; 54
     28c:	07 fe       	sbrs	r0, 7
     28e:	fd cf       	rjmp	.-6      	; 0x28a <I2C_Repeated_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     290:	81 b1       	in	r24, 0x01	; 1
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     292:	88 7f       	andi	r24, 0xF8	; 248
     294:	80 31       	cpi	r24, 0x10	; 16
     296:	11 f0       	breq	.+4      	; 0x29c <I2C_Repeated_Start+0x18>
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     29c:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     29e:	84 e8       	ldi	r24, 0x84	; 132
     2a0:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     2a2:	06 b6       	in	r0, 0x36	; 54
     2a4:	07 fe       	sbrs	r0, 7
     2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <I2C_Repeated_Start+0x1e>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     2a8:	81 b1       	in	r24, 0x01	; 1
     2aa:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     2ac:	80 34       	cpi	r24, 0x40	; 64
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <I2C_Repeated_Start+0x30>
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     2b4:	80 32       	cpi	r24, 0x20	; 32
     2b6:	11 f0       	breq	.+4      	; 0x2bc <I2C_Repeated_Start+0x38>
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	08 95       	ret
     2bc:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     2be:	08 95       	ret

000002c0 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     2c0:	84 e9       	ldi	r24, 0x94	; 148
     2c2:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     2c4:	06 b6       	in	r0, 0x36	; 54
     2c6:	04 fc       	sbrc	r0, 4
     2c8:	fd cf       	rjmp	.-6      	; 0x2c4 <I2C_Stop+0x4>
}
     2ca:	08 95       	ret

000002cc <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)			/* I2C start wait function */
{
     2cc:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     2ce:	44 ea       	ldi	r20, 0xA4	; 164
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     2d0:	34 e8       	ldi	r19, 0x84	; 132
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     2d2:	24 e9       	ldi	r18, 0x94	; 148
void I2C_Start_Wait(char slave_write_address)			/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     2d4:	46 bf       	out	0x36, r20	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     2d6:	06 b6       	in	r0, 0x36	; 54
     2d8:	07 fe       	sbrs	r0, 7
     2da:	fd cf       	rjmp	.-6      	; 0x2d6 <I2C_Start_Wait+0xa>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     2dc:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     2de:	88 7f       	andi	r24, 0xF8	; 248
     2e0:	88 30       	cpi	r24, 0x08	; 8
     2e2:	c1 f7       	brne	.-16     	; 0x2d4 <I2C_Start_Wait+0x8>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     2e4:	93 b9       	out	0x03, r25	; 3
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     2e6:	36 bf       	out	0x36, r19	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     2e8:	06 b6       	in	r0, 0x36	; 54
     2ea:	07 fe       	sbrs	r0, 7
     2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <I2C_Start_Wait+0x1c>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     2ee:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     2f0:	88 7f       	andi	r24, 0xF8	; 248
     2f2:	88 31       	cpi	r24, 0x18	; 24
     2f4:	29 f0       	breq	.+10     	; 0x300 <I2C_Start_Wait+0x34>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     2f6:	26 bf       	out	0x36, r18	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     2f8:	06 b6       	in	r0, 0x36	; 54
     2fa:	04 fc       	sbrc	r0, 4
     2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <I2C_Start_Wait+0x2c>
     2fe:	ea cf       	rjmp	.-44     	; 0x2d4 <I2C_Start_Wait+0x8>
     300:	08 95       	ret

00000302 <I2C_Write>:
}

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     302:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     304:	84 e8       	ldi	r24, 0x84	; 132
     306:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     308:	06 b6       	in	r0, 0x36	; 54
     30a:	07 fe       	sbrs	r0, 7
     30c:	fd cf       	rjmp	.-6      	; 0x308 <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     30e:	81 b1       	in	r24, 0x01	; 1
     310:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     312:	88 32       	cpi	r24, 0x28	; 40
     314:	11 f4       	brne	.+4      	; 0x31a <I2C_Write+0x18>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	08 95       	ret
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     31a:	80 33       	cpi	r24, 0x30	; 48
     31c:	11 f0       	breq	.+4      	; 0x322 <I2C_Write+0x20>
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	08 95       	ret
     322:	81 e0       	ldi	r24, 0x01	; 1
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     324:	08 95       	ret

00000326 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     326:	84 ec       	ldi	r24, 0xC4	; 196
     328:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     32a:	06 b6       	in	r0, 0x36	; 54
     32c:	07 fe       	sbrs	r0, 7
     32e:	fd cf       	rjmp	.-6      	; 0x32a <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
     330:	83 b1       	in	r24, 0x03	; 3
}	
     332:	08 95       	ret

00000334 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     334:	84 e8       	ldi	r24, 0x84	; 132
     336:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     338:	06 b6       	in	r0, 0x36	; 54
     33a:	07 fe       	sbrs	r0, 7
     33c:	fd cf       	rjmp	.-6      	; 0x338 <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
     33e:	83 b1       	in	r24, 0x03	; 3
}	
     340:	08 95       	ret

00000342 <MPU6050_Init>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     342:	8c e7       	ldi	r24, 0x7C	; 124
     344:	92 e9       	ldi	r25, 0x92	; 146
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <MPU6050_Init+0x4>

void MPU6050_Init()										/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
     34a:	80 ed       	ldi	r24, 0xD0	; 208
     34c:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
     350:	89 e1       	ldi	r24, 0x19	; 25
     352:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
     356:	87 e0       	ldi	r24, 0x07	; 7
     358:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     35c:	84 e9       	ldi	r24, 0x94	; 148
     35e:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     360:	06 b6       	in	r0, 0x36	; 54
     362:	04 fc       	sbrc	r0, 4
     364:	fd cf       	rjmp	.-6      	; 0x360 <MPU6050_Init+0x1e>
	I2C_Start_Wait(0xD0);								/* Start with device write address */
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
	I2C_Write(0x07);									/* 1KHz sample rate */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     366:	80 ed       	ldi	r24, 0xD0	; 208
     368:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
     36c:	8b e6       	ldi	r24, 0x6B	; 107
     36e:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     378:	84 e9       	ldi	r24, 0x94	; 148
     37a:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     37c:	06 b6       	in	r0, 0x36	; 54
     37e:	04 fc       	sbrc	r0, 4
     380:	fd cf       	rjmp	.-6      	; 0x37c <MPU6050_Init+0x3a>
	I2C_Start_Wait(0xD0);
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     382:	80 ed       	ldi	r24, 0xD0	; 208
     384:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
     388:	8a e1       	ldi	r24, 0x1A	; 26
     38a:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     394:	84 e9       	ldi	r24, 0x94	; 148
     396:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     398:	06 b6       	in	r0, 0x36	; 54
     39a:	04 fc       	sbrc	r0, 4
     39c:	fd cf       	rjmp	.-6      	; 0x398 <MPU6050_Init+0x56>
	I2C_Start_Wait(0xD0);
	I2C_Write(CONFIG);									/* Write to Configuration register */
	I2C_Write(0x00);									/* Fs = 8KHz */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     39e:	80 ed       	ldi	r24, 0xD0	; 208
     3a0:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
     3a4:	8b e1       	ldi	r24, 0x1B	; 27
     3a6:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
     3aa:	88 e1       	ldi	r24, 0x18	; 24
     3ac:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3b0:	84 e9       	ldi	r24, 0x94	; 148
     3b2:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3b4:	06 b6       	in	r0, 0x36	; 54
     3b6:	04 fc       	sbrc	r0, 4
     3b8:	fd cf       	rjmp	.-6      	; 0x3b4 <MPU6050_Init+0x72>
	I2C_Start_Wait(0xD0);
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
	I2C_Stop();

	I2C_Start_Wait(0xD0);
     3ba:	80 ed       	ldi	r24, 0xD0	; 208
     3bc:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
     3c0:	88 e3       	ldi	r24, 0x38	; 56
     3c2:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Write(0x01);
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     3cc:	84 e9       	ldi	r24, 0x94	; 148
     3ce:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     3d0:	06 b6       	in	r0, 0x36	; 54
     3d2:	04 fc       	sbrc	r0, 4
     3d4:	fd cf       	rjmp	.-6      	; 0x3d0 <MPU6050_Init+0x8e>

	I2C_Start_Wait(0xD0);
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
	I2C_Write(0x01);
	I2C_Stop();
}
     3d6:	08 95       	ret

000003d8 <MPU_Start_Loc>:

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
     3d8:	80 ed       	ldi	r24, 0xD0	; 208
     3da:	0e 94 66 01 	call	0x2cc	; 0x2cc <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */ 
     3de:	8b e3       	ldi	r24, 0x3B	; 59
     3e0:	0e 94 81 01 	call	0x302	; 0x302 <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
     3e4:	81 ed       	ldi	r24, 0xD1	; 209
     3e6:	0e 94 42 01 	call	0x284	; 0x284 <I2C_Repeated_Start>
}
     3ea:	08 95       	ret

000003ec <Read_RawValue>:

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
     3ec:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <MPU_Start_Loc>
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     3f0:	84 ec       	ldi	r24, 0xC4	; 196
     3f2:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     3f4:	06 b6       	in	r0, 0x36	; 54
     3f6:	07 fe       	sbrs	r0, 7
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <Read_RawValue+0x8>
	return TWDR;											/* Return received data */
     3fa:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     3fc:	84 ec       	ldi	r24, 0xC4	; 196
     3fe:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     400:	06 b6       	in	r0, 0x36	; 54
     402:	07 fe       	sbrs	r0, 7
     404:	fd cf       	rjmp	.-6      	; 0x400 <Read_RawValue+0x14>
	return TWDR;											/* Return received data */
     406:	23 b1       	in	r18, 0x03	; 3
}

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     408:	79 2f       	mov	r23, r25
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	62 2b       	or	r22, r18
     410:	73 2b       	or	r23, r19
     412:	88 27       	eor	r24, r24
     414:	77 fd       	sbrc	r23, 7
     416:	80 95       	com	r24
     418:	98 2f       	mov	r25, r24
     41a:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__floatsisf>
     41e:	60 93 d6 00 	sts	0x00D6, r22
     422:	70 93 d7 00 	sts	0x00D7, r23
     426:	80 93 d8 00 	sts	0x00D8, r24
     42a:	90 93 d9 00 	sts	0x00D9, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     42e:	84 ec       	ldi	r24, 0xC4	; 196
     430:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     432:	06 b6       	in	r0, 0x36	; 54
     434:	07 fe       	sbrs	r0, 7
     436:	fd cf       	rjmp	.-6      	; 0x432 <Read_RawValue+0x46>
	return TWDR;											/* Return received data */
     438:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     43a:	84 ec       	ldi	r24, 0xC4	; 196
     43c:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     43e:	06 b6       	in	r0, 0x36	; 54
     440:	07 fe       	sbrs	r0, 7
     442:	fd cf       	rjmp	.-6      	; 0x43e <Read_RawValue+0x52>
	return TWDR;											/* Return received data */
     444:	23 b1       	in	r18, 0x03	; 3

void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     446:	79 2f       	mov	r23, r25
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	62 2b       	or	r22, r18
     44e:	73 2b       	or	r23, r19
     450:	88 27       	eor	r24, r24
     452:	77 fd       	sbrc	r23, 7
     454:	80 95       	com	r24
     456:	98 2f       	mov	r25, r24
     458:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__floatsisf>
     45c:	60 93 ce 00 	sts	0x00CE, r22
     460:	70 93 cf 00 	sts	0x00CF, r23
     464:	80 93 d0 00 	sts	0x00D0, r24
     468:	90 93 d1 00 	sts	0x00D1, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     46c:	84 ec       	ldi	r24, 0xC4	; 196
     46e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     470:	06 b6       	in	r0, 0x36	; 54
     472:	07 fe       	sbrs	r0, 7
     474:	fd cf       	rjmp	.-6      	; 0x470 <Read_RawValue+0x84>
	return TWDR;											/* Return received data */
     476:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     478:	84 ec       	ldi	r24, 0xC4	; 196
     47a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     47c:	06 b6       	in	r0, 0x36	; 54
     47e:	07 fe       	sbrs	r0, 7
     480:	fd cf       	rjmp	.-6      	; 0x47c <Read_RawValue+0x90>
	return TWDR;											/* Return received data */
     482:	23 b1       	in	r18, 0x03	; 3
void Read_RawValue()
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     484:	79 2f       	mov	r23, r25
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	62 2b       	or	r22, r18
     48c:	73 2b       	or	r23, r19
     48e:	88 27       	eor	r24, r24
     490:	77 fd       	sbrc	r23, 7
     492:	80 95       	com	r24
     494:	98 2f       	mov	r25, r24
     496:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__floatsisf>
     49a:	60 93 c2 00 	sts	0x00C2, r22
     49e:	70 93 c3 00 	sts	0x00C3, r23
     4a2:	80 93 c4 00 	sts	0x00C4, r24
     4a6:	90 93 c5 00 	sts	0x00C5, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4aa:	84 ec       	ldi	r24, 0xC4	; 196
     4ac:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4ae:	06 b6       	in	r0, 0x36	; 54
     4b0:	07 fe       	sbrs	r0, 7
     4b2:	fd cf       	rjmp	.-6      	; 0x4ae <Read_RawValue+0xc2>
	return TWDR;											/* Return received data */
     4b4:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4b6:	84 ec       	ldi	r24, 0xC4	; 196
     4b8:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4ba:	06 b6       	in	r0, 0x36	; 54
     4bc:	07 fe       	sbrs	r0, 7
     4be:	fd cf       	rjmp	.-6      	; 0x4ba <Read_RawValue+0xce>
	return TWDR;											/* Return received data */
     4c0:	23 b1       	in	r18, 0x03	; 3
{
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     4c2:	79 2f       	mov	r23, r25
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	62 2b       	or	r22, r18
     4ca:	73 2b       	or	r23, r19
     4cc:	88 27       	eor	r24, r24
     4ce:	77 fd       	sbrc	r23, 7
     4d0:	80 95       	com	r24
     4d2:	98 2f       	mov	r25, r24
     4d4:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__floatsisf>
     4d8:	60 93 ca 00 	sts	0x00CA, r22
     4dc:	70 93 cb 00 	sts	0x00CB, r23
     4e0:	80 93 cc 00 	sts	0x00CC, r24
     4e4:	90 93 cd 00 	sts	0x00CD, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4e8:	84 ec       	ldi	r24, 0xC4	; 196
     4ea:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4ec:	06 b6       	in	r0, 0x36	; 54
     4ee:	07 fe       	sbrs	r0, 7
     4f0:	fd cf       	rjmp	.-6      	; 0x4ec <Read_RawValue+0x100>
	return TWDR;											/* Return received data */
     4f2:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     4f4:	84 ec       	ldi	r24, 0xC4	; 196
     4f6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     4f8:	06 b6       	in	r0, 0x36	; 54
     4fa:	07 fe       	sbrs	r0, 7
     4fc:	fd cf       	rjmp	.-6      	; 0x4f8 <Read_RawValue+0x10c>
	return TWDR;											/* Return received data */
     4fe:	23 b1       	in	r18, 0x03	; 3
	MPU_Start_Loc();									/* Read Gyro values */
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     500:	79 2f       	mov	r23, r25
     502:	60 e0       	ldi	r22, 0x00	; 0
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	62 2b       	or	r22, r18
     508:	73 2b       	or	r23, r19
     50a:	88 27       	eor	r24, r24
     50c:	77 fd       	sbrc	r23, 7
     50e:	80 95       	com	r24
     510:	98 2f       	mov	r25, r24
     512:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__floatsisf>
     516:	60 93 c6 00 	sts	0x00C6, r22
     51a:	70 93 c7 00 	sts	0x00C7, r23
     51e:	80 93 c8 00 	sts	0x00C8, r24
     522:	90 93 c9 00 	sts	0x00C9, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     526:	84 ec       	ldi	r24, 0xC4	; 196
     528:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     52a:	06 b6       	in	r0, 0x36	; 54
     52c:	07 fe       	sbrs	r0, 7
     52e:	fd cf       	rjmp	.-6      	; 0x52a <Read_RawValue+0x13e>
	return TWDR;											/* Return received data */
     530:	93 b1       	in	r25, 0x03	; 3
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     532:	84 ec       	ldi	r24, 0xC4	; 196
     534:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     536:	06 b6       	in	r0, 0x36	; 54
     538:	07 fe       	sbrs	r0, 7
     53a:	fd cf       	rjmp	.-6      	; 0x536 <Read_RawValue+0x14a>
	return TWDR;											/* Return received data */
     53c:	23 b1       	in	r18, 0x03	; 3
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     53e:	79 2f       	mov	r23, r25
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	62 2b       	or	r22, r18
     546:	73 2b       	or	r23, r19
     548:	88 27       	eor	r24, r24
     54a:	77 fd       	sbrc	r23, 7
     54c:	80 95       	com	r24
     54e:	98 2f       	mov	r25, r24
     550:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__floatsisf>
     554:	60 93 da 00 	sts	0x00DA, r22
     558:	70 93 db 00 	sts	0x00DB, r23
     55c:	80 93 dc 00 	sts	0x00DC, r24
     560:	90 93 dd 00 	sts	0x00DD, r25
	return 2;												/* Else return 2 to indicate data transmission failed */
}

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     564:	84 ec       	ldi	r24, 0xC4	; 196
     566:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     568:	06 b6       	in	r0, 0x36	; 54
     56a:	07 fe       	sbrs	r0, 7
     56c:	fd cf       	rjmp	.-6      	; 0x568 <Read_RawValue+0x17c>
	return TWDR;											/* Return received data */
     56e:	93 b1       	in	r25, 0x03	; 3
}	

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     570:	84 e8       	ldi	r24, 0x84	; 132
     572:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     574:	06 b6       	in	r0, 0x36	; 54
     576:	07 fe       	sbrs	r0, 7
     578:	fd cf       	rjmp	.-6      	; 0x574 <Read_RawValue+0x188>
	return TWDR;											/* Return received data */
     57a:	23 b1       	in	r18, 0x03	; 3
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     57c:	79 2f       	mov	r23, r25
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	62 2b       	or	r22, r18
     584:	73 2b       	or	r23, r19
     586:	88 27       	eor	r24, r24
     588:	77 fd       	sbrc	r23, 7
     58a:	80 95       	com	r24
     58c:	98 2f       	mov	r25, r24
     58e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__floatsisf>
     592:	60 93 d2 00 	sts	0x00D2, r22
     596:	70 93 d3 00 	sts	0x00D3, r23
     59a:	80 93 d4 00 	sts	0x00D4, r24
     59e:	90 93 d5 00 	sts	0x00D5, r25
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     5a2:	84 e9       	ldi	r24, 0x94	; 148
     5a4:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     5a6:	06 b6       	in	r0, 0x36	; 54
     5a8:	04 fc       	sbrc	r0, 4
     5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <Read_RawValue+0x1ba>
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
	I2C_Stop();
}
     5ac:	08 95       	ret

000005ae <USART_Receive>:

// Data from Bluetooth TX given to USART RX
unsigned char USART_Receive( void ){

	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) ) {  }
     5ae:	5f 9b       	sbis	0x0b, 7	; 11
     5b0:	fe cf       	rjmp	.-4      	; 0x5ae <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
     5b2:	8c b1       	in	r24, 0x0c	; 12
}
     5b4:	08 95       	ret

000005b6 <USART_Transmit>:

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
     5b6:	5d 9b       	sbis	0x0b, 5	; 11
     5b8:	fe cf       	rjmp	.-4      	; 0x5b6 <USART_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
     5ba:	8c b9       	out	0x0c, r24	; 12
}
     5bc:	08 95       	ret

000005be <USART_SendString>:

/* Send string of USART data function */ 
void USART_SendString(char *str){
     5be:	fc 01       	movw	r30, r24
     5c0:	04 c0       	rjmp	.+8      	; 0x5ca <USART_SendString+0xc>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
     5c2:	5d 9b       	sbis	0x0b, 5	; 11
     5c4:	fe cf       	rjmp	.-4      	; 0x5c2 <USART_SendString+0x4>

	/* Put data into buffer, sends the data */
	UDR = data;
     5c6:	8c b9       	out	0x0c, r24	; 12
     5c8:	31 96       	adiw	r30, 0x01	; 1
/* Send string of USART data function */ 
void USART_SendString(char *str){

	int i=0;			
	/* Send each char of string till the NULL */														
	while (str[i]!=0){
     5ca:	80 81       	ld	r24, Z
     5cc:	88 23       	and	r24, r24
     5ce:	c9 f7       	brne	.-14     	; 0x5c2 <USART_SendString+0x4>
		USART_Transmit( str[i] );
		i++;
	}
}
     5d0:	08 95       	ret

000005d2 <USART_Flush>:

// Flush USART
void USART_Flush( void ){
     5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <USART_Flush+0x4>

	unsigned char dummy;
	while ( UCSRA & (1<<RXC) ) dummy = UDR;
     5d4:	8c b1       	in	r24, 0x0c	; 12
     5d6:	5f 99       	sbic	0x0b, 7	; 11
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <USART_Flush+0x2>
}
     5da:	08 95       	ret

000005dc <USART_Init>:

// Initialize USART
void USART_Init( unsigned int baud ){
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
     5dc:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
     5de:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X);
     5e0:	59 9a       	sbi	0x0b, 1	; 11

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
     5e2:	88 e1       	ldi	r24, 0x18	; 24
     5e4:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
     5e6:	8e e8       	ldi	r24, 0x8E	; 142
     5e8:	80 bd       	out	0x20, r24	; 32
}
     5ea:	08 95       	ret

000005ec <Bluetooth_Init>:

// Initialize Bluetooth connection through USART
void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
     5ec:	8c e0       	ldi	r24, 0x0C	; 12
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <USART_Init>
     5f4:	e0 e6       	ldi	r30, 0x60	; 96
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	04 c0       	rjmp	.+8      	; 0x602 <Bluetooth_Init+0x16>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data ){

	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
     5fa:	5d 9b       	sbis	0x0b, 5	; 11
     5fc:	fe cf       	rjmp	.-4      	; 0x5fa <Bluetooth_Init+0xe>

	/* Put data into buffer, sends the data */
	UDR = data;
     5fe:	8c b9       	out	0x0c, r24	; 12

	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n"; // is supposed to program HC05 to desired specs, may be useless
	while (*cmd != '\0'){
		USART_Transmit( *cmd );
		++cmd;
     600:	31 96       	adiw	r30, 0x01	; 1
// Initialize Bluetooth connection through USART
void Bluetooth_Init(){

	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n"; // is supposed to program HC05 to desired specs, may be useless
	while (*cmd != '\0'){
     602:	80 81       	ld	r24, Z
     604:	88 23       	and	r24, r24
     606:	c9 f7       	brne	.-14     	; 0x5fa <Bluetooth_Init+0xe>
		USART_Transmit( *cmd );
		++cmd;
	}
}
     608:	08 95       	ret

0000060a <USART_Start_Timer>:

void USART_Start_Timer(){

	TCCR1B |= (1 << CS11);	// Timer1 prescaler = 8
     60a:	8e b5       	in	r24, 0x2e	; 46
     60c:	82 60       	ori	r24, 0x02	; 2
     60e:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;				// Clear the timer counter
     610:	1d bc       	out	0x2d, r1	; 45
     612:	1c bc       	out	0x2c, r1	; 44
	TIMSK = (1 << TOIE1);	// Enable timer1 overflow interrupt(TOIE1)
     614:	84 e0       	ldi	r24, 0x04	; 4
     616:	89 bf       	out	0x39, r24	; 57
	sei();					// Enable global interrupts
     618:	78 94       	sei
}
     61a:	08 95       	ret

0000061c <init_clock>:


void init_clock(){

	/* Initialize clock settings */
	TWSR = 0x00; // set presca1er bits to 1 (0x00=1, 0x01=4, 0x02=16, 0x03=64)
     61c:	11 b8       	out	0x01, r1	; 1
    TWBR = ((F_CPU/SCL_CLK)-16)/(2*pow(4,(TWSR&((1<<TWPS0)|(1<<TWPS1))))); // SCL frequency
     61e:	61 b1       	in	r22, 0x01	; 1
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	63 70       	andi	r22, 0x03	; 3
     624:	70 70       	andi	r23, 0x00	; 0
     626:	88 27       	eor	r24, r24
     628:	77 fd       	sbrc	r23, 7
     62a:	80 95       	com	r24
     62c:	98 2f       	mov	r25, r24
     62e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__floatsisf>
     632:	9b 01       	movw	r18, r22
     634:	ac 01       	movw	r20, r24
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	80 e8       	ldi	r24, 0x80	; 128
     63c:	90 e4       	ldi	r25, 0x40	; 64
     63e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <pow>
     642:	9b 01       	movw	r18, r22
     644:	ac 01       	movw	r20, r24
     646:	ca 01       	movw	r24, r20
     648:	b9 01       	movw	r22, r18
     64a:	0e 94 15 05 	call	0xa2a	; 0xa2a <__addsf3>
     64e:	9b 01       	movw	r18, r22
     650:	ac 01       	movw	r20, r24
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	80 e8       	ldi	r24, 0x80	; 128
     658:	92 e4       	ldi	r25, 0x42	; 66
     65a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__divsf3>
     65e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fixunssfsi>
     662:	60 b9       	out	0x00, r22	; 0

}
     664:	08 95       	ret

00000666 <main>:
// 																		  //
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


int main(void) {
     666:	2f 92       	push	r2
     668:	3f 92       	push	r3
     66a:	4f 92       	push	r4
     66c:	5f 92       	push	r5
     66e:	6f 92       	push	r6
     670:	7f 92       	push	r7
     672:	8f 92       	push	r8
     674:	9f 92       	push	r9
     676:	af 92       	push	r10
     678:	bf 92       	push	r11
     67a:	cf 92       	push	r12
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	df 93       	push	r29
     688:	cf 93       	push	r28
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	a6 97       	sbiw	r28, 0x26	; 38
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61

	Bluetooth_Init();
     69a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <Bluetooth_Init>

	char buffer[20], float_[10];
	float Xa,Ya,Za;
	float Xg=0,Yg=0,Zg=0;

	init_clock();
     69e:	0e 94 0e 03 	call	0x61c	; 0x61c <init_clock>

	MPU6050_Init();
     6a2:	0e 94 a1 01 	call	0x342	; 0x342 <MPU6050_Init>
			Xg = Gyro_x/16.4;
			Yg = Gyro_y/16.4;
			Zg = Gyro_z/16.4;

			dtostrf( Xa, 3, 2, float_ );				
			sprintf(buffer," Ax = %s g\t",float_);
     6a6:	8b e0       	ldi	r24, 0x0B	; 11
     6a8:	28 2e       	mov	r2, r24
     6aa:	31 2c       	mov	r3, r1
     6ac:	2c 0e       	add	r2, r28
     6ae:	3d 1e       	adc	r3, r29
	
		//char DATA_IN = USART_Receive();
		
		//if(DATA_IN == '1') {

			Read_RawValue();
     6b0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Read_RawValue>

			Xa = Acc_x/16384.0;								
			Ya = Acc_y/16384.0;
     6b4:	60 91 ce 00 	lds	r22, 0x00CE
     6b8:	70 91 cf 00 	lds	r23, 0x00CF
     6bc:	80 91 d0 00 	lds	r24, 0x00D0
     6c0:	90 91 d1 00 	lds	r25, 0x00D1
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e8       	ldi	r20, 0x80	; 128
     6ca:	58 e3       	ldi	r21, 0x38	; 56
     6cc:	0e 94 9b 06 	call	0xd36	; 0xd36 <__mulsf3>
     6d0:	6b 01       	movw	r12, r22
     6d2:	7c 01       	movw	r14, r24
			Za = Acc_z/16384.0;
     6d4:	60 91 c2 00 	lds	r22, 0x00C2
     6d8:	70 91 c3 00 	lds	r23, 0x00C3
     6dc:	80 91 c4 00 	lds	r24, 0x00C4
     6e0:	90 91 c5 00 	lds	r25, 0x00C5
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	40 e8       	ldi	r20, 0x80	; 128
     6ea:	58 e3       	ldi	r21, 0x38	; 56
     6ec:	0e 94 9b 06 	call	0xd36	; 0xd36 <__mulsf3>
     6f0:	4b 01       	movw	r8, r22
     6f2:	5c 01       	movw	r10, r24
		
			Xg = Gyro_x/16.4;
     6f4:	60 91 c6 00 	lds	r22, 0x00C6
     6f8:	70 91 c7 00 	lds	r23, 0x00C7
     6fc:	80 91 c8 00 	lds	r24, 0x00C8
     700:	90 91 c9 00 	lds	r25, 0x00C9
     704:	23 e3       	ldi	r18, 0x33	; 51
     706:	33 e3       	ldi	r19, 0x33	; 51
     708:	43 e8       	ldi	r20, 0x83	; 131
     70a:	51 e4       	ldi	r21, 0x41	; 65
     70c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__divsf3>
     710:	2b 01       	movw	r4, r22
     712:	3c 01       	movw	r6, r24
			Yg = Gyro_y/16.4;
     714:	60 91 da 00 	lds	r22, 0x00DA
     718:	70 91 db 00 	lds	r23, 0x00DB
     71c:	80 91 dc 00 	lds	r24, 0x00DC
     720:	90 91 dd 00 	lds	r25, 0x00DD
     724:	23 e3       	ldi	r18, 0x33	; 51
     726:	33 e3       	ldi	r19, 0x33	; 51
     728:	43 e8       	ldi	r20, 0x83	; 131
     72a:	51 e4       	ldi	r21, 0x41	; 65
     72c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__divsf3>
     730:	6f 8f       	std	Y+31, r22	; 0x1f
     732:	78 a3       	std	Y+32, r23	; 0x20
     734:	89 a3       	std	Y+33, r24	; 0x21
     736:	9a a3       	std	Y+34, r25	; 0x22
			Zg = Gyro_z/16.4;
     738:	60 91 d2 00 	lds	r22, 0x00D2
     73c:	70 91 d3 00 	lds	r23, 0x00D3
     740:	80 91 d4 00 	lds	r24, 0x00D4
     744:	90 91 d5 00 	lds	r25, 0x00D5
     748:	23 e3       	ldi	r18, 0x33	; 51
     74a:	33 e3       	ldi	r19, 0x33	; 51
     74c:	43 e8       	ldi	r20, 0x83	; 131
     74e:	51 e4       	ldi	r21, 0x41	; 65
     750:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__divsf3>
     754:	6b a3       	std	Y+35, r22	; 0x23
     756:	7c a3       	std	Y+36, r23	; 0x24
     758:	8d a3       	std	Y+37, r24	; 0x25
     75a:	9e a3       	std	Y+38, r25	; 0x26

			dtostrf( Xa, 3, 2, float_ );				
     75c:	60 91 d6 00 	lds	r22, 0x00D6
     760:	70 91 d7 00 	lds	r23, 0x00D7
     764:	80 91 d8 00 	lds	r24, 0x00D8
     768:	90 91 d9 00 	lds	r25, 0x00D9
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	40 e8       	ldi	r20, 0x80	; 128
     772:	58 e3       	ldi	r21, 0x38	; 56
     774:	0e 94 9b 06 	call	0xd36	; 0xd36 <__mulsf3>
     778:	43 e0       	ldi	r20, 0x03	; 3
     77a:	22 e0       	ldi	r18, 0x02	; 2
     77c:	8e 01       	movw	r16, r28
     77e:	0f 5f       	subi	r16, 0xFF	; 255
     780:	1f 4f       	sbci	r17, 0xFF	; 255
     782:	0e 94 cc 04 	call	0x998	; 0x998 <dtostrf>
			sprintf(buffer," Ax = %s g\t",float_);
     786:	00 d0       	rcall	.+0      	; 0x788 <main+0x122>
     788:	00 d0       	rcall	.+0      	; 0x78a <main+0x124>
     78a:	00 d0       	rcall	.+0      	; 0x78c <main+0x126>
     78c:	ed b7       	in	r30, 0x3d	; 61
     78e:	fe b7       	in	r31, 0x3e	; 62
     790:	31 96       	adiw	r30, 0x01	; 1
     792:	ad b7       	in	r26, 0x3d	; 61
     794:	be b7       	in	r27, 0x3e	; 62
     796:	12 96       	adiw	r26, 0x02	; 2
     798:	3c 92       	st	X, r3
     79a:	2e 92       	st	-X, r2
     79c:	11 97       	sbiw	r26, 0x01	; 1
     79e:	83 e7       	ldi	r24, 0x73	; 115
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	93 83       	std	Z+3, r25	; 0x03
     7a4:	82 83       	std	Z+2, r24	; 0x02
     7a6:	15 83       	std	Z+5, r17	; 0x05
     7a8:	04 83       	std	Z+4, r16	; 0x04
     7aa:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <sprintf>
			USART_SendString(buffer);
     7ae:	8d b7       	in	r24, 0x3d	; 61
     7b0:	9e b7       	in	r25, 0x3e	; 62
     7b2:	06 96       	adiw	r24, 0x06	; 6
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	9e bf       	out	0x3e, r25	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	8d bf       	out	0x3d, r24	; 61
     7be:	c1 01       	movw	r24, r2
     7c0:	0e 94 df 02 	call	0x5be	; 0x5be <USART_SendString>

			dtostrf( Ya, 3, 2, float_ );
     7c4:	b6 01       	movw	r22, r12
     7c6:	c7 01       	movw	r24, r14
     7c8:	43 e0       	ldi	r20, 0x03	; 3
     7ca:	22 e0       	ldi	r18, 0x02	; 2
     7cc:	8e 01       	movw	r16, r28
     7ce:	0f 5f       	subi	r16, 0xFF	; 255
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	0e 94 cc 04 	call	0x998	; 0x998 <dtostrf>
			sprintf(buffer," Ay = %s g\t",float_);
     7d6:	00 d0       	rcall	.+0      	; 0x7d8 <main+0x172>
     7d8:	00 d0       	rcall	.+0      	; 0x7da <main+0x174>
     7da:	00 d0       	rcall	.+0      	; 0x7dc <main+0x176>
     7dc:	ed b7       	in	r30, 0x3d	; 61
     7de:	fe b7       	in	r31, 0x3e	; 62
     7e0:	31 96       	adiw	r30, 0x01	; 1
     7e2:	ad b7       	in	r26, 0x3d	; 61
     7e4:	be b7       	in	r27, 0x3e	; 62
     7e6:	12 96       	adiw	r26, 0x02	; 2
     7e8:	3c 92       	st	X, r3
     7ea:	2e 92       	st	-X, r2
     7ec:	11 97       	sbiw	r26, 0x01	; 1
     7ee:	8f e7       	ldi	r24, 0x7F	; 127
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	93 83       	std	Z+3, r25	; 0x03
     7f4:	82 83       	std	Z+2, r24	; 0x02
     7f6:	15 83       	std	Z+5, r17	; 0x05
     7f8:	04 83       	std	Z+4, r16	; 0x04
     7fa:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <sprintf>
			USART_SendString(buffer);
     7fe:	8d b7       	in	r24, 0x3d	; 61
     800:	9e b7       	in	r25, 0x3e	; 62
     802:	06 96       	adiw	r24, 0x06	; 6
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	9e bf       	out	0x3e, r25	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	8d bf       	out	0x3d, r24	; 61
     80e:	c1 01       	movw	r24, r2
     810:	0e 94 df 02 	call	0x5be	; 0x5be <USART_SendString>
		
			dtostrf( Za, 3, 2, float_ );
     814:	b4 01       	movw	r22, r8
     816:	c5 01       	movw	r24, r10
     818:	43 e0       	ldi	r20, 0x03	; 3
     81a:	22 e0       	ldi	r18, 0x02	; 2
     81c:	8e 01       	movw	r16, r28
     81e:	0f 5f       	subi	r16, 0xFF	; 255
     820:	1f 4f       	sbci	r17, 0xFF	; 255
     822:	0e 94 cc 04 	call	0x998	; 0x998 <dtostrf>
			sprintf(buffer," Az = %s g\t",float_);
     826:	00 d0       	rcall	.+0      	; 0x828 <main+0x1c2>
     828:	00 d0       	rcall	.+0      	; 0x82a <main+0x1c4>
     82a:	00 d0       	rcall	.+0      	; 0x82c <main+0x1c6>
     82c:	ed b7       	in	r30, 0x3d	; 61
     82e:	fe b7       	in	r31, 0x3e	; 62
     830:	31 96       	adiw	r30, 0x01	; 1
     832:	ad b7       	in	r26, 0x3d	; 61
     834:	be b7       	in	r27, 0x3e	; 62
     836:	12 96       	adiw	r26, 0x02	; 2
     838:	3c 92       	st	X, r3
     83a:	2e 92       	st	-X, r2
     83c:	11 97       	sbiw	r26, 0x01	; 1
     83e:	8b e8       	ldi	r24, 0x8B	; 139
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	93 83       	std	Z+3, r25	; 0x03
     844:	82 83       	std	Z+2, r24	; 0x02
     846:	15 83       	std	Z+5, r17	; 0x05
     848:	04 83       	std	Z+4, r16	; 0x04
     84a:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <sprintf>
			USART_SendString(buffer);
     84e:	8d b7       	in	r24, 0x3d	; 61
     850:	9e b7       	in	r25, 0x3e	; 62
     852:	06 96       	adiw	r24, 0x06	; 6
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	9e bf       	out	0x3e, r25	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	8d bf       	out	0x3d, r24	; 61
     85e:	c1 01       	movw	r24, r2
     860:	0e 94 df 02 	call	0x5be	; 0x5be <USART_SendString>

			dtostrf( Xg, 3, 2, float_ );
     864:	b2 01       	movw	r22, r4
     866:	c3 01       	movw	r24, r6
     868:	43 e0       	ldi	r20, 0x03	; 3
     86a:	22 e0       	ldi	r18, 0x02	; 2
     86c:	8e 01       	movw	r16, r28
     86e:	0f 5f       	subi	r16, 0xFF	; 255
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	0e 94 cc 04 	call	0x998	; 0x998 <dtostrf>
			sprintf(buffer," Gx = %s%c/s\t",float_,0xF8);
     876:	ad b7       	in	r26, 0x3d	; 61
     878:	be b7       	in	r27, 0x3e	; 62
     87a:	18 97       	sbiw	r26, 0x08	; 8
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	be bf       	out	0x3e, r27	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	ad bf       	out	0x3d, r26	; 61
     886:	ed b7       	in	r30, 0x3d	; 61
     888:	fe b7       	in	r31, 0x3e	; 62
     88a:	31 96       	adiw	r30, 0x01	; 1
     88c:	12 96       	adiw	r26, 0x02	; 2
     88e:	3c 92       	st	X, r3
     890:	2e 92       	st	-X, r2
     892:	11 97       	sbiw	r26, 0x01	; 1
     894:	87 e9       	ldi	r24, 0x97	; 151
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	93 83       	std	Z+3, r25	; 0x03
     89a:	82 83       	std	Z+2, r24	; 0x02
     89c:	15 83       	std	Z+5, r17	; 0x05
     89e:	04 83       	std	Z+4, r16	; 0x04
     8a0:	88 ef       	ldi	r24, 0xF8	; 248
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	97 83       	std	Z+7, r25	; 0x07
     8a6:	86 83       	std	Z+6, r24	; 0x06
     8a8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <sprintf>
			USART_SendString(buffer);
     8ac:	ad b7       	in	r26, 0x3d	; 61
     8ae:	be b7       	in	r27, 0x3e	; 62
     8b0:	18 96       	adiw	r26, 0x08	; 8
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	be bf       	out	0x3e, r27	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	ad bf       	out	0x3d, r26	; 61
     8bc:	c1 01       	movw	r24, r2
     8be:	0e 94 df 02 	call	0x5be	; 0x5be <USART_SendString>

			dtostrf( Yg, 3, 2, float_ );
     8c2:	2f 8d       	ldd	r18, Y+31	; 0x1f
     8c4:	38 a1       	ldd	r19, Y+32	; 0x20
     8c6:	49 a1       	ldd	r20, Y+33	; 0x21
     8c8:	5a a1       	ldd	r21, Y+34	; 0x22
     8ca:	b9 01       	movw	r22, r18
     8cc:	ca 01       	movw	r24, r20
     8ce:	43 e0       	ldi	r20, 0x03	; 3
     8d0:	22 e0       	ldi	r18, 0x02	; 2
     8d2:	8e 01       	movw	r16, r28
     8d4:	0f 5f       	subi	r16, 0xFF	; 255
     8d6:	1f 4f       	sbci	r17, 0xFF	; 255
     8d8:	0e 94 cc 04 	call	0x998	; 0x998 <dtostrf>
			sprintf(buffer," Gy = %s%c/s\t",float_,0xF8);
     8dc:	8d b7       	in	r24, 0x3d	; 61
     8de:	9e b7       	in	r25, 0x3e	; 62
     8e0:	08 97       	sbiw	r24, 0x08	; 8
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	9e bf       	out	0x3e, r25	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	8d bf       	out	0x3d, r24	; 61
     8ec:	ed b7       	in	r30, 0x3d	; 61
     8ee:	fe b7       	in	r31, 0x3e	; 62
     8f0:	31 96       	adiw	r30, 0x01	; 1
     8f2:	ad b7       	in	r26, 0x3d	; 61
     8f4:	be b7       	in	r27, 0x3e	; 62
     8f6:	12 96       	adiw	r26, 0x02	; 2
     8f8:	3c 92       	st	X, r3
     8fa:	2e 92       	st	-X, r2
     8fc:	11 97       	sbiw	r26, 0x01	; 1
     8fe:	85 ea       	ldi	r24, 0xA5	; 165
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	93 83       	std	Z+3, r25	; 0x03
     904:	82 83       	std	Z+2, r24	; 0x02
     906:	15 83       	std	Z+5, r17	; 0x05
     908:	04 83       	std	Z+4, r16	; 0x04
     90a:	88 ef       	ldi	r24, 0xF8	; 248
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	97 83       	std	Z+7, r25	; 0x07
     910:	86 83       	std	Z+6, r24	; 0x06
     912:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <sprintf>
			USART_SendString(buffer);
     916:	ad b7       	in	r26, 0x3d	; 61
     918:	be b7       	in	r27, 0x3e	; 62
     91a:	18 96       	adiw	r26, 0x08	; 8
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	be bf       	out	0x3e, r27	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	ad bf       	out	0x3d, r26	; 61
     926:	c1 01       	movw	r24, r2
     928:	0e 94 df 02 	call	0x5be	; 0x5be <USART_SendString>
		
			dtostrf( Zg, 3, 2, float_ );
     92c:	2b a1       	ldd	r18, Y+35	; 0x23
     92e:	3c a1       	ldd	r19, Y+36	; 0x24
     930:	4d a1       	ldd	r20, Y+37	; 0x25
     932:	5e a1       	ldd	r21, Y+38	; 0x26
     934:	b9 01       	movw	r22, r18
     936:	ca 01       	movw	r24, r20
     938:	43 e0       	ldi	r20, 0x03	; 3
     93a:	22 e0       	ldi	r18, 0x02	; 2
     93c:	8e 01       	movw	r16, r28
     93e:	0f 5f       	subi	r16, 0xFF	; 255
     940:	1f 4f       	sbci	r17, 0xFF	; 255
     942:	0e 94 cc 04 	call	0x998	; 0x998 <dtostrf>
			sprintf(buffer," Gz = %s%c/s\r\n",float_,0xF8);
     946:	8d b7       	in	r24, 0x3d	; 61
     948:	9e b7       	in	r25, 0x3e	; 62
     94a:	08 97       	sbiw	r24, 0x08	; 8
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	9e bf       	out	0x3e, r25	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	8d bf       	out	0x3d, r24	; 61
     956:	ed b7       	in	r30, 0x3d	; 61
     958:	fe b7       	in	r31, 0x3e	; 62
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	ad b7       	in	r26, 0x3d	; 61
     95e:	be b7       	in	r27, 0x3e	; 62
     960:	12 96       	adiw	r26, 0x02	; 2
     962:	3c 92       	st	X, r3
     964:	2e 92       	st	-X, r2
     966:	11 97       	sbiw	r26, 0x01	; 1
     968:	83 eb       	ldi	r24, 0xB3	; 179
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	93 83       	std	Z+3, r25	; 0x03
     96e:	82 83       	std	Z+2, r24	; 0x02
     970:	15 83       	std	Z+5, r17	; 0x05
     972:	04 83       	std	Z+4, r16	; 0x04
     974:	88 ef       	ldi	r24, 0xF8	; 248
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	97 83       	std	Z+7, r25	; 0x07
     97a:	86 83       	std	Z+6, r24	; 0x06
     97c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <sprintf>
			USART_SendString(buffer);
     980:	ad b7       	in	r26, 0x3d	; 61
     982:	be b7       	in	r27, 0x3e	; 62
     984:	18 96       	adiw	r26, 0x08	; 8
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	be bf       	out	0x3e, r27	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	ad bf       	out	0x3d, r26	; 61
     990:	c1 01       	movw	r24, r2
     992:	0e 94 df 02 	call	0x5be	; 0x5be <USART_SendString>
     996:	8c ce       	rjmp	.-744    	; 0x6b0 <main+0x4a>

00000998 <dtostrf>:
     998:	ef 92       	push	r14
     99a:	ff 92       	push	r15
     99c:	0f 93       	push	r16
     99e:	1f 93       	push	r17
     9a0:	f2 2f       	mov	r31, r18
     9a2:	f0 2e       	mov	r15, r16
     9a4:	47 fd       	sbrc	r20, 7
     9a6:	02 c0       	rjmp	.+4      	; 0x9ac <dtostrf+0x14>
     9a8:	e4 e0       	ldi	r30, 0x04	; 4
     9aa:	01 c0       	rjmp	.+2      	; 0x9ae <dtostrf+0x16>
     9ac:	e4 e1       	ldi	r30, 0x14	; 20
     9ae:	24 2f       	mov	r18, r20
     9b0:	33 27       	eor	r19, r19
     9b2:	27 fd       	sbrc	r18, 7
     9b4:	30 95       	com	r19
     9b6:	37 ff       	sbrs	r19, 7
     9b8:	03 c0       	rjmp	.+6      	; 0x9c0 <dtostrf+0x28>
     9ba:	30 95       	com	r19
     9bc:	21 95       	neg	r18
     9be:	3f 4f       	sbci	r19, 0xFF	; 255
     9c0:	4f 2d       	mov	r20, r15
     9c2:	51 2f       	mov	r21, r17
     9c4:	0f 2f       	mov	r16, r31
     9c6:	ee 2e       	mov	r14, r30
     9c8:	0e 94 27 09 	call	0x124e	; 0x124e <dtoa_prf>
     9cc:	8f 2d       	mov	r24, r15
     9ce:	91 2f       	mov	r25, r17
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	08 95       	ret

000009da <exit>:
     9da:	f8 94       	cli
     9dc:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <_exit>

000009e0 <sprintf>:
     9e0:	ae e0       	ldi	r26, 0x0E	; 14
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	e6 ef       	ldi	r30, 0xF6	; 246
     9e6:	f4 e0       	ldi	r31, 0x04	; 4
     9e8:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__prologue_saves__+0x1c>
     9ec:	0d 89       	ldd	r16, Y+21	; 0x15
     9ee:	1e 89       	ldd	r17, Y+22	; 0x16
     9f0:	86 e0       	ldi	r24, 0x06	; 6
     9f2:	8c 83       	std	Y+4, r24	; 0x04
     9f4:	1a 83       	std	Y+2, r17	; 0x02
     9f6:	09 83       	std	Y+1, r16	; 0x01
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	9f e7       	ldi	r25, 0x7F	; 127
     9fc:	9e 83       	std	Y+6, r25	; 0x06
     9fe:	8d 83       	std	Y+5, r24	; 0x05
     a00:	9e 01       	movw	r18, r28
     a02:	27 5e       	subi	r18, 0xE7	; 231
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
     a06:	ce 01       	movw	r24, r28
     a08:	01 96       	adiw	r24, 0x01	; 1
     a0a:	6f 89       	ldd	r22, Y+23	; 0x17
     a0c:	78 8d       	ldd	r23, Y+24	; 0x18
     a0e:	a9 01       	movw	r20, r18
     a10:	0e 94 4a 07 	call	0xe94	; 0xe94 <vfprintf>
     a14:	2f 81       	ldd	r18, Y+7	; 0x07
     a16:	38 85       	ldd	r19, Y+8	; 0x08
     a18:	02 0f       	add	r16, r18
     a1a:	13 1f       	adc	r17, r19
     a1c:	f8 01       	movw	r30, r16
     a1e:	10 82       	st	Z, r1
     a20:	2e 96       	adiw	r28, 0x0e	; 14
     a22:	e4 e0       	ldi	r30, 0x04	; 4
     a24:	0c 94 44 0d 	jmp	0x1a88	; 0x1a88 <__epilogue_restores__+0x1c>

00000a28 <__subsf3>:
     a28:	50 58       	subi	r21, 0x80	; 128

00000a2a <__addsf3>:
     a2a:	bb 27       	eor	r27, r27
     a2c:	aa 27       	eor	r26, r26
     a2e:	0e d0       	rcall	.+28     	; 0xa4c <__addsf3x>
     a30:	48 c1       	rjmp	.+656    	; 0xcc2 <__fp_round>
     a32:	39 d1       	rcall	.+626    	; 0xca6 <__fp_pscA>
     a34:	30 f0       	brcs	.+12     	; 0xa42 <__addsf3+0x18>
     a36:	3e d1       	rcall	.+636    	; 0xcb4 <__fp_pscB>
     a38:	20 f0       	brcs	.+8      	; 0xa42 <__addsf3+0x18>
     a3a:	31 f4       	brne	.+12     	; 0xa48 <__addsf3+0x1e>
     a3c:	9f 3f       	cpi	r25, 0xFF	; 255
     a3e:	11 f4       	brne	.+4      	; 0xa44 <__addsf3+0x1a>
     a40:	1e f4       	brtc	.+6      	; 0xa48 <__addsf3+0x1e>
     a42:	2e c1       	rjmp	.+604    	; 0xca0 <__fp_nan>
     a44:	0e f4       	brtc	.+2      	; 0xa48 <__addsf3+0x1e>
     a46:	e0 95       	com	r30
     a48:	e7 fb       	bst	r30, 7
     a4a:	24 c1       	rjmp	.+584    	; 0xc94 <__fp_inf>

00000a4c <__addsf3x>:
     a4c:	e9 2f       	mov	r30, r25
     a4e:	4a d1       	rcall	.+660    	; 0xce4 <__fp_split3>
     a50:	80 f3       	brcs	.-32     	; 0xa32 <__addsf3+0x8>
     a52:	ba 17       	cp	r27, r26
     a54:	62 07       	cpc	r22, r18
     a56:	73 07       	cpc	r23, r19
     a58:	84 07       	cpc	r24, r20
     a5a:	95 07       	cpc	r25, r21
     a5c:	18 f0       	brcs	.+6      	; 0xa64 <__addsf3x+0x18>
     a5e:	71 f4       	brne	.+28     	; 0xa7c <__addsf3x+0x30>
     a60:	9e f5       	brtc	.+102    	; 0xac8 <__addsf3x+0x7c>
     a62:	62 c1       	rjmp	.+708    	; 0xd28 <__fp_zero>
     a64:	0e f4       	brtc	.+2      	; 0xa68 <__addsf3x+0x1c>
     a66:	e0 95       	com	r30
     a68:	0b 2e       	mov	r0, r27
     a6a:	ba 2f       	mov	r27, r26
     a6c:	a0 2d       	mov	r26, r0
     a6e:	0b 01       	movw	r0, r22
     a70:	b9 01       	movw	r22, r18
     a72:	90 01       	movw	r18, r0
     a74:	0c 01       	movw	r0, r24
     a76:	ca 01       	movw	r24, r20
     a78:	a0 01       	movw	r20, r0
     a7a:	11 24       	eor	r1, r1
     a7c:	ff 27       	eor	r31, r31
     a7e:	59 1b       	sub	r21, r25
     a80:	99 f0       	breq	.+38     	; 0xaa8 <__addsf3x+0x5c>
     a82:	59 3f       	cpi	r21, 0xF9	; 249
     a84:	50 f4       	brcc	.+20     	; 0xa9a <__addsf3x+0x4e>
     a86:	50 3e       	cpi	r21, 0xE0	; 224
     a88:	68 f1       	brcs	.+90     	; 0xae4 <__addsf3x+0x98>
     a8a:	1a 16       	cp	r1, r26
     a8c:	f0 40       	sbci	r31, 0x00	; 0
     a8e:	a2 2f       	mov	r26, r18
     a90:	23 2f       	mov	r18, r19
     a92:	34 2f       	mov	r19, r20
     a94:	44 27       	eor	r20, r20
     a96:	58 5f       	subi	r21, 0xF8	; 248
     a98:	f3 cf       	rjmp	.-26     	; 0xa80 <__addsf3x+0x34>
     a9a:	46 95       	lsr	r20
     a9c:	37 95       	ror	r19
     a9e:	27 95       	ror	r18
     aa0:	a7 95       	ror	r26
     aa2:	f0 40       	sbci	r31, 0x00	; 0
     aa4:	53 95       	inc	r21
     aa6:	c9 f7       	brne	.-14     	; 0xa9a <__addsf3x+0x4e>
     aa8:	7e f4       	brtc	.+30     	; 0xac8 <__addsf3x+0x7c>
     aaa:	1f 16       	cp	r1, r31
     aac:	ba 0b       	sbc	r27, r26
     aae:	62 0b       	sbc	r22, r18
     ab0:	73 0b       	sbc	r23, r19
     ab2:	84 0b       	sbc	r24, r20
     ab4:	ba f0       	brmi	.+46     	; 0xae4 <__addsf3x+0x98>
     ab6:	91 50       	subi	r25, 0x01	; 1
     ab8:	a1 f0       	breq	.+40     	; 0xae2 <__addsf3x+0x96>
     aba:	ff 0f       	add	r31, r31
     abc:	bb 1f       	adc	r27, r27
     abe:	66 1f       	adc	r22, r22
     ac0:	77 1f       	adc	r23, r23
     ac2:	88 1f       	adc	r24, r24
     ac4:	c2 f7       	brpl	.-16     	; 0xab6 <__addsf3x+0x6a>
     ac6:	0e c0       	rjmp	.+28     	; 0xae4 <__addsf3x+0x98>
     ac8:	ba 0f       	add	r27, r26
     aca:	62 1f       	adc	r22, r18
     acc:	73 1f       	adc	r23, r19
     ace:	84 1f       	adc	r24, r20
     ad0:	48 f4       	brcc	.+18     	; 0xae4 <__addsf3x+0x98>
     ad2:	87 95       	ror	r24
     ad4:	77 95       	ror	r23
     ad6:	67 95       	ror	r22
     ad8:	b7 95       	ror	r27
     ada:	f7 95       	ror	r31
     adc:	9e 3f       	cpi	r25, 0xFE	; 254
     ade:	08 f0       	brcs	.+2      	; 0xae2 <__addsf3x+0x96>
     ae0:	b3 cf       	rjmp	.-154    	; 0xa48 <__addsf3+0x1e>
     ae2:	93 95       	inc	r25
     ae4:	88 0f       	add	r24, r24
     ae6:	08 f0       	brcs	.+2      	; 0xaea <__addsf3x+0x9e>
     ae8:	99 27       	eor	r25, r25
     aea:	ee 0f       	add	r30, r30
     aec:	97 95       	ror	r25
     aee:	87 95       	ror	r24
     af0:	08 95       	ret

00000af2 <__divsf3>:
     af2:	0c d0       	rcall	.+24     	; 0xb0c <__divsf3x>
     af4:	e6 c0       	rjmp	.+460    	; 0xcc2 <__fp_round>
     af6:	de d0       	rcall	.+444    	; 0xcb4 <__fp_pscB>
     af8:	40 f0       	brcs	.+16     	; 0xb0a <__divsf3+0x18>
     afa:	d5 d0       	rcall	.+426    	; 0xca6 <__fp_pscA>
     afc:	30 f0       	brcs	.+12     	; 0xb0a <__divsf3+0x18>
     afe:	21 f4       	brne	.+8      	; 0xb08 <__divsf3+0x16>
     b00:	5f 3f       	cpi	r21, 0xFF	; 255
     b02:	19 f0       	breq	.+6      	; 0xb0a <__divsf3+0x18>
     b04:	c7 c0       	rjmp	.+398    	; 0xc94 <__fp_inf>
     b06:	51 11       	cpse	r21, r1
     b08:	10 c1       	rjmp	.+544    	; 0xd2a <__fp_szero>
     b0a:	ca c0       	rjmp	.+404    	; 0xca0 <__fp_nan>

00000b0c <__divsf3x>:
     b0c:	eb d0       	rcall	.+470    	; 0xce4 <__fp_split3>
     b0e:	98 f3       	brcs	.-26     	; 0xaf6 <__divsf3+0x4>

00000b10 <__divsf3_pse>:
     b10:	99 23       	and	r25, r25
     b12:	c9 f3       	breq	.-14     	; 0xb06 <__divsf3+0x14>
     b14:	55 23       	and	r21, r21
     b16:	b1 f3       	breq	.-20     	; 0xb04 <__divsf3+0x12>
     b18:	95 1b       	sub	r25, r21
     b1a:	55 0b       	sbc	r21, r21
     b1c:	bb 27       	eor	r27, r27
     b1e:	aa 27       	eor	r26, r26
     b20:	62 17       	cp	r22, r18
     b22:	73 07       	cpc	r23, r19
     b24:	84 07       	cpc	r24, r20
     b26:	38 f0       	brcs	.+14     	; 0xb36 <__divsf3_pse+0x26>
     b28:	9f 5f       	subi	r25, 0xFF	; 255
     b2a:	5f 4f       	sbci	r21, 0xFF	; 255
     b2c:	22 0f       	add	r18, r18
     b2e:	33 1f       	adc	r19, r19
     b30:	44 1f       	adc	r20, r20
     b32:	aa 1f       	adc	r26, r26
     b34:	a9 f3       	breq	.-22     	; 0xb20 <__divsf3_pse+0x10>
     b36:	33 d0       	rcall	.+102    	; 0xb9e <__divsf3_pse+0x8e>
     b38:	0e 2e       	mov	r0, r30
     b3a:	3a f0       	brmi	.+14     	; 0xb4a <__divsf3_pse+0x3a>
     b3c:	e0 e8       	ldi	r30, 0x80	; 128
     b3e:	30 d0       	rcall	.+96     	; 0xba0 <__divsf3_pse+0x90>
     b40:	91 50       	subi	r25, 0x01	; 1
     b42:	50 40       	sbci	r21, 0x00	; 0
     b44:	e6 95       	lsr	r30
     b46:	00 1c       	adc	r0, r0
     b48:	ca f7       	brpl	.-14     	; 0xb3c <__divsf3_pse+0x2c>
     b4a:	29 d0       	rcall	.+82     	; 0xb9e <__divsf3_pse+0x8e>
     b4c:	fe 2f       	mov	r31, r30
     b4e:	27 d0       	rcall	.+78     	; 0xb9e <__divsf3_pse+0x8e>
     b50:	66 0f       	add	r22, r22
     b52:	77 1f       	adc	r23, r23
     b54:	88 1f       	adc	r24, r24
     b56:	bb 1f       	adc	r27, r27
     b58:	26 17       	cp	r18, r22
     b5a:	37 07       	cpc	r19, r23
     b5c:	48 07       	cpc	r20, r24
     b5e:	ab 07       	cpc	r26, r27
     b60:	b0 e8       	ldi	r27, 0x80	; 128
     b62:	09 f0       	breq	.+2      	; 0xb66 <__divsf3_pse+0x56>
     b64:	bb 0b       	sbc	r27, r27
     b66:	80 2d       	mov	r24, r0
     b68:	bf 01       	movw	r22, r30
     b6a:	ff 27       	eor	r31, r31
     b6c:	93 58       	subi	r25, 0x83	; 131
     b6e:	5f 4f       	sbci	r21, 0xFF	; 255
     b70:	2a f0       	brmi	.+10     	; 0xb7c <__divsf3_pse+0x6c>
     b72:	9e 3f       	cpi	r25, 0xFE	; 254
     b74:	51 05       	cpc	r21, r1
     b76:	68 f0       	brcs	.+26     	; 0xb92 <__divsf3_pse+0x82>
     b78:	8d c0       	rjmp	.+282    	; 0xc94 <__fp_inf>
     b7a:	d7 c0       	rjmp	.+430    	; 0xd2a <__fp_szero>
     b7c:	5f 3f       	cpi	r21, 0xFF	; 255
     b7e:	ec f3       	brlt	.-6      	; 0xb7a <__divsf3_pse+0x6a>
     b80:	98 3e       	cpi	r25, 0xE8	; 232
     b82:	dc f3       	brlt	.-10     	; 0xb7a <__divsf3_pse+0x6a>
     b84:	86 95       	lsr	r24
     b86:	77 95       	ror	r23
     b88:	67 95       	ror	r22
     b8a:	b7 95       	ror	r27
     b8c:	f7 95       	ror	r31
     b8e:	9f 5f       	subi	r25, 0xFF	; 255
     b90:	c9 f7       	brne	.-14     	; 0xb84 <__divsf3_pse+0x74>
     b92:	88 0f       	add	r24, r24
     b94:	91 1d       	adc	r25, r1
     b96:	96 95       	lsr	r25
     b98:	87 95       	ror	r24
     b9a:	97 f9       	bld	r25, 7
     b9c:	08 95       	ret
     b9e:	e1 e0       	ldi	r30, 0x01	; 1
     ba0:	66 0f       	add	r22, r22
     ba2:	77 1f       	adc	r23, r23
     ba4:	88 1f       	adc	r24, r24
     ba6:	bb 1f       	adc	r27, r27
     ba8:	62 17       	cp	r22, r18
     baa:	73 07       	cpc	r23, r19
     bac:	84 07       	cpc	r24, r20
     bae:	ba 07       	cpc	r27, r26
     bb0:	20 f0       	brcs	.+8      	; 0xbba <__divsf3_pse+0xaa>
     bb2:	62 1b       	sub	r22, r18
     bb4:	73 0b       	sbc	r23, r19
     bb6:	84 0b       	sbc	r24, r20
     bb8:	ba 0b       	sbc	r27, r26
     bba:	ee 1f       	adc	r30, r30
     bbc:	88 f7       	brcc	.-30     	; 0xba0 <__divsf3_pse+0x90>
     bbe:	e0 95       	com	r30
     bc0:	08 95       	ret

00000bc2 <__fixunssfsi>:
     bc2:	98 d0       	rcall	.+304    	; 0xcf4 <__fp_splitA>
     bc4:	88 f0       	brcs	.+34     	; 0xbe8 <__fixunssfsi+0x26>
     bc6:	9f 57       	subi	r25, 0x7F	; 127
     bc8:	90 f0       	brcs	.+36     	; 0xbee <__fixunssfsi+0x2c>
     bca:	b9 2f       	mov	r27, r25
     bcc:	99 27       	eor	r25, r25
     bce:	b7 51       	subi	r27, 0x17	; 23
     bd0:	a0 f0       	brcs	.+40     	; 0xbfa <__fixunssfsi+0x38>
     bd2:	d1 f0       	breq	.+52     	; 0xc08 <__fixunssfsi+0x46>
     bd4:	66 0f       	add	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	88 1f       	adc	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	1a f0       	brmi	.+6      	; 0xbe4 <__fixunssfsi+0x22>
     bde:	ba 95       	dec	r27
     be0:	c9 f7       	brne	.-14     	; 0xbd4 <__fixunssfsi+0x12>
     be2:	12 c0       	rjmp	.+36     	; 0xc08 <__fixunssfsi+0x46>
     be4:	b1 30       	cpi	r27, 0x01	; 1
     be6:	81 f0       	breq	.+32     	; 0xc08 <__fixunssfsi+0x46>
     be8:	9f d0       	rcall	.+318    	; 0xd28 <__fp_zero>
     bea:	b1 e0       	ldi	r27, 0x01	; 1
     bec:	08 95       	ret
     bee:	9c c0       	rjmp	.+312    	; 0xd28 <__fp_zero>
     bf0:	67 2f       	mov	r22, r23
     bf2:	78 2f       	mov	r23, r24
     bf4:	88 27       	eor	r24, r24
     bf6:	b8 5f       	subi	r27, 0xF8	; 248
     bf8:	39 f0       	breq	.+14     	; 0xc08 <__fixunssfsi+0x46>
     bfa:	b9 3f       	cpi	r27, 0xF9	; 249
     bfc:	cc f3       	brlt	.-14     	; 0xbf0 <__fixunssfsi+0x2e>
     bfe:	86 95       	lsr	r24
     c00:	77 95       	ror	r23
     c02:	67 95       	ror	r22
     c04:	b3 95       	inc	r27
     c06:	d9 f7       	brne	.-10     	; 0xbfe <__fixunssfsi+0x3c>
     c08:	3e f4       	brtc	.+14     	; 0xc18 <__fixunssfsi+0x56>
     c0a:	90 95       	com	r25
     c0c:	80 95       	com	r24
     c0e:	70 95       	com	r23
     c10:	61 95       	neg	r22
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	8f 4f       	sbci	r24, 0xFF	; 255
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	08 95       	ret

00000c1a <__floatunsisf>:
     c1a:	e8 94       	clt
     c1c:	09 c0       	rjmp	.+18     	; 0xc30 <__floatsisf+0x12>

00000c1e <__floatsisf>:
     c1e:	97 fb       	bst	r25, 7
     c20:	3e f4       	brtc	.+14     	; 0xc30 <__floatsisf+0x12>
     c22:	90 95       	com	r25
     c24:	80 95       	com	r24
     c26:	70 95       	com	r23
     c28:	61 95       	neg	r22
     c2a:	7f 4f       	sbci	r23, 0xFF	; 255
     c2c:	8f 4f       	sbci	r24, 0xFF	; 255
     c2e:	9f 4f       	sbci	r25, 0xFF	; 255
     c30:	99 23       	and	r25, r25
     c32:	a9 f0       	breq	.+42     	; 0xc5e <__floatsisf+0x40>
     c34:	f9 2f       	mov	r31, r25
     c36:	96 e9       	ldi	r25, 0x96	; 150
     c38:	bb 27       	eor	r27, r27
     c3a:	93 95       	inc	r25
     c3c:	f6 95       	lsr	r31
     c3e:	87 95       	ror	r24
     c40:	77 95       	ror	r23
     c42:	67 95       	ror	r22
     c44:	b7 95       	ror	r27
     c46:	f1 11       	cpse	r31, r1
     c48:	f8 cf       	rjmp	.-16     	; 0xc3a <__floatsisf+0x1c>
     c4a:	fa f4       	brpl	.+62     	; 0xc8a <__floatsisf+0x6c>
     c4c:	bb 0f       	add	r27, r27
     c4e:	11 f4       	brne	.+4      	; 0xc54 <__floatsisf+0x36>
     c50:	60 ff       	sbrs	r22, 0
     c52:	1b c0       	rjmp	.+54     	; 0xc8a <__floatsisf+0x6c>
     c54:	6f 5f       	subi	r22, 0xFF	; 255
     c56:	7f 4f       	sbci	r23, 0xFF	; 255
     c58:	8f 4f       	sbci	r24, 0xFF	; 255
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	16 c0       	rjmp	.+44     	; 0xc8a <__floatsisf+0x6c>
     c5e:	88 23       	and	r24, r24
     c60:	11 f0       	breq	.+4      	; 0xc66 <__floatsisf+0x48>
     c62:	96 e9       	ldi	r25, 0x96	; 150
     c64:	11 c0       	rjmp	.+34     	; 0xc88 <__floatsisf+0x6a>
     c66:	77 23       	and	r23, r23
     c68:	21 f0       	breq	.+8      	; 0xc72 <__floatsisf+0x54>
     c6a:	9e e8       	ldi	r25, 0x8E	; 142
     c6c:	87 2f       	mov	r24, r23
     c6e:	76 2f       	mov	r23, r22
     c70:	05 c0       	rjmp	.+10     	; 0xc7c <__floatsisf+0x5e>
     c72:	66 23       	and	r22, r22
     c74:	71 f0       	breq	.+28     	; 0xc92 <__floatsisf+0x74>
     c76:	96 e8       	ldi	r25, 0x86	; 134
     c78:	86 2f       	mov	r24, r22
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	2a f0       	brmi	.+10     	; 0xc8a <__floatsisf+0x6c>
     c80:	9a 95       	dec	r25
     c82:	66 0f       	add	r22, r22
     c84:	77 1f       	adc	r23, r23
     c86:	88 1f       	adc	r24, r24
     c88:	da f7       	brpl	.-10     	; 0xc80 <__floatsisf+0x62>
     c8a:	88 0f       	add	r24, r24
     c8c:	96 95       	lsr	r25
     c8e:	87 95       	ror	r24
     c90:	97 f9       	bld	r25, 7
     c92:	08 95       	ret

00000c94 <__fp_inf>:
     c94:	97 f9       	bld	r25, 7
     c96:	9f 67       	ori	r25, 0x7F	; 127
     c98:	80 e8       	ldi	r24, 0x80	; 128
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	08 95       	ret

00000ca0 <__fp_nan>:
     ca0:	9f ef       	ldi	r25, 0xFF	; 255
     ca2:	80 ec       	ldi	r24, 0xC0	; 192
     ca4:	08 95       	ret

00000ca6 <__fp_pscA>:
     ca6:	00 24       	eor	r0, r0
     ca8:	0a 94       	dec	r0
     caa:	16 16       	cp	r1, r22
     cac:	17 06       	cpc	r1, r23
     cae:	18 06       	cpc	r1, r24
     cb0:	09 06       	cpc	r0, r25
     cb2:	08 95       	ret

00000cb4 <__fp_pscB>:
     cb4:	00 24       	eor	r0, r0
     cb6:	0a 94       	dec	r0
     cb8:	12 16       	cp	r1, r18
     cba:	13 06       	cpc	r1, r19
     cbc:	14 06       	cpc	r1, r20
     cbe:	05 06       	cpc	r0, r21
     cc0:	08 95       	ret

00000cc2 <__fp_round>:
     cc2:	09 2e       	mov	r0, r25
     cc4:	03 94       	inc	r0
     cc6:	00 0c       	add	r0, r0
     cc8:	11 f4       	brne	.+4      	; 0xcce <__fp_round+0xc>
     cca:	88 23       	and	r24, r24
     ccc:	52 f0       	brmi	.+20     	; 0xce2 <__fp_round+0x20>
     cce:	bb 0f       	add	r27, r27
     cd0:	40 f4       	brcc	.+16     	; 0xce2 <__fp_round+0x20>
     cd2:	bf 2b       	or	r27, r31
     cd4:	11 f4       	brne	.+4      	; 0xcda <__fp_round+0x18>
     cd6:	60 ff       	sbrs	r22, 0
     cd8:	04 c0       	rjmp	.+8      	; 0xce2 <__fp_round+0x20>
     cda:	6f 5f       	subi	r22, 0xFF	; 255
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	8f 4f       	sbci	r24, 0xFF	; 255
     ce0:	9f 4f       	sbci	r25, 0xFF	; 255
     ce2:	08 95       	ret

00000ce4 <__fp_split3>:
     ce4:	57 fd       	sbrc	r21, 7
     ce6:	90 58       	subi	r25, 0x80	; 128
     ce8:	44 0f       	add	r20, r20
     cea:	55 1f       	adc	r21, r21
     cec:	59 f0       	breq	.+22     	; 0xd04 <__fp_splitA+0x10>
     cee:	5f 3f       	cpi	r21, 0xFF	; 255
     cf0:	71 f0       	breq	.+28     	; 0xd0e <__fp_splitA+0x1a>
     cf2:	47 95       	ror	r20

00000cf4 <__fp_splitA>:
     cf4:	88 0f       	add	r24, r24
     cf6:	97 fb       	bst	r25, 7
     cf8:	99 1f       	adc	r25, r25
     cfa:	61 f0       	breq	.+24     	; 0xd14 <__fp_splitA+0x20>
     cfc:	9f 3f       	cpi	r25, 0xFF	; 255
     cfe:	79 f0       	breq	.+30     	; 0xd1e <__fp_splitA+0x2a>
     d00:	87 95       	ror	r24
     d02:	08 95       	ret
     d04:	12 16       	cp	r1, r18
     d06:	13 06       	cpc	r1, r19
     d08:	14 06       	cpc	r1, r20
     d0a:	55 1f       	adc	r21, r21
     d0c:	f2 cf       	rjmp	.-28     	; 0xcf2 <__fp_split3+0xe>
     d0e:	46 95       	lsr	r20
     d10:	f1 df       	rcall	.-30     	; 0xcf4 <__fp_splitA>
     d12:	08 c0       	rjmp	.+16     	; 0xd24 <__fp_splitA+0x30>
     d14:	16 16       	cp	r1, r22
     d16:	17 06       	cpc	r1, r23
     d18:	18 06       	cpc	r1, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	f1 cf       	rjmp	.-30     	; 0xd00 <__fp_splitA+0xc>
     d1e:	86 95       	lsr	r24
     d20:	71 05       	cpc	r23, r1
     d22:	61 05       	cpc	r22, r1
     d24:	08 94       	sec
     d26:	08 95       	ret

00000d28 <__fp_zero>:
     d28:	e8 94       	clt

00000d2a <__fp_szero>:
     d2a:	bb 27       	eor	r27, r27
     d2c:	66 27       	eor	r22, r22
     d2e:	77 27       	eor	r23, r23
     d30:	cb 01       	movw	r24, r22
     d32:	97 f9       	bld	r25, 7
     d34:	08 95       	ret

00000d36 <__mulsf3>:
     d36:	0b d0       	rcall	.+22     	; 0xd4e <__mulsf3x>
     d38:	c4 cf       	rjmp	.-120    	; 0xcc2 <__fp_round>
     d3a:	b5 df       	rcall	.-150    	; 0xca6 <__fp_pscA>
     d3c:	28 f0       	brcs	.+10     	; 0xd48 <__mulsf3+0x12>
     d3e:	ba df       	rcall	.-140    	; 0xcb4 <__fp_pscB>
     d40:	18 f0       	brcs	.+6      	; 0xd48 <__mulsf3+0x12>
     d42:	95 23       	and	r25, r21
     d44:	09 f0       	breq	.+2      	; 0xd48 <__mulsf3+0x12>
     d46:	a6 cf       	rjmp	.-180    	; 0xc94 <__fp_inf>
     d48:	ab cf       	rjmp	.-170    	; 0xca0 <__fp_nan>
     d4a:	11 24       	eor	r1, r1
     d4c:	ee cf       	rjmp	.-36     	; 0xd2a <__fp_szero>

00000d4e <__mulsf3x>:
     d4e:	ca df       	rcall	.-108    	; 0xce4 <__fp_split3>
     d50:	a0 f3       	brcs	.-24     	; 0xd3a <__mulsf3+0x4>

00000d52 <__mulsf3_pse>:
     d52:	95 9f       	mul	r25, r21
     d54:	d1 f3       	breq	.-12     	; 0xd4a <__mulsf3+0x14>
     d56:	95 0f       	add	r25, r21
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	55 1f       	adc	r21, r21
     d5c:	62 9f       	mul	r22, r18
     d5e:	f0 01       	movw	r30, r0
     d60:	72 9f       	mul	r23, r18
     d62:	bb 27       	eor	r27, r27
     d64:	f0 0d       	add	r31, r0
     d66:	b1 1d       	adc	r27, r1
     d68:	63 9f       	mul	r22, r19
     d6a:	aa 27       	eor	r26, r26
     d6c:	f0 0d       	add	r31, r0
     d6e:	b1 1d       	adc	r27, r1
     d70:	aa 1f       	adc	r26, r26
     d72:	64 9f       	mul	r22, r20
     d74:	66 27       	eor	r22, r22
     d76:	b0 0d       	add	r27, r0
     d78:	a1 1d       	adc	r26, r1
     d7a:	66 1f       	adc	r22, r22
     d7c:	82 9f       	mul	r24, r18
     d7e:	22 27       	eor	r18, r18
     d80:	b0 0d       	add	r27, r0
     d82:	a1 1d       	adc	r26, r1
     d84:	62 1f       	adc	r22, r18
     d86:	73 9f       	mul	r23, r19
     d88:	b0 0d       	add	r27, r0
     d8a:	a1 1d       	adc	r26, r1
     d8c:	62 1f       	adc	r22, r18
     d8e:	83 9f       	mul	r24, r19
     d90:	a0 0d       	add	r26, r0
     d92:	61 1d       	adc	r22, r1
     d94:	22 1f       	adc	r18, r18
     d96:	74 9f       	mul	r23, r20
     d98:	33 27       	eor	r19, r19
     d9a:	a0 0d       	add	r26, r0
     d9c:	61 1d       	adc	r22, r1
     d9e:	23 1f       	adc	r18, r19
     da0:	84 9f       	mul	r24, r20
     da2:	60 0d       	add	r22, r0
     da4:	21 1d       	adc	r18, r1
     da6:	82 2f       	mov	r24, r18
     da8:	76 2f       	mov	r23, r22
     daa:	6a 2f       	mov	r22, r26
     dac:	11 24       	eor	r1, r1
     dae:	9f 57       	subi	r25, 0x7F	; 127
     db0:	50 40       	sbci	r21, 0x00	; 0
     db2:	8a f0       	brmi	.+34     	; 0xdd6 <__mulsf3_pse+0x84>
     db4:	e1 f0       	breq	.+56     	; 0xdee <__mulsf3_pse+0x9c>
     db6:	88 23       	and	r24, r24
     db8:	4a f0       	brmi	.+18     	; 0xdcc <__mulsf3_pse+0x7a>
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	bb 1f       	adc	r27, r27
     dc0:	66 1f       	adc	r22, r22
     dc2:	77 1f       	adc	r23, r23
     dc4:	88 1f       	adc	r24, r24
     dc6:	91 50       	subi	r25, 0x01	; 1
     dc8:	50 40       	sbci	r21, 0x00	; 0
     dca:	a9 f7       	brne	.-22     	; 0xdb6 <__mulsf3_pse+0x64>
     dcc:	9e 3f       	cpi	r25, 0xFE	; 254
     dce:	51 05       	cpc	r21, r1
     dd0:	70 f0       	brcs	.+28     	; 0xdee <__mulsf3_pse+0x9c>
     dd2:	60 cf       	rjmp	.-320    	; 0xc94 <__fp_inf>
     dd4:	aa cf       	rjmp	.-172    	; 0xd2a <__fp_szero>
     dd6:	5f 3f       	cpi	r21, 0xFF	; 255
     dd8:	ec f3       	brlt	.-6      	; 0xdd4 <__mulsf3_pse+0x82>
     dda:	98 3e       	cpi	r25, 0xE8	; 232
     ddc:	dc f3       	brlt	.-10     	; 0xdd4 <__mulsf3_pse+0x82>
     dde:	86 95       	lsr	r24
     de0:	77 95       	ror	r23
     de2:	67 95       	ror	r22
     de4:	b7 95       	ror	r27
     de6:	f7 95       	ror	r31
     de8:	e7 95       	ror	r30
     dea:	9f 5f       	subi	r25, 0xFF	; 255
     dec:	c1 f7       	brne	.-16     	; 0xdde <__mulsf3_pse+0x8c>
     dee:	fe 2b       	or	r31, r30
     df0:	88 0f       	add	r24, r24
     df2:	91 1d       	adc	r25, r1
     df4:	96 95       	lsr	r25
     df6:	87 95       	ror	r24
     df8:	97 f9       	bld	r25, 7
     dfa:	08 95       	ret

00000dfc <pow>:
     dfc:	fa 01       	movw	r30, r20
     dfe:	ee 0f       	add	r30, r30
     e00:	ff 1f       	adc	r31, r31
     e02:	30 96       	adiw	r30, 0x00	; 0
     e04:	21 05       	cpc	r18, r1
     e06:	31 05       	cpc	r19, r1
     e08:	99 f1       	breq	.+102    	; 0xe70 <pow+0x74>
     e0a:	61 15       	cp	r22, r1
     e0c:	71 05       	cpc	r23, r1
     e0e:	61 f4       	brne	.+24     	; 0xe28 <pow+0x2c>
     e10:	80 38       	cpi	r24, 0x80	; 128
     e12:	bf e3       	ldi	r27, 0x3F	; 63
     e14:	9b 07       	cpc	r25, r27
     e16:	49 f1       	breq	.+82     	; 0xe6a <pow+0x6e>
     e18:	68 94       	set
     e1a:	90 38       	cpi	r25, 0x80	; 128
     e1c:	81 05       	cpc	r24, r1
     e1e:	61 f0       	breq	.+24     	; 0xe38 <pow+0x3c>
     e20:	80 38       	cpi	r24, 0x80	; 128
     e22:	bf ef       	ldi	r27, 0xFF	; 255
     e24:	9b 07       	cpc	r25, r27
     e26:	41 f0       	breq	.+16     	; 0xe38 <pow+0x3c>
     e28:	99 23       	and	r25, r25
     e2a:	42 f5       	brpl	.+80     	; 0xe7c <pow+0x80>
     e2c:	ff 3f       	cpi	r31, 0xFF	; 255
     e2e:	e1 05       	cpc	r30, r1
     e30:	31 05       	cpc	r19, r1
     e32:	21 05       	cpc	r18, r1
     e34:	11 f1       	breq	.+68     	; 0xe7a <pow+0x7e>
     e36:	e8 94       	clt
     e38:	08 94       	sec
     e3a:	e7 95       	ror	r30
     e3c:	d9 01       	movw	r26, r18
     e3e:	aa 23       	and	r26, r26
     e40:	29 f4       	brne	.+10     	; 0xe4c <pow+0x50>
     e42:	ab 2f       	mov	r26, r27
     e44:	be 2f       	mov	r27, r30
     e46:	f8 5f       	subi	r31, 0xF8	; 248
     e48:	d0 f3       	brcs	.-12     	; 0xe3e <pow+0x42>
     e4a:	10 c0       	rjmp	.+32     	; 0xe6c <pow+0x70>
     e4c:	ff 5f       	subi	r31, 0xFF	; 255
     e4e:	70 f4       	brcc	.+28     	; 0xe6c <pow+0x70>
     e50:	a6 95       	lsr	r26
     e52:	e0 f7       	brcc	.-8      	; 0xe4c <pow+0x50>
     e54:	f7 39       	cpi	r31, 0x97	; 151
     e56:	50 f0       	brcs	.+20     	; 0xe6c <pow+0x70>
     e58:	19 f0       	breq	.+6      	; 0xe60 <pow+0x64>
     e5a:	ff 3a       	cpi	r31, 0xAF	; 175
     e5c:	38 f4       	brcc	.+14     	; 0xe6c <pow+0x70>
     e5e:	9f 77       	andi	r25, 0x7F	; 127
     e60:	9f 93       	push	r25
     e62:	0c d0       	rcall	.+24     	; 0xe7c <pow+0x80>
     e64:	0f 90       	pop	r0
     e66:	07 fc       	sbrc	r0, 7
     e68:	90 58       	subi	r25, 0x80	; 128
     e6a:	08 95       	ret
     e6c:	3e f0       	brts	.+14     	; 0xe7c <pow+0x80>
     e6e:	18 cf       	rjmp	.-464    	; 0xca0 <__fp_nan>
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	80 e8       	ldi	r24, 0x80	; 128
     e76:	9f e3       	ldi	r25, 0x3F	; 63
     e78:	08 95       	ret
     e7a:	4f e7       	ldi	r20, 0x7F	; 127
     e7c:	9f 77       	andi	r25, 0x7F	; 127
     e7e:	5f 93       	push	r21
     e80:	4f 93       	push	r20
     e82:	3f 93       	push	r19
     e84:	2f 93       	push	r18
     e86:	55 d5       	rcall	.+2730   	; 0x1932 <log>
     e88:	2f 91       	pop	r18
     e8a:	3f 91       	pop	r19
     e8c:	4f 91       	pop	r20
     e8e:	5f 91       	pop	r21
     e90:	52 df       	rcall	.-348    	; 0xd36 <__mulsf3>
     e92:	bc c4       	rjmp	.+2424   	; 0x180c <exp>

00000e94 <vfprintf>:
     e94:	ab e0       	ldi	r26, 0x0B	; 11
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e0 e5       	ldi	r30, 0x50	; 80
     e9a:	f7 e0       	ldi	r31, 0x07	; 7
     e9c:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__prologue_saves__>
     ea0:	3c 01       	movw	r6, r24
     ea2:	2b 01       	movw	r4, r22
     ea4:	5a 01       	movw	r10, r20
     ea6:	fc 01       	movw	r30, r24
     ea8:	17 82       	std	Z+7, r1	; 0x07
     eaa:	16 82       	std	Z+6, r1	; 0x06
     eac:	83 81       	ldd	r24, Z+3	; 0x03
     eae:	81 fd       	sbrc	r24, 1
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <vfprintf+0x24>
     eb2:	6f ef       	ldi	r22, 0xFF	; 255
     eb4:	7f ef       	ldi	r23, 0xFF	; 255
     eb6:	c6 c1       	rjmp	.+908    	; 0x1244 <vfprintf+0x3b0>
     eb8:	9a e0       	ldi	r25, 0x0A	; 10
     eba:	89 2e       	mov	r8, r25
     ebc:	1e 01       	movw	r2, r28
     ebe:	08 94       	sec
     ec0:	21 1c       	adc	r2, r1
     ec2:	31 1c       	adc	r3, r1
     ec4:	f3 01       	movw	r30, r6
     ec6:	23 81       	ldd	r18, Z+3	; 0x03
     ec8:	f2 01       	movw	r30, r4
     eca:	23 fd       	sbrc	r18, 3
     ecc:	85 91       	lpm	r24, Z+
     ece:	23 ff       	sbrs	r18, 3
     ed0:	81 91       	ld	r24, Z+
     ed2:	2f 01       	movw	r4, r30
     ed4:	88 23       	and	r24, r24
     ed6:	09 f4       	brne	.+2      	; 0xeda <vfprintf+0x46>
     ed8:	b2 c1       	rjmp	.+868    	; 0x123e <vfprintf+0x3aa>
     eda:	85 32       	cpi	r24, 0x25	; 37
     edc:	39 f4       	brne	.+14     	; 0xeec <vfprintf+0x58>
     ede:	23 fd       	sbrc	r18, 3
     ee0:	85 91       	lpm	r24, Z+
     ee2:	23 ff       	sbrs	r18, 3
     ee4:	81 91       	ld	r24, Z+
     ee6:	2f 01       	movw	r4, r30
     ee8:	85 32       	cpi	r24, 0x25	; 37
     eea:	29 f4       	brne	.+10     	; 0xef6 <vfprintf+0x62>
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	b3 01       	movw	r22, r6
     ef0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fputc>
     ef4:	e7 cf       	rjmp	.-50     	; 0xec4 <vfprintf+0x30>
     ef6:	98 2f       	mov	r25, r24
     ef8:	ff 24       	eor	r15, r15
     efa:	ee 24       	eor	r14, r14
     efc:	99 24       	eor	r9, r9
     efe:	ff e1       	ldi	r31, 0x1F	; 31
     f00:	ff 15       	cp	r31, r15
     f02:	d0 f0       	brcs	.+52     	; 0xf38 <vfprintf+0xa4>
     f04:	9b 32       	cpi	r25, 0x2B	; 43
     f06:	69 f0       	breq	.+26     	; 0xf22 <vfprintf+0x8e>
     f08:	9c 32       	cpi	r25, 0x2C	; 44
     f0a:	28 f4       	brcc	.+10     	; 0xf16 <vfprintf+0x82>
     f0c:	90 32       	cpi	r25, 0x20	; 32
     f0e:	59 f0       	breq	.+22     	; 0xf26 <vfprintf+0x92>
     f10:	93 32       	cpi	r25, 0x23	; 35
     f12:	91 f4       	brne	.+36     	; 0xf38 <vfprintf+0xa4>
     f14:	0e c0       	rjmp	.+28     	; 0xf32 <vfprintf+0x9e>
     f16:	9d 32       	cpi	r25, 0x2D	; 45
     f18:	49 f0       	breq	.+18     	; 0xf2c <vfprintf+0x98>
     f1a:	90 33       	cpi	r25, 0x30	; 48
     f1c:	69 f4       	brne	.+26     	; 0xf38 <vfprintf+0xa4>
     f1e:	41 e0       	ldi	r20, 0x01	; 1
     f20:	24 c0       	rjmp	.+72     	; 0xf6a <vfprintf+0xd6>
     f22:	52 e0       	ldi	r21, 0x02	; 2
     f24:	f5 2a       	or	r15, r21
     f26:	84 e0       	ldi	r24, 0x04	; 4
     f28:	f8 2a       	or	r15, r24
     f2a:	28 c0       	rjmp	.+80     	; 0xf7c <vfprintf+0xe8>
     f2c:	98 e0       	ldi	r25, 0x08	; 8
     f2e:	f9 2a       	or	r15, r25
     f30:	25 c0       	rjmp	.+74     	; 0xf7c <vfprintf+0xe8>
     f32:	e0 e1       	ldi	r30, 0x10	; 16
     f34:	fe 2a       	or	r15, r30
     f36:	22 c0       	rjmp	.+68     	; 0xf7c <vfprintf+0xe8>
     f38:	f7 fc       	sbrc	r15, 7
     f3a:	29 c0       	rjmp	.+82     	; 0xf8e <vfprintf+0xfa>
     f3c:	89 2f       	mov	r24, r25
     f3e:	80 53       	subi	r24, 0x30	; 48
     f40:	8a 30       	cpi	r24, 0x0A	; 10
     f42:	70 f4       	brcc	.+28     	; 0xf60 <vfprintf+0xcc>
     f44:	f6 fe       	sbrs	r15, 6
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <vfprintf+0xbe>
     f48:	98 9c       	mul	r9, r8
     f4a:	90 2c       	mov	r9, r0
     f4c:	11 24       	eor	r1, r1
     f4e:	98 0e       	add	r9, r24
     f50:	15 c0       	rjmp	.+42     	; 0xf7c <vfprintf+0xe8>
     f52:	e8 9c       	mul	r14, r8
     f54:	e0 2c       	mov	r14, r0
     f56:	11 24       	eor	r1, r1
     f58:	e8 0e       	add	r14, r24
     f5a:	f0 e2       	ldi	r31, 0x20	; 32
     f5c:	ff 2a       	or	r15, r31
     f5e:	0e c0       	rjmp	.+28     	; 0xf7c <vfprintf+0xe8>
     f60:	9e 32       	cpi	r25, 0x2E	; 46
     f62:	29 f4       	brne	.+10     	; 0xf6e <vfprintf+0xda>
     f64:	f6 fc       	sbrc	r15, 6
     f66:	6b c1       	rjmp	.+726    	; 0x123e <vfprintf+0x3aa>
     f68:	40 e4       	ldi	r20, 0x40	; 64
     f6a:	f4 2a       	or	r15, r20
     f6c:	07 c0       	rjmp	.+14     	; 0xf7c <vfprintf+0xe8>
     f6e:	9c 36       	cpi	r25, 0x6C	; 108
     f70:	19 f4       	brne	.+6      	; 0xf78 <vfprintf+0xe4>
     f72:	50 e8       	ldi	r21, 0x80	; 128
     f74:	f5 2a       	or	r15, r21
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <vfprintf+0xe8>
     f78:	98 36       	cpi	r25, 0x68	; 104
     f7a:	49 f4       	brne	.+18     	; 0xf8e <vfprintf+0xfa>
     f7c:	f2 01       	movw	r30, r4
     f7e:	23 fd       	sbrc	r18, 3
     f80:	95 91       	lpm	r25, Z+
     f82:	23 ff       	sbrs	r18, 3
     f84:	91 91       	ld	r25, Z+
     f86:	2f 01       	movw	r4, r30
     f88:	99 23       	and	r25, r25
     f8a:	09 f0       	breq	.+2      	; 0xf8e <vfprintf+0xfa>
     f8c:	b8 cf       	rjmp	.-144    	; 0xefe <vfprintf+0x6a>
     f8e:	89 2f       	mov	r24, r25
     f90:	85 54       	subi	r24, 0x45	; 69
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	18 f0       	brcs	.+6      	; 0xf9c <vfprintf+0x108>
     f96:	80 52       	subi	r24, 0x20	; 32
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	38 f4       	brcc	.+14     	; 0xfaa <vfprintf+0x116>
     f9c:	44 e0       	ldi	r20, 0x04	; 4
     f9e:	50 e0       	ldi	r21, 0x00	; 0
     fa0:	a4 0e       	add	r10, r20
     fa2:	b5 1e       	adc	r11, r21
     fa4:	5f e3       	ldi	r21, 0x3F	; 63
     fa6:	59 83       	std	Y+1, r21	; 0x01
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <vfprintf+0x134>
     faa:	93 36       	cpi	r25, 0x63	; 99
     fac:	31 f0       	breq	.+12     	; 0xfba <vfprintf+0x126>
     fae:	93 37       	cpi	r25, 0x73	; 115
     fb0:	79 f0       	breq	.+30     	; 0xfd0 <vfprintf+0x13c>
     fb2:	93 35       	cpi	r25, 0x53	; 83
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <vfprintf+0x124>
     fb6:	56 c0       	rjmp	.+172    	; 0x1064 <vfprintf+0x1d0>
     fb8:	20 c0       	rjmp	.+64     	; 0xffa <vfprintf+0x166>
     fba:	f5 01       	movw	r30, r10
     fbc:	80 81       	ld	r24, Z
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	42 e0       	ldi	r20, 0x02	; 2
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	a4 0e       	add	r10, r20
     fc6:	b5 1e       	adc	r11, r21
     fc8:	61 01       	movw	r12, r2
     fca:	01 e0       	ldi	r16, 0x01	; 1
     fcc:	10 e0       	ldi	r17, 0x00	; 0
     fce:	12 c0       	rjmp	.+36     	; 0xff4 <vfprintf+0x160>
     fd0:	f5 01       	movw	r30, r10
     fd2:	c0 80       	ld	r12, Z
     fd4:	d1 80       	ldd	r13, Z+1	; 0x01
     fd6:	f6 fc       	sbrc	r15, 6
     fd8:	03 c0       	rjmp	.+6      	; 0xfe0 <vfprintf+0x14c>
     fda:	6f ef       	ldi	r22, 0xFF	; 255
     fdc:	7f ef       	ldi	r23, 0xFF	; 255
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <vfprintf+0x150>
     fe0:	69 2d       	mov	r22, r9
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	42 e0       	ldi	r20, 0x02	; 2
     fe6:	50 e0       	ldi	r21, 0x00	; 0
     fe8:	a4 0e       	add	r10, r20
     fea:	b5 1e       	adc	r11, r21
     fec:	c6 01       	movw	r24, r12
     fee:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <strnlen>
     ff2:	8c 01       	movw	r16, r24
     ff4:	5f e7       	ldi	r21, 0x7F	; 127
     ff6:	f5 22       	and	r15, r21
     ff8:	14 c0       	rjmp	.+40     	; 0x1022 <vfprintf+0x18e>
     ffa:	f5 01       	movw	r30, r10
     ffc:	c0 80       	ld	r12, Z
     ffe:	d1 80       	ldd	r13, Z+1	; 0x01
    1000:	f6 fc       	sbrc	r15, 6
    1002:	03 c0       	rjmp	.+6      	; 0x100a <vfprintf+0x176>
    1004:	6f ef       	ldi	r22, 0xFF	; 255
    1006:	7f ef       	ldi	r23, 0xFF	; 255
    1008:	02 c0       	rjmp	.+4      	; 0x100e <vfprintf+0x17a>
    100a:	69 2d       	mov	r22, r9
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	42 e0       	ldi	r20, 0x02	; 2
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	a4 0e       	add	r10, r20
    1014:	b5 1e       	adc	r11, r21
    1016:	c6 01       	movw	r24, r12
    1018:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <strnlen_P>
    101c:	8c 01       	movw	r16, r24
    101e:	50 e8       	ldi	r21, 0x80	; 128
    1020:	f5 2a       	or	r15, r21
    1022:	f3 fe       	sbrs	r15, 3
    1024:	07 c0       	rjmp	.+14     	; 0x1034 <vfprintf+0x1a0>
    1026:	1a c0       	rjmp	.+52     	; 0x105c <vfprintf+0x1c8>
    1028:	80 e2       	ldi	r24, 0x20	; 32
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	b3 01       	movw	r22, r6
    102e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fputc>
    1032:	ea 94       	dec	r14
    1034:	8e 2d       	mov	r24, r14
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	08 17       	cp	r16, r24
    103a:	19 07       	cpc	r17, r25
    103c:	a8 f3       	brcs	.-22     	; 0x1028 <vfprintf+0x194>
    103e:	0e c0       	rjmp	.+28     	; 0x105c <vfprintf+0x1c8>
    1040:	f6 01       	movw	r30, r12
    1042:	f7 fc       	sbrc	r15, 7
    1044:	85 91       	lpm	r24, Z+
    1046:	f7 fe       	sbrs	r15, 7
    1048:	81 91       	ld	r24, Z+
    104a:	6f 01       	movw	r12, r30
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	b3 01       	movw	r22, r6
    1050:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fputc>
    1054:	e1 10       	cpse	r14, r1
    1056:	ea 94       	dec	r14
    1058:	01 50       	subi	r16, 0x01	; 1
    105a:	10 40       	sbci	r17, 0x00	; 0
    105c:	01 15       	cp	r16, r1
    105e:	11 05       	cpc	r17, r1
    1060:	79 f7       	brne	.-34     	; 0x1040 <vfprintf+0x1ac>
    1062:	ea c0       	rjmp	.+468    	; 0x1238 <vfprintf+0x3a4>
    1064:	94 36       	cpi	r25, 0x64	; 100
    1066:	11 f0       	breq	.+4      	; 0x106c <vfprintf+0x1d8>
    1068:	99 36       	cpi	r25, 0x69	; 105
    106a:	69 f5       	brne	.+90     	; 0x10c6 <vfprintf+0x232>
    106c:	f7 fe       	sbrs	r15, 7
    106e:	08 c0       	rjmp	.+16     	; 0x1080 <vfprintf+0x1ec>
    1070:	f5 01       	movw	r30, r10
    1072:	20 81       	ld	r18, Z
    1074:	31 81       	ldd	r19, Z+1	; 0x01
    1076:	42 81       	ldd	r20, Z+2	; 0x02
    1078:	53 81       	ldd	r21, Z+3	; 0x03
    107a:	84 e0       	ldi	r24, 0x04	; 4
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	0a c0       	rjmp	.+20     	; 0x1094 <vfprintf+0x200>
    1080:	f5 01       	movw	r30, r10
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	9c 01       	movw	r18, r24
    1088:	44 27       	eor	r20, r20
    108a:	37 fd       	sbrc	r19, 7
    108c:	40 95       	com	r20
    108e:	54 2f       	mov	r21, r20
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a8 0e       	add	r10, r24
    1096:	b9 1e       	adc	r11, r25
    1098:	9f e6       	ldi	r25, 0x6F	; 111
    109a:	f9 22       	and	r15, r25
    109c:	57 ff       	sbrs	r21, 7
    109e:	09 c0       	rjmp	.+18     	; 0x10b2 <vfprintf+0x21e>
    10a0:	50 95       	com	r21
    10a2:	40 95       	com	r20
    10a4:	30 95       	com	r19
    10a6:	21 95       	neg	r18
    10a8:	3f 4f       	sbci	r19, 0xFF	; 255
    10aa:	4f 4f       	sbci	r20, 0xFF	; 255
    10ac:	5f 4f       	sbci	r21, 0xFF	; 255
    10ae:	e0 e8       	ldi	r30, 0x80	; 128
    10b0:	fe 2a       	or	r15, r30
    10b2:	ca 01       	movw	r24, r20
    10b4:	b9 01       	movw	r22, r18
    10b6:	a1 01       	movw	r20, r2
    10b8:	2a e0       	ldi	r18, 0x0A	; 10
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__ultoa_invert>
    10c0:	d8 2e       	mov	r13, r24
    10c2:	d2 18       	sub	r13, r2
    10c4:	40 c0       	rjmp	.+128    	; 0x1146 <vfprintf+0x2b2>
    10c6:	95 37       	cpi	r25, 0x75	; 117
    10c8:	29 f4       	brne	.+10     	; 0x10d4 <vfprintf+0x240>
    10ca:	1f 2d       	mov	r17, r15
    10cc:	1f 7e       	andi	r17, 0xEF	; 239
    10ce:	2a e0       	ldi	r18, 0x0A	; 10
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	1d c0       	rjmp	.+58     	; 0x110e <vfprintf+0x27a>
    10d4:	1f 2d       	mov	r17, r15
    10d6:	19 7f       	andi	r17, 0xF9	; 249
    10d8:	9f 36       	cpi	r25, 0x6F	; 111
    10da:	61 f0       	breq	.+24     	; 0x10f4 <vfprintf+0x260>
    10dc:	90 37       	cpi	r25, 0x70	; 112
    10de:	20 f4       	brcc	.+8      	; 0x10e8 <vfprintf+0x254>
    10e0:	98 35       	cpi	r25, 0x58	; 88
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <vfprintf+0x252>
    10e4:	ac c0       	rjmp	.+344    	; 0x123e <vfprintf+0x3aa>
    10e6:	0f c0       	rjmp	.+30     	; 0x1106 <vfprintf+0x272>
    10e8:	90 37       	cpi	r25, 0x70	; 112
    10ea:	39 f0       	breq	.+14     	; 0x10fa <vfprintf+0x266>
    10ec:	98 37       	cpi	r25, 0x78	; 120
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <vfprintf+0x25e>
    10f0:	a6 c0       	rjmp	.+332    	; 0x123e <vfprintf+0x3aa>
    10f2:	04 c0       	rjmp	.+8      	; 0x10fc <vfprintf+0x268>
    10f4:	28 e0       	ldi	r18, 0x08	; 8
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	0a c0       	rjmp	.+20     	; 0x110e <vfprintf+0x27a>
    10fa:	10 61       	ori	r17, 0x10	; 16
    10fc:	14 fd       	sbrc	r17, 4
    10fe:	14 60       	ori	r17, 0x04	; 4
    1100:	20 e1       	ldi	r18, 0x10	; 16
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	04 c0       	rjmp	.+8      	; 0x110e <vfprintf+0x27a>
    1106:	14 fd       	sbrc	r17, 4
    1108:	16 60       	ori	r17, 0x06	; 6
    110a:	20 e1       	ldi	r18, 0x10	; 16
    110c:	32 e0       	ldi	r19, 0x02	; 2
    110e:	17 ff       	sbrs	r17, 7
    1110:	08 c0       	rjmp	.+16     	; 0x1122 <vfprintf+0x28e>
    1112:	f5 01       	movw	r30, r10
    1114:	60 81       	ld	r22, Z
    1116:	71 81       	ldd	r23, Z+1	; 0x01
    1118:	82 81       	ldd	r24, Z+2	; 0x02
    111a:	93 81       	ldd	r25, Z+3	; 0x03
    111c:	44 e0       	ldi	r20, 0x04	; 4
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	08 c0       	rjmp	.+16     	; 0x1132 <vfprintf+0x29e>
    1122:	f5 01       	movw	r30, r10
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	bc 01       	movw	r22, r24
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	42 e0       	ldi	r20, 0x02	; 2
    1130:	50 e0       	ldi	r21, 0x00	; 0
    1132:	a4 0e       	add	r10, r20
    1134:	b5 1e       	adc	r11, r21
    1136:	a1 01       	movw	r20, r2
    1138:	0e 94 a3 0b 	call	0x1746	; 0x1746 <__ultoa_invert>
    113c:	d8 2e       	mov	r13, r24
    113e:	d2 18       	sub	r13, r2
    1140:	8f e7       	ldi	r24, 0x7F	; 127
    1142:	f8 2e       	mov	r15, r24
    1144:	f1 22       	and	r15, r17
    1146:	f6 fe       	sbrs	r15, 6
    1148:	0b c0       	rjmp	.+22     	; 0x1160 <vfprintf+0x2cc>
    114a:	5e ef       	ldi	r21, 0xFE	; 254
    114c:	f5 22       	and	r15, r21
    114e:	d9 14       	cp	r13, r9
    1150:	38 f4       	brcc	.+14     	; 0x1160 <vfprintf+0x2cc>
    1152:	f4 fe       	sbrs	r15, 4
    1154:	07 c0       	rjmp	.+14     	; 0x1164 <vfprintf+0x2d0>
    1156:	f2 fc       	sbrc	r15, 2
    1158:	05 c0       	rjmp	.+10     	; 0x1164 <vfprintf+0x2d0>
    115a:	8f ee       	ldi	r24, 0xEF	; 239
    115c:	f8 22       	and	r15, r24
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <vfprintf+0x2d0>
    1160:	1d 2d       	mov	r17, r13
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <vfprintf+0x2d2>
    1164:	19 2d       	mov	r17, r9
    1166:	f4 fe       	sbrs	r15, 4
    1168:	0d c0       	rjmp	.+26     	; 0x1184 <vfprintf+0x2f0>
    116a:	fe 01       	movw	r30, r28
    116c:	ed 0d       	add	r30, r13
    116e:	f1 1d       	adc	r31, r1
    1170:	80 81       	ld	r24, Z
    1172:	80 33       	cpi	r24, 0x30	; 48
    1174:	19 f4       	brne	.+6      	; 0x117c <vfprintf+0x2e8>
    1176:	99 ee       	ldi	r25, 0xE9	; 233
    1178:	f9 22       	and	r15, r25
    117a:	08 c0       	rjmp	.+16     	; 0x118c <vfprintf+0x2f8>
    117c:	1f 5f       	subi	r17, 0xFF	; 255
    117e:	f2 fe       	sbrs	r15, 2
    1180:	05 c0       	rjmp	.+10     	; 0x118c <vfprintf+0x2f8>
    1182:	03 c0       	rjmp	.+6      	; 0x118a <vfprintf+0x2f6>
    1184:	8f 2d       	mov	r24, r15
    1186:	86 78       	andi	r24, 0x86	; 134
    1188:	09 f0       	breq	.+2      	; 0x118c <vfprintf+0x2f8>
    118a:	1f 5f       	subi	r17, 0xFF	; 255
    118c:	0f 2d       	mov	r16, r15
    118e:	f3 fc       	sbrc	r15, 3
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <vfprintf+0x326>
    1192:	f0 fe       	sbrs	r15, 0
    1194:	0f c0       	rjmp	.+30     	; 0x11b4 <vfprintf+0x320>
    1196:	1e 15       	cp	r17, r14
    1198:	10 f0       	brcs	.+4      	; 0x119e <vfprintf+0x30a>
    119a:	9d 2c       	mov	r9, r13
    119c:	0b c0       	rjmp	.+22     	; 0x11b4 <vfprintf+0x320>
    119e:	9d 2c       	mov	r9, r13
    11a0:	9e 0c       	add	r9, r14
    11a2:	91 1a       	sub	r9, r17
    11a4:	1e 2d       	mov	r17, r14
    11a6:	06 c0       	rjmp	.+12     	; 0x11b4 <vfprintf+0x320>
    11a8:	80 e2       	ldi	r24, 0x20	; 32
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	b3 01       	movw	r22, r6
    11ae:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fputc>
    11b2:	1f 5f       	subi	r17, 0xFF	; 255
    11b4:	1e 15       	cp	r17, r14
    11b6:	c0 f3       	brcs	.-16     	; 0x11a8 <vfprintf+0x314>
    11b8:	04 c0       	rjmp	.+8      	; 0x11c2 <vfprintf+0x32e>
    11ba:	1e 15       	cp	r17, r14
    11bc:	10 f4       	brcc	.+4      	; 0x11c2 <vfprintf+0x32e>
    11be:	e1 1a       	sub	r14, r17
    11c0:	01 c0       	rjmp	.+2      	; 0x11c4 <vfprintf+0x330>
    11c2:	ee 24       	eor	r14, r14
    11c4:	04 ff       	sbrs	r16, 4
    11c6:	0f c0       	rjmp	.+30     	; 0x11e6 <vfprintf+0x352>
    11c8:	80 e3       	ldi	r24, 0x30	; 48
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	b3 01       	movw	r22, r6
    11ce:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fputc>
    11d2:	02 ff       	sbrs	r16, 2
    11d4:	1d c0       	rjmp	.+58     	; 0x1210 <vfprintf+0x37c>
    11d6:	01 fd       	sbrc	r16, 1
    11d8:	03 c0       	rjmp	.+6      	; 0x11e0 <vfprintf+0x34c>
    11da:	88 e7       	ldi	r24, 0x78	; 120
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e c0       	rjmp	.+28     	; 0x11fc <vfprintf+0x368>
    11e0:	88 e5       	ldi	r24, 0x58	; 88
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0b c0       	rjmp	.+22     	; 0x11fc <vfprintf+0x368>
    11e6:	80 2f       	mov	r24, r16
    11e8:	86 78       	andi	r24, 0x86	; 134
    11ea:	91 f0       	breq	.+36     	; 0x1210 <vfprintf+0x37c>
    11ec:	01 ff       	sbrs	r16, 1
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <vfprintf+0x360>
    11f0:	8b e2       	ldi	r24, 0x2B	; 43
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <vfprintf+0x362>
    11f4:	80 e2       	ldi	r24, 0x20	; 32
    11f6:	f7 fc       	sbrc	r15, 7
    11f8:	8d e2       	ldi	r24, 0x2D	; 45
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	b3 01       	movw	r22, r6
    11fe:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fputc>
    1202:	06 c0       	rjmp	.+12     	; 0x1210 <vfprintf+0x37c>
    1204:	80 e3       	ldi	r24, 0x30	; 48
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	b3 01       	movw	r22, r6
    120a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fputc>
    120e:	9a 94       	dec	r9
    1210:	d9 14       	cp	r13, r9
    1212:	c0 f3       	brcs	.-16     	; 0x1204 <vfprintf+0x370>
    1214:	da 94       	dec	r13
    1216:	f1 01       	movw	r30, r2
    1218:	ed 0d       	add	r30, r13
    121a:	f1 1d       	adc	r31, r1
    121c:	80 81       	ld	r24, Z
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	b3 01       	movw	r22, r6
    1222:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fputc>
    1226:	dd 20       	and	r13, r13
    1228:	a9 f7       	brne	.-22     	; 0x1214 <vfprintf+0x380>
    122a:	06 c0       	rjmp	.+12     	; 0x1238 <vfprintf+0x3a4>
    122c:	80 e2       	ldi	r24, 0x20	; 32
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	b3 01       	movw	r22, r6
    1232:	0e 94 77 0b 	call	0x16ee	; 0x16ee <fputc>
    1236:	ea 94       	dec	r14
    1238:	ee 20       	and	r14, r14
    123a:	c1 f7       	brne	.-16     	; 0x122c <vfprintf+0x398>
    123c:	43 ce       	rjmp	.-890    	; 0xec4 <vfprintf+0x30>
    123e:	f3 01       	movw	r30, r6
    1240:	66 81       	ldd	r22, Z+6	; 0x06
    1242:	77 81       	ldd	r23, Z+7	; 0x07
    1244:	cb 01       	movw	r24, r22
    1246:	2b 96       	adiw	r28, 0x0b	; 11
    1248:	e2 e1       	ldi	r30, 0x12	; 18
    124a:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <__epilogue_restores__>

0000124e <dtoa_prf>:
    124e:	a9 e0       	ldi	r26, 0x09	; 9
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ed e2       	ldi	r30, 0x2D	; 45
    1254:	f9 e0       	ldi	r31, 0x09	; 9
    1256:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__prologue_saves__+0x8>
    125a:	6a 01       	movw	r12, r20
    125c:	12 2f       	mov	r17, r18
    125e:	a0 2e       	mov	r10, r16
    1260:	be 2c       	mov	r11, r14
    1262:	2b e3       	ldi	r18, 0x3B	; 59
    1264:	20 17       	cp	r18, r16
    1266:	18 f4       	brcc	.+6      	; 0x126e <dtoa_prf+0x20>
    1268:	2c e3       	ldi	r18, 0x3C	; 60
    126a:	92 2e       	mov	r9, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <dtoa_prf+0x24>
    126e:	90 2e       	mov	r9, r16
    1270:	93 94       	inc	r9
    1272:	ae 01       	movw	r20, r28
    1274:	4f 5f       	subi	r20, 0xFF	; 255
    1276:	5f 4f       	sbci	r21, 0xFF	; 255
    1278:	27 e0       	ldi	r18, 0x07	; 7
    127a:	09 2d       	mov	r16, r9
    127c:	0e 94 89 0a 	call	0x1512	; 0x1512 <__ftoa_engine>
    1280:	bc 01       	movw	r22, r24
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	e8 2e       	mov	r14, r24
    1286:	ff 24       	eor	r15, r15
    1288:	c7 01       	movw	r24, r14
    128a:	89 70       	andi	r24, 0x09	; 9
    128c:	90 70       	andi	r25, 0x00	; 0
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	11 f4       	brne	.+4      	; 0x1296 <dtoa_prf+0x48>
    1292:	ad e2       	ldi	r26, 0x2D	; 45
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <dtoa_prf+0x5a>
    1296:	b1 fe       	sbrs	r11, 1
    1298:	02 c0       	rjmp	.+4      	; 0x129e <dtoa_prf+0x50>
    129a:	ab e2       	ldi	r26, 0x2B	; 43
    129c:	05 c0       	rjmp	.+10     	; 0x12a8 <dtoa_prf+0x5a>
    129e:	b0 fc       	sbrc	r11, 0
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <dtoa_prf+0x58>
    12a2:	a0 e0       	ldi	r26, 0x00	; 0
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <dtoa_prf+0x5a>
    12a6:	a0 e2       	ldi	r26, 0x20	; 32
    12a8:	e3 fe       	sbrs	r14, 3
    12aa:	3b c0       	rjmp	.+118    	; 0x1322 <dtoa_prf+0xd4>
    12ac:	aa 23       	and	r26, r26
    12ae:	11 f4       	brne	.+4      	; 0x12b4 <dtoa_prf+0x66>
    12b0:	23 e0       	ldi	r18, 0x03	; 3
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <dtoa_prf+0x68>
    12b4:	24 e0       	ldi	r18, 0x04	; 4
    12b6:	21 17       	cp	r18, r17
    12b8:	10 f0       	brcs	.+4      	; 0x12be <dtoa_prf+0x70>
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <dtoa_prf+0x74>
    12be:	12 1b       	sub	r17, r18
    12c0:	21 2f       	mov	r18, r17
    12c2:	eb 2c       	mov	r14, r11
    12c4:	b4 fe       	sbrs	r11, 4
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <dtoa_prf+0x7e>
    12c8:	32 2f       	mov	r19, r18
    12ca:	0a c0       	rjmp	.+20     	; 0x12e0 <dtoa_prf+0x92>
    12cc:	f6 01       	movw	r30, r12
    12ce:	32 2f       	mov	r19, r18
    12d0:	80 e2       	ldi	r24, 0x20	; 32
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <dtoa_prf+0x8a>
    12d4:	81 93       	st	Z+, r24
    12d6:	31 50       	subi	r19, 0x01	; 1
    12d8:	33 23       	and	r19, r19
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <dtoa_prf+0x86>
    12dc:	c2 0e       	add	r12, r18
    12de:	d1 1c       	adc	r13, r1
    12e0:	aa 23       	and	r26, r26
    12e2:	19 f0       	breq	.+6      	; 0x12ea <dtoa_prf+0x9c>
    12e4:	f6 01       	movw	r30, r12
    12e6:	a1 93       	st	Z+, r26
    12e8:	6f 01       	movw	r12, r30
    12ea:	f6 01       	movw	r30, r12
    12ec:	31 96       	adiw	r30, 0x01	; 1
    12ee:	e2 fe       	sbrs	r14, 2
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <dtoa_prf+0xae>
    12f2:	9e e4       	ldi	r25, 0x4E	; 78
    12f4:	d6 01       	movw	r26, r12
    12f6:	9c 93       	st	X, r25
    12f8:	81 e4       	ldi	r24, 0x41	; 65
    12fa:	04 c0       	rjmp	.+8      	; 0x1304 <dtoa_prf+0xb6>
    12fc:	9e e6       	ldi	r25, 0x6E	; 110
    12fe:	d6 01       	movw	r26, r12
    1300:	9c 93       	st	X, r25
    1302:	81 e6       	ldi	r24, 0x61	; 97
    1304:	11 96       	adiw	r26, 0x01	; 1
    1306:	8c 93       	st	X, r24
    1308:	91 83       	std	Z+1, r25	; 0x01
    130a:	32 96       	adiw	r30, 0x02	; 2
    130c:	df 01       	movw	r26, r30
    130e:	83 2f       	mov	r24, r19
    1310:	90 e2       	ldi	r25, 0x20	; 32
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <dtoa_prf+0xca>
    1314:	9d 93       	st	X+, r25
    1316:	81 50       	subi	r24, 0x01	; 1
    1318:	88 23       	and	r24, r24
    131a:	e1 f7       	brne	.-8      	; 0x1314 <dtoa_prf+0xc6>
    131c:	e3 0f       	add	r30, r19
    131e:	f1 1d       	adc	r31, r1
    1320:	40 c0       	rjmp	.+128    	; 0x13a2 <dtoa_prf+0x154>
    1322:	e2 fe       	sbrs	r14, 2
    1324:	42 c0       	rjmp	.+132    	; 0x13aa <dtoa_prf+0x15c>
    1326:	aa 23       	and	r26, r26
    1328:	11 f4       	brne	.+4      	; 0x132e <dtoa_prf+0xe0>
    132a:	23 e0       	ldi	r18, 0x03	; 3
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <dtoa_prf+0xe2>
    132e:	24 e0       	ldi	r18, 0x04	; 4
    1330:	21 17       	cp	r18, r17
    1332:	10 f0       	brcs	.+4      	; 0x1338 <dtoa_prf+0xea>
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	02 c0       	rjmp	.+4      	; 0x133c <dtoa_prf+0xee>
    1338:	12 1b       	sub	r17, r18
    133a:	21 2f       	mov	r18, r17
    133c:	eb 2c       	mov	r14, r11
    133e:	b4 fe       	sbrs	r11, 4
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <dtoa_prf+0xf8>
    1342:	92 2f       	mov	r25, r18
    1344:	0a c0       	rjmp	.+20     	; 0x135a <dtoa_prf+0x10c>
    1346:	f6 01       	movw	r30, r12
    1348:	92 2f       	mov	r25, r18
    134a:	80 e2       	ldi	r24, 0x20	; 32
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <dtoa_prf+0x104>
    134e:	81 93       	st	Z+, r24
    1350:	91 50       	subi	r25, 0x01	; 1
    1352:	99 23       	and	r25, r25
    1354:	e1 f7       	brne	.-8      	; 0x134e <dtoa_prf+0x100>
    1356:	c2 0e       	add	r12, r18
    1358:	d1 1c       	adc	r13, r1
    135a:	aa 23       	and	r26, r26
    135c:	19 f0       	breq	.+6      	; 0x1364 <dtoa_prf+0x116>
    135e:	f6 01       	movw	r30, r12
    1360:	a1 93       	st	Z+, r26
    1362:	6f 01       	movw	r12, r30
    1364:	f6 01       	movw	r30, r12
    1366:	31 96       	adiw	r30, 0x01	; 1
    1368:	e2 fe       	sbrs	r14, 2
    136a:	08 c0       	rjmp	.+16     	; 0x137c <dtoa_prf+0x12e>
    136c:	89 e4       	ldi	r24, 0x49	; 73
    136e:	d6 01       	movw	r26, r12
    1370:	8c 93       	st	X, r24
    1372:	8e e4       	ldi	r24, 0x4E	; 78
    1374:	11 96       	adiw	r26, 0x01	; 1
    1376:	8c 93       	st	X, r24
    1378:	86 e4       	ldi	r24, 0x46	; 70
    137a:	07 c0       	rjmp	.+14     	; 0x138a <dtoa_prf+0x13c>
    137c:	89 e6       	ldi	r24, 0x69	; 105
    137e:	d6 01       	movw	r26, r12
    1380:	8c 93       	st	X, r24
    1382:	8e e6       	ldi	r24, 0x6E	; 110
    1384:	11 96       	adiw	r26, 0x01	; 1
    1386:	8c 93       	st	X, r24
    1388:	86 e6       	ldi	r24, 0x66	; 102
    138a:	81 83       	std	Z+1, r24	; 0x01
    138c:	32 96       	adiw	r30, 0x02	; 2
    138e:	df 01       	movw	r26, r30
    1390:	89 2f       	mov	r24, r25
    1392:	20 e2       	ldi	r18, 0x20	; 32
    1394:	02 c0       	rjmp	.+4      	; 0x139a <dtoa_prf+0x14c>
    1396:	2d 93       	st	X+, r18
    1398:	81 50       	subi	r24, 0x01	; 1
    139a:	88 23       	and	r24, r24
    139c:	e1 f7       	brne	.-8      	; 0x1396 <dtoa_prf+0x148>
    139e:	e9 0f       	add	r30, r25
    13a0:	f1 1d       	adc	r31, r1
    13a2:	10 82       	st	Z, r1
    13a4:	2e ef       	ldi	r18, 0xFE	; 254
    13a6:	3f ef       	ldi	r19, 0xFF	; 255
    13a8:	af c0       	rjmp	.+350    	; 0x1508 <dtoa_prf+0x2ba>
    13aa:	16 16       	cp	r1, r22
    13ac:	17 06       	cpc	r1, r23
    13ae:	1c f0       	brlt	.+6      	; 0x13b6 <dtoa_prf+0x168>
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	03 c0       	rjmp	.+6      	; 0x13bc <dtoa_prf+0x16e>
    13b6:	ab 01       	movw	r20, r22
    13b8:	4f 5f       	subi	r20, 0xFF	; 255
    13ba:	5f 4f       	sbci	r21, 0xFF	; 255
    13bc:	aa 20       	and	r10, r10
    13be:	19 f4       	brne	.+6      	; 0x13c6 <dtoa_prf+0x178>
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	03 c0       	rjmp	.+6      	; 0x13cc <dtoa_prf+0x17e>
    13c6:	8a 2d       	mov	r24, r10
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	aa 23       	and	r26, r26
    13d2:	11 f0       	breq	.+4      	; 0x13d8 <dtoa_prf+0x18a>
    13d4:	21 e0       	ldi	r18, 0x01	; 1
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	24 0f       	add	r18, r20
    13da:	35 1f       	adc	r19, r21
    13dc:	28 0f       	add	r18, r24
    13de:	39 1f       	adc	r19, r25
    13e0:	81 2f       	mov	r24, r17
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	28 17       	cp	r18, r24
    13e6:	39 07       	cpc	r19, r25
    13e8:	14 f0       	brlt	.+4      	; 0x13ee <dtoa_prf+0x1a0>
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <dtoa_prf+0x1a4>
    13ee:	12 1b       	sub	r17, r18
    13f0:	21 2f       	mov	r18, r17
    13f2:	4b 2d       	mov	r20, r11
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	ca 01       	movw	r24, r20
    13f8:	80 71       	andi	r24, 0x10	; 16
    13fa:	90 70       	andi	r25, 0x00	; 0
    13fc:	b4 fc       	sbrc	r11, 4
    13fe:	0d c0       	rjmp	.+26     	; 0x141a <dtoa_prf+0x1cc>
    1400:	b3 fc       	sbrc	r11, 3
    1402:	0b c0       	rjmp	.+22     	; 0x141a <dtoa_prf+0x1cc>
    1404:	f6 01       	movw	r30, r12
    1406:	32 2f       	mov	r19, r18
    1408:	40 e2       	ldi	r20, 0x20	; 32
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <dtoa_prf+0x1c2>
    140c:	41 93       	st	Z+, r20
    140e:	31 50       	subi	r19, 0x01	; 1
    1410:	33 23       	and	r19, r19
    1412:	e1 f7       	brne	.-8      	; 0x140c <dtoa_prf+0x1be>
    1414:	c2 0e       	add	r12, r18
    1416:	d1 1c       	adc	r13, r1
    1418:	01 c0       	rjmp	.+2      	; 0x141c <dtoa_prf+0x1ce>
    141a:	32 2f       	mov	r19, r18
    141c:	aa 23       	and	r26, r26
    141e:	19 f0       	breq	.+6      	; 0x1426 <dtoa_prf+0x1d8>
    1420:	f6 01       	movw	r30, r12
    1422:	a1 93       	st	Z+, r26
    1424:	6f 01       	movw	r12, r30
    1426:	89 2b       	or	r24, r25
    1428:	11 f0       	breq	.+4      	; 0x142e <dtoa_prf+0x1e0>
    142a:	13 2f       	mov	r17, r19
    142c:	0a c0       	rjmp	.+20     	; 0x1442 <dtoa_prf+0x1f4>
    142e:	f6 01       	movw	r30, r12
    1430:	13 2f       	mov	r17, r19
    1432:	80 e3       	ldi	r24, 0x30	; 48
    1434:	02 c0       	rjmp	.+4      	; 0x143a <dtoa_prf+0x1ec>
    1436:	81 93       	st	Z+, r24
    1438:	11 50       	subi	r17, 0x01	; 1
    143a:	11 23       	and	r17, r17
    143c:	e1 f7       	brne	.-8      	; 0x1436 <dtoa_prf+0x1e8>
    143e:	c3 0e       	add	r12, r19
    1440:	d1 1c       	adc	r13, r1
    1442:	09 2d       	mov	r16, r9
    1444:	06 0f       	add	r16, r22
    1446:	ba 80       	ldd	r11, Y+2	; 0x02
    1448:	90 e1       	ldi	r25, 0x10	; 16
    144a:	89 2e       	mov	r8, r25
    144c:	91 2c       	mov	r9, r1
    144e:	8e 20       	and	r8, r14
    1450:	9f 20       	and	r9, r15
    1452:	e4 fe       	sbrs	r14, 4
    1454:	04 c0       	rjmp	.+8      	; 0x145e <dtoa_prf+0x210>
    1456:	f1 e3       	ldi	r31, 0x31	; 49
    1458:	bf 16       	cp	r11, r31
    145a:	09 f4       	brne	.+2      	; 0x145e <dtoa_prf+0x210>
    145c:	01 50       	subi	r16, 0x01	; 1
    145e:	10 16       	cp	r1, r16
    1460:	14 f0       	brlt	.+4      	; 0x1466 <dtoa_prf+0x218>
    1462:	01 e0       	ldi	r16, 0x01	; 1
    1464:	03 c0       	rjmp	.+6      	; 0x146c <dtoa_prf+0x21e>
    1466:	09 30       	cpi	r16, 0x09	; 9
    1468:	08 f0       	brcs	.+2      	; 0x146c <dtoa_prf+0x21e>
    146a:	08 e0       	ldi	r16, 0x08	; 8
    146c:	9b 01       	movw	r18, r22
    146e:	77 ff       	sbrs	r23, 7
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <dtoa_prf+0x228>
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	cb 01       	movw	r24, r22
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	82 1b       	sub	r24, r18
    147c:	93 0b       	sbc	r25, r19
    147e:	fe 01       	movw	r30, r28
    1480:	31 96       	adiw	r30, 0x01	; 1
    1482:	e8 0f       	add	r30, r24
    1484:	f9 1f       	adc	r31, r25
    1486:	8e e2       	ldi	r24, 0x2E	; 46
    1488:	f8 2e       	mov	r15, r24
    148a:	3b 01       	movw	r6, r22
    148c:	60 1a       	sub	r6, r16
    148e:	71 08       	sbc	r7, r1
    1490:	8a 2d       	mov	r24, r10
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	44 27       	eor	r20, r20
    1496:	55 27       	eor	r21, r21
    1498:	48 1b       	sub	r20, r24
    149a:	59 0b       	sbc	r21, r25
    149c:	8f ef       	ldi	r24, 0xFF	; 255
    149e:	2f 3f       	cpi	r18, 0xFF	; 255
    14a0:	38 07       	cpc	r19, r24
    14a2:	19 f4       	brne	.+6      	; 0x14aa <dtoa_prf+0x25c>
    14a4:	d6 01       	movw	r26, r12
    14a6:	fd 92       	st	X+, r15
    14a8:	6d 01       	movw	r12, r26
    14aa:	62 17       	cp	r22, r18
    14ac:	73 07       	cpc	r23, r19
    14ae:	2c f0       	brlt	.+10     	; 0x14ba <dtoa_prf+0x26c>
    14b0:	62 16       	cp	r6, r18
    14b2:	73 06       	cpc	r7, r19
    14b4:	14 f4       	brge	.+4      	; 0x14ba <dtoa_prf+0x26c>
    14b6:	80 81       	ld	r24, Z
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <dtoa_prf+0x26e>
    14ba:	80 e3       	ldi	r24, 0x30	; 48
    14bc:	21 50       	subi	r18, 0x01	; 1
    14be:	30 40       	sbci	r19, 0x00	; 0
    14c0:	31 96       	adiw	r30, 0x01	; 1
    14c2:	24 17       	cp	r18, r20
    14c4:	35 07       	cpc	r19, r21
    14c6:	24 f0       	brlt	.+8      	; 0x14d0 <dtoa_prf+0x282>
    14c8:	d6 01       	movw	r26, r12
    14ca:	8d 93       	st	X+, r24
    14cc:	6d 01       	movw	r12, r26
    14ce:	e6 cf       	rjmp	.-52     	; 0x149c <dtoa_prf+0x24e>
    14d0:	26 17       	cp	r18, r22
    14d2:	37 07       	cpc	r19, r23
    14d4:	49 f4       	brne	.+18     	; 0x14e8 <dtoa_prf+0x29a>
    14d6:	b5 e3       	ldi	r27, 0x35	; 53
    14d8:	bb 15       	cp	r27, r11
    14da:	28 f0       	brcs	.+10     	; 0x14e6 <dtoa_prf+0x298>
    14dc:	bb 16       	cp	r11, r27
    14de:	21 f4       	brne	.+8      	; 0x14e8 <dtoa_prf+0x29a>
    14e0:	81 14       	cp	r8, r1
    14e2:	91 04       	cpc	r9, r1
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <dtoa_prf+0x29a>
    14e6:	81 e3       	ldi	r24, 0x31	; 49
    14e8:	f6 01       	movw	r30, r12
    14ea:	81 93       	st	Z+, r24
    14ec:	d6 01       	movw	r26, r12
    14ee:	81 2f       	mov	r24, r17
    14f0:	90 e2       	ldi	r25, 0x20	; 32
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <dtoa_prf+0x2aa>
    14f4:	9c 93       	st	X, r25
    14f6:	81 50       	subi	r24, 0x01	; 1
    14f8:	11 96       	adiw	r26, 0x01	; 1
    14fa:	88 23       	and	r24, r24
    14fc:	d9 f7       	brne	.-10     	; 0x14f4 <dtoa_prf+0x2a6>
    14fe:	e1 0f       	add	r30, r17
    1500:	f1 1d       	adc	r31, r1
    1502:	10 82       	st	Z, r1
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	c9 01       	movw	r24, r18
    150a:	29 96       	adiw	r28, 0x09	; 9
    150c:	ee e0       	ldi	r30, 0x0E	; 14
    150e:	0c 94 3a 0d 	jmp	0x1a74	; 0x1a74 <__epilogue_restores__+0x8>

00001512 <__ftoa_engine>:
    1512:	28 30       	cpi	r18, 0x08	; 8
    1514:	08 f0       	brcs	.+2      	; 0x1518 <__ftoa_engine+0x6>
    1516:	27 e0       	ldi	r18, 0x07	; 7
    1518:	33 27       	eor	r19, r19
    151a:	da 01       	movw	r26, r20
    151c:	99 0f       	add	r25, r25
    151e:	31 1d       	adc	r19, r1
    1520:	87 fd       	sbrc	r24, 7
    1522:	91 60       	ori	r25, 0x01	; 1
    1524:	00 96       	adiw	r24, 0x00	; 0
    1526:	61 05       	cpc	r22, r1
    1528:	71 05       	cpc	r23, r1
    152a:	39 f4       	brne	.+14     	; 0x153a <__ftoa_engine+0x28>
    152c:	32 60       	ori	r19, 0x02	; 2
    152e:	2e 5f       	subi	r18, 0xFE	; 254
    1530:	3d 93       	st	X+, r19
    1532:	30 e3       	ldi	r19, 0x30	; 48
    1534:	2a 95       	dec	r18
    1536:	e1 f7       	brne	.-8      	; 0x1530 <__ftoa_engine+0x1e>
    1538:	08 95       	ret
    153a:	9f 3f       	cpi	r25, 0xFF	; 255
    153c:	30 f0       	brcs	.+12     	; 0x154a <__ftoa_engine+0x38>
    153e:	80 38       	cpi	r24, 0x80	; 128
    1540:	71 05       	cpc	r23, r1
    1542:	61 05       	cpc	r22, r1
    1544:	09 f0       	breq	.+2      	; 0x1548 <__ftoa_engine+0x36>
    1546:	3c 5f       	subi	r19, 0xFC	; 252
    1548:	3c 5f       	subi	r19, 0xFC	; 252
    154a:	3d 93       	st	X+, r19
    154c:	91 30       	cpi	r25, 0x01	; 1
    154e:	08 f0       	brcs	.+2      	; 0x1552 <__ftoa_engine+0x40>
    1550:	80 68       	ori	r24, 0x80	; 128
    1552:	91 1d       	adc	r25, r1
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	1f 93       	push	r17
    155a:	0f 93       	push	r16
    155c:	ff 92       	push	r15
    155e:	ef 92       	push	r14
    1560:	19 2f       	mov	r17, r25
    1562:	98 7f       	andi	r25, 0xF8	; 248
    1564:	96 95       	lsr	r25
    1566:	e9 2f       	mov	r30, r25
    1568:	96 95       	lsr	r25
    156a:	96 95       	lsr	r25
    156c:	e9 0f       	add	r30, r25
    156e:	ff 27       	eor	r31, r31
    1570:	e0 5d       	subi	r30, 0xD0	; 208
    1572:	fe 4f       	sbci	r31, 0xFE	; 254
    1574:	99 27       	eor	r25, r25
    1576:	33 27       	eor	r19, r19
    1578:	ee 24       	eor	r14, r14
    157a:	ff 24       	eor	r15, r15
    157c:	a7 01       	movw	r20, r14
    157e:	e7 01       	movw	r28, r14
    1580:	05 90       	lpm	r0, Z+
    1582:	08 94       	sec
    1584:	07 94       	ror	r0
    1586:	28 f4       	brcc	.+10     	; 0x1592 <__ftoa_engine+0x80>
    1588:	36 0f       	add	r19, r22
    158a:	e7 1e       	adc	r14, r23
    158c:	f8 1e       	adc	r15, r24
    158e:	49 1f       	adc	r20, r25
    1590:	51 1d       	adc	r21, r1
    1592:	66 0f       	add	r22, r22
    1594:	77 1f       	adc	r23, r23
    1596:	88 1f       	adc	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	06 94       	lsr	r0
    159c:	a1 f7       	brne	.-24     	; 0x1586 <__ftoa_engine+0x74>
    159e:	05 90       	lpm	r0, Z+
    15a0:	07 94       	ror	r0
    15a2:	28 f4       	brcc	.+10     	; 0x15ae <__ftoa_engine+0x9c>
    15a4:	e7 0e       	add	r14, r23
    15a6:	f8 1e       	adc	r15, r24
    15a8:	49 1f       	adc	r20, r25
    15aa:	56 1f       	adc	r21, r22
    15ac:	c1 1d       	adc	r28, r1
    15ae:	77 0f       	add	r23, r23
    15b0:	88 1f       	adc	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	66 1f       	adc	r22, r22
    15b6:	06 94       	lsr	r0
    15b8:	a1 f7       	brne	.-24     	; 0x15a2 <__ftoa_engine+0x90>
    15ba:	05 90       	lpm	r0, Z+
    15bc:	07 94       	ror	r0
    15be:	28 f4       	brcc	.+10     	; 0x15ca <__ftoa_engine+0xb8>
    15c0:	f8 0e       	add	r15, r24
    15c2:	49 1f       	adc	r20, r25
    15c4:	56 1f       	adc	r21, r22
    15c6:	c7 1f       	adc	r28, r23
    15c8:	d1 1d       	adc	r29, r1
    15ca:	88 0f       	add	r24, r24
    15cc:	99 1f       	adc	r25, r25
    15ce:	66 1f       	adc	r22, r22
    15d0:	77 1f       	adc	r23, r23
    15d2:	06 94       	lsr	r0
    15d4:	a1 f7       	brne	.-24     	; 0x15be <__ftoa_engine+0xac>
    15d6:	05 90       	lpm	r0, Z+
    15d8:	07 94       	ror	r0
    15da:	20 f4       	brcc	.+8      	; 0x15e4 <__ftoa_engine+0xd2>
    15dc:	49 0f       	add	r20, r25
    15de:	56 1f       	adc	r21, r22
    15e0:	c7 1f       	adc	r28, r23
    15e2:	d8 1f       	adc	r29, r24
    15e4:	99 0f       	add	r25, r25
    15e6:	66 1f       	adc	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	88 1f       	adc	r24, r24
    15ec:	06 94       	lsr	r0
    15ee:	a9 f7       	brne	.-22     	; 0x15da <__ftoa_engine+0xc8>
    15f0:	84 91       	lpm	r24, Z+
    15f2:	10 95       	com	r17
    15f4:	17 70       	andi	r17, 0x07	; 7
    15f6:	41 f0       	breq	.+16     	; 0x1608 <__ftoa_engine+0xf6>
    15f8:	d6 95       	lsr	r29
    15fa:	c7 95       	ror	r28
    15fc:	57 95       	ror	r21
    15fe:	47 95       	ror	r20
    1600:	f7 94       	ror	r15
    1602:	e7 94       	ror	r14
    1604:	1a 95       	dec	r17
    1606:	c1 f7       	brne	.-16     	; 0x15f8 <__ftoa_engine+0xe6>
    1608:	e6 ed       	ldi	r30, 0xD6	; 214
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	68 94       	set
    160e:	15 90       	lpm	r1, Z+
    1610:	15 91       	lpm	r17, Z+
    1612:	35 91       	lpm	r19, Z+
    1614:	65 91       	lpm	r22, Z+
    1616:	95 91       	lpm	r25, Z+
    1618:	05 90       	lpm	r0, Z+
    161a:	7f e2       	ldi	r23, 0x2F	; 47
    161c:	73 95       	inc	r23
    161e:	e1 18       	sub	r14, r1
    1620:	f1 0a       	sbc	r15, r17
    1622:	43 0b       	sbc	r20, r19
    1624:	56 0b       	sbc	r21, r22
    1626:	c9 0b       	sbc	r28, r25
    1628:	d0 09       	sbc	r29, r0
    162a:	c0 f7       	brcc	.-16     	; 0x161c <__ftoa_engine+0x10a>
    162c:	e1 0c       	add	r14, r1
    162e:	f1 1e       	adc	r15, r17
    1630:	43 1f       	adc	r20, r19
    1632:	56 1f       	adc	r21, r22
    1634:	c9 1f       	adc	r28, r25
    1636:	d0 1d       	adc	r29, r0
    1638:	7e f4       	brtc	.+30     	; 0x1658 <__ftoa_engine+0x146>
    163a:	70 33       	cpi	r23, 0x30	; 48
    163c:	11 f4       	brne	.+4      	; 0x1642 <__ftoa_engine+0x130>
    163e:	8a 95       	dec	r24
    1640:	e6 cf       	rjmp	.-52     	; 0x160e <__ftoa_engine+0xfc>
    1642:	e8 94       	clt
    1644:	01 50       	subi	r16, 0x01	; 1
    1646:	30 f0       	brcs	.+12     	; 0x1654 <__ftoa_engine+0x142>
    1648:	08 0f       	add	r16, r24
    164a:	0a f4       	brpl	.+2      	; 0x164e <__ftoa_engine+0x13c>
    164c:	00 27       	eor	r16, r16
    164e:	02 17       	cp	r16, r18
    1650:	08 f4       	brcc	.+2      	; 0x1654 <__ftoa_engine+0x142>
    1652:	20 2f       	mov	r18, r16
    1654:	23 95       	inc	r18
    1656:	02 2f       	mov	r16, r18
    1658:	7a 33       	cpi	r23, 0x3A	; 58
    165a:	28 f0       	brcs	.+10     	; 0x1666 <__ftoa_engine+0x154>
    165c:	79 e3       	ldi	r23, 0x39	; 57
    165e:	7d 93       	st	X+, r23
    1660:	2a 95       	dec	r18
    1662:	e9 f7       	brne	.-6      	; 0x165e <__ftoa_engine+0x14c>
    1664:	10 c0       	rjmp	.+32     	; 0x1686 <__ftoa_engine+0x174>
    1666:	7d 93       	st	X+, r23
    1668:	2a 95       	dec	r18
    166a:	89 f6       	brne	.-94     	; 0x160e <__ftoa_engine+0xfc>
    166c:	06 94       	lsr	r0
    166e:	97 95       	ror	r25
    1670:	67 95       	ror	r22
    1672:	37 95       	ror	r19
    1674:	17 95       	ror	r17
    1676:	17 94       	ror	r1
    1678:	e1 18       	sub	r14, r1
    167a:	f1 0a       	sbc	r15, r17
    167c:	43 0b       	sbc	r20, r19
    167e:	56 0b       	sbc	r21, r22
    1680:	c9 0b       	sbc	r28, r25
    1682:	d0 09       	sbc	r29, r0
    1684:	98 f0       	brcs	.+38     	; 0x16ac <__ftoa_engine+0x19a>
    1686:	23 95       	inc	r18
    1688:	7e 91       	ld	r23, -X
    168a:	73 95       	inc	r23
    168c:	7a 33       	cpi	r23, 0x3A	; 58
    168e:	08 f0       	brcs	.+2      	; 0x1692 <__ftoa_engine+0x180>
    1690:	70 e3       	ldi	r23, 0x30	; 48
    1692:	7c 93       	st	X, r23
    1694:	20 13       	cpse	r18, r16
    1696:	b8 f7       	brcc	.-18     	; 0x1686 <__ftoa_engine+0x174>
    1698:	7e 91       	ld	r23, -X
    169a:	70 61       	ori	r23, 0x10	; 16
    169c:	7d 93       	st	X+, r23
    169e:	30 f0       	brcs	.+12     	; 0x16ac <__ftoa_engine+0x19a>
    16a0:	83 95       	inc	r24
    16a2:	71 e3       	ldi	r23, 0x31	; 49
    16a4:	7d 93       	st	X+, r23
    16a6:	70 e3       	ldi	r23, 0x30	; 48
    16a8:	2a 95       	dec	r18
    16aa:	e1 f7       	brne	.-8      	; 0x16a4 <__ftoa_engine+0x192>
    16ac:	11 24       	eor	r1, r1
    16ae:	ef 90       	pop	r14
    16b0:	ff 90       	pop	r15
    16b2:	0f 91       	pop	r16
    16b4:	1f 91       	pop	r17
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	99 27       	eor	r25, r25
    16bc:	87 fd       	sbrc	r24, 7
    16be:	90 95       	com	r25
    16c0:	08 95       	ret

000016c2 <strnlen_P>:
    16c2:	fc 01       	movw	r30, r24
    16c4:	05 90       	lpm	r0, Z+
    16c6:	61 50       	subi	r22, 0x01	; 1
    16c8:	70 40       	sbci	r23, 0x00	; 0
    16ca:	01 10       	cpse	r0, r1
    16cc:	d8 f7       	brcc	.-10     	; 0x16c4 <strnlen_P+0x2>
    16ce:	80 95       	com	r24
    16d0:	90 95       	com	r25
    16d2:	8e 0f       	add	r24, r30
    16d4:	9f 1f       	adc	r25, r31
    16d6:	08 95       	ret

000016d8 <strnlen>:
    16d8:	fc 01       	movw	r30, r24
    16da:	61 50       	subi	r22, 0x01	; 1
    16dc:	70 40       	sbci	r23, 0x00	; 0
    16de:	01 90       	ld	r0, Z+
    16e0:	01 10       	cpse	r0, r1
    16e2:	d8 f7       	brcc	.-10     	; 0x16da <strnlen+0x2>
    16e4:	80 95       	com	r24
    16e6:	90 95       	com	r25
    16e8:	8e 0f       	add	r24, r30
    16ea:	9f 1f       	adc	r25, r31
    16ec:	08 95       	ret

000016ee <fputc>:
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	8c 01       	movw	r16, r24
    16f8:	eb 01       	movw	r28, r22
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	81 ff       	sbrs	r24, 1
    16fe:	1b c0       	rjmp	.+54     	; 0x1736 <fputc+0x48>
    1700:	82 ff       	sbrs	r24, 2
    1702:	0d c0       	rjmp	.+26     	; 0x171e <fputc+0x30>
    1704:	2e 81       	ldd	r18, Y+6	; 0x06
    1706:	3f 81       	ldd	r19, Y+7	; 0x07
    1708:	8c 81       	ldd	r24, Y+4	; 0x04
    170a:	9d 81       	ldd	r25, Y+5	; 0x05
    170c:	28 17       	cp	r18, r24
    170e:	39 07       	cpc	r19, r25
    1710:	64 f4       	brge	.+24     	; 0x172a <fputc+0x3c>
    1712:	e8 81       	ld	r30, Y
    1714:	f9 81       	ldd	r31, Y+1	; 0x01
    1716:	01 93       	st	Z+, r16
    1718:	f9 83       	std	Y+1, r31	; 0x01
    171a:	e8 83       	st	Y, r30
    171c:	06 c0       	rjmp	.+12     	; 0x172a <fputc+0x3c>
    171e:	e8 85       	ldd	r30, Y+8	; 0x08
    1720:	f9 85       	ldd	r31, Y+9	; 0x09
    1722:	80 2f       	mov	r24, r16
    1724:	09 95       	icall
    1726:	89 2b       	or	r24, r25
    1728:	31 f4       	brne	.+12     	; 0x1736 <fputc+0x48>
    172a:	8e 81       	ldd	r24, Y+6	; 0x06
    172c:	9f 81       	ldd	r25, Y+7	; 0x07
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	9f 83       	std	Y+7, r25	; 0x07
    1732:	8e 83       	std	Y+6, r24	; 0x06
    1734:	02 c0       	rjmp	.+4      	; 0x173a <fputc+0x4c>
    1736:	0f ef       	ldi	r16, 0xFF	; 255
    1738:	1f ef       	ldi	r17, 0xFF	; 255
    173a:	c8 01       	movw	r24, r16
    173c:	df 91       	pop	r29
    173e:	cf 91       	pop	r28
    1740:	1f 91       	pop	r17
    1742:	0f 91       	pop	r16
    1744:	08 95       	ret

00001746 <__ultoa_invert>:
    1746:	fa 01       	movw	r30, r20
    1748:	aa 27       	eor	r26, r26
    174a:	28 30       	cpi	r18, 0x08	; 8
    174c:	51 f1       	breq	.+84     	; 0x17a2 <__ultoa_invert+0x5c>
    174e:	20 31       	cpi	r18, 0x10	; 16
    1750:	81 f1       	breq	.+96     	; 0x17b2 <__ultoa_invert+0x6c>
    1752:	e8 94       	clt
    1754:	6f 93       	push	r22
    1756:	6e 7f       	andi	r22, 0xFE	; 254
    1758:	6e 5f       	subi	r22, 0xFE	; 254
    175a:	7f 4f       	sbci	r23, 0xFF	; 255
    175c:	8f 4f       	sbci	r24, 0xFF	; 255
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	af 4f       	sbci	r26, 0xFF	; 255
    1762:	b1 e0       	ldi	r27, 0x01	; 1
    1764:	3e d0       	rcall	.+124    	; 0x17e2 <__ultoa_invert+0x9c>
    1766:	b4 e0       	ldi	r27, 0x04	; 4
    1768:	3c d0       	rcall	.+120    	; 0x17e2 <__ultoa_invert+0x9c>
    176a:	67 0f       	add	r22, r23
    176c:	78 1f       	adc	r23, r24
    176e:	89 1f       	adc	r24, r25
    1770:	9a 1f       	adc	r25, r26
    1772:	a1 1d       	adc	r26, r1
    1774:	68 0f       	add	r22, r24
    1776:	79 1f       	adc	r23, r25
    1778:	8a 1f       	adc	r24, r26
    177a:	91 1d       	adc	r25, r1
    177c:	a1 1d       	adc	r26, r1
    177e:	6a 0f       	add	r22, r26
    1780:	71 1d       	adc	r23, r1
    1782:	81 1d       	adc	r24, r1
    1784:	91 1d       	adc	r25, r1
    1786:	a1 1d       	adc	r26, r1
    1788:	20 d0       	rcall	.+64     	; 0x17ca <__ultoa_invert+0x84>
    178a:	09 f4       	brne	.+2      	; 0x178e <__ultoa_invert+0x48>
    178c:	68 94       	set
    178e:	3f 91       	pop	r19
    1790:	2a e0       	ldi	r18, 0x0A	; 10
    1792:	26 9f       	mul	r18, r22
    1794:	11 24       	eor	r1, r1
    1796:	30 19       	sub	r19, r0
    1798:	30 5d       	subi	r19, 0xD0	; 208
    179a:	31 93       	st	Z+, r19
    179c:	de f6       	brtc	.-74     	; 0x1754 <__ultoa_invert+0xe>
    179e:	cf 01       	movw	r24, r30
    17a0:	08 95       	ret
    17a2:	46 2f       	mov	r20, r22
    17a4:	47 70       	andi	r20, 0x07	; 7
    17a6:	40 5d       	subi	r20, 0xD0	; 208
    17a8:	41 93       	st	Z+, r20
    17aa:	b3 e0       	ldi	r27, 0x03	; 3
    17ac:	0f d0       	rcall	.+30     	; 0x17cc <__ultoa_invert+0x86>
    17ae:	c9 f7       	brne	.-14     	; 0x17a2 <__ultoa_invert+0x5c>
    17b0:	f6 cf       	rjmp	.-20     	; 0x179e <__ultoa_invert+0x58>
    17b2:	46 2f       	mov	r20, r22
    17b4:	4f 70       	andi	r20, 0x0F	; 15
    17b6:	40 5d       	subi	r20, 0xD0	; 208
    17b8:	4a 33       	cpi	r20, 0x3A	; 58
    17ba:	18 f0       	brcs	.+6      	; 0x17c2 <__ultoa_invert+0x7c>
    17bc:	49 5d       	subi	r20, 0xD9	; 217
    17be:	31 fd       	sbrc	r19, 1
    17c0:	40 52       	subi	r20, 0x20	; 32
    17c2:	41 93       	st	Z+, r20
    17c4:	02 d0       	rcall	.+4      	; 0x17ca <__ultoa_invert+0x84>
    17c6:	a9 f7       	brne	.-22     	; 0x17b2 <__ultoa_invert+0x6c>
    17c8:	ea cf       	rjmp	.-44     	; 0x179e <__ultoa_invert+0x58>
    17ca:	b4 e0       	ldi	r27, 0x04	; 4
    17cc:	a6 95       	lsr	r26
    17ce:	97 95       	ror	r25
    17d0:	87 95       	ror	r24
    17d2:	77 95       	ror	r23
    17d4:	67 95       	ror	r22
    17d6:	ba 95       	dec	r27
    17d8:	c9 f7       	brne	.-14     	; 0x17cc <__ultoa_invert+0x86>
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	61 05       	cpc	r22, r1
    17de:	71 05       	cpc	r23, r1
    17e0:	08 95       	ret
    17e2:	9b 01       	movw	r18, r22
    17e4:	ac 01       	movw	r20, r24
    17e6:	0a 2e       	mov	r0, r26
    17e8:	06 94       	lsr	r0
    17ea:	57 95       	ror	r21
    17ec:	47 95       	ror	r20
    17ee:	37 95       	ror	r19
    17f0:	27 95       	ror	r18
    17f2:	ba 95       	dec	r27
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <__ultoa_invert+0xa2>
    17f6:	62 0f       	add	r22, r18
    17f8:	73 1f       	adc	r23, r19
    17fa:	84 1f       	adc	r24, r20
    17fc:	95 1f       	adc	r25, r21
    17fe:	a0 1d       	adc	r26, r0
    1800:	08 95       	ret
    1802:	19 f4       	brne	.+6      	; 0x180a <__ultoa_invert+0xc4>
    1804:	0e f0       	brts	.+2      	; 0x1808 <__ultoa_invert+0xc2>
    1806:	46 ca       	rjmp	.-2932   	; 0xc94 <__fp_inf>
    1808:	8f ca       	rjmp	.-2786   	; 0xd28 <__fp_zero>
    180a:	4a ca       	rjmp	.-2924   	; 0xca0 <__fp_nan>

0000180c <exp>:
    180c:	73 da       	rcall	.-2842   	; 0xcf4 <__fp_splitA>
    180e:	c8 f3       	brcs	.-14     	; 0x1802 <__ultoa_invert+0xbc>
    1810:	96 38       	cpi	r25, 0x86	; 134
    1812:	c0 f7       	brcc	.-16     	; 0x1804 <__ultoa_invert+0xbe>
    1814:	07 f8       	bld	r0, 7
    1816:	0f 92       	push	r0
    1818:	e8 94       	clt
    181a:	2b e3       	ldi	r18, 0x3B	; 59
    181c:	3a ea       	ldi	r19, 0xAA	; 170
    181e:	48 eb       	ldi	r20, 0xB8	; 184
    1820:	5f e7       	ldi	r21, 0x7F	; 127
    1822:	97 da       	rcall	.-2770   	; 0xd52 <__mulsf3_pse>
    1824:	0f 92       	push	r0
    1826:	0f 92       	push	r0
    1828:	0f 92       	push	r0
    182a:	4d b7       	in	r20, 0x3d	; 61
    182c:	5e b7       	in	r21, 0x3e	; 62
    182e:	0f 92       	push	r0
    1830:	c0 d0       	rcall	.+384    	; 0x19b2 <modf>
    1832:	e4 e5       	ldi	r30, 0x54	; 84
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	16 d0       	rcall	.+44     	; 0x1864 <__fp_powser>
    1838:	4f 91       	pop	r20
    183a:	5f 91       	pop	r21
    183c:	ef 91       	pop	r30
    183e:	ff 91       	pop	r31
    1840:	e5 95       	asr	r30
    1842:	ee 1f       	adc	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	49 f0       	breq	.+18     	; 0x185a <exp+0x4e>
    1848:	fe 57       	subi	r31, 0x7E	; 126
    184a:	e0 68       	ori	r30, 0x80	; 128
    184c:	44 27       	eor	r20, r20
    184e:	ee 0f       	add	r30, r30
    1850:	44 1f       	adc	r20, r20
    1852:	fa 95       	dec	r31
    1854:	e1 f7       	brne	.-8      	; 0x184e <exp+0x42>
    1856:	41 95       	neg	r20
    1858:	55 0b       	sbc	r21, r21
    185a:	32 d0       	rcall	.+100    	; 0x18c0 <ldexp>
    185c:	0f 90       	pop	r0
    185e:	07 fe       	sbrs	r0, 7
    1860:	26 c0       	rjmp	.+76     	; 0x18ae <inverse>
    1862:	08 95       	ret

00001864 <__fp_powser>:
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	1f 93       	push	r17
    186a:	0f 93       	push	r16
    186c:	ff 92       	push	r15
    186e:	ef 92       	push	r14
    1870:	df 92       	push	r13
    1872:	7b 01       	movw	r14, r22
    1874:	8c 01       	movw	r16, r24
    1876:	68 94       	set
    1878:	05 c0       	rjmp	.+10     	; 0x1884 <__fp_powser+0x20>
    187a:	da 2e       	mov	r13, r26
    187c:	ef 01       	movw	r28, r30
    187e:	67 da       	rcall	.-2866   	; 0xd4e <__mulsf3x>
    1880:	fe 01       	movw	r30, r28
    1882:	e8 94       	clt
    1884:	a5 91       	lpm	r26, Z+
    1886:	25 91       	lpm	r18, Z+
    1888:	35 91       	lpm	r19, Z+
    188a:	45 91       	lpm	r20, Z+
    188c:	55 91       	lpm	r21, Z+
    188e:	ae f3       	brts	.-22     	; 0x187a <__fp_powser+0x16>
    1890:	ef 01       	movw	r28, r30
    1892:	dc d8       	rcall	.-3656   	; 0xa4c <__addsf3x>
    1894:	fe 01       	movw	r30, r28
    1896:	97 01       	movw	r18, r14
    1898:	a8 01       	movw	r20, r16
    189a:	da 94       	dec	r13
    189c:	79 f7       	brne	.-34     	; 0x187c <__fp_powser+0x18>
    189e:	df 90       	pop	r13
    18a0:	ef 90       	pop	r14
    18a2:	ff 90       	pop	r15
    18a4:	0f 91       	pop	r16
    18a6:	1f 91       	pop	r17
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <inverse>:
    18ae:	9b 01       	movw	r18, r22
    18b0:	ac 01       	movw	r20, r24
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	80 e8       	ldi	r24, 0x80	; 128
    18b8:	9f e3       	ldi	r25, 0x3F	; 63
    18ba:	1b c9       	rjmp	.-3530   	; 0xaf2 <__divsf3>
    18bc:	eb c9       	rjmp	.-3114   	; 0xc94 <__fp_inf>
    18be:	ac c0       	rjmp	.+344    	; 0x1a18 <__fp_mpack>

000018c0 <ldexp>:
    18c0:	19 da       	rcall	.-3022   	; 0xcf4 <__fp_splitA>
    18c2:	e8 f3       	brcs	.-6      	; 0x18be <inverse+0x10>
    18c4:	99 23       	and	r25, r25
    18c6:	d9 f3       	breq	.-10     	; 0x18be <inverse+0x10>
    18c8:	94 0f       	add	r25, r20
    18ca:	51 1d       	adc	r21, r1
    18cc:	bb f3       	brvs	.-18     	; 0x18bc <inverse+0xe>
    18ce:	91 50       	subi	r25, 0x01	; 1
    18d0:	50 40       	sbci	r21, 0x00	; 0
    18d2:	94 f0       	brlt	.+36     	; 0x18f8 <ldexp+0x38>
    18d4:	59 f0       	breq	.+22     	; 0x18ec <ldexp+0x2c>
    18d6:	88 23       	and	r24, r24
    18d8:	32 f0       	brmi	.+12     	; 0x18e6 <ldexp+0x26>
    18da:	66 0f       	add	r22, r22
    18dc:	77 1f       	adc	r23, r23
    18de:	88 1f       	adc	r24, r24
    18e0:	91 50       	subi	r25, 0x01	; 1
    18e2:	50 40       	sbci	r21, 0x00	; 0
    18e4:	c1 f7       	brne	.-16     	; 0x18d6 <ldexp+0x16>
    18e6:	9e 3f       	cpi	r25, 0xFE	; 254
    18e8:	51 05       	cpc	r21, r1
    18ea:	44 f7       	brge	.-48     	; 0x18bc <inverse+0xe>
    18ec:	88 0f       	add	r24, r24
    18ee:	91 1d       	adc	r25, r1
    18f0:	96 95       	lsr	r25
    18f2:	87 95       	ror	r24
    18f4:	97 f9       	bld	r25, 7
    18f6:	08 95       	ret
    18f8:	5f 3f       	cpi	r21, 0xFF	; 255
    18fa:	ac f0       	brlt	.+42     	; 0x1926 <ldexp+0x66>
    18fc:	98 3e       	cpi	r25, 0xE8	; 232
    18fe:	9c f0       	brlt	.+38     	; 0x1926 <ldexp+0x66>
    1900:	bb 27       	eor	r27, r27
    1902:	86 95       	lsr	r24
    1904:	77 95       	ror	r23
    1906:	67 95       	ror	r22
    1908:	b7 95       	ror	r27
    190a:	08 f4       	brcc	.+2      	; 0x190e <ldexp+0x4e>
    190c:	b1 60       	ori	r27, 0x01	; 1
    190e:	93 95       	inc	r25
    1910:	c1 f7       	brne	.-16     	; 0x1902 <ldexp+0x42>
    1912:	bb 0f       	add	r27, r27
    1914:	58 f7       	brcc	.-42     	; 0x18ec <ldexp+0x2c>
    1916:	11 f4       	brne	.+4      	; 0x191c <ldexp+0x5c>
    1918:	60 ff       	sbrs	r22, 0
    191a:	e8 cf       	rjmp	.-48     	; 0x18ec <ldexp+0x2c>
    191c:	6f 5f       	subi	r22, 0xFF	; 255
    191e:	7f 4f       	sbci	r23, 0xFF	; 255
    1920:	8f 4f       	sbci	r24, 0xFF	; 255
    1922:	9f 4f       	sbci	r25, 0xFF	; 255
    1924:	e3 cf       	rjmp	.-58     	; 0x18ec <ldexp+0x2c>
    1926:	01 ca       	rjmp	.-3070   	; 0xd2a <__fp_szero>
    1928:	0e f0       	brts	.+2      	; 0x192c <ldexp+0x6c>
    192a:	76 c0       	rjmp	.+236    	; 0x1a18 <__fp_mpack>
    192c:	b9 c9       	rjmp	.-3214   	; 0xca0 <__fp_nan>
    192e:	68 94       	set
    1930:	b1 c9       	rjmp	.-3230   	; 0xc94 <__fp_inf>

00001932 <log>:
    1932:	e0 d9       	rcall	.-3136   	; 0xcf4 <__fp_splitA>
    1934:	c8 f3       	brcs	.-14     	; 0x1928 <ldexp+0x68>
    1936:	99 23       	and	r25, r25
    1938:	d1 f3       	breq	.-12     	; 0x192e <ldexp+0x6e>
    193a:	c6 f3       	brts	.-16     	; 0x192c <ldexp+0x6c>
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	1f 93       	push	r17
    1942:	0f 93       	push	r16
    1944:	ff 92       	push	r15
    1946:	c9 2f       	mov	r28, r25
    1948:	dd 27       	eor	r29, r29
    194a:	88 23       	and	r24, r24
    194c:	2a f0       	brmi	.+10     	; 0x1958 <log+0x26>
    194e:	21 97       	sbiw	r28, 0x01	; 1
    1950:	66 0f       	add	r22, r22
    1952:	77 1f       	adc	r23, r23
    1954:	88 1f       	adc	r24, r24
    1956:	da f7       	brpl	.-10     	; 0x194e <log+0x1c>
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e8       	ldi	r20, 0x80	; 128
    195e:	5f eb       	ldi	r21, 0xBF	; 191
    1960:	9f e3       	ldi	r25, 0x3F	; 63
    1962:	88 39       	cpi	r24, 0x98	; 152
    1964:	20 f0       	brcs	.+8      	; 0x196e <log+0x3c>
    1966:	80 3e       	cpi	r24, 0xE0	; 224
    1968:	30 f0       	brcs	.+12     	; 0x1976 <log+0x44>
    196a:	21 96       	adiw	r28, 0x01	; 1
    196c:	8f 77       	andi	r24, 0x7F	; 127
    196e:	5d d8       	rcall	.-3910   	; 0xa2a <__addsf3>
    1970:	ec e7       	ldi	r30, 0x7C	; 124
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	03 c0       	rjmp	.+6      	; 0x197c <log+0x4a>
    1976:	59 d8       	rcall	.-3918   	; 0xa2a <__addsf3>
    1978:	e9 ea       	ldi	r30, 0xA9	; 169
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	73 df       	rcall	.-282    	; 0x1864 <__fp_powser>
    197e:	8b 01       	movw	r16, r22
    1980:	be 01       	movw	r22, r28
    1982:	ec 01       	movw	r28, r24
    1984:	fb 2e       	mov	r15, r27
    1986:	6f 57       	subi	r22, 0x7F	; 127
    1988:	71 09       	sbc	r23, r1
    198a:	75 95       	asr	r23
    198c:	77 1f       	adc	r23, r23
    198e:	88 0b       	sbc	r24, r24
    1990:	99 0b       	sbc	r25, r25
    1992:	45 d9       	rcall	.-3446   	; 0xc1e <__floatsisf>
    1994:	28 e1       	ldi	r18, 0x18	; 24
    1996:	32 e7       	ldi	r19, 0x72	; 114
    1998:	41 e3       	ldi	r20, 0x31	; 49
    199a:	5f e3       	ldi	r21, 0x3F	; 63
    199c:	d8 d9       	rcall	.-3152   	; 0xd4e <__mulsf3x>
    199e:	af 2d       	mov	r26, r15
    19a0:	98 01       	movw	r18, r16
    19a2:	ae 01       	movw	r20, r28
    19a4:	ff 90       	pop	r15
    19a6:	0f 91       	pop	r16
    19a8:	1f 91       	pop	r17
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	4e d8       	rcall	.-3940   	; 0xa4c <__addsf3x>
    19b0:	88 c9       	rjmp	.-3312   	; 0xcc2 <__fp_round>

000019b2 <modf>:
    19b2:	fa 01       	movw	r30, r20
    19b4:	dc 01       	movw	r26, r24
    19b6:	aa 0f       	add	r26, r26
    19b8:	bb 1f       	adc	r27, r27
    19ba:	9b 01       	movw	r18, r22
    19bc:	ac 01       	movw	r20, r24
    19be:	bf 57       	subi	r27, 0x7F	; 127
    19c0:	28 f4       	brcc	.+10     	; 0x19cc <modf+0x1a>
    19c2:	22 27       	eor	r18, r18
    19c4:	33 27       	eor	r19, r19
    19c6:	44 27       	eor	r20, r20
    19c8:	50 78       	andi	r21, 0x80	; 128
    19ca:	1f c0       	rjmp	.+62     	; 0x1a0a <modf+0x58>
    19cc:	b7 51       	subi	r27, 0x17	; 23
    19ce:	88 f4       	brcc	.+34     	; 0x19f2 <modf+0x40>
    19d0:	ab 2f       	mov	r26, r27
    19d2:	00 24       	eor	r0, r0
    19d4:	46 95       	lsr	r20
    19d6:	37 95       	ror	r19
    19d8:	27 95       	ror	r18
    19da:	01 1c       	adc	r0, r1
    19dc:	a3 95       	inc	r26
    19de:	d2 f3       	brmi	.-12     	; 0x19d4 <modf+0x22>
    19e0:	00 20       	and	r0, r0
    19e2:	69 f0       	breq	.+26     	; 0x19fe <modf+0x4c>
    19e4:	22 0f       	add	r18, r18
    19e6:	33 1f       	adc	r19, r19
    19e8:	44 1f       	adc	r20, r20
    19ea:	b3 95       	inc	r27
    19ec:	da f3       	brmi	.-10     	; 0x19e4 <modf+0x32>
    19ee:	0d d0       	rcall	.+26     	; 0x1a0a <modf+0x58>
    19f0:	1b c8       	rjmp	.-4042   	; 0xa28 <__subsf3>
    19f2:	61 30       	cpi	r22, 0x01	; 1
    19f4:	71 05       	cpc	r23, r1
    19f6:	a0 e8       	ldi	r26, 0x80	; 128
    19f8:	8a 07       	cpc	r24, r26
    19fa:	b9 46       	sbci	r27, 0x69	; 105
    19fc:	30 f4       	brcc	.+12     	; 0x1a0a <modf+0x58>
    19fe:	9b 01       	movw	r18, r22
    1a00:	ac 01       	movw	r20, r24
    1a02:	66 27       	eor	r22, r22
    1a04:	77 27       	eor	r23, r23
    1a06:	88 27       	eor	r24, r24
    1a08:	90 78       	andi	r25, 0x80	; 128
    1a0a:	30 96       	adiw	r30, 0x00	; 0
    1a0c:	21 f0       	breq	.+8      	; 0x1a16 <modf+0x64>
    1a0e:	20 83       	st	Z, r18
    1a10:	31 83       	std	Z+1, r19	; 0x01
    1a12:	42 83       	std	Z+2, r20	; 0x02
    1a14:	53 83       	std	Z+3, r21	; 0x03
    1a16:	08 95       	ret

00001a18 <__fp_mpack>:
    1a18:	9f 3f       	cpi	r25, 0xFF	; 255
    1a1a:	31 f0       	breq	.+12     	; 0x1a28 <__fp_mpack_finite+0xc>

00001a1c <__fp_mpack_finite>:
    1a1c:	91 50       	subi	r25, 0x01	; 1
    1a1e:	20 f4       	brcc	.+8      	; 0x1a28 <__fp_mpack_finite+0xc>
    1a20:	87 95       	ror	r24
    1a22:	77 95       	ror	r23
    1a24:	67 95       	ror	r22
    1a26:	b7 95       	ror	r27
    1a28:	88 0f       	add	r24, r24
    1a2a:	91 1d       	adc	r25, r1
    1a2c:	96 95       	lsr	r25
    1a2e:	87 95       	ror	r24
    1a30:	97 f9       	bld	r25, 7
    1a32:	08 95       	ret

00001a34 <__prologue_saves__>:
    1a34:	2f 92       	push	r2
    1a36:	3f 92       	push	r3
    1a38:	4f 92       	push	r4
    1a3a:	5f 92       	push	r5
    1a3c:	6f 92       	push	r6
    1a3e:	7f 92       	push	r7
    1a40:	8f 92       	push	r8
    1a42:	9f 92       	push	r9
    1a44:	af 92       	push	r10
    1a46:	bf 92       	push	r11
    1a48:	cf 92       	push	r12
    1a4a:	df 92       	push	r13
    1a4c:	ef 92       	push	r14
    1a4e:	ff 92       	push	r15
    1a50:	0f 93       	push	r16
    1a52:	1f 93       	push	r17
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	ca 1b       	sub	r28, r26
    1a5e:	db 0b       	sbc	r29, r27
    1a60:	0f b6       	in	r0, 0x3f	; 63
    1a62:	f8 94       	cli
    1a64:	de bf       	out	0x3e, r29	; 62
    1a66:	0f be       	out	0x3f, r0	; 63
    1a68:	cd bf       	out	0x3d, r28	; 61
    1a6a:	09 94       	ijmp

00001a6c <__epilogue_restores__>:
    1a6c:	2a 88       	ldd	r2, Y+18	; 0x12
    1a6e:	39 88       	ldd	r3, Y+17	; 0x11
    1a70:	48 88       	ldd	r4, Y+16	; 0x10
    1a72:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a74:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a76:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a78:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a7e:	b9 84       	ldd	r11, Y+9	; 0x09
    1a80:	c8 84       	ldd	r12, Y+8	; 0x08
    1a82:	df 80       	ldd	r13, Y+7	; 0x07
    1a84:	ee 80       	ldd	r14, Y+6	; 0x06
    1a86:	fd 80       	ldd	r15, Y+5	; 0x05
    1a88:	0c 81       	ldd	r16, Y+4	; 0x04
    1a8a:	1b 81       	ldd	r17, Y+3	; 0x03
    1a8c:	aa 81       	ldd	r26, Y+2	; 0x02
    1a8e:	b9 81       	ldd	r27, Y+1	; 0x01
    1a90:	ce 0f       	add	r28, r30
    1a92:	d1 1d       	adc	r29, r1
    1a94:	0f b6       	in	r0, 0x3f	; 63
    1a96:	f8 94       	cli
    1a98:	de bf       	out	0x3e, r29	; 62
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	cd bf       	out	0x3d, r28	; 61
    1a9e:	ed 01       	movw	r28, r26
    1aa0:	08 95       	ret

00001aa2 <_exit>:
    1aa2:	f8 94       	cli

00001aa4 <__stop_program>:
    1aa4:	ff cf       	rjmp	.-2      	; 0x1aa4 <__stop_program>
