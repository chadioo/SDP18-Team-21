
ARK_bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00000158  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000ac  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001fd  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000185  00000000  00000000  000004e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000219  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000880  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000111  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000059  00000000  00000000  00000a31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 41 00 	jmp	0x82	; 0x82 <__vector_9>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 3a       	cpi	r26, 0xAC	; 172
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  7a:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__vector_9>:
#include <util/atomic.h>
#include <util/delay.h>

// Method triggered by overflow
ISR(TIMER1_OVF_vect)
{
  82:	1f 92       	push	r1
  84:	0f 92       	push	r0
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	0f 92       	push	r0
  8a:	11 24       	eor	r1, r1
  8c:	8f 93       	push	r24
    PORTB ^= 0xFF;			//toggle PORTB values
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	80 95       	com	r24
  92:	88 bb       	out	0x18, r24	; 24
}
  94:	8f 91       	pop	r24
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <USART_Receive>:

// Data from Bluetooth TX given to USART RX
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) ) {  }
  a0:	5f 9b       	sbis	0x0b, 7	; 11
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
  a4:	8c b1       	in	r24, 0x0c	; 12
}
  a6:	08 95       	ret

000000a8 <USART_Transmit>:

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
  a8:	5d 9b       	sbis	0x0b, 5	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <USART_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
  ac:	8c b9       	out	0x0c, r24	; 12
}
  ae:	08 95       	ret

000000b0 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
  b0:	fc 01       	movw	r30, r24
  b2:	04 c0       	rjmp	.+8      	; 0xbc <USART_SendString+0xc>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
  b4:	5d 9b       	sbis	0x0b, 5	; 11
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <USART_SendString+0x4>

	/* Put data into buffer, sends the data */
	UDR = data;
  b8:	8c b9       	out	0x0c, r24	; 12
  ba:	31 96       	adiw	r30, 0x01	; 1
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
  bc:	80 81       	ld	r24, Z
  be:	88 23       	and	r24, r24
  c0:	c9 f7       	brne	.-14     	; 0xb4 <USART_SendString+0x4>
	{
		USART_Transmit( str[i] );						/* Send each char of string till the NULL */
		i++;
	}
}
  c2:	08 95       	ret

000000c4 <USART_Flush>:

// Flush USART
void USART_Flush( void )
{
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <USART_Flush+0x4>
	unsigned char dummy;
	while ( UCSRA & (1<<RXC) ) dummy = UDR;
  c6:	8c b1       	in	r24, 0x0c	; 12
  c8:	5f 99       	sbic	0x0b, 7	; 11
  ca:	fd cf       	rjmp	.-6      	; 0xc6 <USART_Flush+0x2>
}
  cc:	08 95       	ret

000000ce <USART_Init>:

// Initialize USART
void USART_Init( unsigned int baud )
{
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
  ce:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
  d0:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X);
  d2:	59 9a       	sbi	0x0b, 1	; 11

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
  d4:	88 e1       	ldi	r24, 0x18	; 24
  d6:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  d8:	8e e8       	ldi	r24, 0x8E	; 142
  da:	80 bd       	out	0x20, r24	; 32
}
  dc:	08 95       	ret

000000de <Bluetooth_Init>:

// 
void Bluetooth_Init(){
	//USART_Init(9600);
	USART_Init(12); // UBRR value for 9600
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 67 00 	call	0xce	; 0xce <USART_Init>
  e6:	e0 e6       	ldi	r30, 0x60	; 96
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	04 c0       	rjmp	.+8      	; 0xf4 <Bluetooth_Init+0x16>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <Bluetooth_Init+0xe>

	/* Put data into buffer, sends the data */
	UDR = data;
  f0:	8c b9       	out	0x0c, r24	; 12
	//USART_Init(9600);
	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
		USART_Transmit( *cmd );
		++cmd;
  f2:	31 96       	adiw	r30, 0x01	; 1
// 
void Bluetooth_Init(){
	//USART_Init(9600);
	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
  f4:	80 81       	ld	r24, Z
  f6:	88 23       	and	r24, r24
  f8:	c9 f7       	brne	.-14     	; 0xec <Bluetooth_Init+0xe>
		USART_Transmit( *cmd );
		++cmd;
	}
}
  fa:	08 95       	ret

000000fc <USART_Start_Timer>:

void USART_Start_Timer()
{
	TCCR1B |= (1 << CS11);	// Timer1 prescaler = 8
  fc:	8e b5       	in	r24, 0x2e	; 46
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;				// Clear the timer counter
 102:	1d bc       	out	0x2d, r1	; 45
 104:	1c bc       	out	0x2c, r1	; 44
	TIMSK = (1 << TOIE1);	// Enable timer1 overflow interrupt(TOIE1)
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	89 bf       	out	0x39, r24	; 57
	sei();					// Enable global interrupts
 10a:	78 94       	sei
}
 10c:	08 95       	ret

0000010e <main>:

// Main Method
int main(void)
{
 10e:	1f 93       	push	r17

	Bluetooth_Init();
 110:	0e 94 6f 00 	call	0xde	; 0xde <Bluetooth_Init>

	//USART_Init(9600);		// Initialize baud rate
    
	// LED Light is Port B
	DDRB = 0xFF;			// Set PORTB as output
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;				// Clear PORTB bits (turn the LEDs off)
 118:	18 ba       	out	0x18, r1	; 24
    
	// Bluetooth is Port D
	DDRD = 0x01; 			// PD0 is RX so processor reads it, PD1 is TX so processor writes it
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	81 bb       	out	0x11, r24	; 17
	
		char DATA_IN = USART_Receive();
		
		if(DATA_IN == '1') {
			//PORTB |= (1<<PB2);
			PORTB |= 0xFF;
 11e:	1f ef       	ldi	r17, 0xFF	; 255

// Data from Bluetooth TX given to USART RX
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) ) {  }
 120:	5f 9b       	sbis	0x0b, 7	; 11
 122:	fe cf       	rjmp	.-4      	; 0x120 <main+0x12>
	/* Get and return received data from buffer */
	return UDR;
 124:	8c b1       	in	r24, 0x0c	; 12

	while(1){
	
		char DATA_IN = USART_Receive();
		
		if(DATA_IN == '1') {
 126:	81 33       	cpi	r24, 0x31	; 49
 128:	29 f4       	brne	.+10     	; 0x134 <main+0x26>
			//PORTB |= (1<<PB2);
			PORTB |= 0xFF;
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	18 bb       	out	0x18, r17	; 24
			USART_SendString( "LED is on.\n" );
 12e:	83 e7       	ldi	r24, 0x73	; 115
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0d c0       	rjmp	.+26     	; 0x14e <main+0x40>
		}

		else if(DATA_IN == '0') {
 134:	80 33       	cpi	r24, 0x30	; 48
 136:	29 f4       	brne	.+10     	; 0x142 <main+0x34>
			//PORTB &= ~(1<<PB2);
			PORTB &= ~0xFF;
 138:	88 b3       	in	r24, 0x18	; 24
 13a:	18 ba       	out	0x18, r1	; 24
			USART_SendString( "LED is off.\n" );
 13c:	8f e7       	ldi	r24, 0x7F	; 127
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	06 c0       	rjmp	.+12     	; 0x14e <main+0x40>
		}
		
		else if(DATA_IN == '\n' || DATA_IN == '\r');
 142:	8a 30       	cpi	r24, 0x0A	; 10
 144:	69 f3       	breq	.-38     	; 0x120 <main+0x12>
 146:	8d 30       	cpi	r24, 0x0D	; 13
 148:	59 f3       	breq	.-42     	; 0x120 <main+0x12>
		else USART_SendString( "Please select a proper option.\n" );
 14a:	8c e8       	ldi	r24, 0x8C	; 140
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 58 00 	call	0xb0	; 0xb0 <USART_SendString>
 152:	e6 cf       	rjmp	.-52     	; 0x120 <main+0x12>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
