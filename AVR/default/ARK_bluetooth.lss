
ARK_bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000086  00800060  000001e0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000c5  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000342  00000000  00000000  000003bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000021a  00000000  00000000  00000701  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000374  00000000  00000000  0000091b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000c0  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000016a  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000c4  00000000  00000000  00000eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000f7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_9>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 3e       	cpi	r26, 0xE6	; 230
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 98 00 	call	0x130	; 0x130 <main>
  7a:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <initADC>:
#include <avr/pgmspace.h>
#include <util/atomic.h>
#include <util/delay.h>

void initADC(){
	ADMUX = (1<<REFS0);	// set mux
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS1)|(1<<ADPS0);	// divided by prescale of 8
  86:	83 e8       	ldi	r24, 0x83	; 131
  88:	86 b9       	out	0x06, r24	; 6
}
  8a:	08 95       	ret

0000008c <read_adc>:
	}
	else{
		return 0;
	}*/
	axis=axis&0b00000111;
	ADMUX|=axis;
  8c:	27 b1       	in	r18, 0x07	; 7
  8e:	87 70       	andi	r24, 0x07	; 7
  90:	90 70       	andi	r25, 0x00	; 0
  92:	28 2b       	or	r18, r24
  94:	27 b9       	out	0x07, r18	; 7
	
	ADCSRA|= (1<<ADSC);	// clear ADSC by writing one to it
  96:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADSC)))	// wait for conversion to complete
  98:	36 9b       	sbis	0x06, 6	; 6
  9a:	fe cf       	rjmp	.-4      	; 0x98 <read_adc+0xc>
		;
	return(ADC);		// retuens 10 bit unsigned number
  9c:	24 b1       	in	r18, 0x04	; 4
  9e:	35 b1       	in	r19, 0x05	; 5
}
  a0:	c9 01       	movw	r24, r18
  a2:	08 95       	ret

000000a4 <__vector_9>:



// Method triggered by overflow
ISR(TIMER1_OVF_vect)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
    PORTB ^= 0xFF;			//toggle PORTB values
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	80 95       	com	r24
  b4:	88 bb       	out	0x18, r24	; 24
}
  b6:	8f 91       	pop	r24
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <USART_Receive>:

// Data from Bluetooth TX given to USART RX
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) ) {  }
  c2:	5f 9b       	sbis	0x0b, 7	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
  c6:	8c b1       	in	r24, 0x0c	; 12
}
  c8:	08 95       	ret

000000ca <USART_Transmit>:

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
  ca:	5d 9b       	sbis	0x0b, 5	; 11
  cc:	fe cf       	rjmp	.-4      	; 0xca <USART_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
  ce:	8c b9       	out	0x0c, r24	; 12
}
  d0:	08 95       	ret

000000d2 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
  d2:	fc 01       	movw	r30, r24
  d4:	04 c0       	rjmp	.+8      	; 0xde <USART_SendString+0xc>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
  d6:	5d 9b       	sbis	0x0b, 5	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <USART_SendString+0x4>

	/* Put data into buffer, sends the data */
	UDR = data;
  da:	8c b9       	out	0x0c, r24	; 12
  dc:	31 96       	adiw	r30, 0x01	; 1
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
  de:	80 81       	ld	r24, Z
  e0:	88 23       	and	r24, r24
  e2:	c9 f7       	brne	.-14     	; 0xd6 <USART_SendString+0x4>
	{
		USART_Transmit( str[i] );						/* Send each char of string till the NULL */
		i++;
	}
}
  e4:	08 95       	ret

000000e6 <USART_Flush>:

// Flush USART
void USART_Flush( void )
{
  e6:	01 c0       	rjmp	.+2      	; 0xea <USART_Flush+0x4>
	unsigned char dummy;
	while ( UCSRA & (1<<RXC) ) dummy = UDR;
  e8:	8c b1       	in	r24, 0x0c	; 12
  ea:	5f 99       	sbic	0x0b, 7	; 11
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <USART_Flush+0x2>
}
  ee:	08 95       	ret

000000f0 <USART_Init>:

// Initialize USART
void USART_Init( unsigned int baud )
{
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
  f0:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
  f2:	89 b9       	out	0x09, r24	; 9
	UCSRA |= (1<<U2X);
  f4:	59 9a       	sbi	0x0b, 1	; 11

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  fa:	8e e8       	ldi	r24, 0x8E	; 142
  fc:	80 bd       	out	0x20, r24	; 32
}
  fe:	08 95       	ret

00000100 <Bluetooth_Init>:

// 
void Bluetooth_Init(){
	//USART_Init(9600);
	USART_Init(12); // UBRR value for 9600
 100:	8c e0       	ldi	r24, 0x0C	; 12
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 78 00 	call	0xf0	; 0xf0 <USART_Init>
 108:	e0 e6       	ldi	r30, 0x60	; 96
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	04 c0       	rjmp	.+8      	; 0x116 <Bluetooth_Init+0x16>

// Data from USART TX given to Bluetooth RX
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) ) {  }
 10e:	5d 9b       	sbis	0x0b, 5	; 11
 110:	fe cf       	rjmp	.-4      	; 0x10e <Bluetooth_Init+0xe>

	/* Put data into buffer, sends the data */
	UDR = data;
 112:	8c b9       	out	0x0c, r24	; 12
	//USART_Init(9600);
	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
		USART_Transmit( *cmd );
		++cmd;
 114:	31 96       	adiw	r30, 0x01	; 1
// 
void Bluetooth_Init(){
	//USART_Init(9600);
	USART_Init(12); // UBRR value for 9600
	char *cmd = "AT+UART=9600,2,0\r\n";
	while (*cmd != '\0'){
 116:	80 81       	ld	r24, Z
 118:	88 23       	and	r24, r24
 11a:	c9 f7       	brne	.-14     	; 0x10e <Bluetooth_Init+0xe>
		USART_Transmit( *cmd );
		++cmd;
	}
}
 11c:	08 95       	ret

0000011e <USART_Start_Timer>:

void USART_Start_Timer()
{
	TCCR1B |= (1 << CS11);	// Timer1 prescaler = 8
 11e:	8e b5       	in	r24, 0x2e	; 46
 120:	82 60       	ori	r24, 0x02	; 2
 122:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;				// Clear the timer counter
 124:	1d bc       	out	0x2d, r1	; 45
 126:	1c bc       	out	0x2c, r1	; 44
	TIMSK = (1 << TOIE1);	// Enable timer1 overflow interrupt(TOIE1)
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	89 bf       	out	0x39, r24	; 57
	sei();					// Enable global interrupts
 12c:	78 94       	sei
}
 12e:	08 95       	ret

00000130 <main>:

// Main Method
int main(void){
 130:	cf 93       	push	r28
 132:	df 93       	push	r29

	Bluetooth_Init();
 134:	0e 94 80 00 	call	0x100	; 0x100 <Bluetooth_Init>
#include <avr/pgmspace.h>
#include <util/atomic.h>
#include <util/delay.h>

void initADC(){
	ADMUX = (1<<REFS0);	// set mux
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS1)|(1<<ADPS0);	// divided by prescale of 8
 13c:	83 e8       	ldi	r24, 0x83	; 131
 13e:	86 b9       	out	0x06, r24	; 6

	Bluetooth_Init();
	initADC();
    
	// LED Light is Port B
	DDRB = 0xFF;			// Set PORTB as output
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;				// Clear PORTB bits (turn the LEDs off)
 144:	18 ba       	out	0x18, r1	; 24
    
	// Bluetooth is Port D
	DDRD = 0x01; 			// PD0 is RX so processor reads it, PD1 is TX so processor writes it
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	81 bb       	out	0x11, r24	; 17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 14a:	c8 ea       	ldi	r28, 0xA8	; 168
 14c:	d1 e6       	ldi	r29, 0x61	; 97

// Data from Bluetooth TX given to USART RX
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) ) {  }
 14e:	5f 9b       	sbis	0x0b, 7	; 11
 150:	fe cf       	rjmp	.-4      	; 0x14e <main+0x1e>
	/* Get and return received data from buffer */
	return UDR;
 152:	8c b1       	in	r24, 0x0c	; 12
	while(1){
	

		char DATA_IN = USART_Receive();
		
		if(DATA_IN == '0') {
 154:	80 33       	cpi	r24, 0x30	; 48
 156:	79 f4       	brne	.+30     	; 0x176 <main+0x46>
			PORTB = read_adc(0);
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 46 00 	call	0x8c	; 0x8c <read_adc>
 160:	88 bb       	out	0x18, r24	; 24
 162:	ce 01       	movw	r24, r28
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x34>
			_delay_ms(100);
			USART_SendString( "Read Z Axis Acceleration.\n" );
 168:	83 e7       	ldi	r24, 0x73	; 115
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 69 00 	call	0xd2	; 0xd2 <USART_SendString>
			USART_SendString( read_adc(0) );
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	21 c0       	rjmp	.+66     	; 0x1b8 <main+0x88>
			USART_SendString( "\n" );
		}

		else if(DATA_IN == '1') {
 176:	81 33       	cpi	r24, 0x31	; 49
 178:	79 f4       	brne	.+30     	; 0x198 <main+0x68>
			PORTB = read_adc(1);
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 46 00 	call	0x8c	; 0x8c <read_adc>
 182:	88 bb       	out	0x18, r24	; 24
 184:	ce 01       	movw	r24, r28
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <main+0x56>
			_delay_ms(100);
			USART_SendString( "Read Y Axis Acceleration.\n" );
 18a:	80 e9       	ldi	r24, 0x90	; 144
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 69 00 	call	0xd2	; 0xd2 <USART_SendString>
			USART_SendString( read_adc(1) );
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	10 c0       	rjmp	.+32     	; 0x1b8 <main+0x88>
			USART_SendString( "\n" );
		}
		else if(DATA_IN == '2') {
 198:	82 33       	cpi	r24, 0x32	; 50
 19a:	a9 f4       	brne	.+42     	; 0x1c6 <main+0x96>
			PORTB = read_adc(2);
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 46 00 	call	0x8c	; 0x8c <read_adc>
 1a4:	88 bb       	out	0x18, r24	; 24
 1a6:	ce 01       	movw	r24, r28
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x78>
			_delay_ms(100);
			USART_SendString( "Read X Axis Acceleration.\n" );
 1ac:	8b ea       	ldi	r24, 0xAB	; 171
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 69 00 	call	0xd2	; 0xd2 <USART_SendString>
			USART_SendString( read_adc(2) );
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 46 00 	call	0x8c	; 0x8c <read_adc>
 1bc:	0e 94 69 00 	call	0xd2	; 0xd2 <USART_SendString>
			USART_SendString( "\n" );
 1c0:	8e e8       	ldi	r24, 0x8E	; 142
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 c0       	rjmp	.+16     	; 0x1d6 <main+0xa6>

		}
		else if(DATA_IN == '\n' || DATA_IN == '\r');
 1c6:	8a 30       	cpi	r24, 0x0A	; 10
 1c8:	09 f4       	brne	.+2      	; 0x1cc <main+0x9c>
 1ca:	c1 cf       	rjmp	.-126    	; 0x14e <main+0x1e>
 1cc:	8d 30       	cpi	r24, 0x0D	; 13
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <main+0xa2>
 1d0:	be cf       	rjmp	.-132    	; 0x14e <main+0x1e>
		else USART_SendString( "Please select a proper option.\n" );
 1d2:	86 ec       	ldi	r24, 0xC6	; 198
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 69 00 	call	0xd2	; 0xd2 <USART_SendString>
 1da:	b9 cf       	rjmp	.-142    	; 0x14e <main+0x1e>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
